/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:30:13 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[6];
      Base32 base32_1 = new Base32(9, byteArray0, false, (byte) (-1));
      byte[] byteArray1 = base32_0.encode(byteArray0);
      byte[] byteArray2 = base32_1.encode(byteArray1);
      String string0 = base32_1.encodeToString(byteArray2);
      assertEquals("JFDECVKD\u0000\u0000\u0000\u0000\u0000\u0000KFFUEAAA\u0000\u0000\u0000\u0000\u0000\u0000AAAAAACJ\u0000\u0000\u0000\u0000\u0000\u0000IZAVKQ2R\u0000\u0000\u0000\u0000\u0000\u0000JNBAAAAA\u0000\u0000\u0000\u0000\u0000\u0000AAAAASCV\u0000\u0000\u0000\u0000\u0000\u0000GZKDEUCK\u0000\u0000\u0000\u0000\u0000\u0000GUAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000AAAEQVP7\u0000\u0000\u0000\u0000\u0000\u000077777777\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32((-427));
      byte[] byteArray0 = new byte[4];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte) (-43);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      byte[] byteArray2 = base32_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-43), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(10, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      byte[] byteArray2 = base32_0.encode(byteArray1);
      byte[] byteArray3 = base32_0.decode(byteArray2);
      assertEquals(16, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base32 base32_0 = new Base32(9, byteArray0, false, (byte) (-1));
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[3];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 1797, 0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base32 base32_0 = new Base32((-190), byteArray0);
      boolean boolean0 = base32_0.isInAlphabet((byte)76);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(20, baseNCodec_Context0);
      base32_0.encode(byteArray0);
      // Undeclared exception!
      base32_0.encode(byteArray0, 1994, 3238, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32(1507);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 1507, (int) (byte)67, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[8];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte) (-97), 305, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -97
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)91);
      // Undeclared exception!
      try { 
        base32_0.decode((byte[]) null, (int) (byte)91, (int) (byte)91, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = new Base32(61);
      byte[] byteArray0 = new byte[5];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)103, (int) (byte)127, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 103
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(false, (byte)73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(3631, baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray0);
      Base32 base32_1 = new Base32(2, byteArray0, false, (byte)64);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(8192, baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray0);
      Base32 base32_1 = new Base32(9, byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(16, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [V\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(19, baseNCodec_Context0);
      Base32 base32_1 = new Base32(19, byteArray0, true);
      Base32 base32_2 = new Base32(27, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      boolean boolean0 = base32_0.isInAlphabet((byte)122);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[6];
      Base32 base32_1 = new Base32(9, byteArray0, false, (byte) (-1));
      byte[] byteArray1 = base32_1.encode(byteArray0);
      String string0 = base32_0.encodeToString(byteArray1);
      assertEquals("IFAUCQKBIFAUCAAAAAAAAACBIH777777777QAAAAAAAAA===", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base32 base32_0 = new Base32(499, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 72, (int) (byte) (-70), baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32((-1082));
      byte[] byteArray0 = new byte[4];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (int) (byte) (-121);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 47, (int) (byte) (-121), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -121
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)109);
      byte[] byteArray0 = new byte[8];
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("AAAAAAAAAAAAAmmm", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte)9, baseNCodec_Context0);
      base32_0.encode(byteArray0);
      // Undeclared exception!
      base32_0.decode(byteArray0, 28, 6103, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base32 base32_0 = new Base32((-190), byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)4, (-1106), baseNCodec_Context0);
      base32_0.encode(byteArray0, 0, (int) (byte)0, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)109);
      byte[] byteArray0 = new byte[8];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 1626;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 163, (-1123), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 1626
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32((-1082));
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray1, (int) (byte)0, 8, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32((-1082));
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      byteArray1[3] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray1, (int) (byte)0, 8, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)0, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      Object object0 = base32_0.decode((Object) "org.apache.commons.codec.binary.BaseNCodec$Context");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      Object object0 = base32_0.decode((Object) "Parameter supplied to Base-N encode is not a byte[]");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(3899, byteArray0, true, (byte)35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [#]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(57, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 57 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = new Base32();
      Object object0 = base32_0.decode((Object) "?b&Vvs:H;RBW");
      Object object1 = base32_0.decode(object0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base32 base32_0 = new Base32(61);
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      assertEquals(10, byteArray1.length);
  }
}
