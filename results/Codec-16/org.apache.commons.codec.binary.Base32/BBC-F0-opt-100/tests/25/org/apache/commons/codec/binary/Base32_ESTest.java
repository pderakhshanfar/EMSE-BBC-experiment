/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 02:28:30 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)91;
      Base32 base32_0 = new Base32(91, byteArray0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(true, (byte)97);
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("00aaaaaa", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte) (-22);
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AAAAB2QAAAAAAAAAAA======", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32((-873));
      byte[] byteArray0 = new byte[2];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-2957);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-871), (-881), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -2957
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32(2519);
      byte[] byteArray0 = new byte[2];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = base32_0.decode("AAAAAAAAAAAAAAAA");
      assertArrayEquals(new byte[] {(byte)82, (byte) (-108), (byte) (-91), (byte)41, (byte)74, (byte)82, (byte) (-108), (byte) (-91), (byte)41, (byte)74}, byteArray0);
      assertEquals(10, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)69;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-3818);
      base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)6, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)69, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-119));
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32(69);
      byte[] byteArray0 = new byte[2];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(76, (byte[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 76 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-386), 10, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte)8, baseNCodec_Context0);
      base32_0.encodeToString(byteArray0);
      // Undeclared exception!
      base32_0.decode(byteArray0, 13, 8192, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)12);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)1, (int) (byte)1, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[11];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte) (-61), (int) (byte)79, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -61
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(false, (byte)79);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)98, byteArray0, false, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte)8, baseNCodec_Context0);
      Base32 base32_1 = new Base32(16, byteArray0);
      Base32 base32_2 = new Base32(728, byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)90;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(61, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u0000\u0000\u0000Z\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base32 base32_0 = new Base32(2137, byteArray0);
      boolean boolean0 = base32_0.isInAlphabet((byte)100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32();
      boolean boolean0 = base32_0.isInAlphabet((byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32();
      boolean boolean0 = base32_0.isInAlphabet((byte) (-22));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)114);
      boolean boolean0 = base32_0.isInAlphabet((byte)84);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base32 base32_0 = new Base32(16, byteArray0);
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AAAAAAAAAA======\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_0 = new Base32(11, byteArray0, false, (byte)34);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)0, 3423, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32((-873));
      Object object0 = base32_0.decode((Object) "US-ASCII");
      Base32 base32_1 = new Base32(76);
      Object object1 = base32_1.encode(object0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base32 base32_0 = new Base32(2137, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 85, (-1), baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[1];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-2957), (-2957), baseNCodec_Context0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[4];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 82, (-358), baseNCodec_Context0);
      base32_0.encode(byteArray0, 415, (int) (byte) (-85), baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[1];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 67;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 32, (-457), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 67
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = new Base32((-873));
      Object object0 = base32_0.decode((Object) "hBUz(b'?V?IYD^}");
      Object object1 = base32_0.encode(object0);
      Object object2 = base32_0.decode(object1);
      assertNotSame(object2, object1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base32 base32_0 = new Base32(2137, byteArray0);
      Object object0 = base32_0.decode((Object) "org.apache.commons.codec.binary.BaseNCodec$Context");
      assertNotSame(byteArray0, object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base32 base32_0 = new Base32(32, byteArray0, false);
      byte[] byteArray1 = base32_0.decode("]/u'vX{TK[c");
      assertArrayEquals(new byte[] {(byte) (-68)}, byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      Object object0 = base32_0.decode((Object) "US-ASCII");
      Object object1 = base32_0.decode(object0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)83);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(64, (byte[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 64 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = base32_0.decode("]/u'vX{TK[c");
      assertArrayEquals(new byte[] {(byte) (-19)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte) (-84));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(1983, baseNCodec_Context0);
      base32_0.encode(byteArray0);
      // Undeclared exception!
      base32_0.encode(byteArray0, 1983, 3283, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }
}
