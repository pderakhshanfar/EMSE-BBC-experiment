/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 18:48:34 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      Base32 base32_0 = new Base32(1979, byteArray0, false, (byte)108);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((byte)0, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)108);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.ibitWorkArea = (int) (byte)2;
      base32_0.encode(byteArray0, (int) (byte)108, (int) (byte)0, baseNCodec_Context1);
      base32_0.isInAlphabet((byte)0);
      base32_0.isInAlphabet((byte)22);
      base32_0.isInAlphabet((byte)51);
      int int0 = (-619);
      base32_0.decode(byteArray1);
      baseNCodec_Context0.currentLinePos = 1810;
      // Undeclared exception!
      base32_0.decode(byteArray1, (int) (byte)0, 4848, baseNCodec_Context1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_0.ensureBufferSize(1, baseNCodec_Context0);
      Base32 base32_1 = new Base32(37, byteArray2, true);
      base32_1.decode("eA>770Ql:!XcD$@X`W");
      Base32 base32_2 = new Base32(930, byteArray2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-89);
      // Undeclared exception!
      try { 
        base32_0.encode((byte[]) null, 2700, (-89), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -89
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32();
      base32_0.decode((Object) "eA>770Ql:!XcD$@X`W");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(1, baseNCodec_Context0);
      Base32 base32_1 = new Base32((int) (byte)86);
      base32_1.decode("w`j&W7!9MxPWH$?EUi");
      base32_0.isInAlphabet((byte) (-92));
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = baseNCodec_Context0.buffer;
      base32_1.isInAlphabet((byte)48);
      base32_1.isInAlphabet((byte) (-11));
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      base32_1.encode(byteArray1, 8, 3096, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      base32_0.decode((Object) "eA>770Ql:!XcD$@X`W");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(1, baseNCodec_Context0);
      Base32 base32_1 = new Base32(101, byteArray0);
      base32_1.decode("eA>770Ql:!XcD$@X`W");
      base32_1.encode(byteArray0, 64, (int) (byte) (-11), baseNCodec_Context0);
      base32_1.isInAlphabet((byte)86);
      base32_0.encodeAsString(byteArray0);
      Base32 base32_2 = new Base32(1012, byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[11];
      base32_0.decode((Object) "eA>770Ql:!XcD$@X`W");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte)86;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, (byte)86, 10, baseNCodec_Context0);
      byteArray0[3] = (byte) (-11);
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte)11;
      base32_0.decode(byteArray1);
      base32_0.decode("eA>770Ql:!XcD$@X`W");
      base32_0.encodeAsString(byteArray0);
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32((byte)10, byteArray1, true, (byte)80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [P\u0017V\u0000
         // \u000B]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[15];
      base32_0.encodeAsString(byteArray0);
      Base32 base32_1 = new Base32(true, (byte)64);
      base32_1.decode("AAAAAAAAAAAAAAAAAAAAAAAA");
      Base32 base32_2 = new Base32(2313, byteArray0);
      boolean boolean0 = base32_2.isInAlphabet((byte)115);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      Base32 base32_1 = new Base32((-33), byteArray0, false);
      base32_1.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize(19, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 19;
      baseNCodec_Context1.currentLinePos = (-93);
      baseNCodec_Context1.toString();
      byte[] byteArray1 = base32_1.ensureBufferSize(76, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)0);
      base32_0.isInAlphabet((byte)0);
      base32_1.encode(byteArray0);
      baseNCodec_Context0.ibitWorkArea = (int) (byte)0;
      baseNCodec_Context0.modulus = 2201;
      // Undeclared exception!
      try { 
        base32_1.encode(byteArray1, 3, (-243), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 2201
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte byte0 = (byte) (-40);
      Base32 base32_0 = new Base32((byte) (-40));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[0];
      base32_0.containsAlphabetOrPad(byteArray1);
      int int0 = (-67);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.readResults(byteArray1, (-1593), (-1593), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.modulus = 64;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (-67), (-67), baseNCodec_Context1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 64
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      Base32 base32_1 = new Base32((-33), byteArray0, false);
      base32_1.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.currentLinePos = (-93);
      baseNCodec_Context1.toString();
      base32_1.encode(byteArray0);
      base32_1.decode("AA======");
      byte[] byteArray1 = base32_1.decode(".UB:%:F[-m");
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray1);
      
      String string0 = base32_1.encodeAsString(byteArray0);
      assertEquals("AA======", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte byte0 = (byte)53;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = new Base32((-1409));
      byte[] byteArray0 = base32_0.decode("eA>770Ql:!XcD$@X`W");
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("A77QXDXW", string0);
      
      Base32 base32_1 = new Base32(76);
      boolean boolean0 = base32_0.isInAlphabet((byte)65);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32((-1409));
      byte[] byteArray0 = new byte[4];
      Base32 base32_1 = new Base32(false, (byte)91);
      byte[] byteArray1 = base32_1.decode("V1jwrR 0");
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)91;
      byteArray2[1] = (byte)91;
      byteArray2[2] = (byte)91;
      byteArray2[3] = (byte)91;
      base32_1.encodeAsString(byteArray2);
      base32_1.isInAlphabet((byte)40);
      base32_1.isInAlphabet((byte) (-106));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_1.encode(byteArray0, (-1216), (-1267), baseNCodec_Context0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32((-1409));
      base32_0.decode((Object) "PL1 bJ]!ilzn a|=uY$");
      Base32 base32_1 = new Base32(true, (byte)46);
      base32_1.decode("US-ASCII");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      base32_1.encodeAsString(byteArray0);
      base32_0.isInAlphabet((byte)46);
      boolean boolean0 = base32_0.isInAlphabet((byte)34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32();
      base32_0.decode("vqGUQUC");
      Base32 base32_1 = new Base32(false, (byte)46);
      boolean boolean0 = base32_1.isInAlphabet("");
      base32_1.decode("]Hh:}A");
      base32_0.isInAlphabet((byte)0);
      boolean boolean1 = base32_0.isInAlphabet((byte)0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32((-1409));
      byte[] byteArray0 = new byte[4];
      base32_0.decode((Object) "PL1 bJ]!ilzn a|=uY$");
      byteArray0[0] = (byte)7;
      Base32 base32_1 = new Base32(true, (byte)7);
      byte[] byteArray1 = base32_1.decode("hw~ZcbjC)RrU Bbg<W");
      String string0 = base32_0.encodeAsString(byteArray1);
      assertEquals("M36MA===", string0);
      
      base32_0.isInAlphabet((byte) (-38));
      boolean boolean0 = base32_0.isInAlphabet((byte)56);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base32 base32_0 = new Base32((byte)0, byteArray0);
      base32_0.isInAlphabet("V59'h(./4Dgeo");
      byte[] byteArray1 = base32_0.decode(byteArray0);
      base32_0.isInAlphabet((byte) (-39));
      base32_0.containsAlphabetOrPad(byteArray1);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_0.ensureBufferSize((-1128), baseNCodec_Context0);
      base32_0.decode((Object) "V59'h(./4Dgeo");
      BaseNCodec.Context baseNCodec_Context1 = null;
      byte byte0 = (byte)6;
      Base32 base32_1 = new Base32(true, (byte)6);
      Base32 base32_2 = new Base32(false);
      int int0 = 10;
      // Undeclared exception!
      try { 
        base32_2.decode(byteArray2, 10, (int) (byte) (-20), (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-20);
      Base32 base32_0 = new Base32((byte)0, byteArray0);
      String string0 = "";
      base32_0.isInAlphabet("");
      byte[] byteArray1 = base32_0.decode(byteArray0);
      byte byte1 = (byte)89;
      base32_0.isInAlphabet((byte)99);
      base32_0.containsAlphabetOrPad(byteArray1);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize(8170, baseNCodec_Context0);
      base32_0.decode((Object) "");
      BaseNCodec.Context baseNCodec_Context1 = null;
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32(false, (byte)89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32((-1409));
      byte[] byteArray0 = new byte[4];
      Base32 base32_1 = new Base32(false, (byte)46);
      base32_0.decode("hw~ZcbjC)RrU Bbg<W");
      base32_1.encodeAsString(byteArray0);
      base32_1.isInAlphabet((byte)40);
      boolean boolean0 = base32_0.isInAlphabet((byte)40);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)5;
      byte byte1 = (byte) (-33);
      byte byte2 = (byte)102;
      byte[] byteArray1 = null;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(29, (byte[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 29 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32();
      base32_0.isInAlphabet("{~L*t");
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32(39, byteArray0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_1.encode(byteArray0, (int) (byte)100, (-128), baseNCodec_Context1);
      base32_1.decode(byteArray0, 8, 3, baseNCodec_Context1);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-1);
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(0, byteArray0, false, (byte)9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-2));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("737P4AAAAAAA\uFFFD\uFFFD\uFFFD\uFFFD", string0);
      
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-2);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      base32_0.isInAlphabet((byte) (-2));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray1, (int) (byte) (-63), (int) (byte) (-75), baseNCodec_Context0);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte)9;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte) (-31), 64, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -31
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 10;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(10, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u00003b\uFFFDa]\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-20);
      Base32 base32_0 = new Base32(29, byteArray0);
      base32_0.isInAlphabet("");
      base32_0.decode(byteArray0);
      base32_0.isInAlphabet((byte)93);
      base32_0.containsAlphabetOrPad(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize(7, baseNCodec_Context0);
      base32_0.decode((Object) "");
      baseNCodec_Context0.lbitWorkArea = 1528L;
      BaseNCodec.Context baseNCodec_Context1 = null;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 71, (int) (byte)5, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32((-1409));
      byte[] byteArray0 = new byte[4];
      base32_0.decode((Object) "PL1 bJ]!ilzn a|=uY$");
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)0;
      Object object0 = new Object();
      try { 
        base32_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      Base32 base32_0 = new Base32(1979, byteArray0, false, (byte)108);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((byte)0, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)108);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.ibitWorkArea = (int) (byte)2;
      base32_0.encode(byteArray0, (int) (byte)108, (int) (byte)0, baseNCodec_Context1);
      base32_0.isInAlphabet((byte)0);
      base32_0.isInAlphabet((byte)22);
      base32_0.isInAlphabet((byte)51);
      base32_0.decode(byteArray1);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-619), 1161, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -619
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)3);
      byte[] byteArray0 = new byte[6];
      base32_0.encodeToString(byteArray0);
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 5;
      base32_0.readResults(byteArray0, (-2131), (byte)3, baseNCodec_Context0);
      baseNCodec_Context0.buffer = byteArray0;
      baseNCodec_Context0.lbitWorkArea = (long) (byte)3;
      baseNCodec_Context0.lbitWorkArea = (long) (byte)3;
      base32_0.decode(byteArray0, (int) (byte)3, (int) (byte)3, baseNCodec_Context0);
      baseNCodec_Context0.readPos = (-997);
      base32_0.encode(byteArray0, (int) (byte)3, (int) (byte)3, baseNCodec_Context0);
      base32_0.decode(byteArray0, (int) (byte)3, 76, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(baseNCodec_Context0.buffer, 970, (int) (byte)3, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 970
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)61);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      base32_0.decode("");
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)61;
      base32_0.encodeAsString(byteArray0);
      boolean boolean0 = base32_0.isInAlphabet((byte)61);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte) (-62));
      byte[] byteArray0 = new byte[7];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.currentLinePos = 33;
      base32_0.decode((byte[]) null, 1069, (int) (byte) (-62), baseNCodec_Context0);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-62);
      byte[] byteArray2 = base32_0.decode("pg&b4v");
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-8);
      byteArray1[3] = (byte) (-62);
      base32_0.decode(byteArray1);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)58;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.eof = true;
      base32_0.decode(byteArray0, 23, 0, baseNCodec_Context1);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      baseNCodec_Context2.pos = 7;
      base32_0.decode(byteArray0, (int) (byte)58, (int) (byte) (-62), baseNCodec_Context2);
      base32_0.isInAlphabet((byte)7);
      base32_0.decode(byteArray2, 0, (int) (byte) (-62), baseNCodec_Context1);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-113));
      base32_0.isInAlphabet((byte) (-113));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.toString();
      base32_0.readResults(byteArray0, (byte) (-113), (-193), baseNCodec_Context0);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte) (-113);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte) (-113), (int) (byte) (-113), baseNCodec_Context1);
      base32_0.encode(byteArray0, 36, (int) (byte) (-113), baseNCodec_Context1);
      baseNCodec_Context1.modulus = (int) (byte) (-113);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (-1637), 10, baseNCodec_Context2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1637
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      base32_0.isInAlphabet((byte)5);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, (byte)5, 2, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.currentLinePos = (int) (byte)5;
      base32_0.decode(byteArray0, 0, (int) (byte)0, baseNCodec_Context1);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = new Base32(5);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)89;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 0, (int) (byte)123, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)52;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 0, 3969, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      Base32 base32_0 = new Base32(39, byteArray0, false);
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.currentLinePos = 76;
      baseNCodec_Context0.toString();
      baseNCodec_Context0.ibitWorkArea = 64;
      byte[] byteArray1 = base32_0.ensureBufferSize(16, baseNCodec_Context0);
      base32_0.isInAlphabet((byte) (-17));
      base32_0.isInAlphabet((byte)100);
      base32_0.encode(byteArray1, 16, 39, baseNCodec_Context0);
      base32_0.decode(byteArray1, (int) (byte)100, 64, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byte byte0 = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      Base32 base32_0 = new Base32(0, byteArray0);
      base32_0.decode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = null;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.readPos = (int) (byte) (-81);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-4260), (int) (byte)2, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4260
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)37);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)37;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 0, (int) (byte)37, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)9;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(8192, byteArray0, false, (byte)80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [P\t]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte byte0 = (byte)58;
      base32_0.isInAlphabet((byte)58);
      byte[] byteArray0 = null;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode((byte[]) null, (-2752), 3485, baseNCodec_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base32 base32_0 = new Base32(11);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      byte byte0 = (byte)81;
      byteArray0[1] = (byte)81;
      byte byte1 = (byte)4;
      base32_0.encodeToString(byteArray0);
      byteArray0[2] = (byte)4;
      base32_0.decode(byteArray0);
      byteArray0[3] = (byte) (-23);
      try { 
        base32_0.encode((Object) "5RIQAAAAAAAAA===");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base32 base32_0 = new Base32((-277));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte) (-61);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte) (-23), (int) (byte)94, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }
}
