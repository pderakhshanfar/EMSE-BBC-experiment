/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:18:15 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("");
      base32_0.encodeAsString(byteArray0);
      Base32 base32_1 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize(2285, baseNCodec_Context0);
      base32_1.isInAlphabet("");
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_1.decode("UTF-16LE");
      base32_1.encodeAsString(byteArray2);
      Base32 base32_2 = new Base32(64, byteArray1, true, (byte)29);
      byte[] byteArray3 = base32_2.decode(byteArray0);
      Base32 base32_3 = new Base32(76);
      base32_3.isInAlphabet("");
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      base32_2.encode(byteArray3, 7, (-1384), baseNCodec_Context1);
      Base32 base32_4 = new Base32(76, byteArray1, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[6];
      Base32 base32_1 = new Base32(0, byteArray0, true, (byte) (-119));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte) (-119);
      base32_1.containsAlphabetOrPad(byteArray1);
      base32_0.encodeAsString(byteArray0);
      Base32 base32_2 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_0.ensureBufferSize(64, baseNCodec_Context0);
      base32_2.decode(byteArray2);
      base32_2.isInAlphabet("UTF-16LE");
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray3 = baseNCodec_Context0.buffer;
      base32_0.encodeAsString(byteArray1);
      base32_1.isInAlphabet("*;PCAoG");
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      base32_1.encode(byteArray3, (int) (byte)124, 3, baseNCodec_Context2);
      base32_2.isInAlphabet((byte)68);
      base32_1.decode(byteArray2, 2710, 1, baseNCodec_Context2);
      // Undeclared exception!
      base32_0.decode(byteArray2, 68, 8192, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte byte0 = (byte)20;
      Base32 base32_0 = new Base32((byte)20);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      base32_0.encodeToString(byteArray0);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((byte)20, baseNCodec_Context0);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)20;
      base32_0.containsAlphabetOrPad(byteArray1);
      base32_0.isInAlphabet("");
      int int0 = 93;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context0.eof = true;
      baseNCodec_Context1.lbitWorkArea = (-1L);
      baseNCodec_Context1.buffer = byteArray0;
      baseNCodec_Context1.modulus = 45;
      baseNCodec_Context1.readPos = 3;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 93, (-630), baseNCodec_Context1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 45
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[6];
      Base32 base32_1 = new Base32(0, byteArray0, false, (byte) (-119));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte) (-119);
      base32_1.containsAlphabetOrPad(byteArray1);
      base32_1.decode("");
      Base32 base32_2 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_0.ensureBufferSize(64, baseNCodec_Context0);
      base32_2.decode(byteArray2);
      base32_2.isInAlphabet("UTF-16LE");
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encodeAsString(byteArray1);
      base32_1.isInAlphabet("*;PCAoG");
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      base32_0.encode(byteArray2, (int) (byte)124, (int) (byte) (-119), baseNCodec_Context0);
      base32_1.encodeAsString(byteArray1);
      BaseNCodec.Context baseNCodec_Context3 = new BaseNCodec.Context();
      // Undeclared exception!
      base32_2.encode(byteArray2, 1218, 4275, baseNCodec_Context1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[6];
      Base32 base32_1 = new Base32(0, byteArray0, false, (byte) (-119));
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte)124;
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte) (-119);
      base32_1.containsAlphabetOrPad(byteArray1);
      byte[] byteArray2 = base32_1.decode("");
      base32_0.encodeAsString(byteArray0);
      base32_0.containsAlphabetOrPad(byteArray2);
      Base32 base32_2 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray3 = base32_0.ensureBufferSize(64, baseNCodec_Context0);
      base32_2.isInAlphabet("UTF-16LE");
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_2.decode("AAAAAAAAAA======");
      baseNCodec_Context0.buffer = byteArray3;
      baseNCodec_Context0.modulus = (-594);
      base32_0.encodeAsString(byteArray1);
      base32_1.isInAlphabet("*;PCAoG");
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      baseNCodec_Context2.pos = 4;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray3, (int) (byte)124, (int) (byte) (-119), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -594
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)124;
      Base32 base32_0 = new Base32((byte)14);
      byte[] byteArray2 = new byte[21];
      byteArray2[0] = (byte)124;
      byteArray2[1] = (byte)14;
      byteArray2[2] = (byte) (-119);
      byteArray2[3] = (byte)54;
      byteArray2[4] = (byte) (-119);
      byteArray2[5] = (byte)124;
      byteArray2[6] = (byte)14;
      Object object0 = base32_0.decode((Object) "");
      base32_0.decode(object0);
      base32_0.encodeAsString(byteArray2);
      base32_0.decode("PQHISNUJPQHAAAAAAAAAAAAAAAAAAAAAAA\u000E\u000E\u000E\u000E\u000E\u000E");
      boolean boolean0 = base32_0.isInAlphabet((byte)13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-122));
      byte[] byteArray0 = new byte[1];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = (-404);
      baseNCodec_Context0.modulus = 64;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-122), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 64
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32(10);
      byte[] byteArray0 = new byte[6];
      base32_0.decode("org.apache.commons.codec.binary.BaseNCodec");
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray1, 10, 2873, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32(1112);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)11;
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-122));
      byte[] byteArray0 = base32_0.decode("Parameter supplied to Base-N decode is not a byte[] or a String");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-2725), (-2725), baseNCodec_Context1);
      assertArrayEquals(new byte[] {(byte)120, (byte)91}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      Base32 base32_0 = new Base32(462, byteArray0, false, (byte)122);
      Base32 base32_1 = new Base32(true, (byte)122);
      base32_1.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_1.decode("Parameter supplied to Base-N decode is not a byte[] or a String");
      base32_0.encodeAsString(byteArray1);
      Base32 base32_2 = new Base32(true);
      base32_2.isInAlphabet("ZLXQzzzz\uFFFD");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_3 = new Base32((byte) (-119));
      base32_1.decode("UTF-16LE");
      base32_1.encodeAsString(byteArray0);
      base32_1.isInAlphabet("*;PCAoG");
      Object object0 = new Object();
      try { 
        base32_2.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = new byte[3];
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(1740, byteArray0, true, (byte)13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-122));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-122);
      base32_0.encodeAsString(byteArray0);
      base32_0.decode(byteArray0);
      byte[] byteArray1 = base32_0.decode("QYAINBUGQY\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray1, (int) (byte) (-122), 127, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -122
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = 723;
      baseNCodec_Context0.eof = false;
      Base32 base32_0 = new Base32(1439);
      byte[] byteArray0 = new byte[2];
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      assertFalse(baseNCodec_Context1.equals((Object)baseNCodec_Context0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      Base32 base32_0 = new Base32((byte)0, byteArray0, true);
      base32_0.decode("w]-9).v.%3K07ok");
      Base32 base32_1 = new Base32(true);
      base32_1.isInAlphabet((byte)122);
      Base32 base32_2 = new Base32(false);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-119);
      Base32 base32_1 = new Base32(0, byteArray0, false, (byte) (-119));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte) (-119);
      base32_1.containsAlphabetOrPad(byteArray1);
      base32_1.decode("");
      base32_0.encodeAsString(byteArray0);
      Base32 base32_2 = new Base32(false);
      base32_2.isInAlphabet("UTF-16LE");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_3 = new Base32((byte)124);
      base32_3.decode("AAAAAAAAAA======");
      base32_3.encodeAsString(byteArray1);
      base32_1.isInAlphabet("*;PCAoG");
      try { 
        base32_0.decode((Object) baseNCodec_Context0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32((int) (byte)41);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)116;
      base32_0.encode(byteArray0, 69, (-290), baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte)94);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte byte0 = (byte) (-122);
      Base32 base32_0 = new Base32((byte) (-122));
      byte byte1 = (byte) (-47);
      byte byte2 = (byte)72;
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32(false, (byte)72);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-60));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)45;
      base32_0.encodeToString(byteArray0);
      base32_0.containsAlphabetOrPad(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte)89;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray1, 76, (int) (byte)13, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[6];
      base32_0.encodeAsString(byteArray0);
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-47);
      byte[] byteArray1 = base32_0.decode("pRH)|=BVtyyNoYz");
      base32_0.encodeAsString(byteArray1);
      base32_0.isInAlphabet("");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.containsAlphabetOrPad(byteArray0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 10, 10, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-42);
      byteArray0[0] = (byte) (-42);
      base32_0.encodeAsString(byteArray0);
      base32_0.isInAlphabet("bNawRV ");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_0.decode("bNawRV ");
      base32_0.encodeAsString(byteArray0);
      base32_0.isInAlphabet("p5MIz;'{m");
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.containsAlphabetOrPad(byteArray1);
      base32_0.decode(byteArray0, (int) (byte) (-42), (int) (byte) (-42), baseNCodec_Context1);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray1, (int) (byte) (-42), 771, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -42
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-122));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-122);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 13, (int) (byte) (-13), baseNCodec_Context0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-122);
      Base32 base32_1 = new Base32(false, (byte)61);
      base32_1.containsAlphabetOrPad(byteArray1);
      boolean boolean0 = base32_1.isInAlphabet((byte)91);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte byte1 = (byte)89;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      base32_0.encodeToString(byteArray0);
      byteArray0[3] = (byte)0;
      base32_0.containsAlphabetOrPad(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 1072, (int) (byte)0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      base32_0.encodeAsString(byteArray0);
      base32_0.isInAlphabet("bNawRV ");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.containsAlphabetOrPad(byteArray0);
      int int0 = 1086;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 1086, 64, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1086
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)0, (int) (byte)116, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 285;
      byte[] byteArray0 = null;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(285, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 285 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)71;
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)7;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(2876, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\uFFFD$\u0000AG\u0000\u0007]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)7;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(5, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [<\u0000=\u0000q\u0000\u0007]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)89;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(3584, byteArray0, true, (byte)3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u0003mY]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[0];
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      base32_0.isInAlphabet((byte)79);
      byte byte0 = (byte)2;
      base32_0.isInAlphabet((byte)2);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((byte)79, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.buffer = byteArray1;
      baseNCodec_Context1.toString();
      baseNCodec_Context1.lbitWorkArea = (-3595L);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)2, 7, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = new Base32(1553);
      base32_0.isInAlphabet((byte)82);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)82, (int) (byte)82, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-122));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 4123, (int) (byte) (-122), baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      Base32 base32_0 = new Base32(0, byteArray0, true);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      base32_0.isInAlphabet((byte)0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 0, (-1299), baseNCodec_Context0);
      baseNCodec_Context0.eof = false;
      base32_0.isInAlphabet((byte) (-26));
      base32_0.encode(byteArray1, 0, 0, baseNCodec_Context0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte byte0 = (byte)41;
      Base32 base32_0 = new Base32(true, (byte)41);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      int int0 = 990;
      byte[] byteArray1 = base32_0.decode("pRH3C)|=-VtyyNoYz");
      base32_0.encodeAsString(byteArray1);
      base32_0.isInAlphabet("p5MIz;'{m");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.containsAlphabetOrPad(byteArray0);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)41, 990, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = 76;
      base32_0.decode(byteArray0, (int) (byte) (-42), (int) (byte) (-42), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 76, (int) (byte) (-42), baseNCodec_Context1);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-12);
      byte byte0 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      Base32 base32_0 = new Base32(0, byteArray0, true);
      base32_0.decode("w]-9U.v.%&3K07ok");
      base32_0.isInAlphabet((byte)61);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      base32_0.isInAlphabet(" 3m62.5rSp[UV@m9Py^");
      byteArray1[1] = (byte)41;
      base32_0.decode(byteArray1);
      try { 
        base32_0.encode((Object) "w]-9U.v.%&3K07ok");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[0];
      int int0 = 7;
      BaseNCodec.Context baseNCodec_Context0 = null;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 7, 7, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte)0;
      Base32 base32_0 = new Base32(0, byteArray0, false, (byte)0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 0, 0, baseNCodec_Context0);
      base32_0.encode(byteArray0, 76, (int) (byte)0, baseNCodec_Context0);
      baseNCodec_Context0.currentLinePos = 1765;
      base32_0.encode(byteArray0, 1765, 0, baseNCodec_Context0);
      byte[] byteArray1 = new byte[0];
      baseNCodec_Context0.buffer = byteArray1;
      baseNCodec_Context0.lbitWorkArea = 2462L;
      int int0 = 2241;
      base32_0.decode(byteArray0, 2241, 0, baseNCodec_Context0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      BaseNCodec.Context baseNCodec_Context1 = null;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray2, 0, 0, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)0, 32, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base32 base32_0 = new Base32(0, (byte[]) null, false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize(0, baseNCodec_Context0);
      byte[] byteArray0 = null;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.currentLinePos = 76;
      // Undeclared exception!
      try { 
        base32_0.encode((byte[]) null, 0, 706, baseNCodec_Context1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base32 base32_0 = new Base32((-1714));
      byte[] byteArray0 = new byte[0];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.eof = true;
      base32_0.encode(byteArray0, 6430, (-1714), baseNCodec_Context0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)2;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 0, (int) (byte) (-81), baseNCodec_Context0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)0;
      Base32 base32_0 = new Base32(0, byteArray0, true);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base32 base32_0 = new Base32(2484, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, 0, (-3122), baseNCodec_Context0);
      base32_0.isInAlphabet("emfyxp^#y:|X_Do");
      base32_0.isInAlphabet(byteArray0, false);
      base32_0.encodeToString(byteArray0);
      base32_0.readResults(byteArray0, 1564, (-1353), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.toString();
      base32_0.encode(byteArray0, 0, 0, baseNCodec_Context1);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 0, 2484, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }
}
