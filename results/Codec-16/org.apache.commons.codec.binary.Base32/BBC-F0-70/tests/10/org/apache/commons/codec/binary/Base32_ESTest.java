/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 11:22:10 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((-2822), baseNCodec_Context0);
      base32_0.isInAlphabet(byteArray0, false);
      Base32 base32_1 = new Base32(2179, byteArray0, false);
      base32_1.encodeAsString(byteArray0);
      int int0 = (-1);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      Base32 base32_2 = new Base32(4754, byteArray0, true, (byte) (-22));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-66);
      Base32 base32_0 = new Base32(61, byteArray0, false, (byte)43);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.containsAlphabetOrPad(byteArray0);
      baseNCodec_Context0.pos = (int) (byte)105;
      baseNCodec_Context0.readPos = (int) (byte) (-66);
      baseNCodec_Context0.modulus = 2254;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)43, (int) (byte) (-66), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 2254
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((byte)0, baseNCodec_Context0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base32_0.encode(byteArray1, (-225), (-164), baseNCodec_Context0);
      base32_0.decode((Object) "buE%k+?JiV4");
      Base32 base32_1 = new Base32(349, byteArray1);
      base32_1.encodeAsString(byteArray0);
      base32_1.decode((String) null);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      Base32 base32_2 = new Base32((-225), (byte[]) null);
      Base32 base32_3 = new Base32(349, byteArray0, true);
      base32_1.decode("UwAdoAIomw");
      Base32 base32_4 = new Base32(76, byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize(22, baseNCodec_Context0);
      base32_0.isInAlphabet(byteArray1, true);
      base32_0.encodeAsString(byteArray1);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      int int0 = 2882;
      // Undeclared exception!
      base32_0.encode(byteArray1, 22, 2882, baseNCodec_Context1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize(22, baseNCodec_Context0);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)0;
      base32_0.isInAlphabet(byteArray0, false);
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.modulus = (-1);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-1), (-1), baseNCodec_Context1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -1
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32();
      Base32 base32_1 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_1.ensureBufferSize(64, baseNCodec_Context1);
      base32_0.isInAlphabet(byteArray0, true);
      String string0 = base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      base32_1.encode(byteArray0, 11, (-3378), baseNCodec_Context2);
      byte[] byteArray1 = new byte[0];
      base32_1.encodeAsString(byteArray1);
      // Undeclared exception!
      base32_1.decode(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32(2122);
      byte[] byteArray0 = base32_0.decode(" > 0, but lineSeparator is null");
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize(2122, baseNCodec_Context0);
      base32_0.readResults(byteArray1, 2122, 9, baseNCodec_Context0);
      baseNCodec_Context0.readPos = 49;
      baseNCodec_Context0.modulus = 0;
      baseNCodec_Context0.currentLinePos = 3723;
      base32_0.decode(" > 0, but lineSeparator is null");
      base32_0.decode("9]1(T\"ZdcM<f#zdTmG{");
      byte byte0 = (byte)2;
      base32_0.encode(byteArray1);
      baseNCodec_Context0.currentLinePos = 2718;
      baseNCodec_Context0.pos = (-652);
      baseNCodec_Context0.ibitWorkArea = 1819;
      base32_0.isInAlphabet((byte)2);
      // Undeclared exception!
      base32_0.decode(byteArray1, (int) (byte)2, 2122, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      Base32 base32_1 = new Base32((byte)0, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)60;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      base32_1.encodeAsString(byteArray1);
      base32_1.encodeAsString(byteArray1);
      base32_0.decode("AAAAAAB4AAAAAAA=");
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte)60;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)73;
      byteArray2[6] = (byte)60;
      Base32 base32_2 = new Base32((-3885), byteArray2);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[2];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.toString();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.modulus = 76;
      baseNCodec_Context1.modulus = 13;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-136), (-136), baseNCodec_Context1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 13
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)11);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[4] = (byte)11;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32((int) (byte)11);
      base32_1.readResults(byteArray0, (byte)11, 61, baseNCodec_Context0);
      base32_1.encodeAsString(byteArray0);
      Base32 base32_2 = new Base32();
      base32_1.decode(byteArray0, 0, (-852), baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base32_0.decode((Object) "buE%k+?JiV4");
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      base32_0.decode(byteArray1);
      base32_0.decode("=c1hXQ");
      Base32 base32_1 = new Base32();
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base32 base32_0 = new Base32((byte)0, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[4] = (byte)0;
      base32_0.isInAlphabet(byteArray1, true);
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 8192, (int) (byte)0, baseNCodec_Context0);
      base32_0.encode(byteArray1, 2, (-2438), baseNCodec_Context0);
      Base32 base32_1 = new Base32(false, (byte)0);
      base32_0.encode(byteArray0, 64, (int) (byte)0, baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte)29);
      base32_1.decode("AAAAAAA=");
      Base32 base32_2 = new Base32((byte)0);
      base32_2.isInAlphabet((byte) (-63));
      boolean boolean1 = base32_2.isInAlphabet((byte)0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)101);
      BaseNCodec.isWhiteSpace((byte) (-114));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      Base32 base32_1 = new Base32(64, byteArray0, false, (byte)6);
      base32_1.decode(byteArray0);
      base32_0.decode("]2)YLGR|?G^");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_1.encodeToString((byte[]) null);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-114));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Object object0 = base32_0.decode((Object) "");
      base32_0.encode(object0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base32_0.decode((Object) "buE%k+?JiV4");
      base32_0.encodeAsString(byteArray0);
      byteArray0[5] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 40, 0, baseNCodec_Context0);
      baseNCodec_Context0.lbitWorkArea = (-517L);
      baseNCodec_Context0.eof = true;
      int int0 = (-1327);
      base32_0.encode(byteArray0, (-1327), (int) (byte)0, baseNCodec_Context0);
      baseNCodec_Context0.lbitWorkArea = 0L;
      int int1 = 0;
      base32_0.encode(byteArray0, 0, 0, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)0);
      base32_0.decode("0000000000\u0000\u0000\u0000\u0000\u0000\u0000");
      base32_0.isInAlphabet((byte)0);
      base32_0.decode(byteArray0, 3228, 0, baseNCodec_Context0);
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32(false, (byte)32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Object object0 = base32_0.decode((Object) "");
      base32_0.encode(object0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base32_0.decode((Object) "buE%k+?JiV4");
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("0000000000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      byteArray0[5] = (byte)0;
      boolean boolean0 = base32_0.isInAlphabet((byte)88);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode((byte[]) null, 0, (-1), baseNCodec_Context0);
      boolean boolean1 = base32_0.isInAlphabet((byte) (-81));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      Base32 base32_0 = new Base32(8192, byteArray0, true);
      base32_0.isInAlphabet(byteArray0, true);
      base32_0.encodeToString(byteArray0);
      base32_0.isInAlphabet((byte) (-65));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)23, (int) (byte) (-91), baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      base32_0.isInAlphabet(byteArray0, false);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base32_0.decode((Object) "buE%k+?JiV4");
      base32_0.encodeAsString(byteArray0);
      Base32 base32_1 = new Base32(64, byteArray0);
      base32_1.encodeAsString(byteArray0);
      base32_1.decode("org.apache.commons.codec.binary.Base32");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)0;
      Base32 base32_0 = new Base32(8192, byteArray0, true);
      base32_0.decode(byteArray0);
      base32_0.decode("]2)YLGR|?G^");
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 23;
      baseNCodec_Context0.modulus = (int) (byte)36;
      base32_0.encode(byteArray0, 0, 0, baseNCodec_Context0);
      baseNCodec_Context0.modulus = 0;
      Base32 base32_1 = new Base32();
      boolean boolean0 = base32_1.isInAlphabet((byte) (-91));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      base32_0.isInAlphabet(byteArray0, false);
      byteArray0[2] = (byte)0;
      Object object0 = base32_0.decode((Object) "");
      base32_0.encode(object0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base32_0.decode((Object) "buE%k+?JiV4");
      base32_0.encodeAsString(byteArray0);
      base32_0.decode("");
      Base32 base32_1 = new Base32(64, byteArray0);
      base32_1.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = null;
      // Undeclared exception!
      try { 
        base32_1.decode(byteArray0, (int) (byte)0, 1036, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-43);
      Base32 base32_0 = new Base32((byte) (-43), byteArray0, false, (byte) (-59));
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = null;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-59);
      byteArray1[1] = (byte) (-43);
      byteArray1[2] = (byte) (-43);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray1, 3548, 29, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Object object0 = base32_0.decode((Object) "");
      base32_0.encode(object0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base32_0.decode((Object) "buE%k+?JiV4");
      base32_0.encodeAsString(byteArray0);
      byteArray0[5] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 40, 0, baseNCodec_Context0);
      baseNCodec_Context0.lbitWorkArea = (-504L);
      baseNCodec_Context0.eof = true;
      base32_0.encode(byteArray0, (-1327), (int) (byte)0, baseNCodec_Context0);
      baseNCodec_Context0.lbitWorkArea = 0L;
      base32_0.encode(byteArray0, 1415, 0, baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte)0);
      base32_0.isInAlphabet((byte)0);
      base32_0.decode("0000000000\u0000\u0000\u0000\u0000\u0000\u0000");
      base32_0.isInAlphabet((byte)0);
      base32_0.decode(byteArray0, 3228, 0, baseNCodec_Context0);
      boolean boolean1 = base32_0.isInAlphabet((byte)0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte byte0 = (byte)87;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)87);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)0;
      Base32 base32_0 = new Base32(8192, byteArray0, true);
      base32_0.decode(byteArray0);
      base32_0.decode("]2)YLGR|?G^");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 23;
      baseNCodec_Context0.modulus = (int) (byte)36;
      base32_0.encode(byteArray0, 0, 0, baseNCodec_Context0);
      baseNCodec_Context0.modulus = 0;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 0, 64, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = null;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 1581, 64, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1993;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)0;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(1993, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u0000A\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)7;
      base32_0.encode(byteArray0);
      byteArray0[0] = (byte)7;
      int int0 = 0;
      int int1 = (-1158);
      try { 
        base32_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)61;
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-46);
      byte byte1 = (byte)22;
      byteArray0[2] = (byte)22;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte3 = (byte)114;
      byteArray0[4] = (byte)114;
      byte byte4 = (byte)2;
      byteArray0[5] = (byte)2;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [=\uFFFD\u0016\u0000r\u0002]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32(1130);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      base32_0.containsAlphabetOrPad(byteArray0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-88);
      byte byte0 = (byte)80;
      byteArray0[5] = (byte)80;
      int int0 = 3316;
      int int1 = 1987;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.eof = false;
      baseNCodec_Context0.toString();
      try { 
        base32_0.decode((Object) baseNCodec_Context0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)67;
      byte byte1 = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-89);
      byte byte2 = (byte) (-117);
      byteArray0[7] = (byte) (-117);
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(61, byteArray0, false, (byte) (-117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\f\u0000C\uFFFD:\u0000\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte) (-87));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      base32_0.isInAlphabet(byteArray0, true);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-87);
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("L6KQJAD9", string0);
      
      boolean boolean0 = base32_0.isInAlphabet((byte)58);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      Base32 base32_0 = new Base32(0, byteArray0, false, (byte)0);
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-43);
      int int0 = 3;
      BaseNCodec.Context baseNCodec_Context0 = null;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray1, 3, (int) (byte)0, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      byte byte0 = (byte)67;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(955, (byte[]) null, true, (byte)67);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 955 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)50;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)0, (-1352), baseNCodec_Context0);
      baseNCodec_Context0.currentLinePos = (int) (byte)0;
      base32_0.isInAlphabet((byte)50);
      base32_0.encode(byteArray0, 1606, (int) (byte)50, baseNCodec_Context0);
      int int0 = 3650;
      try { 
        base32_0.decode((Object) baseNCodec_Context0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[2];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, 554, 22, baseNCodec_Context0);
      byteArray0[0] = (byte)90;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)90, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-35);
      Base32 base32_0 = new Base32((-1530), byteArray0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte)6;
      Base32 base32_0 = new Base32(1099, byteArray0, false, (byte)6);
      int int0 = 6;
      base32_0.decode("Z");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 1099, 6, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1099
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-121));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)23;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.toString();
      baseNCodec_Context0.eof = false;
      base32_0.decode(byteArray0, (int) (byte) (-121), (int) (byte) (-121), baseNCodec_Context0);
      base32_0.decode(byteArray0, (int) (byte) (-121), (int) (byte)23, baseNCodec_Context0);
      baseNCodec_Context0.ibitWorkArea = 64;
      base32_0.encode(byteArray0, 0, 448, baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-121));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte byte0 = (byte)102;
      Base32 base32_0 = new Base32(true, (byte)102);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.toString();
      baseNCodec_Context0.modulus = 0;
      base32_0.encodeAsString(byteArray0);
      baseNCodec_Context0.pos = 0;
      baseNCodec_Context0.pos = 212;
      base32_0.decode(byteArray0, (-1177), 0, baseNCodec_Context0);
      base32_0.decode(byteArray0);
      base32_0.isInAlphabet((byte)102);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 0, (int) (byte)102, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)104;
      byte byte0 = (byte)60;
      byteArray0[6] = (byte)60;
      byte byte1 = (byte)82;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte) (-61);
      Base32 base32_0 = new Base32((-267), byteArray0, false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.eof = false;
      base32_0.ensureBufferSize((byte)102, baseNCodec_Context0);
      base32_0.encode(byteArray0, (int) (byte)104, 0, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)0);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte) (-61), 999, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -61
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }
}
