/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:25:42 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)4;
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((byte)74, baseNCodec_Context0);
      byte byte0 = (byte)114;
      base32_0.isInAlphabet((byte)114);
      baseNCodec_Context0.buffer = byteArray1;
      baseNCodec_Context0.ibitWorkArea = (-461);
      base32_0.encode(byteArray1);
      int int0 = 2449;
      // Undeclared exception!
      base32_0.decode(byteArray1, 76, 2449, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32((-1));
      byte byte0 = (byte) (-113);
      base32_0.isInAlphabet((byte) (-113));
      byte[] byteArray0 = new byte[6];
      byte byte1 = (byte) (-113);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte) (-113), (int) (byte) (-113), baseNCodec_Context0);
      byte[] byteArray1 = base32_0.ensureBufferSize((byte) (-113), baseNCodec_Context0);
      base32_0.decode("F:>tI");
      base32_0.isInAlphabet("F:>tI");
      Base32 base32_1 = new Base32((byte) (-113));
      Base32 base32_2 = new Base32(64, byteArray1, true);
      base32_2.isInAlphabet("F:>tI");
      base32_1.decode(byteArray0);
      Base32 base32_3 = new Base32(2791, byteArray1, true, (byte)64);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32((-1));
      base32_0.isInAlphabet((byte) (-113));
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-113);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte) (-113), (int) (byte) (-113), baseNCodec_Context0);
      byte[] byteArray1 = base32_0.ensureBufferSize((byte) (-113), baseNCodec_Context0);
      int int0 = 9;
      base32_0.decode(byteArray0, (int) (byte) (-113), 2281, baseNCodec_Context0);
      byte[] byteArray2 = base32_0.decode("");
      base32_0.isInAlphabet("q`");
      Base32 base32_1 = new Base32(100, byteArray1, true, (byte) (-31));
      base32_1.isInAlphabet("x'Zp)M^;wI-g*]_[g1");
      base32_1.decode(byteArray2);
      base32_0.encodeToString(byteArray2);
      Base32 base32_2 = new Base32(76, byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32((-1));
      base32_0.isInAlphabet((byte) (-113));
      byte[] byteArray0 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte) (-113), (int) (byte) (-113), baseNCodec_Context0);
      byte[] byteArray1 = base32_0.ensureBufferSize((byte) (-113), baseNCodec_Context0);
      base32_0.decode((String) null);
      base32_0.isInAlphabet("F:>tI");
      base32_0.isInAlphabet("F:>tI");
      byte byte0 = (byte)26;
      Base32 base32_1 = new Base32((byte)26);
      base32_1.decode(byteArray0);
      byte[] byteArray2 = baseNCodec_Context0.buffer;
      base32_0.encodeToString(byteArray0);
      byte[] byteArray3 = base32_1.decode("AAAAAAAAAA======");
      BaseNCodec.isWhiteSpace((byte)26);
      Base32 base32_2 = new Base32((byte) (-48));
      base32_0.isInAlphabet("F:>tI");
      Base32 base32_3 = new Base32(76, byteArray1, false);
      base32_3.decode(byteArray2);
      base32_0.encodeToString(byteArray3);
      base32_3.encode(byteArray3, 2812, (int) (byte) (-113), baseNCodec_Context0);
      Base32 base32_4 = new Base32((byte)26, byteArray2, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("rOEoJ+?y1'X>Q");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = 1L;
      baseNCodec_Context0.modulus = 2056;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (-648), (-648), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 2056
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)4;
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((-2549), baseNCodec_Context0);
      byte byte0 = (byte)114;
      base32_0.isInAlphabet((byte)114);
      baseNCodec_Context0.buffer = byteArray1;
      baseNCodec_Context0.ibitWorkArea = (-461);
      base32_0.encode(byteArray1);
      base32_0.isInAlphabet((byte)114);
      base32_0.encode(baseNCodec_Context0.buffer, 1202, (int) (byte)4, baseNCodec_Context0);
      // Undeclared exception!
      base32_0.encode(byteArray1, 2449, 2449, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[10];
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      
      Base32 base32_1 = new Base32((-4568), byteArray0, true, (byte)38);
      byte[] byteArray1 = base32_1.decode("AAAAAAAAAAAAAAAA");
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-108), (byte) (-91), (byte)41, (byte)74, (byte)82, (byte) (-108), (byte) (-91), (byte)41, (byte)74}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32(18);
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte)73;
      base32_0.encodeToString(byteArray0);
      Base32 base32_1 = new Base32();
      base32_1.decode((String) null);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32(2590);
      base32_0.isInAlphabet((byte)73);
      byte[] byteArray0 = new byte[7];
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-1670);
      int int0 = (-303);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 126, (-303), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -1670
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32(4178);
      base32_0.isInAlphabet((byte)8);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)8;
      byteArray0[4] = (byte) (-113);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte) (-113);
      byteArray0[8] = (byte) (-113);
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode("jW(fqCNqj<VDPz");
      base32_0.isInAlphabet((byte) (-113));
      Base32 base32_1 = new Base32((-185), byteArray0);
      boolean boolean0 = base32_1.isInAlphabet((byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[3];
      base32_0.encodeToString(byteArray0);
      byte byte0 = (byte)98;
      byte byte1 = (byte)2;
      Base32 base32_1 = new Base32((byte)2, byteArray0);
      base32_1.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode("AAAAA===");
      // Undeclared exception!
      try { 
        base32_1.decode(byteArray0, (-705), (int) (byte)2, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -705
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)74;
      byteArray0[0] = (byte)74;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.decode("UTF-8");
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)74, (int) (byte)74, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 74
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32(41);
      base32_0.isInAlphabet((byte)8);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = baseNCodec_Context0.buffer;
      base32_0.isInAlphabet((byte)20);
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32((byte)8, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 8 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(2895);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)72;
      boolean boolean0 = false;
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32(false, (byte)79);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-65);
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32(5, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u0007\u001D\u0006O\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32(41);
      base32_0.isInAlphabet((byte)8);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode("BAEA====\r\n");
      base32_0.isInAlphabet((byte) (-113));
      Base32 base32_1 = new Base32(2, byteArray0);
      boolean boolean0 = base32_1.isInAlphabet((byte) (-19));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32(41);
      base32_0.isInAlphabet((byte) (-113));
      Base32 base32_1 = new Base32(true, (byte) (-113));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)2;
      base32_1.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_1.decode("HU7OV3SFHVHM40G\uFFFD");
      base32_1.decode(byteArray1, (int) (byte)98, (int) (byte) (-29), baseNCodec_Context0);
      Base32 base32_2 = new Base32();
      try { 
        base32_2.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)9;
      Base32 base32_0 = new Base32((-29), byteArray0, true);
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32((byte)9, byteArray0);
      // Undeclared exception!
      try { 
        base32_1.decode(byteArray0, (-2186), 696, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2186
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-111);
      base32_0.isInAlphabet("org.apache.commons.codec.binary.BaseNCodec$Context");
      Base32 base32_1 = new Base32(true, (byte) (-113));
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode("JKIQAAAAAA======");
      base32_0.decode(byteArray0, 454, (-938), baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-12));
      boolean boolean1 = base32_0.isInAlphabet((byte) (-74));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32(2895);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)118;
      base32_0.decode("hQ*.x[");
      try { 
        base32_0.encode((Object) "UTF-16LE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32(41);
      base32_0.isInAlphabet((byte) (-113));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode("R4======\r\n");
      base32_0.decode(byteArray0, 41, 0, baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte)0);
      boolean boolean1 = base32_0.isInAlphabet((byte) (-113));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32(2895);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)7;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 2895, (-1676), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      int int0 = 54;
      // Undeclared exception!
      try { 
        base32_0.encode((byte[]) null, 54, 2749, baseNCodec_Context1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-111);
      base32_0.isInAlphabet("org.apache.commons.codec.binary.BaseNCodec$Context");
      Base32 base32_1 = new Base32(true, (byte) (-113));
      base32_1.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_1.decode(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte) (-113);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray1, 76, 626, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32(2895);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)83;
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 2895, 2895, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2895
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32(2895);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)0, 3057, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte byte0 = (byte)83;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)83);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      base32_0.encodeAsString(byteArray0);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)109;
      base32_0.containsAlphabetOrPad(byteArray0);
      byte byte1 = (byte)75;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)109, (int) (byte)73, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 109
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-127);
      base32_0.decode("");
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-30);
      byteArray0[8] = (byte)6;
      base32_0.isInAlphabet(byteArray0, true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.ibitWorkArea = (int) (byte)6;
      base32_0.encode(byteArray0, (-1243), (-658), baseNCodec_Context0);
      base32_0.isInAlphabet((byte)50);
      boolean boolean0 = base32_0.isInAlphabet((byte)50);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32(41);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-113));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 41, 0, baseNCodec_Context0);
      boolean boolean1 = base32_0.isInAlphabet((byte)0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte byte0 = (byte)10;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)4;
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((-2549), baseNCodec_Context0);
      byte byte0 = (byte)114;
      base32_0.isInAlphabet((byte)114);
      baseNCodec_Context0.buffer = byteArray1;
      baseNCodec_Context0.ibitWorkArea = (-461);
      base32_0.encode(byteArray1);
      int int0 = 2449;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray1, (-2549), 2449, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2549
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-28));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-782), (-782), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.eof = true;
      base32_0.encode((byte[]) null, 0, 0, baseNCodec_Context1);
      base32_0.encode(byteArray0, (int) (byte) (-28), (int) (byte) (-28), baseNCodec_Context1);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32((-1129));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)11, (int) (byte)0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 0, (int) (byte)0, baseNCodec_Context1);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 0, (int) (byte)11, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1265;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-117);
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(1265, byteArray0, true, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [Q\t\uFFFD\uFFFD\u0000\b\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte byte0 = (byte)91;
      Base32 base32_0 = new Base32((byte)91);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 29, (int) (byte)91, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base32 base32_0 = new Base32(0, byteArray0);
      base32_0.encodeAsString(byteArray0);
      boolean boolean0 = base32_0.isInAlphabet(byteArray0, false);
      base32_0.isInAlphabet("t7SGIH4S");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = 0L;
      baseNCodec_Context0.lbitWorkArea = (long) (byte)1;
      base32_0.decode(byteArray0, 7, (-175), baseNCodec_Context0);
      base32_0.encode(byteArray0, (int) (byte)0, (int) (byte)1, baseNCodec_Context0);
      base32_0.decode(byteArray0, (-813), (int) (byte)0, baseNCodec_Context0);
      base32_0.decode(byteArray0, 7, (-175), baseNCodec_Context0);
      base32_0.isInAlphabet((byte)0);
      base32_0.isInAlphabet((byte)32);
      base32_0.decode(byteArray0, (int) (byte)32, 447, baseNCodec_Context0);
      boolean boolean1 = base32_0.isInAlphabet((byte)0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base32 base32_0 = new Base32((-412));
      base32_0.isInAlphabet((byte) (-59));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = 10;
      base32_0.decode(byteArray0, (-412), (-2555), baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)52;
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)64;
      byte byte1 = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)8;
      byte byte2 = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byte byte3 = (byte)33;
      byteArray0[5] = (byte)33;
      Base32 base32_0 = new Base32((-2359), byteArray0, true);
      int int0 = (-1756);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte)0;
      Base32 base32_1 = new Base32((byte)33);
      try { 
        base32_1.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base32 base32_0 = new Base32(213);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-75);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte) (-126), (int) (byte) (-48), baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)2;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(3003, byteArray0, false, (byte)7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u00008\u0007E\uFFFD\u0002]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 4039;
      base32_0.decode(byteArray0, 0, (-4394), baseNCodec_Context0);
      base32_0.decode(byteArray0);
      base32_0.isInAlphabet((byte)0);
      baseNCodec_Context0.readPos = (-1601);
      base32_0.isInAlphabet("");
      baseNCodec_Context0.eof = true;
      base32_0.decode(byteArray0, (-2717), (int) (byte)0, baseNCodec_Context0);
      byte[] byteArray1 = new byte[0];
      base32_0.decode(byteArray1, (int) (byte)0, 995, baseNCodec_Context0);
      base32_0.encode(byteArray1, 302, 4363, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)0);
      base32_0.decode(byteArray1, 0, (-2717), baseNCodec_Context0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte byte0 = (byte) (-12);
      Base32 base32_0 = new Base32(false, (byte) (-12));
      byte[] byteArray0 = null;
      Object object0 = new Object();
      try { 
        base32_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte byte0 = (byte)37;
      base32_0.isInAlphabet((byte)37);
      base32_0.isInAlphabet((byte)37);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      int int0 = 709;
      BaseNCodec.Context baseNCodec_Context0 = null;
      base32_0.encodeAsString(byteArray0);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 709, 709, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)120;
      Base32 base32_0 = new Base32((-905), byteArray0, false, (byte)62);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      try { 
        base32_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base32 base32_0 = new Base32(917);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)1;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 9, (int) (byte) (-101), baseNCodec_Context0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      Base32 base32_0 = new Base32((-3293), byteArray0);
      byte[] byteArray1 = new byte[0];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray1, (-3293), 0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)20, 0, baseNCodec_Context1);
      int int0 = 0;
      base32_0.decode(byteArray0, (int) (byte)20, 0, baseNCodec_Context1);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (-3293), 6, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3293
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }
}
