* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-20
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 15950
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-176/build/classes
  - subjects/buggy-versions/Closure-176/lib/args4j.jar
  - subjects/buggy-versions/Closure-176/lib/guava.jar
  - subjects/buggy-versions/Closure-176/lib/json.jar
  - subjects/buggy-versions/Closure-176/lib/jsr305.jar
  - subjects/buggy-versions/Closure-176/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-176/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-176/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3073
* Using seed 2078482790
* Starting evolution
bbc usage percentage is: 20%
* Initial Number of Goals in DynaMOSA = 890 / 3073
[MASTER] 08:39:51.089 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 08:39:52.776 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 604s and 153 generations, 141548 statements, best individual has fitness: 2461.0
* Minimizing test suite
[MASTER] 08:51:15.979 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 16%
* Total number of goals: 619
* Number of covered goals: 101
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 26%
* Total number of goals: 793
* Number of covered goals: 209
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 11%
* Total number of goals: 836
* Number of covered goals: 89
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 14
* Number of covered goals: 6
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 26%
* Total number of goals: 793
* Number of covered goals: 207
* Generated 48 tests with total length 1298
* Resulting test suite's coverage: 39% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
[MASTER] 08:52:50.863 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:53:04.256 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:53:04.257 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ExploitAssigns exploitAssigns0 = new ExploitAssigns();
Logger logger0 = Logger.getGlobal();
LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
Compiler compiler0 = new Compiler(loggerErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "i%OZL>2@");
Node node1 = Node.newString("i%OZL>2@", 3375, 55);
Node node2 = new Node(2, node0, node1, node1, node1);
Node node3 = new Node(100, 4, 2);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
TightenTypes tightenTypes0 = new TightenTypes(compiler0);
JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
compiler0.getTopScope();
Scope scope0 = syntacticScopeCreator0.createScope(node2, (Scope) null);
JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element", jSTypeNative0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("ub1`Sl!`3C?#1_%");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("i%OZL>2@", codingConvention_AssertionFunctionSpec0, "Object#Element", codingConvention_AssertionFunctionSpec1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.FALSE;
TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, true);
typeInference0.createInitialEstimateLattice();
System.setCurrentTimeMillis(42);

[MASTER] 08:53:05.941 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:53:05.942 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ExploitAssigns exploitAssigns0 = new ExploitAssigns();
Logger logger0 = Logger.getGlobal();
LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
Compiler compiler0 = new Compiler(loggerErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "i%OZL>2@");
Node node1 = Node.newString("i%OZL>2@", 3375, 55);
Node node2 = new Node(2, node0, node1, node1, node1);
Node node3 = new Node(100, 4, 2);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
TightenTypes tightenTypes0 = new TightenTypes(compiler0);
JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
compiler0.getTopScope();
Scope scope0 = syntacticScopeCreator0.createScope(node2, (Scope) null);
JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element", jSTypeNative0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("ub1`Sl!`3C?#1_%");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("i%OZL>2@", codingConvention_AssertionFunctionSpec0, "Object#Element", codingConvention_AssertionFunctionSpec1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.FALSE;
TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, true);
typeInference0.createInitialEstimateLattice();
typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node3, (FlowScope) null);

[MASTER] 08:53:07.573 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:53:07.574 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ExploitAssigns exploitAssigns0 = new ExploitAssigns();
Logger logger0 = Logger.getGlobal();
LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
Compiler compiler0 = new Compiler(loggerErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "i%OZL>2@");
Node node1 = Node.newString("i%OZL>2@", 3375, 55);
Node node2 = new Node(2, node0, node1, node1, node1);
Node node3 = new Node(100, 4, 2);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
TightenTypes tightenTypes0 = new TightenTypes(compiler0);
JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
compiler0.getTopScope();
Scope scope0 = syntacticScopeCreator0.createScope(node2, (Scope) null);
JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element", jSTypeNative0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("ub1`Sl!`3C?#1_%");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("i%OZL>2@", codingConvention_AssertionFunctionSpec0, "Object#Element", codingConvention_AssertionFunctionSpec1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
typeInference0.flowThrough(node1, linkedFlowScope1);
typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node3, linkedFlowScope0);

[MASTER] 08:53:09.213 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:53:09.214 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ExploitAssigns exploitAssigns0 = new ExploitAssigns();
Logger logger0 = Logger.getGlobal();
LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
Compiler compiler0 = new Compiler(loggerErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "i%OZL>2@");
Node node1 = Node.newString("i%OZL>2@", 3375, 55);
Node node2 = new Node(2, node0, node1, node1, node1);
Node node3 = new Node(100, 4, 2);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
TightenTypes tightenTypes0 = new TightenTypes(compiler0);
JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
compiler0.getTopScope();
Scope scope0 = syntacticScopeCreator0.createScope(node2, (Scope) null);
JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element", jSTypeNative0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("ub1`Sl!`3C?#1_%");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("i%OZL>2@", codingConvention_AssertionFunctionSpec0, "Object#Element", codingConvention_AssertionFunctionSpec1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
System.setCurrentTimeMillis(42);
typeInference0.branchedFlowThrough(node3, flowScope0);

[MASTER] 08:53:10.978 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:53:10.979 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ExploitAssigns exploitAssigns0 = new ExploitAssigns();
Logger logger0 = Logger.getGlobal();
LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
Compiler compiler0 = new Compiler(loggerErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "i%OZL>2@");
Node node1 = Node.newString("i%OZL>2@", 3375, 55);
Node node2 = new Node(2, node0, node1, node1, node1);
Node node3 = new Node(100, 4, 2);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
TightenTypes tightenTypes0 = new TightenTypes(compiler0);
JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
compiler0.getTopScope();
Scope scope0 = syntacticScopeCreator0.createScope(node2, (Scope) null);
JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element", jSTypeNative0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("ub1`Sl`3C?#1_%");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("i%OZL>2@", codingConvention_AssertionFunctionSpec0, "Object#Element", codingConvention_AssertionFunctionSpec1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
typeInference0.flowThrough(node1, linkedFlowScope1);
typeInference0.createEntryLattice();
LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
typeInference0.branchedFlowThrough(node2, linkedFlowScope2);

[MASTER] 08:53:12.591 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:53:12.591 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ExploitAssigns exploitAssigns0 = new ExploitAssigns();
Logger logger0 = Logger.getGlobal();
LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
Compiler compiler0 = new Compiler(loggerErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "i%OZL>2@");
Node node1 = Node.newString("i%OZL>2@", 3375, 55);
Node node2 = new Node(2, node0, node1, node1, node1);
Node node3 = new Node(100, 4, 2);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
TightenTypes tightenTypes0 = new TightenTypes(compiler0);
JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
compiler0.getTopScope();
Scope scope0 = syntacticScopeCreator0.createScope(node2, (Scope) null);
JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element", jSTypeNative0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec(".");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("variable {0} is undeclared", codingConvention_AssertionFunctionSpec1, "prototype", codingConvention_AssertionFunctionSpec1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
typeInference1.flowThrough(node3, linkedFlowScope0);

* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-176/com.google.javascript.jscomp.TypeInference/BBC-F0-opt-20/tests/8
* Done!

* Computation finished
