/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:58:03 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSTypeNative;
import java.io.PrintStream;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^o`");
      ImmutableSortedMap.of("uiCQT^o`", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTNL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("'=:M");
      ImmutableSortedMap.of("'=:M", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTNL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
      // Undeclared exception!
      try { 
        TypeInference.getBooleanOutcomes(booleanLiteralSet0, (BooleanLiteralSet) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$10", jSTypeNative0);
      ImmutableSortedMap.of("d)4pBDd)#'Sb^uOM", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("", jSTypeNative0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0, "[|2H= PN7)", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = null;
      try {
        typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, (Scope) null, immutableSortedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^o`", jSTypeNative0);
      ImmutableSortedMap.of("d)4pBDd)#'Sb^uOM", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("iCQT^*!o`");
      ImmutableSortedMap.of("iCQT^*!o`", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("iCQT^*!o`", "JSC_INTNL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec((String) null);
      ImmutableSortedMap.of("uiCQT;v`", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTNL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^o`");
      ImmutableSortedMap.of("d)4pBDd)#'Sb^uOM", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTNL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^o`");
      ImmutableSortedMap.of("uiCQT^o`", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Scope scope0 = Scope.createGlobalScope(node0);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(129, "=E*bU_wyk1w?<?De1Rg");
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^o`");
      ImmutableSortedMap.of("e_'t*1QyEP%G%'", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^o`");
      ImmutableSortedMap.of("e_'*QyEPG%'", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec((String) null);
      ImmutableSortedMap.of("uiCQT^o`", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^o`");
      ImmutableSortedMap.of("uiCQT^o`", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTNL_ERROR_DATALOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("6zY$D5PU");
      ImmutableSortedMap.of("6zY$D5PU", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTNL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^or`");
      ImmutableSortedMap.of("uiCQT^or`", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("C'&-RixHl*@BZ=:%PQ");
      ImmutableSortedMap.of("C'&-RixHl*@BZ=:%PQ", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^o`");
      ImmutableSortedMap.of("uiCQT^o`", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("cm.google.javascript.jscomp.TypeInference$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^o`");
      ImmutableSortedMap.of("d)4pBDd)#'Sb^uOM", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("Org*We5G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQT^o`");
      ImmutableSortedMap.of("4OZhjrSd", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DTAFLOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("uiCQ^o`");
      ImmutableSortedMap.of("d)4pBDd)#'Sb^uOM", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_INTERNAL_ERROR_DATAFLOW");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$10", jSTypeNative0);
      ImmutableSortedMap.of("d)4pBDd)#'Sb^uOM", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$10");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
