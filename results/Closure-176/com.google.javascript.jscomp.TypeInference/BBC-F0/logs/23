* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 12728
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-176/build/classes
  - subjects/buggy-versions/Closure-176/lib/args4j.jar
  - subjects/buggy-versions/Closure-176/lib/guava.jar
  - subjects/buggy-versions/Closure-176/lib/json.jar
  - subjects/buggy-versions/Closure-176/lib/jsr305.jar
  - subjects/buggy-versions/Closure-176/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-176/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-176/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3073
* Using seed 3363810600
* Starting evolution
* Initial Number of Goals in DynaMOSA = 890 / 3073
[MASTER] 00:34:51.233 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 00:34:58.367 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 305s and 48 generations, 26005 statements, best individual has fitness: 2676.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 6%
* Total number of goals: 619
* Number of covered goals: 36
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 21%
* Total number of goals: 793
* Number of covered goals: 164
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 3%
* Total number of goals: 836
* Number of covered goals: 21
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 14
* Number of covered goals: 6
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 21%
* Total number of goals: 793
* Number of covered goals: 164
* Generated 9 tests with total length 86
* Resulting test suite's coverage: 35% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 2%
* Compiling and checking tests
[MASTER] 00:40:18.584 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:40:18.588 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = Node.newString(1, "");
Scope scope0 = Scope.createLatticeBottom(node0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("m{`T';SSZI}j9Yj`$f", codingConvention_AssertionFunctionSpec0, "", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
Scope scope1 = new Scope(scope0, node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope1, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 00:40:24.106 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:40:24.111 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = Node.newString(1, "");
Scope scope0 = Scope.createLatticeBottom(node0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("m{`T';SSZI}j9Yj`$f", codingConvention_AssertionFunctionSpec0, "", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
Scope scope1 = new Scope(scope0, node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope1, immutableMap0);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
assertNotNull(flowScope0);


[MASTER] 00:40:28.160 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:40:28.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = Node.newString(1, "");
Scope scope0 = Scope.createLatticeBottom(node0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("m{`T';SSZI}j9Yj`$f", codingConvention_AssertionFunctionSpec0, "", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
Scope scope1 = new Scope(scope0, node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope1, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 00:40:32.413 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:40:32.417 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = Node.newString(1, "");
Scope scope0 = Scope.createLatticeBottom(node0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("m{`T';SSZI}j9Yj`$f", codingConvention_AssertionFunctionSpec0, "", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
Scope scope1 = new Scope(scope0, node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope1, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
assertEquals(0, list0.size());


[MASTER] 00:40:47.415 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:40:47.423 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = Node.newString(1, "");
Scope scope0 = Scope.createLatticeBottom(node0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("m{`T';SSZI}j9Yj`$f", codingConvention_AssertionFunctionSpec0, "", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
Scope scope1 = new Scope(scope0, node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope1, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node0, flowScope0);

[MASTER] 00:40:50.632 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:40:50.634 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = Node.newString(1, "");
Scope scope0 = Scope.createLatticeBottom(node0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("m{`T';SSZI}j9Yj`$f", codingConvention_AssertionFunctionSpec0, "", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
Scope scope1 = new Scope(scope0, node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope1, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
typeInference0.branchedFlowThrough((Node) null, linkedFlowScope0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-176/com.google.javascript.jscomp.TypeInference/BBC-F0/tests/23
* Done!

* Computation finished
