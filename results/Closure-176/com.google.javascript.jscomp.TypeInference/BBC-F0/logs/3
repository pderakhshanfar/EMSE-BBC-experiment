* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 11627
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-176/build/classes
  - subjects/buggy-versions/Closure-176/lib/args4j.jar
  - subjects/buggy-versions/Closure-176/lib/guava.jar
  - subjects/buggy-versions/Closure-176/lib/json.jar
  - subjects/buggy-versions/Closure-176/lib/jsr305.jar
  - subjects/buggy-versions/Closure-176/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-176/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-176/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3073
* Using seed 2231188922
* Starting evolution
* Initial Number of Goals in DynaMOSA = 890 / 3073
[MASTER] 00:28:27.626 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 304s and 59 generations, 49224 statements, best individual has fitness: 2592.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 11%
* Total number of goals: 619
* Number of covered goals: 65
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 24%
* Total number of goals: 793
* Number of covered goals: 188
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 4%
* Total number of goals: 836
* Number of covered goals: 36
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 14
* Number of covered goals: 6
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 24%
* Total number of goals: 793
* Number of covered goals: 187
* Generated 24 tests with total length 266
* Resulting test suite's coverage: 36% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 2%
* Compiling and checking tests
[MASTER] 00:33:48.441 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:33:48.442 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newNumber(1.0, 132, 132);
Node node1 = new Node(33, node0, node0, node0, (-154), (-1));
Normalize.parseAndNormalizeTestCode(compiler0, "KRiTX>q{");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createLatticeBottom(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.flowThrough(node1, flowScope0);

[MASTER] 00:33:53.989 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:33:53.990 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newNumber(2199.62, 57, 57);
Node node1 = new Node(122, node0, node0, node0, 46, 122);
Normalize.parseAndNormalizeTestCode(compiler0, "KRiTX>q{");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createLatticeBottom(node1);
Node node2 = Node.newString(16, "Object#Key", 39, 30);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node2, linkedFlowScope0);

[MASTER] 00:33:58.619 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:33:58.621 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newNumber(2199.62, 57, 57);
Node node1 = new Node(122, node0, node0, node0, 46, 140);
Normalize.parseAndNormalizeTestCode(compiler0, "KRiTX>q{");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createLatticeBottom(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
List<FlowScope> list0 = typeInference0.branchedFlowThrough(node1, flowScope0);
assertEquals(0, list0.size());


[MASTER] 00:34:03.184 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:34:03.185 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newNumber(736.9661889828, 939, 3);
Node node1 = new Node(4095, node0, node0, node0, 43, 1353);
Node node2 = Normalize.parseAndNormalizeTestCode(compiler0, "3f$");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Node node3 = new Node(4, node2, node2);
Scope scope0 = Scope.createLatticeBottom(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createEntryLattice();
FlowScope flowScope1 = typeInference0.flowThrough(node3, flowScope0);
assertNotSame(flowScope1, flowScope0);


[MASTER] 00:34:12.401 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:34:12.402 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newNumber(1.0, 132, 132);
Node node1 = new Node(34, node0, node0, node0, 37, 47);
Normalize.parseAndNormalizeTestCode(compiler0, "KRiTX>q{");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createLatticeBottom(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 00:34:18.087 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:34:18.089 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newNumber(2199.62, 57, 57);
Node node1 = new Node(122, node0, node0, node0, 46, 122);
Normalize.parseAndNormalizeTestCode(compiler0, "DKRiTX>q{");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createLatticeBottom(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node2 = Node.newString("kmSj<&`ZyFM=", 57, 30);
FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
assertNotSame(flowScope1, flowScope0);


[MASTER] 00:34:22.125 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:34:22.125 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newNumber(2199.62, 57, 57);
Node node1 = new Node(42, node0, node0, node0, 46, 42);
Normalize.parseAndNormalizeTestCode(compiler0, "KRiTX>q{");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createLatticeBottom(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createEntryLattice();
FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
assertNotSame(flowScope1, flowScope0);


[MASTER] 00:34:26.632 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 00:34:26.634 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newNumber(1.0, 120, 120);
Node node1 = new Node(51, node0, node0, node0, 12, 47);
Node node2 = Normalize.parseAndNormalizeTestCode(compiler0, "KRiTX>q{");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Node node3 = new Node(43, node2, node1);
Scope scope0 = Scope.createGlobalScope(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createEntryLattice();
FlowScope flowScope1 = typeInference0.flowThrough(node3, flowScope0);
assertNotSame(flowScope1, flowScope0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-176/com.google.javascript.jscomp.TypeInference/BBC-F0/tests/3
* Done!

* Computation finished
