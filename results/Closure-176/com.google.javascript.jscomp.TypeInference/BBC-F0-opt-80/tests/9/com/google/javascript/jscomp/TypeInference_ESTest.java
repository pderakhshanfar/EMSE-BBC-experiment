/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 08:52:01 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-19), (-19));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = new Node(1);
      Node node2 = new Node(100, node0, node1, 2977, (-4767));
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Cannot overwrite existing ClassShutter object", "com.google.javascript.jscomp.TypeInference", 1, 1);
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      FlowScope flowScope1 = typeInference0.flowThrough((Node) null, flowScope0);
      assertSame(flowScope0, flowScope1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.TRUE;
      // Undeclared exception!
      try { 
        TypeInference.getBooleanOutcomes(booleanLiteralSet0, (BooleanLiteralSet) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      TypeInference typeInference0 = null;
      try {
        typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", 103, 103);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(38, node0, 29, 287);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 29 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "Object#Key", 2219, 2219);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Named type with empty name component");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Not declared as a constructor", codingConvention_AssertionFunctionSpec0, "Not declared as a type name", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(100, "D$fx[RaGnG");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", 87, 87);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      Node node1 = new Node(101);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-4), (-4));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(33, "gmKIXFcm+");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(119, "");
      Node node2 = new Node(101, node1, node1);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      linkedFlowScope0.inferSlotType("", jSType0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PARAM_LIST : (Object#Element|null|undefined) does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(0, "Not declared as a type name");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(155, "");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CAST  does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      Node node1 = Node.newString(153, ":");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LABEL_NAME : does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(151, node0, 53, 3);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 151
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("LvYC9FQn ", "LvYC9FQn ", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(150, "Not declared as a type name");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 150
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", 87, 87);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      Node node1 = Node.newString(149, "<4hTy");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CONST <4hTy does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(148, "Not declared as a type name");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SETTER_DEF Not declared as a type name does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      Node node1 = Node.newString(147, "");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GETTER_DEF  does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5771, 5771);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope0 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, hashMap0);
      Node node1 = new Node(146, node0, 691, 3790);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 146
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(145);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 145
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5079);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(144, "Not declared as a type name");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 144
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = new Node(142);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 142
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", (String) null, 5760, 5765);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(140, "B .%");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 140
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(139, "8k#~C::z:KYf:v|f>");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 139
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(138, "Object#Key");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 138
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(135, "");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 135
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(133, "Object#Element");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 133
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      Node node1 = Node.newString(132, "mDB{7Fw@Z{([_?R");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SCRIPT mDB{7Fw@Z{([_?R does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = new Node(131);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 131
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = new Node(130);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-4), (-4));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      Node node1 = Node.newString(129, "com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 129
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", 100, 100);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(128, "Function literal argument refers to undefined this argument");
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 128
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(127, "");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 127
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(126, "Named type with empty name component");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LABEL Named type with empty name component does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(125, "com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BLOCK com.google.javascript.jscomp.TypeInference$BooleanOutcomePair does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = new Node(124);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EMPTY does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", 100, 100);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(123);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 123
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-56), (-56));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(122, "Not declared as a type name");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // VOID Not declared as a type name does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(120, "Named type with empty name component");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(118, "Unknown class name");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // VAR Unknown class name does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      Node node1 = Node.newString(117, "");
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CONTINUE  does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", 134, 134);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createInitialScope(node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = Node.newString(114, "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DO JSC_FUNCTION_LITERAL_UNDEFINED_THIS does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(113, "Object#Element");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WHILE Object#Element does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(112, "Object#Element");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DEFAULT_CASE Object#Element does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-19), (-19));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = new Node(110);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(109, "");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 109
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(107, "Not declared as a constructor");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 107
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-19), (-19));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = new Node(104);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 104
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, hashMap0);
      Node node1 = new Node(102);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      FlowScope flowScope1 = linkedFlowScope_FlowScopeJoinOp0.apply(flowScope0, flowScope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // INC : number does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(98, "Object#Key");
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(93, "Object#Key");
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString("Unknown class name");
      Node node2 = StatementFusion.fuseExpressionIntoExpression(node0, node1);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // COMMA : ? does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(81, "");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 81
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      Node node1 = Node.newString(72, "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 72
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(57, "Object#Element");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", 78, 78);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      Node node1 = Node.newString(56, "FZ5h\"a&jqlcB3y1N");
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("com.google.javascript.jscomp.TypeInference$1", "com.google.javascript.jscomp.TypeInference$1", 118, 118);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createInitialScope(node0);
      Node node1 = Node.newString(55, "Object#Element");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(54, "Not declared as a constructor", 119, 151);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", 4218, 4218);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createInitialScope(node0);
      Node node1 = Node.newString(53, "Unknown class name", 1, 47);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      Node node1 = new Node(52);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // INSTANCEOF : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5771, 5771);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(51, "B|x:iWmMN$!; -`dtn");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IN B|x:iWmMN$!; -`dtn : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5765, 5765);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(50, "");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(49, "wRz].");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // THROW wRz]. does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(48, "Object#Key");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Vy\">C", "com.google.javascript.jscomp.TypeInference$2", (-36), 113);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = (JSType) namedType0;
      jSTypeArray0[1] = (JSType) namedType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = (JSType) namedType0;
      jSTypeArray0[4] = (JSType) namedType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = Node.newString(47, "Not declared as a constructor");
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // REGEXP Not declared as a constructor does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(46, "");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SHNE  : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", 78, 78);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(43, "Not declared as a type name");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FALSE Not declared as a type name does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5765, 5765);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope0 = Scope.createGlobalScope(node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(42, "%");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // THIS % does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newNumber((double) 36);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NUMBER 36.0 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5771, 5771);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) namedType0;
      jSTypeArray0[1] = (JSType) namedType0;
      jSTypeArray0[2] = (JSType) namedType0;
      jSTypeArray0[3] = (JSType) namedType0;
      jSTypeArray0[4] = (JSType) namedType0;
      jSTypeArray0[5] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope0 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(37, "");
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, hashMap0);
      // Undeclared exception!
      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", 118, 118);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      Node node1 = new Node(36);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(32, "P(Pv3aA");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TYPEOF P(Pv3aA : string does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, false);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 4218, 111);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createInitialScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      Node node1 = new Node(31);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DELPROP : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      Node node1 = Node.newString(30, "|]/Wj[");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      Node node1 = new Node(29, node0, (-36), 57);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NEG : number does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("com.google.javascript.jscomp.TypeInference$1", "com.google.javascript.jscomp.TypeInference$1", 118, 118);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      Node node1 = new Node(22);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SUB : number does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(16, "Object#Element");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GT Object#Element : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType(".#5Yj,O<h@WerLq|", (String) null, (-3422), (-3422));
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) namedType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = (JSType) namedType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = (JSType) namedType0;
      jSTypeArray0[5] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      Node node1 = new Node(15);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LE : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(13, "`H");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NE `H : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(12, "prototype");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EQ prototype : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = new Node(8);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("", "", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSTypeArray0[0], "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = Node.newString(5, "`H");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 5
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-36), (-36));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(4, "Not declared as a constructor");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RETURN Not declared as a constructor does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_EX;
      controlFlowGraph0.connect((Node) null, controlFlowGraph_Branch0, (Node) null);
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Cannot overwrite existing ClassShutter object", "com.google.javascript.jscomp.TypeInference", 12, 12);
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      List<FlowScope> list0 = typeInference0.branchedFlowThrough((Node) null, flowScope0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_FALSE;
      controlFlowGraph0.connect((Node) null, controlFlowGraph_Branch0, (Node) null);
      NamedType namedType0 = jSTypeRegistry0.createNamedType("com.google.javascript.jscomp.TypeInference$1", "com.google.javascript.jscomp.TypeInference$1", 118, 118);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough((Node) null, flowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
      controlFlowGraph0.connect((Node) null, controlFlowGraph_Branch0, (Node) null);
      NamedType namedType0 = jSTypeRegistry0.createNamedType("com.google.javascript.jscomp.TypeInference$1", "com.google.javascript.jscomp.TypeInference$1", 118, 118);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough((Node) null, flowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("com.google.javascript.jscomp.TypeInference$1", "com.google.javascript.jscomp.TypeInference$1", 118, 118);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      List<FlowScope> list0 = typeInference0.branchedFlowThrough((Node) null, flowScope0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Scope scope0 = Scope.createGlobalScope((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-59), (-59));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = new Scope(scope0, node0);
      Node node1 = new Node(30, node0, 4095, (-1134));
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Key", "Object#Key", 5760, 5760);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(namedType0, "Object#Element");
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(95, "Object#Element");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ASSIGN_MUL Object#Element : number does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("Object#Element", "Object#Element", (-19), (-19));
      jSTypeArray0[0] = (JSType) namedType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(namedType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, hashMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node1 = new Node(33, node0, 145, 151);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST : (Object#Element|undefined) is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }
}
