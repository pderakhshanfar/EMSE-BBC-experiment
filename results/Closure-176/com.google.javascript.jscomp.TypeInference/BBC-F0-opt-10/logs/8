* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-10
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 5423
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-176/build/classes
  - subjects/buggy-versions/Closure-176/lib/args4j.jar
  - subjects/buggy-versions/Closure-176/lib/guava.jar
  - subjects/buggy-versions/Closure-176/lib/json.jar
  - subjects/buggy-versions/Closure-176/lib/jsr305.jar
  - subjects/buggy-versions/Closure-176/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-176/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-176/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3073
* Using seed 1901764926
* Starting evolution
bbc usage percentage is: 10%
* Initial Number of Goals in DynaMOSA = 890 / 3073
[MASTER] 08:39:45.866 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 08:41:26.605 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 08:41:30.896 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 602s and 957 generations, 680768 statements, best individual has fitness: 1967.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 37%
* Total number of goals: 619
* Number of covered goals: 228
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 44%
* Total number of goals: 793
* Number of covered goals: 348
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 22%
* Total number of goals: 836
* Number of covered goals: 181
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 43%
* Total number of goals: 793
* Number of covered goals: 344
* Generated 138 tests with total length 1599
* Resulting test suite's coverage: 48% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
[MASTER] 08:51:40.908 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:51:40.917 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:51:40.918 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Node node0 = compiler0.parseTestCode("Object#Element");
Node node1 = new Node(29, node0, 1947, 2);
Scope scope0 = Scope.createLatticeBottom(node1);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 08:51:43.572 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:51:43.572 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Logger logger0 = Logger.getGlobal();
LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
Compiler compiler0 = new Compiler(loggerErrorManager0);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(googleCodingConvention0);
CodingConventions.Proxy codingConventions_Proxy0 = new CodingConventions.Proxy(googleCodingConvention0);
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(codingConventions_Proxy0, jSTypeRegistry0);
Node node0 = compiler0.parseTestCode("Object#Element");
Node node1 = new Node(4096, node0, 16, 16);
Scope scope0 = Scope.createLatticeBottom(node1);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 08:51:45.627 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:51:45.628 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Logger logger0 = Logger.getGlobal();
LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
Compiler compiler0 = new Compiler(loggerErrorManager0);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(googleCodingConvention0);
CodingConventions.Proxy codingConventions_Proxy0 = new CodingConventions.Proxy(googleCodingConvention0);
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(codingConventions_Proxy0, jSTypeRegistry0);
Node node0 = compiler0.parseTestCode("Object#Element");
Node node1 = new Node(52, node0, node0, node0, node0);
Scope scope0 = Scope.createLatticeBottom(node1);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
controlFlowGraph0.connect(node0, controlFlowGraph_Branch0, node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node0, linkedFlowScope0);

[MASTER] 08:51:47.639 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:51:47.641 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Node node0 = compiler0.parseTestCode("Object#Key");
Node node1 = new Node(136, node0, 101, 57);
Scope scope0 = Scope.createLatticeBottom(node1);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.UNCOND;
controlFlowGraph0.connectToImplicitReturn(node1, controlFlowGraph_Branch0);
List<FlowScope> list0 = typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
assertFalse(list0.isEmpty());


[MASTER] 08:51:49.488 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:51:49.488 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Logger logger0 = Tracer.logger;
LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
Compiler compiler0 = new Compiler(loggerErrorManager0);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(googleCodingConvention0);
CodingConventions.Proxy codingConventions_Proxy0 = new CodingConventions.Proxy(googleCodingConvention0);
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Node node0 = compiler0.parseTestCode("N)<*ub2^J8D");
Node node1 = new Node(4, node0, node0, node0, node0);
Scope scope0 = Scope.createLatticeBottom(node1);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
List<FlowScope> list0 = typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
assertEquals(0, list0.size());


[MASTER] 08:51:55.588 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:51:55.588 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Node node0 = compiler0.parseTestCode("Object#Element");
Node node1 = new Node(8, node0, 3236, 125);
Scope scope0 = Scope.createLatticeBottom(node1);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 08:52:02.027 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:52:02.027 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Node node0 = compiler0.parseTestCode("");
Node node1 = new Node(17, node0, 138, 57);
Scope scope0 = Scope.createLatticeBottom(node1);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, true);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
List<FlowScope> list0 = typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
assertTrue(list0.isEmpty());


[MASTER] 08:52:19.635 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 08:52:19.636 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Node node0 = compiler0.parseTestCode("[D~x{mqjyju-p`");
Node node1 = new Node(53, node0, node0, node0, (-97), 1);
Scope scope0 = Scope.createLatticeBottom(node1);
Node node2 = Node.newNumber((double) 43, (-2793), 3967);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node2, linkedFlowScope0);

* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-176/com.google.javascript.jscomp.TypeInference/BBC-F0-opt-10/tests/8
* Done!

* Computation finished
[MASTER] 08:52:20.617 [Thread-3] ERROR ExternalProcessGroupHandler - Exception while reading output of client process. Stream closed
