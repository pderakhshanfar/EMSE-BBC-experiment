/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:45:07 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.File;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      // Undeclared exception!
      try { 
        TypeInference.getBooleanOutcomes((BooleanLiteralSet) null, booleanLiteralSet0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertNotNull(compiler0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(38, node0, (-3027), (-123));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertEquals(38, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertTrue(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertEquals(38, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertTrue(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertEquals(38, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertTrue(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertEquals(38, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertTrue(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      // Undeclared exception!
      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      
      Node node1 = new Node(1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough((Node) null, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Logger logger0 = Logger.getLogger("");
      assertNotNull(logger0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("", logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = null;
      try {
        typeInference0 = new TypeInference(compiler0, (ControlFlowGraph<Node>) null, (ReverseAbstractInterpreter) null, (Scope) null, immutableSortedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DataFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$,0~#!.feko-");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(52, node0, 49, 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isObjectLit());
      assertEquals(52, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isAnd());
      
      Scope scope0 = Scope.createGlobalScope(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isObjectLit());
      assertEquals(52, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isObjectLit());
      assertEquals(52, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isObjectLit());
      assertEquals(52, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isObjectLit());
      assertEquals(52, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      
      Node node1 = new Node(17, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertEquals(17, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertEquals(17, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertEquals(17, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertEquals(17, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertEquals(17, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "com.google.javascript.jscomp.LinkedFlowScope");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(37, node0, 43, 245);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertEquals(245, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertEquals(37, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertEquals(176373, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertTrue(node1.isCall());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertEquals(245, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertEquals(37, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertEquals(176373, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertTrue(node1.isCall());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertEquals(245, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertEquals(37, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertEquals(176373, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertTrue(node1.isCall());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertEquals(245, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertEquals(37, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertEquals(176373, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertTrue(node1.isCall());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertEquals(245, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertEquals(37, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertEquals(176373, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertTrue(node1.isCall());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("unction iteral argument reers to undefined@this argumeot");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      
      Node node1 = new Node(46, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertEquals(46, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertEquals(46, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertEquals(46, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertEquals(46, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertEquals(46, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertEquals(46, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      
      Node node1 = new Node(4, node0, node0, node0, (-4331), 123);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertTrue(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertEquals(4, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      
      Scope scope0 = Scope.createLatticeBottom(node0);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      Scope scope1 = Scope.createLatticeBottom(node1);
      assertNotNull(scope1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(scope1, scope0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertTrue(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertEquals(4, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertTrue(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertEquals(4, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope1);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertTrue(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertEquals(4, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
      assertSame(booleanLiteralSet1, booleanLiteralSet0);
      assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("j0");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.exists());
      assertEquals("j0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("j0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("j0", sourceFile0.toString());
      assertEquals("j0", sourceFile0.getName());
      assertEquals("j0", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.exists());
      assertEquals("j0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("j0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("j0", sourceFile0.toString());
      assertEquals("j0", sourceFile0.getName());
      assertEquals("j0", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(mockFile0.exists());
      assertEquals("j0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("j0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("j0", sourceFile0.toString());
      assertEquals("j0", sourceFile0.getName());
      assertEquals("j0", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      
      Node node1 = new Node(29, node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertFalse(mockFile0.exists());
      assertEquals("j0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("j0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("j0", sourceFile0.toString());
      assertEquals("j0", sourceFile0.getName());
      assertEquals("j0", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertEquals(29, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isHook());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      
      Node node2 = new Node(30, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(mockFile0.exists());
      assertEquals("j0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("j0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("j0", sourceFile0.toString());
      assertEquals("j0", sourceFile0.getName());
      assertEquals("j0", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertEquals(29, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isHook());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertTrue(node2.isNew());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAdd());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDo());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertEquals(30, node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isArrayLit());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node2, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(mockFile0.exists());
      assertEquals("j0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("j0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("j0", sourceFile0.toString());
      assertEquals("j0", sourceFile0.getName());
      assertEquals("j0", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertEquals(29, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isHook());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertTrue(node2.isNew());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAdd());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDo());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertEquals(30, node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isArrayLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      Scope scope0 = Scope.createLatticeBottom(node2);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(mockFile0.exists());
      assertEquals("j0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("j0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("j0", sourceFile0.toString());
      assertEquals("j0", sourceFile0.getName());
      assertEquals("j0", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertEquals(29, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isHook());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertTrue(node2.isNew());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAdd());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDo());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertEquals(30, node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isArrayLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(mockFile0.exists());
      assertEquals("j0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("j0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("j0", sourceFile0.toString());
      assertEquals("j0", sourceFile0.getName());
      assertEquals("j0", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertEquals(29, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isHook());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertTrue(node2.isNew());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAdd());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDo());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertEquals(30, node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isArrayLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(mockFile0.exists());
      assertEquals("j0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("j0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("j0", sourceFile0.toString());
      assertEquals("j0", sourceFile0.getName());
      assertEquals("j0", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertEquals(29, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isHook());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertTrue(node2.isNew());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAdd());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDo());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertEquals(30, node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isArrayLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
      assertNotNull(list0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(mockFile0.exists());
      assertEquals("j0", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("j0", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("j0", sourceFile0.toString());
      assertEquals("j0", sourceFile0.getName());
      assertEquals("j0", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertEquals(29, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isHook());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertTrue(node2.isNew());
      assertFalse(node2.isThrow());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.LinkedFlowScope", "com.google.javascript.jscomp.LinkedFlowScope");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      
      Node node1 = new Node(2, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCatch());
      assertEquals(2, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      assertNotNull(exploitAssigns0);
      
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCatch());
      assertEquals(2, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNumber());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isHook());
      assertFalse(node2.isReturn());
      assertEquals(2, node2.getType());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCase());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node2, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCatch());
      assertEquals(2, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNumber());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isHook());
      assertFalse(node2.isReturn());
      assertEquals(2, node2.getType());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCase());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      Scope scope0 = Scope.createLatticeBottom(node2);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCatch());
      assertEquals(2, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNumber());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isHook());
      assertFalse(node2.isReturn());
      assertEquals(2, node2.getType());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCase());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCatch());
      assertEquals(2, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNumber());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isHook());
      assertFalse(node2.isReturn());
      assertEquals(2, node2.getType());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCase());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCatch());
      assertEquals(2, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNumber());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isHook());
      assertFalse(node2.isReturn());
      assertEquals(2, node2.getType());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCase());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
      assertNotNull(list0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCatch());
      assertEquals(2, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNumber());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isHook());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, (Charset) null);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      
      Node node1 = new Node(155, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertEquals(155, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertEquals(155, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertEquals(155, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertEquals(155, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertEquals(155, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertEquals(155, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("G?BGvUykD+Of+aFa", "G?BGvUykD+Of+aFa");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(152, node0, 16, 129);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertEquals(65665, node1.getSourcePosition());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertEquals(152, node1.getType());
      assertFalse(node1.isFalse());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isFunction());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertEquals(65665, node1.getSourcePosition());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertEquals(152, node1.getType());
      assertFalse(node1.isFalse());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertEquals(65665, node1.getSourcePosition());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertEquals(152, node1.getType());
      assertFalse(node1.isFalse());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertEquals(65665, node1.getSourcePosition());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertEquals(152, node1.getType());
      assertFalse(node1.isFalse());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DEBUGGER 16 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(150, node0, 1, 138);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node1.isSetterDef());
      assertEquals(138, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertEquals(4234, node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getLineno());
      assertEquals(150, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node1.isSetterDef());
      assertEquals(138, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertEquals(4234, node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getLineno());
      assertEquals(150, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isSetterDef());
      assertEquals(138, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertEquals(4234, node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getLineno());
      assertEquals(150, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node1.isSetterDef());
      assertEquals(138, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertEquals(4234, node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getLineno());
      assertEquals(150, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isSetterDef());
      assertEquals(138, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertEquals(4234, node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getLineno());
      assertEquals(150, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      Node node1 = new Node(149, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCall());
      assertEquals(149, node1.getType());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCall());
      assertEquals(149, node1.getType());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCall());
      assertEquals(149, node1.getType());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCall());
      assertEquals(149, node1.getType());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CONST does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      
      Node node1 = new Node(148, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertEquals(148, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertEquals(148, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertEquals(148, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertEquals(148, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertEquals(148, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertEquals(148, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, (Charset) null);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      
      Node node1 = new Node(147, node0, node0, node0, 52, 8);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertTrue(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(213000, node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertEquals(147, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertEquals(8, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals(52, node1.getLineno());
      assertFalse(node1.isString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertTrue(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(213000, node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertEquals(147, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertEquals(8, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals(52, node1.getLineno());
      assertFalse(node1.isString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertTrue(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(213000, node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertEquals(147, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertEquals(8, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals(52, node1.getLineno());
      assertFalse(node1.isString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertTrue(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(213000, node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertEquals(147, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertEquals(8, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals(52, node1.getLineno());
      assertFalse(node1.isString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GETTER_DEF 52 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(146, node0, 51, 2695);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertEquals(146, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertEquals(211591, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals(2695, node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertEquals(146, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertEquals(211591, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals(2695, node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertEquals(146, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertEquals(211591, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals(2695, node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertEquals(146, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertEquals(211591, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals(2695, node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertEquals(146, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertEquals(211591, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals(2695, node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(145, node0, (-1283), 50);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals(145, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals(145, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals(145, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals(145, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals(145, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(144, node0, 644, (-1305));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals(144, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals(144, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals(144, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals(144, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals(144, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(143, node0, 135, 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertEquals(143, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertEquals(143, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertEquals(143, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertEquals(143, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertEquals(143, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      Node node1 = new Node(121, node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertEquals(121, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node2 = new Node(138, node1, 1, 38);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertEquals(121, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node2.isIn());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertFalse(node2.isArrayLit());
      assertEquals(4134, node2.getSourcePosition());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCall());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isName());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(138, node2.getType());
      assertFalse(node2.isReturn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCast());
      assertFalse(node2.isParamList());
      assertEquals(38, node2.getCharno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isTry());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertEquals(121, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertEquals(121, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      assertNotNull(linkedFlowScope0);
      
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertEquals(121, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node2.isIn());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertFalse(node2.isArrayLit());
      assertEquals(4134, node2.getSourcePosition());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCall());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isName());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(138, node2.getType());
      assertFalse(node2.isReturn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCast());
      assertFalse(node2.isParamList());
      assertEquals(38, node2.getCharno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isTry());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.LinkedFlowScope", "com.google.javascript.jscomp.LinkedFlowScope");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      
      Node node1 = new Node(2, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals(2, node1.getType());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals(2, node1.getType());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals(2, node1.getType());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node2 = new Node(136, node1, 2, (-2503));
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals(2, node1.getType());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isCatch());
      assertFalse(node2.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isVar());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isNew());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isBreak());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isThrow());
      assertFalse(node2.isOr());
      assertFalse(node2.isInc());
      assertEquals(136, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals(2, node1.getType());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", mockFile0.toString());
      assertEquals("com.google.javascript.jscomp.LinkedFlowScope", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getName());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.toString());
      assertEquals("/experiment/com.google.javascript.jscomp.LinkedFlowScope/com.google.javascript.jscomp.LinkedFlowScope", sourceFile0.getOriginalPath());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertEquals(2, node1.getType());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 136
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("unction iteral argument reers to undefined@this argumeot");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Node node1 = new Node(134, node0, (-1284), (-2151));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isStringKey());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(134, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      
      Scope scope0 = Scope.createLatticeBottom(node0);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Scope scope1 = Scope.createLatticeBottom(node1);
      assertNotNull(scope1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(scope1, scope0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isStringKey());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(134, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isStringKey());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(134, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope1);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 134
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("unction iteral argument reers to undefined@this argumeot");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      
      Node node1 = new Node(133, node0, 42, 39);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(42, node1.getLineno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(172071, node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertEquals(133, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      assertNotNull(exploitAssigns0);
      
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(42, node1.getLineno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(172071, node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertEquals(133, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isBreak());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertEquals(42, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCatch());
      assertEquals(39, node2.getCharno());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNumber());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.isOr());
      assertEquals(172071, node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertEquals(133, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node2, true, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(42, node1.getLineno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(172071, node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertEquals(133, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isBreak());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertEquals(42, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCatch());
      assertEquals(39, node2.getCharno());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNumber());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.isOr());
      assertEquals(172071, node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertEquals(133, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      Scope scope0 = Scope.createLatticeBottom(node2);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(42, node1.getLineno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(172071, node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertEquals(133, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isBreak());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertEquals(42, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCatch());
      assertEquals(39, node2.getCharno());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNumber());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.isOr());
      assertEquals(172071, node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertEquals(133, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(42, node1.getLineno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(172071, node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertEquals(133, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isBreak());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertEquals(42, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCatch());
      assertEquals(39, node2.getCharno());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNumber());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.isOr());
      assertEquals(172071, node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertEquals(133, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(42, node1.getLineno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(172071, node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertEquals(133, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isBreak());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertEquals(42, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCatch());
      assertEquals(39, node2.getCharno());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNumber());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.isOr());
      assertEquals(172071, node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertEquals(133, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
      assertNotNull(list0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(42, node1.getLineno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(172071, node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertEquals(133, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isBreak());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertEquals(42, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isIn());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("unction iteral argument reers to undefined@this argumeot");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      
      Node node1 = new Node(128, node0, node0, node0, 56, 48);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isNot());
      assertEquals(128, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(1, node1.getChildCount());
      assertEquals(48, node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertEquals(229424, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isNot());
      assertEquals(128, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(1, node1.getChildCount());
      assertEquals(48, node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertEquals(229424, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isNot());
      assertEquals(128, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(1, node1.getChildCount());
      assertEquals(48, node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertEquals(229424, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isNot());
      assertEquals(128, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(1, node1.getChildCount());
      assertEquals(48, node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertEquals(229424, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 128
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("G?BGvUykD+Of+aFa", "G?BGvUykD+Of+aFa");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(127, node0, 16, 129);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(65665, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertEquals(127, node1.getType());
      assertFalse(node1.isParamList());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(65665, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertEquals(127, node1.getType());
      assertFalse(node1.isParamList());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(65665, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertEquals(127, node1.getType());
      assertFalse(node1.isParamList());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/G?BGvUykD+Of+aFa", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("G?BGvUykD+Of+aFa", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getName());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.getOriginalPath());
      assertEquals("/experiment/G?BGvUykD+Of+aFa/G?BGvUykD+Of+aFa", sourceFile0.toString());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(65665, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertEquals(127, node1.getType());
      assertFalse(node1.isParamList());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 127
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(126, node0, 135, 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(126, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(126, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(126, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(126, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LABEL 135 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5B^}@KIC//", "X^");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("X^", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/5B^}@KIC/X^", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/5B^}@KIC", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getName());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.toString());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("X^", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/5B^}@KIC/X^", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/5B^}@KIC", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getName());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.toString());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("X^", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/5B^}@KIC/X^", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/5B^}@KIC", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getName());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.toString());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("X^", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/5B^}@KIC/X^", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/5B^}@KIC", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getName());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.toString());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(125, node0, 16, 8);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("X^", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/5B^}@KIC/X^", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/5B^}@KIC", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getName());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.toString());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertEquals(65544, node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertEquals(125, node1.getType());
      assertFalse(node1.isParamList());
      assertEquals(8, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertTrue(node1.isBlock());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("X^", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/5B^}@KIC/X^", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/5B^}@KIC", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getName());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.toString());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertEquals(65544, node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertEquals(125, node1.getType());
      assertFalse(node1.isParamList());
      assertEquals(8, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertTrue(node1.isBlock());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("X^", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/5B^}@KIC/X^", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/5B^}@KIC", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getName());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.toString());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertEquals(65544, node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertEquals(125, node1.getType());
      assertFalse(node1.isParamList());
      assertEquals(8, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertTrue(node1.isBlock());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("X^", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/5B^}@KIC/X^", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/5B^}@KIC", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getName());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.toString());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertEquals(65544, node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertEquals(125, node1.getType());
      assertFalse(node1.isParamList());
      assertEquals(8, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertTrue(node1.isBlock());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("X^", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/5B^}@KIC/X^", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/5B^}@KIC", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getName());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.toString());
      assertEquals("/experiment/5B^}@KIC/X^", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertEquals(65544, node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertEquals(125, node1.getType());
      assertFalse(node1.isParamList());
      assertEquals(8, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertTrue(node1.isBlock());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      
      Node node1 = new Node(124, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isNE());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertEquals(124, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertTrue(node1.isEmpty());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isNE());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertEquals(124, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertTrue(node1.isEmpty());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isNE());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertEquals(124, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertTrue(node1.isEmpty());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      assertNotNull(linkedFlowScope0);
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isNE());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertEquals(124, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertTrue(node1.isEmpty());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(123, node0, 51, 2695);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals(211591, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(2695, node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(123, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.isVar());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals(211591, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(2695, node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(123, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.isVar());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals(211591, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(2695, node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(123, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.isVar());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals(211591, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(2695, node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(123, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.isVar());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals(211591, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(2695, node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(123, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.isVar());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(121, node0, 4095, (-159));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertEquals(121, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertEquals(121, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertEquals(121, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      assertNotNull(linkedFlowScope0);
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertEquals(121, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(119, node0, 4, (-2179));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertTrue(node1.isWith());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertEquals(119, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertTrue(node1.isWith());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertEquals(119, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertTrue(node1.isWith());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertEquals(119, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertTrue(node1.isWith());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertEquals(119, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WITH does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(118, node0, 3, 129);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isVar());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(3, node1.getLineno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(12417, node1.getSourcePosition());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isEmpty());
      assertEquals(118, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isVar());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(3, node1.getLineno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(12417, node1.getSourcePosition());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isEmpty());
      assertEquals(118, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isVar());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(3, node1.getLineno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(12417, node1.getSourcePosition());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isEmpty());
      assertEquals(118, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isVar());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(3, node1.getLineno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(12417, node1.getSourcePosition());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isEmpty());
      assertEquals(118, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isVar());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(3, node1.getLineno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(12417, node1.getSourcePosition());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isEmpty());
      assertEquals(118, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertEquals(129, node1.getCharno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Node node1 = new Node(110, node0, 2, 49);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertTrue(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertEquals(110, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWhile());
      assertEquals(8241, node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertTrue(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertEquals(110, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWhile());
      assertEquals(8241, node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertTrue(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertEquals(110, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWhile());
      assertEquals(8241, node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertTrue(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertEquals(110, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWhile());
      assertEquals(8241, node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SWITCH 2 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      
      Node node1 = new Node(36, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertEquals(36, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertEquals(36, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertEquals(36, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertEquals(36, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      Node node2 = new Node(108);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isVar());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals(108, node2.getType());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isName());
      assertFalse(node2.isString());
      assertFalse(node2.isNull());
      assertTrue(node2.isIf());
      assertFalse(node2.isOr());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IF does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$,0~#!.feko-");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(52, node0, 49, 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertEquals(52, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isBlock());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      
      Scope scope0 = Scope.createGlobalScope(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertEquals(52, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isBlock());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertEquals(52, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isBlock());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertEquals(52, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isBlock());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      Node node2 = Node.newString(107, "$,0~#!.feko-", 32, 3562);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertEquals(32, node2.getLineno());
      assertFalse(node2.isVoid());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertEquals(107, node2.getType());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isWith());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertEquals(134634, node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertEquals(3562, node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertEquals(52, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isBlock());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertEquals(32, node2.getLineno());
      assertFalse(node2.isVoid());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertEquals(107, node2.getType());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isWith());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertEquals(134634, node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertEquals(3562, node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Node node1 = new Node(106, node0, 32, 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertEquals(106, node1.getType());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertEquals(131084, node1.getSourcePosition());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(32, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      
      Scope scope0 = Scope.createLatticeBottom(node0);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotSame(node0, node1);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Scope scope1 = Scope.createLatticeBottom(node1);
      assertNotNull(scope1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(scope1, scope0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertEquals(106, node1.getType());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertEquals(131084, node1.getSourcePosition());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(32, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertEquals(106, node1.getType());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertEquals(131084, node1.getSourcePosition());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(32, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope1);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 106
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(96, node0, 135, 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCast());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(96, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCast());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(96, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCast());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(96, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCast());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(96, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(mockFile0.exists());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCast());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(96, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(93, node0, 135, 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertEquals(93, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertEquals(93, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(93, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertEquals(93, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      // Undeclared exception!
      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("u");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals("u", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("u", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("u", sourceFile0.getOriginalPath());
      assertEquals("u", sourceFile0.toString());
      assertEquals("u", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals("u", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("u", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("u", sourceFile0.getOriginalPath());
      assertEquals("u", sourceFile0.toString());
      assertEquals("u", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals("u", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("u", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("u", sourceFile0.getOriginalPath());
      assertEquals("u", sourceFile0.toString());
      assertEquals("u", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals("u", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("u", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("u", sourceFile0.getOriginalPath());
      assertEquals("u", sourceFile0.toString());
      assertEquals("u", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      Node node1 = new Node(89, node0, 32, 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals("u", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("u", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("u", sourceFile0.getOriginalPath());
      assertEquals("u", sourceFile0.toString());
      assertEquals("u", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals(131084, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertEquals(89, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertEquals(32, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("u", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("u", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("u", sourceFile0.getOriginalPath());
      assertEquals("u", sourceFile0.toString());
      assertEquals("u", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals(131084, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertEquals(89, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertEquals(32, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals("u", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("u", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("u", sourceFile0.getOriginalPath());
      assertEquals("u", sourceFile0.toString());
      assertEquals("u", sourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals(131084, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertEquals(89, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertEquals(32, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      assertNotNull(linkedFlowScope0);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ASSIGN_BITAND 32 : number does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      Node node1 = new Node(302, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertEquals(302, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, jSTypeArray0.length);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isWith());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isReturn());
      assertTrue(node2.isParamList());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertEquals(83, node2.getType());
      assertFalse(node2.isNew());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertEquals(302, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertEquals(302, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertEquals(302, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, jSTypeArray0.length);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertEquals(302, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isWith());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isReturn());
      assertTrue(node2.isParamList());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertEquals(83, node2.getType());
      assertFalse(node2.isNew());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(79, node0, (-4810), 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertEquals(79, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertEquals(79, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertEquals(79, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertEquals(79, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 79
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      
      Node node1 = new Node(77, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertTrue(node1.isTry());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertEquals(77, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertTrue(node1.isTry());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertEquals(77, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      Scope scope0 = Scope.createLatticeBottom(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertTrue(node1.isTry());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertEquals(77, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertTrue(node1.isTry());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertEquals(77, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertTrue(node1.isTry());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertEquals(77, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isLabel());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertTrue(node1.isTry());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertEquals(77, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$,0~#!.feko-");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(52, node0, 49, 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(52, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNumber());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isDelProp());
      
      Scope scope0 = Scope.createGlobalScope(node1);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(52, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNumber());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isDelProp());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(52, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNumber());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isDelProp());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(52, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNumber());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isDelProp());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      
      Node node2 = Node.newString(76, "$,0~#!.feko-", 32, 3562);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertEquals(134634, node2.getSourcePosition());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isCatch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertEquals(3562, node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNull());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isNumber());
      assertEquals(76, node2.getType());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isString());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(32, node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFalse());
      assertFalse(node2.isIn());
      assertFalse(node2.isThrow());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("$,0~#!.feko-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("$,0~#!.feko-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("$,0~#!.feko-", sourceFile0.getOriginalPath());
      assertEquals("$,0~#!.feko-", sourceFile0.toString());
      assertEquals("$,0~#!.feko-", sourceFile0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(52, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNumber());
      assertEquals(200716, node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertEquals(12, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isDelProp());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertEquals(134634, node2.getSourcePosition());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isCatch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertEquals(3562, node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNull());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isNumber());
      assertEquals(76, node2.getType());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isString());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(32, node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFalse());
      assertFalse(node2.isIn());
      assertFalse(node2.isThrow());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("unction iteral argument reers to undefined@this argumeot");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      
      Node node1 = new Node(62, node0, 48, (-50));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals(62, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals(62, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Scope scope0 = Scope.createLatticeBottom(node0);
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node0, node1);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Scope scope1 = Scope.createLatticeBottom(node1);
      assertNotNull(scope1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(scope1, scope0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals(62, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals(62, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope1);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
      assertNotNull(list0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getOriginalPath());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.getName());
      assertEquals("unction iteral argument reers to undefined@this argumeot", sourceFile0.toString());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals(62, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(sourceFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      JsAst jsAst0 = new JsAst(sourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      
      Scope scope0 = Scope.createLatticeBottom(node0);
      assertNotNull(scope0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      assertNotNull(immutableSortedMap0);
      
      Node node1 = new Node(59, node0, 135, 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(12, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCast());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertEquals(59, node1.getType());
      assertFalse(node1.isTrue());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      
      Scope scope1 = Scope.createLatticeBottom(node1);
      assertNotNull(scope1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(scope1, scope0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(12, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCast());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertEquals(59, node1.getType());
      assertFalse(node1.isTrue());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(12, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCast());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertEquals(59, node1.getType());
      assertFalse(node1.isTrue());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope1);
      assertNotSame(node1, node0);
      assertNotSame(scope1, scope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", mockFile0.toString());
      assertEquals("Function literal argument refers to undefined this argument", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/Function literal argument refers to undefined this argument", mockFile0.getParent());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.toString());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getName());
      assertEquals("/experiment/Function literal argument refers to undefined this argument/Function literal argument refers to undefined this argument", sourceFile0.getOriginalPath());
      assertFalse(compiler0.isIdeMode());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(12, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertEquals(135, node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCast());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertEquals(552972, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertEquals(59, node1.getType());
      assertFalse(node1.isTrue());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(54, node0, node0, (-2582), 1138);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node2 = new Node(57, node1, 15, 29);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this hrgume!t", "Function literal argument refers to undefined this hrgume!t");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(56, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, true);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(55, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(54, node0, node0, (-2582), 1138);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(53, node0, 135, 12);
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(50, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Scope scope1 = new Scope(scope0, node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(38, node0, (-3027), 2);
      Scope scope0 = Scope.createLatticeBottom(node1);
      Node node2 = new Node(49, node1, (-318), 130);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(48, node0, node0, 32, 40);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(47, node0, 51, 16);
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // REGEXP 51 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(43, 51, 29);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node2 = new Node(38, node1, (-3027), (-123));
      Scope scope0 = Scope.createLatticeBottom(node2);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argumentjrefers to undefined this hrgume!t", "Function literal argumentjrefers to undefined this hrgume!t");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(42, node0, 122, 47);
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = Node.newString("Function literal argument refers to undefined this argument");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node2 = new Node(38, node1, (-3033), (-123));
      Scope scope0 = Scope.createLatticeBottom(node2);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING Function literal argument refers to undefined this argument does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(1, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = Node.newNumber((double) 15);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(17, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node2 = new Node(37, node1, (-360), 0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CALL does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(36, node0, (-1491), 2379);
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(32, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "com.google.javascript.jscomp.LinkedFlowScope");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(31, node0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node2, false, true);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this hrgume!t", "Function literal argument refers to undefined this hrgume!t");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(30, node0, 29, 54);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Scope scope1 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(16, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(15, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockFile mockFile0 = new MockFile("unction iteral argument reers to undefined this argument", "unction iteral argument reers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(12, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(10, node0, node0, node0, 8, 123);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope1 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BITXOR 8 : number does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(50, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node2 = Node.newString(8, "Function literal argument refers to undefined this argument", 8, 30);
      Scope scope1 = new Scope(scope0, node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(6, node0, 145, 4);
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(5, node0, 145, (-4196));
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = new Node(115, node0, node0, node0, node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = peepholeRemoveDeadCode0.tryOptimizeBlock(node1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node2, false, false);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
      controlFlowGraph0.connect(node2, controlFlowGraph_Branch0, node2);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$,0~#!.feko-");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(52, node0, 49, 12);
      Scope scope0 = Scope.createGlobalScope(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = Node.newString(101, "$,0~#!.feko-", 32, 3562);
      // Undeclared exception!
      try { 
        typeInference0.flowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Node node1 = new Node(110, node0, 2, 49);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      assertNotNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(51, node0, 118, 114);
      Scope scope0 = Scope.createLatticeBottom(node1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Node node1 = new Node(100, node0, 135, 12);
      Scope scope0 = Scope.createLatticeBottom(node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }
}
