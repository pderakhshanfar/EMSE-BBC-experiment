/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:54:25 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(110);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      Node node2 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      node0.addChildrenToBack(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
      // Undeclared exception!
      try { 
        TypeInference.getBooleanOutcomes(booleanLiteralSet0, (BooleanLiteralSet) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      compiler0.ensureDefaultPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(38, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.flowThrough(node2, flowScope0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-83));
      Node node1 = new Node((-1794), node0, node0, node0, 51, 16);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BoolenOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(75);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("duplicate child");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(18, 18, 18);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("$=%`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, false);
      compiler0.parseTestCode("Invalid NUMBER node.");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
      jSTypeArray0[0] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newString("T/#v=Svd=2iTH?~H,");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      Node node2 = new Node(4);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(129);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-5), (-5), (-5));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      node1.setType(153);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(148, 139, 2);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(147, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(77);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(145, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(74);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-6));
      Node node1 = new Node(8, (-2289), 107);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-5), (-5), (-5));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BoolenOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(38);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("T/#v=Svd=2iTH?~H,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-73));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(2);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      compiler0.ensureDefaultPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(138, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Node node1 = compiler0.parseTestCode("lpdQaU");
      Node node2 = compiler0.parseSyntheticCode("lpdQaU");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node2.setType(137);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node2 = new Node(136, (-3151), 8);
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(65);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.juvascript.jscomp.TypeInferenc$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(3404, 2162, 115);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = Node.newString(131, "com.google.javascript.jscomp.TypeInference$BooleanOutcomePair", 51, 53);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(128, "com.google.javascript.jscomp.TypeInference$BooleanOutcomePair", 4, 46);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 128
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      LoggerErrorManager loggerErrorManager1 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager1);
      Node node0 = new Node((-73));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node2 = new Node(127, 122, 32);
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(126);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-6));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("T/#v=Svd=2iTH?~H,");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(147, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      FlowScope flowScope1 = linkedFlowScope_FlowScopeJoinOp0.apply(flowScope0, flowScope0);
      Node node3 = Node.newString(125, "");
      FlowScope flowScope2 = typeInference0.flowThrough(node3, flowScope1);
      assertNotSame(flowScope2, flowScope1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(124, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Node node1 = compiler0.parseTestCode("com.google.javascriLt.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = Node.newString(121, "com.google.javascriLt.jscomp.TypeInference$BooleanOutcomePair", 50, 51);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(120);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(119, (-62), (-586));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("24&V3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(115, 891, 5685);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("Ordering.natural()");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-73), (-73), (-73));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(7);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      compiler0.ensureDefaultPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeIn:erence$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(112, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(3399, 2162, 115);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(104);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      Node node0 = compiler0.parseTestCode("GGAhm/=X ");
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("", jSTypeNative0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("tz<RZztdT@jjY:#", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(103, "_.%Tx}j\"#Wu}Z}(T", 36, 32);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-73));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = Node.newString(102, "com.google.javascript.jscomp.TypeInference$BooleanOutcomePair", 4, 0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // INC com.google.javascript.jscomp.TypeInference$BooleanOutcomePair 4 : number does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(94);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("$7*w;Ul'9UmKT3BX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node((-73));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node2 = StatementFusion.fuseExpressionIntoExpression(node1, node0);
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(74);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(71);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(69);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(68);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("0nWZUAt5`B,Dd=(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(64);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Node node1 = new Node(57, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("T/#v=Svd=2iTH?~H,");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(56, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(2);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.ensureDefaultPassConfig();
      Node node1 = compiler0.parseTestCode("com.~oogle.javascript.jscomp.qypeInference$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(160, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node3 = Node.newString(55, "T/#v=Svd=2iTH?~H,", 57, 53);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node3, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Scope scope1 = new Scope(scope0, node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node2 = Node.newString(53, "mapped", 715, 1173);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-6));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("T/#v=Svd=2iTH?~H,");
      Node node2 = new Node(52, node1, 43, 53);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node((-73));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Scope scope0 = Scope.createLatticeBottom(node1);
      Node node2 = new Node(51, nodeArray0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(7);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.ensureDefaultPassConfig();
      Node node1 = compiler0.parseTestCode("EeWV22g");
      Node node2 = new Node(50, node1, node1, node0, node1);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Logger logger0 = Logger.getLogger("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(129);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(2);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.ensureDefaultPassConfig();
      Node node1 = compiler0.parseTestCode("com.~oogle.javascript.jscomp.qypeInference$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(48, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(47, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(2);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.ensureDefaultPassConfig();
      Node node1 = compiler0.parseTestCode("com.~oogle.javascript.jscomp.qypeInference$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(48, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node3 = new Node(46, 4095, (-2372));
      FlowScope flowScope0 = typeInference0.flowThrough(node3, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1, 1, 1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Scope scope1 = new Scope(scope0, node1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope1, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      Node node2 = Node.newString(43, "com.google.javascript.jscomp.TypeInference$BooleanOutcomePair", 152, 56);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-6));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("T/#v=Svd=2iTH?~H,");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(42, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(2, 2, 2);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Node.newString("T/#v=Svd=2iTH?~H,", 57, 53);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.~oogle.javascript.jscomp.qypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(39);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("");
      Node node2 = new Node(4095, node1, node0, node0, 31, 49);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(129);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("lpdQaU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(718);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(2);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      compiler0.ensureDefaultPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeIn:erence$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(36, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-6));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("T/#v=Svd=2iTH?~H,");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(147, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node3 = new Node(32, 4, (-1806));
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      FlowScope flowScope1 = linkedFlowScope_FlowScopeJoinOp0.apply(flowScope0, flowScope0);
      FlowScope flowScope2 = typeInference0.flowThrough(node3, flowScope1);
      assertNotSame(flowScope2, flowScope1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(2);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      compiler0.ensureDefaultPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(31, node1, node1, node0, 42, 4095);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("T/#v=Svd=2iTH?~H,");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(10);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getPassConfig();
      compiler0.parseTestCode("fDC");
      Node node1 = new Node(4095, node0, node0, node0, 31, 49);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(9);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("");
      Node node2 = new Node(4095, node1, node0, node0, 31, 49);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(8);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getPassConfig();
      Node[] nodeArray0 = new Node[1];
      Node node1 = compiler0.parseTestCode("");
      nodeArray0[0] = node1;
      Node node2 = new Node(1, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, flowScope0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(7);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      compiler0.ensureDefaultPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeIn:erence$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(112, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-6));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_FALSE;
      controlFlowGraph0.connectToImplicitReturn(node0, controlFlowGraph_Branch0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("T/#v=Svd=2iTH?~H,");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-6));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
      controlFlowGraph0.connectToImplicitReturn(node0, controlFlowGraph_Branch0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("T/#v=Svd=2iTH?~H,");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LightweightMessageFormatter.withoutSource();
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(72);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node((-73));
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getPassConfig();
      Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(30, nodeArray0);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Logger logger0 = Logger.getLogger("T/#v=Svd=2iTH?~H,");
      LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node(65);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
