* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 19606
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-176/build/classes
  - subjects/buggy-versions/Closure-176/lib/args4j.jar
  - subjects/buggy-versions/Closure-176/lib/guava.jar
  - subjects/buggy-versions/Closure-176/lib/json.jar
  - subjects/buggy-versions/Closure-176/lib/jsr305.jar
  - subjects/buggy-versions/Closure-176/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-176/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-176/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3073
* Using seed 433279948
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 890 / 3073
[MASTER] 17:25:58.530 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:27:31.413 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 17:30:12.607 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 601s and 900 generations, 671781 statements, best individual has fitness: 2004.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 35%
* Total number of goals: 619
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 44%
* Total number of goals: 793
* Number of covered goals: 350
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 19%
* Total number of goals: 836
* Number of covered goals: 155
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 44%
* Total number of goals: 793
* Number of covered goals: 345
* Generated 135 tests with total length 1700
* Resulting test suite's coverage: 48% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 6%
* Compiling and checking tests
[MASTER] 17:37:00.454 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:37:01.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:01.733 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("HBN0v");
Scope scope0 = Scope.createGlobalScope(node0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(63, "HBN0v");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:02.961 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:02.962 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$e1C");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(100, "f-tW@%'m`=O");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:04.394 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:04.395 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
Node node1 = new Node(37, node0, node0, 2, 57);
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);

[MASTER] 17:37:06.731 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:06.732 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.UNCOND;
controlFlowGraph0.connectToImplicitReturn((Node) null, controlFlowGraph_Branch0);
Node node0 = compiler0.parseSyntheticCode("Object#Key", "HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
List<FlowScope> list0 = typeInference0.branchedFlowThrough((Node) null, flowScope0);
assertEquals(1, list0.size());


[MASTER] 17:37:07.976 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
[MASTER] 17:37:07.977 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
controlFlowGraph0.connectToImplicitReturn((Node) null, controlFlowGraph_Branch0);
Node node0 = compiler0.parseSyntheticCode("6Rf@Zhqf=D}i,(41N", "HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
typeInference0.branchedFlowThrough((Node) null, flowScope0);

[MASTER] 17:37:09.080 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:09.081 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_FALSE;
controlFlowGraph0.connectToImplicitReturn((Node) null, controlFlowGraph_Branch0);
Node node0 = compiler0.parseSyntheticCode("HBN0v", "HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
typeInference0.branchedFlowThrough((Node) null, flowScope0);

[MASTER] 17:37:10.270 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:10.270 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$eCC");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
node0.setType(4);
typeInference0.branchedFlowThrough(node0, linkedFlowScope0);

[MASTER] 17:37:11.480 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:11.480 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(5, "com.google.javascript.jscomp.TypeInference$1");
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:13.070 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:13.070 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(8, "B'K7#L/PW1");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:14.153 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:14.153 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
node0.setType(9);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
assertEquals(0, list0.size());


[MASTER] 17:37:15.338 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:15.338 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
Scope scope0 = Scope.createLatticeBottom(node0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(11, "+xH69");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:16.600 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:16.600 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$eCC");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node[] nodeArray0 = new Node[1];
nodeArray0[0] = node0;
Node node1 = new Node(12, nodeArray0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:17.708 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:17.708 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$e1C");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(15, "Object#Key");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:18.831 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:18.832 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(16, "d.AD5O", 37, 30);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:19.934 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:19.935 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomd.TypeIFerence$1");
Scope scope0 = Scope.createLatticeBottom(node0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(21, "com.google.javascript.jscomd.TypeIFerence$1");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
typeInference0.flowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:21.016 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:21.017 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
Node node1 = Node.newString(22, "Object#Key", 0, 53);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:22.150 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:22.150 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
Scope scope0 = Scope.createLatticeBottom(node0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(29, "Object#Element");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
typeInference0.flowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:23.257 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:23.257 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$<eCC");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(30, "|  ");
typeInference0.flowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:24.406 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:24.407 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = new Node(31, node0, node0, 30, 2);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:25.543 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:25.544 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = new Node(32);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:26.978 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:26.979 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
Node node1 = Node.newString(36, "Object#Element");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:28.073 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:28.073 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$e1C");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newNumber((double) 15);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:29.216 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:29.216 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(42, "com.google.javascript.jscomp.TypeInference$1");
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:31.295 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:31.295 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$eCC");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(44, "");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:33.649 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:33.649 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
node0.setType(46);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node0, linkedFlowScope0);

[MASTER] 17:37:34.881 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:34.882 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(47, "");
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:36.187 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:36.188 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$e1C");
Scope scope0 = Scope.createLatticeBottom(node0);
Node node1 = Node.newString(48, "Object#Key");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:37.291 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:37.291 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$eCC");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(49, "Object#Element");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:38.676 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:38.677 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$e1C");
Scope scope0 = Scope.createLatticeBottom(node0);
node0.setType(50);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node0, linkedFlowScope0);

[MASTER] 17:37:39.945 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:39.945 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
Node node1 = new Node(51);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:41.079 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:41.080 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$eCC");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(53, "Object#Key");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:42.268 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:42.269 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(54, "Object#Element");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:43.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:43.378 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
node0.setType(55);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node0, linkedFlowScope0);

[MASTER] 17:37:44.503 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:44.504 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.DefaultPassConfig$63");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(56, "anonymous");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 17:37:45.746 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:45.747 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("HBN0v");
Scope scope0 = Scope.createLatticeBottom(node0);
node0.setType(57);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node0, linkedFlowScope0);

[MASTER] 17:37:46.873 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:46.874 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$1");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(58, "Object#Key");
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:48.037 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:48.037 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("j$e1C");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(60, "j$e1C");
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 17:37:49.342 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: stableIdGenerator=NOT_IMPLEMENTED and stableIdGenerator=STABLEIDGENERATOR
[MASTER] 17:37:49.343 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
Compiler compiler0 = new Compiler();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
Node node0 = compiler0.parseTestCode("com.googl.javacript.jscomp.TypeInference$1");
Scope scope0 = Scope.createLatticeBottom(node0);
Node node1 = Node.newString(61, "Object#Key");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-176/com.google.javascript.jscomp.TypeInference/BBC-F0-50/tests/4
* Done!

* Computation finished
