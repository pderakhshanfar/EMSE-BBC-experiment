* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-90
* Going to generate test cases for class: com.google.javascript.jscomp.ProcessClosurePrimitives
* Starting Client-0
* Connecting to master process on port 18183
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-113/build/classes
  - subjects/buggy-versions/Closure-113/lib/args4j.jar
  - subjects/buggy-versions/Closure-113/lib/guava.jar
  - subjects/buggy-versions/Closure-113/lib/json.jar
  - subjects/buggy-versions/Closure-113/lib/jsr305.jar
  - subjects/buggy-versions/Closure-113/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-113/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-113/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.ProcessClosurePrimitives
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1637
* Using seed 492178387
* Starting evolution
bbc usage percentage is: 90%
* Initial Number of Goals in DynaMOSA = 361 / 1637
[MASTER] 10:34:23.738 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 10:34:23.738 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 10:35:04.718 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:36:57.981 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:37:57.738 [logback-2] ERROR TestCluster - Failed to check cache for com.google.javascript.jscomp.ControlFlowGraph<N> : Type points to itself
[MASTER] 10:41:27.210 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 605s and 604 generations, 251378 statements, best individual has fitness: 1411.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 15%
* Total number of goals: 472
* Number of covered goals: 73
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 16%
* Total number of goals: 350
* Number of covered goals: 57
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 8%
* Total number of goals: 441
* Number of covered goals: 37
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 56%
* Total number of goals: 9
* Number of covered goals: 5
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 44%
* Total number of goals: 9
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 16%
* Total number of goals: 350
* Number of covered goals: 57
* Generated 19 tests with total length 128
* Resulting test suite's coverage: 30% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 4%
* Compiling and checking tests
[MASTER] 10:44:36.569 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:36.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:44:36.574 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseSyntheticCode("ms.seKt", "ms.seKt");

[MASTER] 10:44:45.202 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 10:44:45.203 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "msg4let.rede=Kl");
CheckLevel checkLevel0 = CheckLevel.OFF;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
nodeTraversal0.traverseInnerNode(node0, node0, (Scope) null);
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasOneChild());


[MASTER] 10:44:50.168 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 10:44:50.168 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Hashing.sha1()");
PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
CheckLevel checkLevel0 = CheckLevel.WARNING;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
nodeTraversal0.traverseInnerNode(node0, node0, (Scope) null);
assertFalse(node0.isStringKey());


[MASTER] 10:44:53.217 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:44:53.217 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseSyntheticCode("msg.seKt", "msg.seKt");

[MASTER] 10:44:54.706 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 10:44:54.706 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "msg.let.redeG=cl");
CheckLevel checkLevel0 = CheckLevel.ERROR;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
processClosurePrimitives0.process(node0, node0);
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasOneChild());


[MASTER] 10:44:57.716 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:44:57.716 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseSyntheticCode("ms.seKt", "ms.seKt");

[MASTER] 10:45:02.873 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:45:02.874 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseSyntheticCode("msg.seKt", "msg.seKt");

[MASTER] 10:45:04.310 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 10:45:04.311 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.base");
Compiler compiler1 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.ERROR;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler1, (PreprocessorSymbolTable) null, checkLevel0);
processClosurePrimitives0.process(node0, node0);

* Writing tests to file
* Writing JUnit test case 'ProcessClosurePrimitives_ESTest' to results/Closure-113/com.google.javascript.jscomp.ProcessClosurePrimitives/BBC-F0-opt-90/tests/9
* Done!

* Computation finished
