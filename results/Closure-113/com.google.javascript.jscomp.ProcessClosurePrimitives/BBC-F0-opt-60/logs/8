* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-60
* Going to generate test cases for class: com.google.javascript.jscomp.ProcessClosurePrimitives
* Starting Client-0
* Connecting to master process on port 21985
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-113/build/classes
  - subjects/buggy-versions/Closure-113/lib/args4j.jar
  - subjects/buggy-versions/Closure-113/lib/guava.jar
  - subjects/buggy-versions/Closure-113/lib/json.jar
  - subjects/buggy-versions/Closure-113/lib/jsr305.jar
  - subjects/buggy-versions/Closure-113/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-113/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-113/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.ProcessClosurePrimitives
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1637
* Using seed 411075256
* Starting evolution
bbc usage percentage is: 60%
* Initial Number of Goals in DynaMOSA = 361 / 1637
[MASTER] 10:34:21.306 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:34:36.298 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 10:34:36.298 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 10:34:39.706 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:42:33.236 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
*C2*
*C2*
* Search finished after 606s and 681 generations, 288754 statements, best individual has fitness: 1426.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 15%
* Total number of goals: 472
* Number of covered goals: 70
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 15%
* Total number of goals: 350
* Number of covered goals: 52
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 88%
* Total number of goals: 8
* Number of covered goals: 7
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 8%
* Total number of goals: 441
* Number of covered goals: 34
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 56%
* Total number of goals: 9
* Number of covered goals: 5
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 44%
* Total number of goals: 9
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 15%
* Total number of goals: 350
* Number of covered goals: 52
* Generated 17 tests with total length 105
* Resulting test suite's coverage: 30% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 1%
* Compiling and checking tests
[MASTER] 10:44:22.198 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:22.203 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 10:44:22.203 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.ERROR;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
Node node0 = compiler0.parseSyntheticCode("com.oogoe", "goog.base");
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0, (ScopeCreator) null);
nodeTraversal0.traverseInnerNode(node0, node0, (Scope) null);
assertTrue(compiler0.hasErrors());
assertEquals(0, compiler0.getWarningCount());


[MASTER] 10:44:29.829 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:44:29.829 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseSyntheticCode("DmsU=K4", "DmsU=K4");

[MASTER] 10:44:31.330 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:44:31.331 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseTestCode("JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR");

[MASTER] 10:44:38.277 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 10:44:38.277 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.WARNING;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
Node node0 = compiler0.parseSyntheticCode("com.googoe", "com.googoe");
processClosurePrimitives0.process(node0, node0);
assertFalse(node0.isQuotedString());


[MASTER] 10:44:41.454 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 10:44:41.454 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.WARNING;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
Node node0 = compiler0.parseSyntheticCode("com.googoe", "com.googoe");
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0, (ScopeCreator) null);
Scope scope0 = Scope.createLatticeBottom(node0);
nodeTraversal0.traverseInnerNode(node0, node0, scope0);
assertEquals(30, Node.VAR_ARGS_NAME);


[MASTER] 10:44:44.404 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 10:44:44.404 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.OFF;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
Node node0 = compiler0.parseTestCode("5f?|qdK9%Cm3/I|'eY");
Node node1 = new Node(855, node0, node0, 2490, 51);
node0.addChildToBack(node1);
processClosurePrimitives0.process(node0, node0);

[MASTER] 10:44:45.827 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 10:44:45.827 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
File file0 = MockFile.createTempFile("fO((T|ZIWvHj6'+D", "fO((T|ZIWvHj6'+D");
SourceFile sourceFile0 = SourceFile.fromFile(file0, (Charset) null);
JsAst jsAst0 = new JsAst(sourceFile0);
Node node0 = jsAst0.getAstRoot(compiler0);
PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, (CheckLevel) null);
processClosurePrimitives0.process(node0, node0);

* Writing tests to file
* Writing JUnit test case 'ProcessClosurePrimitives_ESTest' to results/Closure-113/com.google.javascript.jscomp.ProcessClosurePrimitives/BBC-F0-opt-60/tests/8
* Done!

* Computation finished
