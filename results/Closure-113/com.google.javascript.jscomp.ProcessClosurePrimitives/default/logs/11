* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.jscomp.ProcessClosurePrimitives
* Starting Client-0
* Connecting to master process on port 12275
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-113/build/classes
  - subjects/buggy-versions/Closure-113/lib/args4j.jar
  - subjects/buggy-versions/Closure-113/lib/guava.jar
  - subjects/buggy-versions/Closure-113/lib/json.jar
  - subjects/buggy-versions/Closure-113/lib/jsr305.jar
  - subjects/buggy-versions/Closure-113/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-113/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-113/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.ProcessClosurePrimitives
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1637
* Using seed 3479863781
* Starting evolution
* Initial Number of Goals in DynaMOSA = 361 / 1637
[MASTER] 01:48:39.277 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 01:48:39.282 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 01:49:54.730 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 302s and 178 generations, 81822 statements, best individual has fitness: 1423.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 15%
* Total number of goals: 472
* Number of covered goals: 71
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 15%
* Total number of goals: 350
* Number of covered goals: 51
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 8%
* Total number of goals: 441
* Number of covered goals: 37
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 56%
* Total number of goals: 9
* Number of covered goals: 5
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 44%
* Total number of goals: 9
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 14%
* Total number of goals: 350
* Number of covered goals: 49
* Generated 11 tests with total length 65
* Resulting test suite's coverage: 29% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 2%
* Compiling and checking tests
[MASTER] 01:54:07.262 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:54:07.271 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.ERROR;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jsc;mp.StripCode", "goog.base");
processClosurePrimitives0.process(node0, node0);
assertTrue(compiler0.hasErrors());
assertEquals(0, compiler0.getWarningCount());


[MASTER] 01:54:28.487 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:54:28.493 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.WARNING;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
Node node0 = compiler0.parseSyntheticCode("var JSCompiler_lcov_executedLines;\nvar JSCompiler_lcov_instrumentedLines;\nvar JSCompiler_lcov_fileNames;\n", "var JSCompiler_lcov_executedLines;\nvar JSCompiler_lcov_instrumentedLines;\nvar JSCompiler_lcov_fileNames;\n");
processClosurePrimitives0.process(node0, node0);
assertFalse(node0.isAssignAdd());


[MASTER] 01:54:35.539 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:54:35.540 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.WARNING;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
SourceFile sourceFile0 = SourceFile.fromCode(")0B1EROmDTRlgAUj", ")0B1EROmDTRlgAUj", "ByteSource.empty()");
JsAst jsAst0 = new JsAst(sourceFile0);
Node node0 = jsAst0.getAstRoot(compiler0);
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
nodeTraversal0.traverseInnerNode(node0, node0, (Scope) null);
assertEquals(30, Node.VAR_ARGS_NAME);


[MASTER] 01:54:38.848 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:54:38.849 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFile mockFile0 = new MockFile("msg.ndef");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
Compiler compiler0 = new Compiler(mockPrintStream0);
CheckLevel checkLevel0 = CheckLevel.ERROR;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
SourceFile sourceFile0 = SourceFile.fromCode("./", "comDB.googlN", "comDB.googlN");
JsAst jsAst0 = new JsAst(sourceFile0);
jsAst0.getAstRoot(compiler0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 11
* Writing tests to file
* Writing JUnit test case 'ProcessClosurePrimitives_ESTest' to results/Closure-113/com.google.javascript.jscomp.ProcessClosurePrimitives/default/tests/11
* Done!

* Computation finished
