* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-80
* Going to generate test cases for class: com.google.javascript.jscomp.ProcessClosurePrimitives
* Starting Client-0
* Connecting to master process on port 7401
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-113/build/classes
  - subjects/buggy-versions/Closure-113/lib/args4j.jar
  - subjects/buggy-versions/Closure-113/lib/guava.jar
  - subjects/buggy-versions/Closure-113/lib/json.jar
  - subjects/buggy-versions/Closure-113/lib/jsr305.jar
  - subjects/buggy-versions/Closure-113/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-113/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-113/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.ProcessClosurePrimitives
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1637
* Using seed 3469707206
* Starting evolution
bbc usage percentage is: 80%
* Initial Number of Goals in DynaMOSA = 361 / 1637
[MASTER] 10:34:26.748 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 10:34:26.748 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 10:34:52.635 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:35:35.089 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:37:02.946 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 601s and 631 generations, 248368 statements, best individual has fitness: 1425.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 15%
* Total number of goals: 472
* Number of covered goals: 70
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 15%
* Total number of goals: 350
* Number of covered goals: 53
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 89%
* Total number of goals: 9
* Number of covered goals: 8
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 8%
* Total number of goals: 441
* Number of covered goals: 34
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 56%
* Total number of goals: 9
* Number of covered goals: 5
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 44%
* Total number of goals: 9
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 15%
* Total number of goals: 350
* Number of covered goals: 53
* Generated 17 tests with total length 103
* Resulting test suite's coverage: 30% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 1%
* Compiling and checking tests
[MASTER] 10:44:31.995 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:54.343 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:44:54.344 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("rtipJmpe", "rtipJmpe");
Node node1 = new Node(2, node0, node0);
PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
node0.addChildToFront(node1);
CheckLevel checkLevel0 = CheckLevel.ERROR;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
processClosurePrimitives0.process(node0, node1);

[MASTER] 10:44:59.656 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test06 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
[MASTER] 10:44:59.656 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("rtipJmpe", "rtipJmpe");
Node node1 = new Node(105, node0, node0);
PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
CheckLevel checkLevel0 = CheckLevel.WARNING;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
processClosurePrimitives0.visit(nodeTraversal0, node1, node0);

[MASTER] 10:44:59.656 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test12 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:44:59.656 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CheckLevel checkLevel0 = CheckLevel.ERROR;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives((AbstractCompiler) null, (PreprocessorSymbolTable) null, checkLevel0);

[MASTER] 10:44:59.657 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test10 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:44:59.657 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newString(86, "M)f1x4!yzb1YQppQHG2");
PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
CheckLevel checkLevel0 = CheckLevel.OFF;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
processClosurePrimitives0.visit(nodeTraversal0, node0, node0);
assertFalse(node0.isCatch());


[MASTER] 10:44:59.657 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test05 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:44:59.657 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.ERROR;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
compiler0.parseTestCode(";oog.baie");

[MASTER] 10:44:59.657 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test03 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:44:59.657 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.WARNING;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
compiler0.parseTestCode("So.b=mdaie");

[MASTER] 10:44:59.657 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test14 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: ngInject=NOT_IMPLEMENTED and ngInject=NG_INJECT
[MASTER] 10:44:59.658 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.OFF;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
processClosurePrimitives0.visit(nodeTraversal0, (Node) null, (Node) null);

[MASTER] 10:45:01.625 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test00 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: ngInject=NOT_IMPLEMENTED and ngInject=NG_INJECT
[MASTER] 10:45:01.625 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
CheckLevel checkLevel0 = CheckLevel.WARNING;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
ProcessClosurePrimitives processClosurePrimitives1 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
Compiler compiler1 = new Compiler();
Node node0 = compiler1.parseTestCode("goog.base");
processClosurePrimitives1.process(node0, node0);

[MASTER] 10:45:01.625 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test02 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
* Writing tests to file
* Writing JUnit test case 'ProcessClosurePrimitives_ESTest' to results/Closure-113/com.google.javascript.jscomp.ProcessClosurePrimitives/BBC-F0-opt-80/tests/9
[MASTER] 10:45:01.626 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newString(86, "M)f1x4!yzb1YQppQHG2");
PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
CheckLevel checkLevel0 = CheckLevel.OFF;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
processClosurePrimitives0.visit(nodeTraversal0, node0, node0);
//  // Unstable assertion: assertFalse(node0.isCatch());


[MASTER] 10:45:01.627 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test05 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
[MASTER] 10:45:01.627 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newString((-2131), "M)1x4!zb1YQppQHG2");
Node node1 = new Node(105, node0, node0);
PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
CheckLevel checkLevel0 = CheckLevel.OFF;
node0.addChildToFront(node1);
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
processClosurePrimitives0.visit(nodeTraversal0, node1, node0);
assertEquals(1, node1.getChildCount());


[MASTER] 10:45:01.627 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test04 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:45:01.628 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("rtipJmpe", "rtipJmpe");
Node node1 = new Node(105, node0, node0);
PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
node0.addChildToFront(node1);
CheckLevel checkLevel0 = CheckLevel.WARNING;
ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
processClosurePrimitives0.visit(nodeTraversal0, node1, node0);

* Done!

* Computation finished
