/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 19:28:37 GMT 2021
 */

package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeDeserializerBase_ESTest extends TypeDeserializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, (String) null, false, (JavaType) null);
      // Undeclared exception!
      try { 
        asExternalTypeDeserializer0._handleUnknownTypeId(defaultDeserializationContext_Impl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase");
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", false, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "+3kfK8_1>LkH]x-P@GI", false, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<String> class0 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 93);
      asWrapperTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._findDeserializer(defaultDeserializationContext_Impl0, "+3kfK8_1>LkH]x-P@GI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, minimalClassNameIdResolver0, "nD1|R", false, (JavaType) null);
      asPropertyTypeDeserializer0.toString();
      assertEquals("nD1|R", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JavaType> class0 = JavaType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(coreXMLDeserializers_Std0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(arrayType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(arrayType1, minimalClassNameIdResolver0, "", false, arrayType0);
      Class<?> class1 = asArrayTypeDeserializer0.getDefaultImpl();
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase");
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", false, javaType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, (BeanProperty) null);
      assertEquals("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", asPropertyTypeDeserializer1.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "_l[n", true, (JavaType) null);
      asPropertyTypeDeserializer0.getTypeInclusion();
      assertEquals("_l[n", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, (String) null, false, resolvedRecursiveType0);
      TypeIdResolver typeIdResolver0 = asPropertyTypeDeserializer0.getTypeIdResolver();
      assertEquals("class name used as type id", typeIdResolver0.getDescForKnownTypeIds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      String string0 = asWrapperTypeDeserializer0.getPropertyName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "n7D1|R", false, (JavaType) null);
      asExternalTypeDeserializer0.getDefaultImpl();
      assertEquals("n7D1|R", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<BeanDeserializer> class1 = BeanDeserializer.class;
      Class<Integer> class2 = Integer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, (TypeIdResolver) null, ",`?;/Mb", false, mapType0, jsonTypeInfo_As0);
      Class<?> class3 = asPropertyTypeDeserializer0.getDefaultImpl();
      assertEquals(",`?;/Mb", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<BeanDeserializer> class1 = BeanDeserializer.class;
      Class<Integer> class2 = Integer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, (TypeIdResolver) null, ",`?;/Mb", false, mapType0, jsonTypeInfo_As0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty((BeanProperty) null);
      assertEquals(",`?;/Mb", typeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot construct instance of %s (no Creators, like default construct, exist): %s", false, (JavaType) null, jsonTypeInfo_As0);
      asPropertyTypeDeserializer0.baseType();
      assertEquals("Cannot construct instance of %s (no Creators, like default construct, exist): %s", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = typeFactory0.constructMapType(class0, javaType0, javaType0);
      MapLikeType mapLikeType0 = mapType0.withStaticTyping();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "k_H0m>Q*/On)CE", false, mapType0);
      JavaType javaType1 = asWrapperTypeDeserializer0.baseType();
      assertTrue(javaType1.useStaticType());
      assertEquals("k_H0m>Q*/On)CE", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1038));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, placeholderForType0);
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      JavaType javaType0 = referenceType0.refine(class1, typeBindings0, placeholderForType0, javaTypeArray0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(referenceType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, minimalClassNameIdResolver0, "xf2Fa9", true, referenceType0);
      JavaType javaType1 = asWrapperTypeDeserializer0.baseType();
      assertTrue(javaType1.isJavaLangObject());
      assertEquals("xf2Fa9", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, (String) null, true, simpleType0);
      JavaType javaType0 = asWrapperTypeDeserializer0.baseType();
      assertFalse(javaType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      ArrayType arrayType1 = ArrayType.construct((JavaType) arrayType0, typeBindings0, (Object) coreXMLDeserializers_Std0, (Object) typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType1, minimalClassNameIdResolver0, "XQbw.@7IzZwB?/<26R", true, javaTypeArray0[0]);
      JavaType javaType0 = asExternalTypeDeserializer0.baseType();
      assertFalse(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale_Category0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      Object object0 = asPropertyTypeDeserializer0._deserializeWithNativeTypeId(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot construct instance of %s (no Creators, like default construct, exist): %s", false, (JavaType) null);
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer0.baseTypeName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0, javaType0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, minimalClassNameIdResolver0, "`Z", true, javaType0, jsonTypeInfo_As0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        asPropertyTypeDeserializer0._findDeserializer(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '' as a subtype of [map type; class java.lang.Object, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, false, (JavaType) null);
      // Undeclared exception!
      try { 
        asExternalTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, (String) null, false, simpleType0);
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "/iKH", false, (JavaType) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-965), (-81), false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId(readerBasedJsonParser0, defaultDeserializationContext_Impl0, classNameIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver@1' as a subtype of null: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "; id-resolver: ", true, (JavaType) null);
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "JSON", true, simpleType0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "; id-resolver: ", true, (JavaType) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      asWrapperTypeDeserializer0._deserializeWithNativeTypeId(filteringParserDelegate0, defaultDeserializationContext_Impl0, (Object) null);
      assertEquals("; id-resolver: ", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, ".n_g8D/;qNS", true, simpleType0);
      asPropertyTypeDeserializer0.baseType();
      assertEquals(".n_g8D/;qNS", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, (String) null, true, resolvedRecursiveType0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, beanProperty_Bogus0);
      // Undeclared exception!
      try { 
        asExternalTypeDeserializer1._handleUnknownTypeId(defaultDeserializationContext_Impl0, "4f~(*TZ.feLOeW:yP[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[YX", false, (JavaType) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(filteringParserDelegate0, defaultDeserializationContext_Impl0, "[YX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "No (native) type id foundwhen one was expected for polymorphic type handling", false, (JavaType) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Object> jsonDeserializer0 = asExternalTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext_Impl0);
      assertNotNull(jsonDeserializer0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "No (native) type id foundwhen one was expected for polymorphic type handling", false, javaType0);
      asPropertyTypeDeserializer0._defaultImplDeserializer = jsonDeserializer0;
      asPropertyTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext_Impl0);
      assertEquals("No (native) type id foundwhen one was expected for polymorphic type handling", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "; b1se-type:", false, (JavaType) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No (native) type id found when one was expected for polymorphic type handling
         //  at [Source: (byte[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase");
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", false, javaType0);
      String string0 = asPropertyTypeDeserializer0.baseTypeName();
      assertEquals("java.util.Map", string0);
      assertEquals("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "(%awfe,+^zfzyP@w", false, (JavaType) null);
      asWrapperTypeDeserializer0.getTypeIdResolver();
      assertEquals("(%awfe,+^zfzyP@w", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapType0, classNameIdResolver0, "", false, resolvedRecursiveType0);
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer0._handleMissingTypeId(deserializationContext0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Locale.Category> class0 = Locale.Category.class;
      Class<JsonDeserializer> class1 = JsonDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, (TypeIdResolver) null, "@T?", false, mapLikeType0, jsonTypeInfo_As0);
      Class<?> class2 = asPropertyTypeDeserializer0.getDefaultImpl();
      assertEquals("@T?", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "(%awfe,+^zfzyP@w", false, (JavaType) null);
      String string0 = asWrapperTypeDeserializer0.getPropertyName();
      assertEquals("(%awfe,+^zfzyP@w", string0);
  }
}
