/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 21:12:29 GMT 2021
 */

package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeDeserializerBase_ESTest extends TypeDeserializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, minimalClassNameIdResolver0, "; id-resolver: ", false, placeholderForType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer0._handleMissingTypeId(deserializationContext0, "Cannot upgrade from an instance of ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, (JavaType) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer0._handleUnknownTypeId(deserializationContext0, "[com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer; base-type:[recursive type; UNRESOLVED; id-resolver: com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver@5]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapType0, classNameIdResolver0, "aJ.j#(7GW_", true, resolvedRecursiveType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer0._findDefaultImplDeserializer(deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, (JavaType) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonDeserializer<Object> jsonDeserializer0 = asArrayTypeDeserializer0._findDefaultImplDeserializer(deserializationContext0);
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, (JavaType) null);
      String string0 = asArrayTypeDeserializer0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, (JavaType) null);
      Class<?> class1 = asArrayTypeDeserializer0.getDefaultImpl();
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(typeFactory0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType1, classNameIdResolver0, "", true, mapLikeType0);
      String string0 = asArrayTypeDeserializer0.baseTypeName();
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, minimalClassNameIdResolver0, "; id-resolver: ", false, placeholderForType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer1 = new AsArrayTypeDeserializer(asArrayTypeDeserializer0, (BeanProperty) null);
      assertEquals("; id-resolver: ", asArrayTypeDeserializer1.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, simpleType0);
      PropertyName propertyName0 = new PropertyName("yyyy-MM-dd");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std0);
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, typeDeserializer0.getTypeInclusion());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, (TypeIdResolver) null, "type ids are not statically known", false, mapLikeType0);
      asArrayTypeDeserializer0.getTypeInclusion();
      assertEquals("type ids are not statically known", asArrayTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, classNameIdResolver0, "", true, mapLikeType0);
      TypeIdResolver typeIdResolver0 = asArrayTypeDeserializer0.getTypeIdResolver();
      assertEquals(JsonTypeInfo.Id.CLASS, typeIdResolver0.getMechanism());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapLikeType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "", true, mapLikeType0);
      String string0 = asArrayTypeDeserializer0.getPropertyName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, (TypeIdResolver) null, "type ids are not statically known", false, mapLikeType0);
      asArrayTypeDeserializer0.getDefaultImpl();
      assertEquals("type ids are not statically known", asArrayTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType0, (TypeBindings) null, (Object) class0, (Object) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, classNameIdResolver0, "j7t|5>eQ/OhUrzu%7", false, arrayType0, jsonTypeInfo_As0);
      asPropertyTypeDeserializer0.getDefaultImpl();
      assertEquals("j7t|5>eQ/OhUrzu%7", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, (TypeIdResolver) null, "STRING", true, mapType0);
      asExternalTypeDeserializer0.getDefaultImpl();
      assertEquals("STRING", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot upgrade from an instance of ", false, (JavaType) null);
      asArrayTypeDeserializer0.baseType();
      assertEquals("Cannot upgrade from an instance of ", asArrayTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<POJONode> class0 = POJONode.class;
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, javaTypeArray0, javaTypeArray0[2]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(referenceType1, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType1, minimalClassNameIdResolver0, "y-x37'B|C>X!/mO!a2h", false, collectionLikeType0);
      asExternalTypeDeserializer0.baseType();
      assertEquals("y-x37'B|C>X!/mO!a2h", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, (TypeIdResolver) null, "type ids are not statically known", false, mapLikeType0);
      asArrayTypeDeserializer0.baseType();
      assertEquals("type ids are not statically known", asArrayTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionType0, classNameIdResolver0, "~=M#jx '`mBEBQQ", true, collectionType0);
      asWrapperTypeDeserializer0.baseType();
      assertEquals("~=M#jx '`mBEBQQ", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withValueHandler(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(arrayType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType1, minimalClassNameIdResolver0, "!u5.u.q0%{bpQ{d=", false, arrayType1, jsonTypeInfo_As0);
      asPropertyTypeDeserializer0.baseType();
      assertEquals("!u5.u.q0%{bpQ{d=", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "p?[Ow1'yzq2,<E", true, javaType0);
      asExternalTypeDeserializer0.baseType();
      assertEquals("p?[Ow1'yzq2,<E", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapType0, classNameIdResolver0, "i?q2/dPxP&T^0FRv~_", false, mapType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(mapType0).when(deserializationProblemHandler0).handleMissingTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class) , anyString());
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler(deserializationProblemHandler0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 16, (byte) (-31));
      JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig1, jsonParser0, injectableValues_Std0);
      asArrayTypeDeserializer0._handleMissingTypeId(defaultDeserializationContext0, "UTF-32BE");
      assertEquals("i?q2/dPxP&T^0FRv~_", asArrayTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot upgrade from an instance of ", false, (JavaType) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      asArrayTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, deserializationContext0);
      assertEquals("Cannot upgrade from an instance of ", asArrayTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "No (native) type id found when one was expected for polymorphic type handling", false, javaType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, (JsonParser) null, injectableValues_Std0);
      try { 
        asPropertyTypeDeserializer0._handleMissingTypeId(defaultDeserializationContext0, "No (native) type id found when one was expected for polymorphic type handling");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: No (native) type id found when one was expected for polymorphic type handling
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, (TypeIdResolver) null, "STRING", true, mapType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asExternalTypeDeserializer0._findDeserializer(defaultDeserializationContext_Impl0, "; id-resolver: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot upgrade from an instance of ", false, (JavaType) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        asArrayTypeDeserializer0._findDeserializer(deserializationContext0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '' as a subtype of null: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "fSS{VFHFu", false, (JavaType) null, jsonTypeInfo_As0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, (String) null, false, resolvedRecursiveType0, jsonTypeInfo_As0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 30);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, deserializationContext0, coreXMLDeserializers_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, "", false, mapLikeType0, jsonTypeInfo_As0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, deserializationContext0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot upgrade from an instance of ", false, (JavaType) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot upgrade from an instance of ", false, (JavaType) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      PropertyName propertyName0 = new PropertyName("Current context not Object but ", "CANONICALIZE_FIELD_NAMES");
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<ChronoUnit> class0 = ChronoUnit.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "JSON", (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      AsArrayTypeDeserializer asArrayTypeDeserializer1 = new AsArrayTypeDeserializer(asArrayTypeDeserializer0, beanProperty_Std0);
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer1._handleUnknownTypeId(deserializationContext0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "No (native) type id found when one was expected for polymorphic type handling", true, (JavaType) null, jsonTypeInfo_As0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, deserializationContext0, "No (native) type id found when one was expected for polymorphic type handling");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'No (native) type id found when one was expected for polymorphic type handling' as a subtype of null: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "fSS{VFHFu", true, (JavaType) null, jsonTypeInfo_As0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      StringReader stringReader0 = new StringReader("fSS{VFHFu");
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
      asPropertyTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, deserializationContext0, (Object) null);
      assertEquals("fSS{VFHFu", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "", false, javaType0);
      Class<JavaType> class0 = JavaType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 4390);
      asPropertyTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
      JsonDeserializer<Object> jsonDeserializer0 = asPropertyTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      JsonDeserializer<Object> jsonDeserializer0 = asPropertyTypeDeserializer0._findDefaultImplDeserializer(deserializationContext0);
      asPropertyTypeDeserializer0._defaultImplDeserializer = jsonDeserializer0;
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, deserializationContext0, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'com.fasterxml.jackson.databind.ObjectMapper@2' as a subtype of null: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      byte[] byteArray0 = new byte[9];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot upgrade from an instance of ", false, (JavaType) null);
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer0.baseTypeName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", false, (JavaType) null);
      TypeIdResolver typeIdResolver0 = asPropertyTypeDeserializer0.getTypeIdResolver();
      assertNull(typeIdResolver0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot upgrade from an instance of ", false, (JavaType) null);
      String string0 = asArrayTypeDeserializer0.getPropertyName();
      assertEquals("Cannot upgrade from an instance of ", string0);
  }
}
