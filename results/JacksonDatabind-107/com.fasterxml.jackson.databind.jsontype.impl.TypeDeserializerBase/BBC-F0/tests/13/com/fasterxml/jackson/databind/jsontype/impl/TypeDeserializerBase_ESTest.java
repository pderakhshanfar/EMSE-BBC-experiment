/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 21:01:57 GMT 2020
 */

package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeDeserializerBase_ESTest extends TypeDeserializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Object> class1 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0, collectionLikeType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, mapLikeType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, (TypeFactory) null);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "", false, referenceType1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asExternalTypeDeserializer0._handleMissingTypeId(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      Class<MapType> class0 = MapType.class;
      Class<BeanDeserializer> class1 = BeanDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, "ru", true, (JavaType) null, jsonTypeInfo_As0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._handleUnknownTypeId((DeserializationContext) null, "was expecting a colon to separate field name and value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapLikeType mapLikeType0 = mapType0.withKeyType(mapType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapLikeType0, mapLikeType0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "", false, mapType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapLikeType mapLikeType0 = mapType0.withKeyTypeHandler(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapType0, mapType0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "", false, mapType0);
      String string0 = asArrayTypeDeserializer0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonToken> class0 = JsonToken.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "z", true, collectionLikeType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer1 = new AsWrapperTypeDeserializer(asWrapperTypeDeserializer0, (BeanProperty) null);
      assertEquals("z", asWrapperTypeDeserializer1.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, minimalClassNameIdResolver0, "o3%", true, arrayType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, (BeanProperty) null);
      assertEquals("o3%", asPropertyTypeDeserializer1.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "rxu", true, (JavaType) null, jsonTypeInfo_As0);
      asPropertyTypeDeserializer0.getTypeInclusion();
      assertEquals("rxu", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapType0, mapType0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapType0, minimalClassNameIdResolver0, "", false, mapType0);
      TypeIdResolver typeIdResolver0 = asArrayTypeDeserializer0.getTypeIdResolver();
      assertEquals("class name used as type id", typeIdResolver0.getDescForKnownTypeIds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      String string0 = asWrapperTypeDeserializer0.getPropertyName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "rxu", true, (JavaType) null, jsonTypeInfo_As0);
      asPropertyTypeDeserializer0.getDefaultImpl();
      assertEquals("rxu", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonToken> class0 = JsonToken.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "z", true, collectionLikeType0);
      Class<?> class1 = asWrapperTypeDeserializer0.getDefaultImpl();
      assertEquals("z", asWrapperTypeDeserializer0.getPropertyName());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonToken> class0 = JsonToken.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(arrayType0, classNameIdResolver0, "", false, arrayType0);
      Class<?> class1 = asArrayTypeDeserializer0.getDefaultImpl();
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "rxu", true, (JavaType) null, jsonTypeInfo_As0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty((BeanProperty) null);
      assertEquals("rxu", typeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      Class<MapType> class0 = MapType.class;
      Class<BeanDeserializer> class1 = BeanDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, "ru", true, (JavaType) null, jsonTypeInfo_As0);
      asPropertyTypeDeserializer0.baseTypeName();
      assertEquals("ru", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.SettableAnyProperty", true, (JavaType) null);
      asWrapperTypeDeserializer0.baseType();
      assertEquals("com.fasterxml.jackson.databind.deser.SettableAnyProperty", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapType1, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType1, minimalClassNameIdResolver0, (String) null, false, mapType1);
      JavaType javaType0 = asPropertyTypeDeserializer0.baseType();
      assertTrue(javaType0.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapType0, mapType0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "", false, mapType0, jsonTypeInfo_As0);
      JavaType javaType0 = asPropertyTypeDeserializer0.baseType();
      assertSame(javaType0, collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonToken> class0 = JsonToken.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(arrayType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(arrayType1, classNameIdResolver0, "", false, arrayType1);
      JavaType javaType0 = asArrayTypeDeserializer0.baseType();
      assertFalse(javaType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "F'", false, javaType0, jsonTypeInfo_As0);
      JavaType javaType1 = asPropertyTypeDeserializer0.baseType();
      assertNotNull(javaType1);
      assertEquals("F'", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "rxu", true, (JavaType) null, jsonTypeInfo_As0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      IOContext iOContext0 = new IOContext(bufferRecycler0, nioPathDeserializer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      asPropertyTypeDeserializer0._deserializeWithNativeTypeId(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
      assertEquals("rxu", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "time", false, (JavaType) null, jsonTypeInfo_As0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0.baseTypeName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "rxu", true, (JavaType) null, jsonTypeInfo_As0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, (JsonParser) null, injectableValues_Std0);
      try { 
        asPropertyTypeDeserializer0._handleUnknownTypeId(defaultDeserializationContext0, "rxu");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'rxu' as a subtype of null: known type ids = class name used as type id
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "`A0yV", true, (JavaType) null, jsonTypeInfo_As0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      try { 
        asPropertyTypeDeserializer0._handleMissingTypeId(defaultDeserializationContext0, "known type ids = ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null: known type ids = 
         //  at [Source: (char[])\"\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, minimalClassNameIdResolver0, "o3%", true, arrayType0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._findDeserializer((DeserializationContext) null, "o3%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "time", false, (JavaType) null, jsonTypeInfo_As0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "", false, referenceType0, jsonTypeInfo_As0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "rxu", true, (JavaType) null, jsonTypeInfo_As0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, arrayList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '[]' as a subtype of null: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "Qky3", true, (JavaType) null, jsonTypeInfo_As0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "; id-resolver: ", true, (JavaType) null, jsonTypeInfo_As0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer1._handleUnknownTypeId((DeserializationContext) null, "; id-resolver: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "ru", true, (JavaType) null, jsonTypeInfo_As0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, (DeserializationContext) null, "!A4O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "rxu", true, (JavaType) null, jsonTypeInfo_As0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      asPropertyTypeDeserializer0._deserializeWithNativeTypeId(filteringParserDelegate0, defaultDeserializationContext_Impl0, (Object) null);
      assertEquals("rxu", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<JavaType> class0 = JavaType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor$Base", false, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Object> jsonDeserializer0 = asArrayTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext_Impl0);
      assertNotNull(jsonDeserializer0);
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor$Base", false, resolvedRecursiveType0, jsonTypeInfo_As0);
      asPropertyTypeDeserializer0._defaultImplDeserializer = jsonDeserializer0;
      asPropertyTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext_Impl0);
      assertEquals("com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor$Base", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "rxu", true, (JavaType) null, jsonTypeInfo_As0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        asPropertyTypeDeserializer0._findDeserializer(defaultDeserializationContext_Impl0, "java.lang.Integer");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.lang.Integer' as a subtype of null: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(arrayType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType0, minimalClassNameIdResolver0, "J`$CdLFX8 Q=l", true, arrayType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 870);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TreeSet> class0 = TreeSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", true, collectionType0);
      asArrayTypeDeserializer0.getTypeIdResolver();
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", asArrayTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, minimalClassNameIdResolver0, (String) null, false, mapType0);
      Class<?> class1 = asPropertyTypeDeserializer0.getDefaultImpl();
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "yv", false, collectionLikeType0);
      String string0 = asArrayTypeDeserializer0.getPropertyName();
      assertEquals("yv", string0);
  }
}
