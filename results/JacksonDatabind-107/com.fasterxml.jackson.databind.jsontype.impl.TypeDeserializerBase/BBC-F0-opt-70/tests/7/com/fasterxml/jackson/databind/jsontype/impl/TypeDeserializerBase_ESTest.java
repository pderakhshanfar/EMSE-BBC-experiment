/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 00:24:10 GMT 2021
 */

package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.sql.SQLNonTransientException;
import java.sql.SQLTransientException;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeDeserializerBase_ESTest extends TypeDeserializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(377);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "", true, placeholderForType0);
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._handleMissingTypeId((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "3OcPn", false, (JavaType) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        asExternalTypeDeserializer0._handleUnknownTypeId(deserializationContext0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType1, minimalClassNameIdResolver0, "", true, collectionLikeType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "{'(.yJ|A.'V", true, (JavaType) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals("{'(.yJ|A.'V", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, javaType0);
      Class<Locale> class0 = Locale.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 195);
      asWrapperTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._findDeserializer(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, minimalClassNameIdResolver0, "=1Q+Jn5Th:Vx]", true, collectionLikeType0);
      asWrapperTypeDeserializer0.toString();
      assertEquals("=1Q+Jn5Th:Vx]", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "; id-resolver: ", false, (JavaType) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      // Undeclared exception!
      try { 
        asArrayTypeDeserializer0._deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "N|%O(_,JgtUc*/)", false, collectionLikeType0, jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, (BeanProperty) null);
      assertEquals("N|%O(_,JgtUc*/)", asPropertyTypeDeserializer1.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, minimalClassNameIdResolver0, "", false, resolvedRecursiveType0);
      JsonTypeInfo.As jsonTypeInfo_As0 = asPropertyTypeDeserializer0.getTypeInclusion();
      assertEquals(JsonTypeInfo.As.PROPERTY, jsonTypeInfo_As0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "^d'(b{6", true, collectionLikeType0);
      TypeIdResolver typeIdResolver0 = asWrapperTypeDeserializer0.getTypeIdResolver();
      assertNotNull(typeIdResolver0);
      assertEquals("^d'(b{6", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "", true, collectionLikeType0, jsonTypeInfo_As0);
      String string0 = asPropertyTypeDeserializer0.getPropertyName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "; id-resolver: ", true, (JavaType) null);
      asExternalTypeDeserializer0.getDefaultImpl();
      assertEquals("; id-resolver: ", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "U}iDY<aBlQ8hyxLax", false, collectionLikeType0);
      Class<?> class1 = asExternalTypeDeserializer0.getDefaultImpl();
      assertNotNull(class1);
      assertEquals("U}iDY<aBlQ8hyxLax", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonEncoding> class0 = JsonEncoding.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "^d'(b{6", true, collectionLikeType0);
      Class<?> class1 = asWrapperTypeDeserializer0.getDefaultImpl();
      assertNotNull(class1);
      assertEquals("^d'(b{6", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      Class<NioPathDeserializer> class1 = NioPathDeserializer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[1]);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, (TypeIdResolver) null, "", false, arrayType0, jsonTypeInfo_As0);
      Class<?> class2 = asPropertyTypeDeserializer0.getDefaultImpl();
      assertNotNull(class2);
      assertEquals("class [Ljava.io.ObjectInputStream;", class2.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "N|%O(_,JgtUc*/)", false, collectionLikeType0, jsonTypeInfo_As0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty((BeanProperty) null);
      assertEquals("N|%O(_,JgtUc*/)", typeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "^d'(b{6", true, collectionLikeType0);
      asWrapperTypeDeserializer0.baseTypeName();
      assertEquals("^d'(b{6", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, minimalClassNameIdResolver0, "{'(.yJ|A.'V", true, collectionLikeType0, jsonTypeInfo_As0);
      JavaType javaType0 = asPropertyTypeDeserializer0.baseType();
      assertEquals("{'(.yJ|A.'V", asPropertyTypeDeserializer0.getPropertyName());
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType1, minimalClassNameIdResolver0, "", true, collectionLikeType0);
      JavaType javaType0 = asWrapperTypeDeserializer0.baseType();
      assertTrue(javaType0.useStaticType());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      Class<Integer> class1 = Integer.TYPE;
      Class<JsonEncoding> class2 = JsonEncoding.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "{'(.yJ|A.'V", true, mapLikeType0, jsonTypeInfo_As0);
      JavaType javaType0 = asPropertyTypeDeserializer0.baseType();
      assertNotNull(javaType0);
      assertEquals("{'(.yJ|A.'V", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "FLUSH_AFTER_WRITE_VALUE", false, collectionLikeType0, jsonTypeInfo_As0);
      JavaType javaType0 = asPropertyTypeDeserializer0.baseType();
      assertNotNull(javaType0);
      assertEquals("FLUSH_AFTER_WRITE_VALUE", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, (TypeFactory) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      Class<Module> class1 = Module.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionType0, minimalClassNameIdResolver0, "piOK MzE0{|S:", false, collectionType0);
      JavaType javaType1 = asExternalTypeDeserializer0.baseType();
      assertNotNull(javaType1);
      assertEquals("piOK MzE0{|S:", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<HashMap> class1 = HashMap.class;
      Class<NioPathDeserializer> class2 = NioPathDeserializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) collectionLikeType0, (JavaType) arrayType0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      Class<TypeIdResolver> class3 = TypeIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class3, (JavaType) mapType0);
      ArrayType arrayType1 = ArrayType.construct((JavaType) arrayType0, typeBindings0, (Object) arrayType0, (Object) "w");
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType1, minimalClassNameIdResolver0, "N", true, collectionLikeType0, jsonTypeInfo_As0);
      JavaType javaType0 = asPropertyTypeDeserializer0.baseType();
      assertNotNull(javaType0);
      assertEquals("N", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonEncoding> class0 = JsonEncoding.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "hs%cs", true, collectionLikeType0, jsonTypeInfo_As0);
      JavaType javaType0 = asPropertyTypeDeserializer0.baseType();
      assertEquals("hs%cs", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, minimalClassNameIdResolver0, "{'(.yJ|A.'V", false, javaType0);
      JavaType javaType1 = asPropertyTypeDeserializer0.baseType();
      assertEquals("{'(.yJ|A.'V", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "JSON", false, (JavaType) null);
      asPropertyTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext_Impl0);
      assertEquals("JSON", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "JSON", false, (JavaType) null);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
      assertEquals("JSON", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, true, (JavaType) null);
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0.baseTypeName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, minimalClassNameIdResolver0, "; id-resolver: ", false, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLTransientException0);
      defaultDeserializationContext_Impl0.hasValueDeserializerFor(javaType0, atomicReference0);
      // Undeclared exception!
      try { 
        asExternalTypeDeserializer0._handleUnknownTypeId(defaultDeserializationContext_Impl0, "; id-resolver: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "?c7$Q\"sbKx-PZi;J", true, (JavaType) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, (JsonParser) null, (InjectableValues) null);
      try { 
        asPropertyTypeDeserializer0._handleMissingTypeId(defaultDeserializationContext0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, minimalClassNameIdResolver0, "{'(.yJ|A.'V", false, javaType0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        asPropertyTypeDeserializer0._findDeserializer(defaultDeserializationContext_Impl0, "{'(.yJ|A.'V");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '{'(.yJ|A.'V' as a subtype of [collection-like type; class com.fasterxml.jackson.databind.node.ObjectNode, contains [simple type, class java.lang.Object]]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, false, (JavaType) null, jsonTypeInfo_As0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "", true, collectionLikeType0);
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(216);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "]", false, placeholderForType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "No (native) type id found when one was expected for polymorphic type handling", true, collectionLikeType0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, collectionLikeType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, beanProperty_Std0);
      // Undeclared exception!
      try { 
        asExternalTypeDeserializer1._handleUnknownTypeId(defaultDeserializationContext_Impl0, "; id-resolver: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "{'(.yJ|A.'V", true, collectionLikeType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, "{'(.yJ|A.'V");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '{'(.yJ|A.'V' as a subtype of [collection-like type; class com.fasterxml.jackson.databind.node.ObjectNode, contains [simple type, class java.lang.Object]]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "{'(.yJ|A.'V", false, collectionLikeType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParserDelegate0, (DeserializationContext) null, minimalClassNameIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "JSON", true, javaType0);
      // Undeclared exception!
      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "JSON", true, (JavaType) null);
      asWrapperTypeDeserializer0.getTypeIdResolver();
      assertEquals("JSON", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionType0, (TypeIdResolver) null, "No (native) type id found when one was expected for polymorphic type handling", true, collectionType0);
      Class<?> class1 = asExternalTypeDeserializer0.getDefaultImpl();
      assertNotNull(class1);
      assertEquals("No (native) type id found when one was expected for polymorphic type handling", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class0 = ObjectNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "{'(.yJ|A.'V", true, collectionLikeType0, jsonTypeInfo_As0);
      String string0 = asPropertyTypeDeserializer0.getPropertyName();
      assertEquals("{'(.yJ|A.'V", string0);
  }
}
