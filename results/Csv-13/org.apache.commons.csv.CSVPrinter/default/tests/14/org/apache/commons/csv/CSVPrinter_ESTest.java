/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 07:34:42 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      Object[] objectArray0 = new Object[10];
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(":f[-5t&%'m");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|oHkK;z}");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("Unexpected Quot vrlu: ");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Float float0 = new Float((-433.2F));
      // Undeclared exception!
      try { 
        cSVPrinter0.print(float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[37];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#RfMu)/#6+VW&k0\t");
      MockFileWriter mockFileWriter0 = new MockFileWriter("#RfMu)/#6+VW&k0\t");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecord(objectArray0);
      PriorityQueue<Short> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Short>((Collection<? extends Short>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0]a]\"Q7g");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(") invaldd parse sequence");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
      Character.valueOf('C');
      Character character0 = Character.valueOf('M');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 'M';
      charArray0[2] = 'C';
      charArray0[3] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat2.print(charBuffer0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      CSVPrinter cSVPrinter1 = null;
      try {
        cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat4);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[19];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("2m3rZx<");
      MockFileWriter mockFileWriter0 = new MockFileWriter("2m3rZx<");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter(") ntaldd parse squne");
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      Character character0 = new Character('j');
      cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      mockFileWriter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('W');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(") invalid parse sequence");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(") invalid parse sequence");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat0.withNullString("");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat6 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withQuote('W');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(resultSet0);
      CSVPrinter cSVPrinter0 = cSVFormat7.print(mockPrintWriter0);
      cSVPrinter0.printRecord(objectArray0);
      Float float0 = new Float((-1786.27848501));
      cSVPrinter0.print(float0);
      cSVPrinter0.printComment("5`|K0V@pl");
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[5];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String string0 = "^A)F6_Z^8XYk ";
      MockFileWriter mockFileWriter0 = new MockFileWriter("^A)F6_Z^8XYk ");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^A)F6_Z^8XYk ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]{");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[5];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter("The delimiter cannot be a line break");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AP3+^j9ugTqE#S");
      cSVFormat0.print(mockFileWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[7];
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("Unexpected Quote value: ");
      cSVFormat2.print(pipedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpcted Quot vlu: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      mockPrintStream0.println('\\');
      Character character0 = new Character('e');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>('e');
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("format");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintStream0;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, '\\');
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientException0);
      arrayList0.add(bufferedOutputStream0);
      objectArray0[3] = (Object) arrayList0;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat2;
      objectArray1[1] = (Object) "format";
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) "format";
      objectArray1[4] = (Object) "format";
      objectArray1[5] = (Object) cSVPrinter0;
      objectArray1[6] = (Object) "org.apache.commons.csv.CSVPrinter";
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commonJ.csv.CVPrinter");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      Character character0 = new Character('e');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter("The delimiter cannot be a line break");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      pipedWriter0.close();
      cSVFormat0.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Double double0 = new Double(332.82342134);
      try { 
        cSVPrinter0.print(double0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      pipedWriter0.close();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Double double0 = new Double(332.82342134);
      try { 
        cSVPrinter0.print(double0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("1Dr,UQg^0N=k}i");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<BufferedWriter> priorityQueue0 = new PriorityQueue<BufferedWriter>((SortedSet<? extends BufferedWriter>) treeSet0);
      MockFile mockFile0 = new MockFile("1Dr,UQg^0N=k}i");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      priorityQueue0.add(bufferedWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter(") ntaldd parse sq=e");
      cSVFormat0.withEscape('~');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("E ntaldd parse saune");
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("E ntaldd parse saune");
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printComment("E ntaldd parse saune");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invalid parse sequence");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
      cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat3.withEscape('p');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat4;
      cSVFormat5.format(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("|XVn");
      cSVFormat2.withDelimiter('x');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Mh7-tLN+p<211o", true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat3.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment("Mh7-tLN+p<211o");
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("B`\"uVNV|F");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("out", true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat3.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment("out");
      cSVPrinter0.printRecords((Object[]) stringArray0);
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(617, (Comparator<? super SQLTimeoutException>) null);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('9');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printComment("out");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockFile mockFile0 = new MockFile("TDF", "TDF");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((Object) pipedWriter0);
      CharBuffer.wrap((CharSequence) "TDF");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\"');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("R^E9U(btno");
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('Y');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(pipedWriter0);
      cSVFormat5.withAllowMissingColumnNames();
      try { 
        cSVPrinter0.printComment("[vtBmMGi|25");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ") invaldd parse sequence");
      Character character0 = new Character('4');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat2.print(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("E ntaldd parse saune");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("E ntaldd parse saune");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character character0 = new Character('U');
      cSVFormat0.withEscape(character0);
      Character character1 = new Character('i');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character1);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.withRecordSeparator(") invalid parse sequence");
      MockFile mockFile0 = new MockFile("format");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>(54);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.csv.CSVPrinter$1");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("8b", "8b", hashMap0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException0);
      cSVPrinter0.print(cSVFormat1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 54);
      arrayList0.add(bufferedOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      cSVPrinter0.printRecord(objectArray0);
      Comparator<FilterOutputStream> comparator0 = (Comparator<FilterOutputStream>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<BufferedOutputStream> treeSet0 = new TreeSet<BufferedOutputStream>();
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileWriter mockFileWriter0 = new MockFileWriter(") nvaldd parse sequene");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode1);
      cSVPrinter0.printRecords((Iterable<?>) enumSet0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invalid parse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(") invalid parse sequence");
      cSVFormat2.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      QuoteMode quoteMode1 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat1.withQuoteMode(quoteMode1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVFormat5.format(objectArray0);
      cSVPrinter0.println();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(") invalid parse sequence");
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLNonTransientConnectionException0);
      cSVPrinter1.print(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\u008A');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) mockFileWriter0;
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('\\');
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockFile mockFile0 = new MockFile("TDF", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((Object) rowSetMetaDataImpl0);
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      objectArray0[0] = (Object) cSVFormat2;
      mockFile0.setReadable(false, false);
      objectArray0[1] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[4] = (Object) mockFile0;
      cSVFormat3.format(objectArray0);
      Object object3 = new Object();
      Character character1 = new Character('2');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character1);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('}');
      cSVFormat5.format(objectArray0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('R');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("\" in ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("\" in ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) "\" in ";
      objectArray0[6] = (Object) character0;
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ") invalid parse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('\\');
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockFile mockFile0 = new MockFile("TDF", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((Object) rowSetMetaDataImpl0);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "O'`'i$";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "TDF";
      PrintWriter printWriter1 = mockPrintWriter0.printf("O'`'i$", objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter1, cSVFormat4);
      Object object1 = new Object();
      Object object2 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat3.withQuoteMode(quoteMode0);
      Object object3 = new Object();
      QuoteMode quoteMode1 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat1.withQuoteMode(quoteMode1);
      cSVFormat5.format(objectArray0);
      cSVFormat1.format(objectArray0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(printWriter0);
      cSVPrinter1.printRecord((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(10);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invalid parse sequence");
      mockFileWriter0.close();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = objectArray0[2];
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) pipedWriter0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.withRecordSeparator("K iIMZ?&");
      cSVFormat2.withSkipHeaderRecord();
      CharBuffer.wrap((CharSequence) "K iIMZ?&");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-1273));
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      hashSet0.add(sQLTimeoutException0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = objectArray0[2];
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) pipedWriter0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.withRecordSeparator("");
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-1273));
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      hashSet0.add(sQLTimeoutException0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[11];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('\\');
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      MockFile mockFile0 = new MockFile("TDF", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      Object object0 = new Object();
      mockFile0.getAbsoluteFile();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) mockFile0;
      Object object3 = new Object();
      Object object4 = new Object();
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('@');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]3F");
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.print(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockFile mockFile0 = new MockFile("TDF", "TDF");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      Float float0 = new Float(0.0F);
      try { 
        cSVPrinter0.print(float0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = (Object) cSVFormat2;
      Object object1 = new Object();
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 26);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      hashSet0.add(sQLTimeoutException0);
      hashSet0.add(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "W");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('W');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withNullString(") invalid parse sequence");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(") invalid parse sequence");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      PrintWriter printWriter0 = mockPrintWriter0.printf(") invalid parse sequence", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray1 = new Object[3];
      Object object2 = new Object();
      objectArray1[0] = object2;
      objectArray1[1] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray1);
      Object[] objectArray2 = new Object[4];
      objectArray2[0] = object0;
      objectArray2[1] = (Object) cSVPrinter0;
      objectArray2[2] = (Object) mockPrintWriter0;
      objectArray2[3] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("'7");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0]a]\"Q7g");
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invaldd parse sequence");
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invaldd parse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.print(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) sQLTimeoutException0;
      objectArray0[1] = (Object) cSVFormat0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[0];
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object1 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat2.withQuoteMode(quoteMode0);
      Object object2 = new Object();
      Object object3 = new Object();
      cSVFormat1.format(objectArray0);
      cSVPrinter0.printComment("(4hh:V.!2Gb0^3vFI");
      Float float0 = new Float((-1.0));
      try { 
        cSVPrinter0.print(float0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commonJ.csv.CVPrinter");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commonJ.csv.CVPrinter");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = ") invalid parse sequence";
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ") invalid parse sequence");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invalid parse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      rowSetMetaDataImpl0.setColumnCount(23);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, true, true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invalid parse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true, true, true, true).when(resultSet0).next();
      // Undeclared exception!
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invalid parse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ") invalid parse sequence";
      objectArray0[1] = (Object) resultSet0;
      objectArray0[2] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) ") invalid parse sequence";
      objectArray0[6] = (Object) ") invalid parse sequence";
      objectArray0[7] = (Object) mockFileWriter0;
      objectArray0[8] = (Object) rowSetMetaDataImpl1;
      cSVPrinter0.printRecords(objectArray0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>(vector0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(") invalid parse sequence", "~h;*", 644);
      hashSet0.add(sQLTimeoutException0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ") invaldd parse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object object0 = new Object();
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = 'T';
      charArray0[4] = '|';
      charArray0[5] = ')';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      HashSet<Byte> hashSet0 = new HashSet<Byte>();
      TreeSet<Byte> treeSet0 = new TreeSet<Byte>(hashSet0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(122);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Escape=<");
      mockPrintWriter0.print(1335.7483);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVFormat1.withSkipHeaderRecord();
      Object object2 = new Object();
      cSVFormat1.format(objectArray0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C*G|%B2J_=0R~WG5G");
      PrintWriter printWriter0 = mockPrintWriter0.printf("|oM\"}", (Object[]) null);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?0H'x*wB44on2:*");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('#');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat1.withRecordSeparator("C*G|%B2J_=0R~WG5G");
      cSVFormat1.withHeader(resultSet1);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      cSVPrinter0.printComment("?0H'x*wB44on2:*");
      cSVPrinter0.print("C*G|%B2J_=0R~WG5G");
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet2).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("'7");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[37];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AP3#+^ 9ugTqE#S");
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AP3+^j9ugTqE#S");
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreSurroundingSpaces();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "$");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invalid parse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl1).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invalid parse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true, true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("l*Oiy");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      hashSet0.clone();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVRecord");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "org.apache.commons.csv.CSVRecord");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat3.withQuote('1');
      cSVFormat1.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      char char0 = 'v';
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');
      String string0 = "U=~Z";
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("U=~Z");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "U=~Z");
      // Undeclared exception!
      try { 
        cSVFormat3.print(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("!8$`q]|0t_(QLFL7");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      cSVFormat2.format(objectArray0);
      cSVPrinter0.printComment("(4hh:V.!2Gb0^3vFI");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[19];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(37);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray1 = new char[2];
      charArray1[0] = '>';
      charArray1[1] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2760);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Index for header '%s' is %d but CSVRecord only has %d values!");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) '>';
      objectArray0[6] = (Object) "j?j?.4H 6f?BWq=x";
      objectArray0[7] = (Object) 'M';
      objectArray0[8] = (Object) '>';
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("b1^HKK", "Index for header '%s' is %d but CSVRecord only has %d values!");
      mockPrintStream0.println((Object) sQLTimeoutException0);
      PrintStream printStream0 = mockPrintStream0.printf("j?j?.4H 6f?BWq=x", objectArray0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter1.flush();
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 26);
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      hashSet0.add(sQLTimeoutException0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLClientInfoException0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = '\\';
      charArray0[2] = '/';
      CSVFormat.newFormat('C');
      charArray0[3] = '}';
      charArray0[4] = '>';
      charArray0[5] = '/';
      charArray0[6] = '0';
      charArray0[7] = '6';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(outputStreamWriter0);
      cSVPrinter1.flush();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) '6';
      objectArray0[2] = (Object) '}';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("'{b|3z/?iT1bw]T");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) bufferedOutputStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) bufferedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("org.apache.commons.csv.CSVPrinter$1", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      cSVPrinter0.println();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      cSVPrinter0.print(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileWriter mockFileWriter0 = new MockFileWriter("6^iDBf%0G");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("cOiH");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter(") ntaldd parse sq=e");
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      cSVPrinter0.print(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('e');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.print(character0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "E-fWUR");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printComment("E-fWUR");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      Character character0 = Character.valueOf('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.print(character0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ") invalidparse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[6] = object1;
      cSVFormat1.format(objectArray0);
      cSVPrinter0.printComment("Unexpected Quote value: ");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('d');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = 'T';
      charArray0[4] = '|';
      charArray0[5] = ')';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      HashSet<Byte> hashSet0 = new HashSet<Byte>();
      TreeSet<Byte> treeSet0 = new TreeSet<Byte>(hashSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      TreeSet<Double> treeSet0 = new TreeSet<Double>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "W");
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invalid parse sequence");
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('p');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(") invalid parse sequence");
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(true);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat3.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('p');
      cSVFormat4.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[22];
      objectArray0[1] = (Object) ") invalid parse sequence";
      cSVFormat4.format(objectArray0);
      cSVPrinter0.print(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9k!");
      CharBuffer charBuffer0 = CharBuffer.allocate(122);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) "9k!";
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("'{b|3z/?iT1bw]T");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[4] = (Object) mockPrintStream0;
      mockPrintStream0.println(34);
      objectArray0[5] = (Object) bufferedOutputStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) bufferedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("org.apache.commons.csv.CSVPrinter$1", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      cSVPrinter0.println();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      cSVPrinter0.print(sQLClientInfoException0);
      cSVPrinter0.print(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      MockFileWriter mockFileWriter0 = new MockFileWriter("K{(!");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) "K{(!";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) "K{(!";
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.print(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('K');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.print(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("U=~Z");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "U=~Z");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "U=~Z";
      cSVFormat3.withHeader((ResultSetMetaData) null);
      Character character0 = Character.valueOf('v');
      cSVFormat1.withEscape(character0);
      cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat1.withSkipHeaderRecord();
      cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat0.withQuote('=');
      objectArray0[1] = (Object) resultSet0;
      cSVFormat1.withAllowMissingColumnNames();
      objectArray0[2] = (Object) cSVFormat3;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(charBuffer0);
      cSVPrinter2.flush();
      cSVPrinter2.printComment("");
      assertNotSame(cSVPrinter2, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[7];
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals("\"\",,,,,,", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("MINIMAL");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "MINIMAL";
      objectArray0[1] = (Object) "MINIMAL";
      objectArray0[2] = (Object) "MINIMAL";
      objectArray0[3] = (Object) bufferedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "MINIMAL";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("MINIMAL", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      cSVPrinter0.flush();
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("]lP`!?`eESv ?`s");
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('7');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
