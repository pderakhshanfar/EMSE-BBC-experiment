/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 23:33:19 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.TreeSet;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AB92H");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      assertEquals("AB92H", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6dQ H>+T`Yb");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals("6dQ H>+T`Yb,6dQ H>+T`Yb,6dQ H>+T`Yb,6dQ H>+T`Yb,6dQ H>+T`Yb\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#KK2s");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('x');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) quoteMode0;
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode1);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "out");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('B');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(60L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("out");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Ba-|N$(/Fe.Z0]ycJ");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[8];
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[6];
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("#KK2s");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("#KK2s");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[18];
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockFileWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      doReturn(true, false).when(resultSet1).next();
      cSVPrinter1.printRecords(resultSet1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[15];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 3, 3);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments((Object[]) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      char[] charArray0 = new char[15];
      charArray0[0] = '>';
      charArray0[1] = '5';
      charArray0[2] = 'j';
      charArray0[3] = ';';
      charArray0[4] = 'w';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.flush();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("InW,8fuH", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLNonTransientException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(113);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 2217);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(109);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("InW,8fuH", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[6];
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLNonTransientConnectionException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('0');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#KK2s");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('t');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#KK2s");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      mockFileWriter0.close();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('t');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printComment(" q!zUr;{Cr\"5X8#)*Q'");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[15];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 3, 3);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("org.apache.commons.csv.CSVPrinter$1");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Integer integer0 = new Integer((-865));
      try { 
        cSVPrinter0.print(integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#KK2s");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("#KK2s");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[18];
      cSVPrinter0.printRecord(objectArray0);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVPrinter$1");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "xTp&Q:HC==";
      stringArray0[1] = ">1#";
      stringArray0[2] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printRecord((Iterable<?>) sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.println();
      assertEquals("\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "out");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('B');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.println();
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printComment("out");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(29);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true).when(resultSet0).next();
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("formqt", "'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>(priorityQueue0);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) treeSet0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f\"O3GGDn");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      LinkedList<MockFileReader> linkedList0 = new LinkedList<MockFileReader>();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      linkedList0.add(mockFileReader0);
      ArrayDeque<InputStreamReader> arrayDeque0 = new ArrayDeque<InputStreamReader>(linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#KK2s");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('v');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("#KK2s");
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      cSVPrinter0.print(dataInputStream0);
      cSVPrinter0.printComment("#KK2s");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('F');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(68, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[=EikgF%5hb/]s[Hj");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals("\"[=EikgF%5hb/]s[Hj\",[=EikgF%5hb/]s[Hj,[=EikgF%5hb/]s[Hj,[=EikgF%5hb/]s[Hj,[=EikgF%5hb/]s[Hj\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[8];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|mVn\"_Q");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals("\"|mVn\"\"_Q\"\r\n\"|mVn\"\"_Q\"\r\n\"|mVn\"\"_Q\"\r\n\"|mVn\"\"_Q\"\r\n\"|mVn\"\"_Q\"\r\n\"|mVn\"\"_Q\"\r\n\"|mVn\"\"_Q\"\r\n\"|mVn\"\"_Q\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(">qysg, JNO>q$1|,/:g");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\">qysg, JNO>q$1|,/:g\",\">qysg, JNO>q$1|,/:g\",\">qysg, JNO>q$1|,/:g\",\">qysg, JNO>q$1|,/:g\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Token type: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals("\"Unexpected Token type: \"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[10];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" }@=`p!wNdS");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals("\" }@=`p!wNdS\",\" }@=`p!wNdS\",\" }@=`p!wNdS\",\" }@=`p!wNdS\",\" }@=`p!wNdS\",\" }@=`p!wNdS\",\" }@=`p!wNdS\",\" }@=`p!wNdS\",\" }@=`p!wNdS\",\" }@=`p!wNdS\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(101);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      cSVPrinter0.print(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("#KK2s");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Double double0 = new Double(0.0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.print(double0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "out");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('c');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(49L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9=");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      assertEquals("9=", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.print((Object) null);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(113);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "url";
      stringArray0[1] = ", `nu";
      stringArray0[3] = "ETCCSCagyCCGDayN'u";
      stringArray0[4] = "HGn";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(113);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertNotNull(appendable0);
  }
}
