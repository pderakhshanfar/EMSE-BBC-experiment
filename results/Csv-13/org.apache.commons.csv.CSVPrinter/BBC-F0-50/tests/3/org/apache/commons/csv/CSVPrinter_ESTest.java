/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 20:40:26 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 110);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      pipedInputStream0.close();
      CSVParser cSVParser0 = cSVFormat1.parse(inputStreamReader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe closed
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("8 D|e_u");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withCommentMarker('X');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":wi\"zIrQk&#-wz:`");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 110);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      pipedInputStream0.close();
      CSVParser cSVParser0 = cSVFormat1.parse(inputStreamReader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe closed
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("8nW/cg");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9vsuuE");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment(".Is+t3iZR!-v.");
      Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<ObjectOutputStream> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+:sF7[qENHZhcCNdt,");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('O');
      String string0 = "";
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(':');
      Character character0 = new Character('I');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "sGv";
      stringArray0[1] = "M";
      stringArray0[2] = "";
      stringArray0[3] = "fHd&ID-2Ys";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat4);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.csv.Token$Type");
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.withIgnoreEmptyLines(true);
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'm';
      intArray0[1] = (int) 'm';
      intArray0[2] = (int) 'm';
      intArray0[3] = (int) 'm';
      intArray0[4] = (int) 'm';
      intArray0[5] = (int) 'm';
      intArray0[6] = (-210);
      intArray0[7] = (int) 'm';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.initCause(batchUpdateException0);
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) quoteMode0;
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter", "98B|8");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      mockFileWriter0.flush();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockFileWriter0.write(5);
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "nexpeced Uuote value: ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("nexpeced Uuote value: ");
      PrintStream printStream0 = mockPrintStream0.append('/');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      rowSetMetaDataImpl0.setColumnCount(8);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, true, true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat1.withNullString("EOF whilst processing escape sequence");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat1.withNullString("Aj/7");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Aj/7");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1092);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedReader0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('p');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat1.withHeaderComments(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(695);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer1.clear();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('~');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.csv.Token$Type");
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'm';
      intArray0[1] = (int) 'm';
      intArray0[2] = (int) 'm';
      intArray0[3] = (int) 'm';
      intArray0[4] = (int) 'm';
      intArray0[5] = (int) 'm';
      intArray0[6] = (-210);
      intArray0[7] = (int) 'm';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(batchUpdateException0);
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) quoteMode0;
      objectArray0[8] = (Object) sQLNonTransientConnectionException0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8r2Ivx;XP?$_XkI\"Z");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("No quotes mo-eoset but no escape characterXis set");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(')');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("Ba6^Q&D2~x7.`");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8r2Ivx;XP?$_XkI\"Z");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('k');
      cSVFormat1.withAllowMissingColumnNames();
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("8r2Ivx;XP?$_XkI\"Z");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8r2Ivx;XP?$_XkI\"Z");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-98);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8r2Ivx;XP?$_XkI\"Z");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "8r2Ivx;XP?$_XkI\"Z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'M';
      charArray0[2] = ']';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = 'b';
      charArray0[6] = 'e';
      charArray0[7] = '.';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.allocate(988);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) cSVFormat0;
      charBuffer1.codePoints();
      cSVFormat0.withQuote('Y');
      objectArray0[2] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      ArrayList<StringWriter> arrayList0 = new ArrayList<StringWriter>();
      HashSet<StringWriter> hashSet0 = new HashSet<StringWriter>(arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) priorityQueue0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) 'r';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(823);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("L<~)6hQ\" eeM.e'", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, charset0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.close();
      cSVPrinter0.getOut();
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat1.withQuote('\u0083');
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0083';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexp9cted Quote value:X");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".T");
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexp9cted Quote value:X");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(mockThrowable0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('p');
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.allocate(695);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexp9cted Quote value:X");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A7");
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Unexp9cted Quote value:X";
      objectArray0[1] = (Object) "D";
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = object0;
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "Unexp9cted Quote value:X";
      objectArray0[8] = (Object) "D";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "Unexpected Quote value: ";
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('L');
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('=');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("Unexpected Quote value: ");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('p');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat1.withHeaderComments(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(695);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withQuote('\u0083');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('\u0083');
      cSVFormat2.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(800);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat2);
      Object object0 = new Object();
      Long long0 = new Long((-5348L));
      cSVPrinter0.print(long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("d vBSz)#$R|YIR");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d vBSz)#$R|YIR");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("d vBSz)#$R|YIR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexp9cted Quote value:X");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[r?Y'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('C');
      cSVFormat1.withNullString("Unexpected Quote value: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected Quote value: ");
      CharBuffer charBuffer0 = CharBuffer.allocate(36);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVPrinter1;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("|exDected Qute valB: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|exDected Qute valB: ");
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) mockPrintStream0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|exDected Qute valB: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(823);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('N');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("19'");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) null;
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('y');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat6 = cSVFormat5.withEscape('[');
      cSVFormat6.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(800);
      CSVPrinter cSVPrinter0 = cSVFormat6.print(charArrayWriter0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("TOKEN");
      Long long0 = new Long((-4094L));
      cSVPrinter0.print(long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator(" SkipHeaderRecord:");
      char[] charArray0 = new char[0];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(823);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      Object object0 = new Object();
      Character character0 = new Character('@');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('@');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(stringArray0);
      cSVFormat3.withRecordSeparator('g');
      cSVFormat2.withEscape('1');
      cSVFormat2.format(stringArray0);
      cSVFormat1.print(stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(823);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(823);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(823);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      StringWriter stringWriter1 = new StringWriter();
      cSVFormat0.print(stringWriter1);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVPrinter1;
      cSVFormat1.format(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(823);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('g');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("zWH}M&2x");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "zWH}M&2x";
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) "zWH}M&2x";
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('T');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Unexpected Quote value: ";
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintStream1;
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter1.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(823);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.withCommentMarker('w');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      cSVFormat1.withRecordSeparator('w');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(823);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Iterable<MockPrintWriter> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("D");
      Object[] objectArray0 = new Object[21];
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      cSVFormat2.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      cSVFormat0.withRecordSeparator('c');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1272);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('A');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yz?^BX5.V+Ru#:O");
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('A');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('u');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVFormat2.withHeaderComments((Object[]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<BufferedWriter> priorityQueue0 = new PriorityQueue<BufferedWriter>();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      priorityQueue0.add(bufferedWriter0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printComment("Yz?^BX5.V+Ru#:O");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat2.toString();
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      charArray0[6] = '2';
      charArray0[7] = '1';
      charArray0[8] = '2';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat1.withNullString("Aj/7");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Aj/7");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter0.close();
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z/`,@&+Cv", "Z/`,@&+Cv");
      arrayList0.add(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('N');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('[');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("D");
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVPrinter0;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) cSVFormat3;
      objectArray1[3] = (Object) "Unexpected Quote value: ";
      objectArray1[4] = (Object) "D";
      objectArray1[5] = (Object) rowSetMetaDataImpl0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('A');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yz?^BX5.V+Ru#:O");
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('A');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('u');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVFormat2.withHeaderComments((Object[]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<BufferedWriter> priorityQueue0 = new PriorityQueue<BufferedWriter>(2625, comparator0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printComment("Yz?^BX5.V+Ru#:O");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('F');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yz?^BX5.V+Ru#:O");
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('F');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('u');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat4.print(stringWriter0);
      cSVFormat2.withHeaderComments((Object[]) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4009);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      cSVPrinter1.print(cSVPrinter0);
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      Character.valueOf('K');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('K');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat5.withCommentMarker('K');
      cSVFormat5.withHeader((ResultSet) null);
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(52);
      cSVFormat4.withCommentMarker('o');
      cSVFormat5.print(charArrayWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat6.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('K');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = cSVFormat0.withNullString("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "D";
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) cSVFormat5;
      CSVFormat cSVFormat7 = cSVFormat5.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat5);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        cSVFormat7.withQuote('K');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('K')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("D");
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat3);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat4.format(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote valu: ");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      Character character0 = Character.valueOf('o');
      cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat0.withQuote(character0);
      cSVFormat0.withSkipHeaderRecord(false);
      PriorityQueue<BufferedWriter> priorityQueue0 = new PriorityQueue<BufferedWriter>();
      Integer integer0 = new Integer(3826);
      cSVPrinter0.print(integer0);
      cSVPrinter0.printComment("Unexpected Quote valu: ");
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('A');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Yz?^BX5.V+Ru#:O";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yz?^BX5.V+Ru#:O");
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('A');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('u');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('A');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yz?^BX5.V+Ru#:O");
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('A');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('u');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Character.valueOf('K');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      char char0 = 'U';
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('U');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      Character character0 = new Character('A');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('A');
      CSVFormat cSVFormat6 = cSVFormat5.withHeader((ResultSet) null);
      CSVFormat cSVFormat7 = cSVFormat2.withRecordSeparator('U');
      cSVFormat6.withIgnoreEmptyLines();
      int int0 = 92;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(92);
      CSVPrinter cSVPrinter0 = cSVFormat7.print(charArrayWriter0);
      cSVFormat1.withDelimiter('K');
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter", "98B|8");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      mockFileWriter0.flush();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockFileWriter0.write(5);
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'<.yD5]");
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpcted Quote walUeX");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"");
      Object[] objectArray0 = new Object[8];
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      printStream0.println('w');
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('s');
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat2);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = object1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
      HashSet<CharArrayWriter> hashSet0 = null;
      try {
        hashSet0 = new HashSet<CharArrayWriter>((-1974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1974
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Character.valueOf('2');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('U');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      Character character0 = new Character('A');
      cSVFormat3.withCommentMarker(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(136);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P>*w]");
      cSVFormat3.print(charArrayWriter1);
      long[] longArray0 = new long[0];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-)^ys/}SZ'?=RG(", "-)^ys/}SZ'?=RG(", 1542);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 3279, longArray0, sQLTimeoutException0);
      cSVPrinter0.print(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter", "98B|8");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      mockFileWriter0.flush();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockFileWriter0.write(1231);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "98B|8";
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>(62, 1231);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]NNVx_b+C= nKGUJ[", "]NNVx_b+C= nKGUJ[");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "]NNVx_b+C= nKGUJ[";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("]NNVx_b+C= nKGUJ[/]NNVx_b+C= nKGUJ[");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(793);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.flush();
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter1.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) treeSet0;
      objectArray0[4] = (Object) null;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.println();
      cSVPrinter1.print(objectArray0[1]);
      cSVPrinter0.printComment("Mapping for %s not found, expected one of %s");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter", "98B|8");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      mockFileWriter0.flush();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('5');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      cSVFormat0.withHeader((ResultSet) null);
      cSVFormat1.withRecordSeparator(')');
      cSVFormat1.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(48);
      StringWriter stringWriter0 = new StringWriter(92);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '2';
      charArray0[2] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("98B|8", "98B|8");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.csv.CSVPrinter", (String) null, sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(793);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>(62, 793);
      Throwable throwable0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", (Throwable) null);
      linkedHashSet0.add(sQLTransactionRollbackException0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(771);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>(27, 771);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("i]<", sQLTransactionRollbackException0);
      linkedHashSet0.add(sQLTransactionRollbackException1);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "Unexpected Quote value: ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("D");
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat3);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVFormat1.withRecordSeparator(string0);
      cSVPrinter0.printRecords(objectArray0);
      boolean boolean0 = true;
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(boolean0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      doReturn(false).when(resultSet1).next();
      cSVPrinter0.printRecords(resultSet1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8r2Ivx;XP?$_XkI\"Z");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('$');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      arrayDeque0.containsAll(linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(823);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("L<~)6hQ\" eeM.e'", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, charset0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("D");
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat3);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat4.format(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("D");
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat3);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVFormat1.withRecordSeparator("Unexpected Quote value: ");
      cSVPrinter0.printRecords(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('G');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("Delimiter=<");
      cSVFormat4.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat4);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]NNVx_b+C= nKGUJ[", "]NNVx_b+C= nKGUJ[");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      mockFileWriter0.write(2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "]NNVx_b+C= nKGUJ[";
      objectArray0[1] = (Object) "]NNVx_b+C= nKGUJ[";
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(793);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.flush();
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      PriorityQueue<SQLTransientException> priorityQueue0 = new PriorityQueue<SQLTransientException>((Collection<? extends SQLTransientException>) treeSet0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('G');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>(comparator0);
      cSVPrinter1.printRecord((Iterable<?>) priorityQueue0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('(');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVFormat0.withRecordSeparator('r');
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      stringWriter0.write(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat0.withEscape('r');
      stringWriter0.close();
      cSVPrinter0.printComment("?01");
      cSVPrinter0.getOut();
      cSVFormat0.withSkipHeaderRecord();
      cSVPrinter0.println();
      cSVPrinter0.printComment("?01");
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<PipedInputStream> arrayDeque0 = new ArrayDeque<PipedInputStream>();
      ArrayDeque<PipedInputStream> arrayDeque1 = arrayDeque0.clone();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      arrayDeque1.add(pipedInputStream0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque1);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque1);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Character character0 = new Character('?');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("url", true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      TreeSet<Console> treeSet0 = new TreeSet<Console>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(793);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>(62, 793);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(823);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('g');
      StringWriter stringWriter1 = new StringWriter();
      cSVFormat0.print(stringWriter1);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(823);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(823);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringWriter1);
      cSVPrinter2.print(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('x');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withHeader((ResultSet) null);
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator('s');
      cSVFormat0.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVPrinter0.print(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('K');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('s');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('s');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVPrinter0.print(charArrayReader0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = 'T';
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('T');
      String string0 = "HSMd,";
      File file0 = MockFile.createTempFile("zG^|_00c'x|\"rW", "HSMd,");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('H');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = null;
      mockFile0.deleteOnExit();
      mockPrintWriter0.close();
      PrintWriter printWriter0 = mockPrintWriter0.printf("se", (Object[]) null);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("D");
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      cSVFormat2.withHeaderComments(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('K');
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('K');
      cSVFormat2.withHeader((ResultSet) null);
      cSVFormat0.withRecordSeparator('s');
      cSVFormat0.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(92);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      char[] charArray0 = new char[2];
      charArray0[1] = 'K';
      charArray0[1] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("')", false);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("format", sQLDataException0);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      linkedHashSet0.add(sQLTransactionRollbackException0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('J');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("_{Z3Wu|8oZUZZaK!");
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      String string0 = ".<vj;4<aFN]vTz-p";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".<vj;4<aFN]vTz-p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(bufferedWriter0);
      cSVPrinter0.print(bufferedWriter0);
      Comparator<MockPrintWriter> comparator0 = (Comparator<MockPrintWriter>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<MockPrintWriter> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<MockPrintWriter>((-672), comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]NNVx_b+C= nKGUJ[", "]NNVx_b+C= nKGUJ[");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "]NNVx_b+C= nKGUJ[";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\u0005Sqt-D");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      ResultSet resultSet0 = null;
      mockPrintWriter0.close();
      cSVFormat0.withQuote('&');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("D");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat3);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      CSVFormat cSVFormat4 = cSVFormat1.withQuote('&');
      CSVPrinter cSVPrinter1 = cSVFormat4.print(mockPrintStream1);
      cSVPrinter1.print(mockPrintStream1);
      cSVPrinter1.printComment("D");
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("D");
      mockFileWriter0.write(1859);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      SQLException sQLException0 = new SQLException("org.apache.commons.csv.CSVPrinter$1", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation((-166), true, true, (-1681), (-2852), sQLException0);
      cSVPrinter0.print(dataTruncation0);
      cSVPrinter0.printComment("D");
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('G');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("Delimiter=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat4);
      assertEquals("GDelimiter=<", stringWriter1.toString());
      assertEquals("GDelimiter=<", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String string0 = "98B|8";
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter", "98B|8");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      mockFileWriter0.flush();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[0];
      mockFileWriter0.write(1231);
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("D");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat3);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('H');
      Character character0 = new Character('g');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat.newFormat('H');
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
