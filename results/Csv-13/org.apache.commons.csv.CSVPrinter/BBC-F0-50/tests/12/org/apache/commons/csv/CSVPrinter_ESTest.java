/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 03:15:46 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[1];
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      CSVParser cSVParser0 = cSVFormat0.parse(lineNumberReader0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ft", "ft");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      mockFile0.setReadOnly();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      mockFile0.getCanonicalPath();
      mockFile0.toURI();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withHeaderComments(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('$');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 5);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('[');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(printStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 'C';
      charArray0[2] = 'M';
      charArray0[3] = 'n';
      charArray0[4] = 's';
      charArray0[5] = '/';
      charArray0[6] = '';
      charArray0[7] = 'e';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1}7{m=Et";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) '');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("QR:pusoheq@4l e+\"");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "CR:pu/oh;0r34ls +~";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("CR:pu/oh;0r34ls +~");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "CR:pu/oh;0r34ls +~");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "CR:pu/oh;0r34ls +~";
      objectArray0[1] = (Object) "CR:pu/oh;0r34ls +~";
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('P');
      cSVFormat3.withSkipHeaderRecord();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M@<");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) "R;F|jh6DCNg]q]#N,]";
      PrintStream printStream0 = mockPrintStream0.format("R;F|jh6DCNg]q]#N,]", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(' ');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(' ');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockThrowable mockThrowable0 = new MockThrowable("D[O8(VH `\b%IGE", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(mockThrowable0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[10];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0");
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5a");
      CharBuffer charBuffer0 = CharBuffer.allocate(98);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[7];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9Ib+VZVn[[D:|1],");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('q');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter0.close();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".[Z0");
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      Object object0 = new Object();
      cSVFormat1.print(pipedWriter0);
      cSVPrinter0.close();
      cSVFormat0.print(charBuffer0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter2 = cSVFormat2.print(pipedWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) cSVPrinter2;
      TreeSet<PipedReader> treeSet0 = new TreeSet<PipedReader>();
      PriorityQueue<PipedReader> priorityQueue0 = new PriorityQueue<PipedReader>((SortedSet<? extends PipedReader>) treeSet0);
      try { 
        cSVPrinter2.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[3];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":YJqx0SK-~,+WxWi");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withIgnoreHeaderCase(true);
      rowSetMetaDataImpl0.setColumnCount(13);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, true, true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[3];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter1 = new PipedWriter(pipedReader0);
      pipedReader0.ready();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter1);
      cSVFormat1.format(stringArray0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      cSVPrinter0.print(stringWriter1);
      byteArray0[1] = (byte) (-10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) quoteMode0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) (byte) (-10);
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(288);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5a");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVFormat1.format(stringArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter1.println();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('B');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("Unexpected Quo=e value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "Unexpected Quo=e value: ";
      objectArray0[3] = (Object) "Unexpected Quo=e value: ";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "Unexpected Quo=e value: ";
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[8] = (Object) "Unexpected Quo=e value: ";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharBuffer charBuffer0 = CharBuffer.allocate(288);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^`.Q&=GJyE)YKyO");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "pRR\"5|BW&xq8G;$8j-";
      stringArray0[1] = "";
      stringArray0[2] = "HeaderComments:";
      stringArray0[3] = "out";
      stringArray0[4] = "]";
      stringArray0[5] = "pF_Vy)kFIOds%78~-t";
      stringArray0[6] = "(JT5_@a&[B\"LaeyW";
      stringArray0[7] = "1";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('4');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '6';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharBuffer.allocate(288);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AlQQYio~%*");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("X:bEz]9ZHTRrlx.8B1");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Go,B%)};pTal#U");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) stringBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0019');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('e');
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('o');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) classLoader0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) classLoader0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat4.withHeaderComments(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      cSVFormat0.withEscape('_');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('J');
      cSVFormat0.print(charBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) "Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("Unexpected Quote value: ");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3537);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 3537, 3537);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer2, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "UJXD{>#7gM";
      stringArray0[1] = "u~q<g8";
      stringArray0[2] = "_#qS.kH;fQNgG";
      stringArray0[3] = "The header contains a duplicate entry: '";
      stringArray0[4] = "P:s.VME[T";
      stringArray0[5] = "Unexpected Quote value: ";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat0.withEscape('z');
      CharBuffer charBuffer1 = CharBuffer.allocate(266);
      cSVFormat1.print(charBuffer1);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) stringArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('}');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", '}');
      Float float0 = new Float(2552.43534354147);
      cSVPrinter0.print(float0);
      cSVPrinter0.printComment("\" uz nxU\"yJ^^y4&");
      cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      cSVPrinter0.println();
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0019');
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withEscape('\u0019');
      cSVFormat1.withCommentMarker('!');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 26);
      cSVPrinter0.printComment("\" uz nxU\"yJ^^y4&");
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
      CharBuffer charBuffer1 = CharBuffer.allocate(266);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.printComment("");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) null;
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      int int0 = (-863);
      outputStreamWriter0.write((-863));
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      cSVFormat0.withCommentMarker('/');
      EvoSuiteFile evoSuiteFile0 = null;
      cSVFormat0.withIgnoreHeaderCase(true);
      outputStreamWriter0.write(4255);
      pipedOutputStream0.flush();
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CharBuffer charBuffer1 = charBuffer0.slice();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('f');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('F');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      charBuffer0.append((CharSequence) charBuffer1);
      String string0 = "x#";
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("x#");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
      Character character0 = new Character('c');
      CharBuffer charBuffer0 = CharBuffer.allocate(22);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      cSVPrinter1.printComment((String) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) character0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      cSVPrinter0.printComment(",9L)i");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) sQLInvalidAuthorizationSpecException0;
      objectArray0[1] = (Object) ",9L)i";
      objectArray0[2] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('d');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(266);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) ",9L)i");
      cSVFormat1.print(charArrayWriter1);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter1);
      cSVPrinter1.printComment("url");
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat2.withQuoteMode(quoteMode0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      cSVPrinter0.printComment(",9L)i");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLInvalidAuthorizationSpecException0;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) charBuffer0;
      cSVPrinter0.printRecord(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
      CSVPrinter cSVPrinter2 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter2.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('+');
      cSVFormat0.withEscape('r');
      Character character0 = new Character('H');
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-179));
      linkedList0.add(integer0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) treeSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Object object0 = new Object();
      cSVPrinter0.close();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      cSVPrinter0.printComment("out");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter1.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.close();
      cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('T');
      Character character0 = new Character('|');
      Character character1 = new Character('L');
      cSVFormat2.withQuote(character1);
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      cSVFormat1.print(charBuffer0);
      ClassLoader.getSystemClassLoader();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.close();
      cSVFormat0.print(charBuffer0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "' in ";
      stringArray0[2] = "<PR2mFUR";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat4.print(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      Object object0 = new Object();
      cSVFormat1.print(pipedWriter0);
      cSVPrinter0.close();
      cSVFormat0.print(charBuffer0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter2 = cSVFormat2.print(pipedWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) cSVPrinter2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter1;
      try { 
        cSVPrinter2.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharBuffer.allocate(288);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Go,B%)};pTal#U");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = new Character('D');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(387);
      cSVFormat0.print(charArrayWriter0);
      ClassLoader.getSystemClassLoader();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
      cSVFormat1.print(charBuffer0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(charBuffer0);
      CSVPrinter cSVPrinter3 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) " EmptyLines:ignored";
      objectArray0[2] = (Object) cSVPrinter2;
      objectArray0[3] = (Object) " EmptyLines:ignored";
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter3.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char char0 = 'P';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('3');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('#');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      String string0 = "x#";
      try { 
        cSVPrinter0.printComment("\u0016Wcv7[YOypb");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hcg;>(1}%!-,k5";
      stringArray0[1] = " EmptyLines:ignored";
      Character character0 = new Character('_');
      CharBuffer charBuffer1 = CharBuffer.allocate(114);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('_');
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer1);
      cSVPrinter0.printComment(" EmptyLines:ignored");
      cSVPrinter0.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "hcg;>(1}%!-,k5";
      objectArray0[2] = (Object) cSVPrinter1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) " EmptyLines:ignored";
      objectArray0[5] = (Object) "hcg;>(1}%!-,k5";
      objectArray0[6] = (Object) cSVPrinter1;
      objectArray0[7] = (Object) "hcg;>(1}%!-,k5";
      objectArray0[8] = (Object) character0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('{');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.printComment("X#");
      cSVFormat2.print(pipedWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('+');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('u');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(')');
      Character character0 = new Character('H');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate('+');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      ClassLoader.getSystemClassLoader();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat4;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.allocate(30);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.flush();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
      cSVFormat1.print(appendable0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) classLoader0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVPrinter2;
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) cSVPrinter1;
      objectArray1[1] = (Object) classLoader0;
      objectArray1[2] = (Object) cSVPrinter0;
      objectArray1[3] = (Object) charArrayWriter0;
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecord(objectArray1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('+');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      Character character0 = new Character('H');
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[2];
      cSVFormat1.print(charBuffer0);
      cSVPrinter0.printComment((String) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('+');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(')');
      Character character0 = new Character('H');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      cSVFormat4.print(charBuffer0);
      ClassLoader.getSystemClassLoader();
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[3] = (Object) charBuffer0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hcg;>(1}%!-,k5";
      stringArray0[1] = " EmptyLines:ignored";
      stringArray0[2] = "NullString=<";
      stringArray0[3] = ";IZxXXa'-S";
      stringArray0[4] = " SurroundingSpaces:ignored";
      stringArray0[5] = "tSRxokim~F2]";
      stringArray0[6] = "`2CQ{vh";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Appendable appendable0 = cSVPrinter0.getOut();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("tSRxokim~F2]");
      cSVPrinter0.print(" SurroundingSpaces:ignored");
      CSVPrinter cSVPrinter1 = new CSVPrinter(appendable0, cSVFormat2);
      cSVPrinter1.print(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('{');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      String string0 = "X#";
      cSVPrinter0.printComment("X#");
      cSVFormat0.print(pipedWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.println();
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat2);
      Vector<CharArrayWriter> vector0 = new Vector<CharArrayWriter>();
      ArrayDeque<CharArrayWriter> arrayDeque0 = new ArrayDeque<CharArrayWriter>(vector0);
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>();
      LinkedHashSet<CharArrayWriter> linkedHashSet0 = new LinkedHashSet<CharArrayWriter>(treeSet0);
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      LinkedHashSet<FilterInputStream> linkedHashSet0 = new LinkedHashSet<FilterInputStream>(266);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("]N8TqREn{Kt");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\r\n");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\r\n");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientException0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[0];
      charArrayWriter0.write(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object object0 = new Object();
      cSVPrinter0.close();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) sQLInvalidAuthorizationSpecException0;
      objectArray0[1] = (Object) charArrayWriter0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) charArrayWriter0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(798);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false, false, false, false).when(resultSet0).next();
      // Undeclared exception!
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) charBuffer0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVFormat2.toString();
      LinkedHashSet<FilterInputStream> linkedHashSet0 = new LinkedHashSet<FilterInputStream>(266);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.flush();
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>(9);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hcg;>(1}%!-,k5";
      stringArray0[1] = " EmptyLines:ignored";
      stringArray0[2] = "NullString=<";
      stringArray0[3] = ";IZxXXa'-S";
      stringArray0[4] = " SurroundingSpaces:ignored";
      stringArray0[5] = "tSRxokim~F2]";
      stringArray0[6] = "`2CQ{vh";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat2.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.printRecords(objectArray0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ServiceLoader.loadInstalled(class0);
      ArrayDeque<SQLWarning> arrayDeque0 = new ArrayDeque<SQLWarning>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ArrayList<PipedWriter> arrayList0 = new ArrayList<PipedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[1] = "$nYs rAm,C";
      cSVFormat0.format(stringArray0);
      stringArray0[2] = "";
      stringArray0[3] = "t?K7L&(9EoFLE@";
      cSVFormat2.withHeader(stringArray0);
      cSVFormat1.format(stringArray0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('+');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(')');
      Character character0 = new Character('H');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat4;
      cSVFormat2.format(objectArray0);
      ServiceLoader<CharArrayWriter> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(798);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.close();
      cSVPrinter0.print(cSVFormat2);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>(35);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('L');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ':';
      charArray0[2] = 'q';
      charArray0[3] = 'l';
      charArray0[4] = 'f';
      charArrayWriter0.write(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ServiceLoader.loadInstalled(class0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter1.close();
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hcg;>(1}%!-,k5";
      stringArray0[1] = " EmptyLines:ignored";
      stringArray0[2] = "NullString=<";
      stringArray0[3] = ";IZxXXa'-S";
      stringArray0[4] = " SurroundingSpaces:ignored";
      stringArray0[5] = "tSRxokim~F2]";
      stringArray0[6] = "`2CQ{vh";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(798);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('d');
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("d", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("d", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Character character0 = new Character('d');
      assertEquals('d', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("d", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('d', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("d", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('d', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('d', (char)cSVFormat4.getEscapeCharacter());
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      charArray0[6] = 'd';
      charArray0[7] = 'd';
      charArray0[8] = 'd';
      stringWriter0.write(charArray0);
      assertEquals("ddddddddd", stringWriter0.toString());
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd'}, charArray0);
      assertEquals(9, charArray0.length);
      
      StringWriter stringWriter1 = stringWriter0.append('d');
      assertEquals("dddddddddd", stringWriter1.toString());
      assertEquals("dddddddddd", stringWriter0.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      assertNotNull(mockPrintWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("d", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals("dddddddddd", stringWriter1.toString());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('d', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('d', (char)cSVFormat4.getEscapeCharacter());
      assertEquals("dddddddddd", stringWriter0.toString());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertSame(stringWriter0, stringWriter1);
      
      PriorityQueue<BufferedReader> priorityQueue0 = new PriorityQueue<BufferedReader>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("d", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals("dddddddddd", stringWriter1.toString());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('d', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals(0, priorityQueue0.size());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('d', (char)cSVFormat4.getEscapeCharacter());
      assertEquals("dddddddddd", stringWriter0.toString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertSame(stringWriter0, stringWriter1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) priorityQueue0;
      stringWriter1.append((CharSequence) null);
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 'd';
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) character0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) charBuffer0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat1.withHeader((ResultSet) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(798);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(798);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVPrinter0.printComment("M5+q'Q;_doY~'6");
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      LinkedHashSet<FilterInputStream> linkedHashSet0 = new LinkedHashSet<FilterInputStream>(266);
      ArrayList<MockPrintStream> arrayList0 = new ArrayList<MockPrintStream>(15);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) resultSet0;
      objectArray0[1] = (Object) "$nYs rAm,C";
      cSVFormat0.format(objectArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[1] = "$nYs rAm,C";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.format(objectArray0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[0];
      charArrayWriter0.write(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ServiceLoader<SQLTransientException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ClassLoader.getSystemClassLoader();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.print(stringWriter0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.print(stringWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("~:zR}gs");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "~:zR}gs";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('+');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(')');
      Character character0 = new Character('H');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      ClassLoader.getSystemClassLoader();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat4;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      cSVFormat0.print(charBuffer0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat1.print(charBuffer0);
      cSVPrinter0.close();
      cSVFormat1.print(charBuffer0);
      cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) classLoader0;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("*a");
      cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter1.printRecords(objectArray0);
      try { 
        MockURI.URI("T(F6~n^/AjK9\"q'", "reader", "*a");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 6: T(F6~n^/AjK9\"q':reader#*a
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) charBuffer0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      LinkedHashSet<FilterInputStream> linkedHashSet0 = new LinkedHashSet<FilterInputStream>(266);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.println();
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[7];
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withEscape('9');
      Character character0 = new Character('{');
      CharBuffer charBuffer0 = CharBuffer.allocate(36);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVFormat0.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.printComment("out");
      cSVPrinter1.printRecords((Object[]) stringArray0);
      cSVPrinter1.println();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      assertEquals(266, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(266, charBuffer0.remaining());
      assertEquals(266, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(266, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hcg;>(1}%!-,k5";
      stringArray0[1] = " EmptyLines:ignored";
      stringArray0[2] = "NullString=<";
      stringArray0[3] = ";IZxXXa'-S";
      stringArray0[4] = " SurroundingSpaces:ignored";
      stringArray0[5] = "tSRxokim~F2]";
      stringArray0[6] = "`2CQ{vh";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(7, stringArray0.length);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(true);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteMode());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals(7, stringArray0.length);
      assertNotNull(cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.isNullStringSet());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertEquals(7, stringArray0.length);
      assertNotNull(cSVFormat4);
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      
      StringWriter stringWriter0 = new StringWriter(798);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      assertEquals(266, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(69, charBuffer0.length());
      assertEquals(197, charBuffer0.position());
      assertEquals(266, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(69, charBuffer0.remaining());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.isNullStringSet());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertEquals(7, stringArray0.length);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      
      cSVPrinter0.close();
      assertEquals(266, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(69, charBuffer0.length());
      assertEquals(197, charBuffer0.position());
      assertEquals(266, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(69, charBuffer0.remaining());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.isNullStringSet());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertEquals(7, stringArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      assertEquals(266, charBuffer0.length());
      assertEquals(266, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(266, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(266, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hcg;>(1}%!-,k5";
      stringArray0[1] = " EmptyLines:ignored";
      stringArray0[2] = "NullString=<";
      stringArray0[3] = ";IZxXXa'-S";
      stringArray0[4] = " SurroundingSpaces:ignored";
      stringArray0[5] = "tSRxokim~F2]";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)93;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-114), (byte) (-40), (byte) (-84), (byte)12, (byte)20, (byte)93}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      stringArray0[6] = "`2CQ{vh";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(7, stringArray0.length);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      assertEquals(197, charBuffer0.position());
      assertEquals(69, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(266, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(266, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(69, charBuffer0.remaining());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(7, stringArray0.length);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(266, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(265, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(266, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(9, objectArray0.length);
      assertEquals(7, stringArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ServiceLoader<SQLTransientException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.sql.SQLTransientException]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('P', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('P', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('P', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(0, stringArray0.length);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('P', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('P', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('P', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(0, stringArray0.length);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('P', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('P', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('P', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('P', cSVFormat3.getDelimiter());
      assertEquals(0, stringArray0.length);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('P', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('P', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('P', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('P', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals('P', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertEquals(0, stringArray0.length);
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter(798);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('P', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('P', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('P', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('P', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals('P', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringArray0.length);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      cSVPrinter0.close();
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('P', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('P', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('P', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentMarker());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('P', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals('P', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[1] = "$nYs rAm,C";
      cSVFormat0.format(stringArray0);
      stringArray0[2] = "";
      stringArray0[3] = "t?K7L&(9EoFLE@";
      cSVFormat2.withHeader(stringArray0);
      cSVFormat1.format(stringArray0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ':';
      charArray0[2] = 'q';
      charArray0[3] = 'l';
      charArray0[4] = 'f';
      charArrayWriter0.write(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ServiceLoader<SQLTransientException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      assertEquals(36, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CharBuffer charBuffer0 = CharBuffer.allocate(266);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
      Object object0 = new Object();
      cSVPrinter0.close();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("<}C%gN@2jW");
      cSVPrinter0.printComment((String) null);
      CSVPrinter cSVPrinter1 = null;
      try {
        cSVPrinter1 = new CSVPrinter(charBuffer0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
