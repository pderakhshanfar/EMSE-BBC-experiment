/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 23:29:21 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.stream.IntStream;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(1167);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!r8 @");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[12];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Te eader contains a duplicte nme: \"");
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader(21);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      rowSetMetaDataImpl0.setColumnCount(29);
      MockPrintStream mockPrintStream0 = new MockPrintStream("=<L$`t8Vvda~^] YJ</");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVFormat1.withRecordSeparator("=<L$`t8Vvda~^] YJ</");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withCommentMarker('?');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.print(pipedWriter0);
      LinkedHashSet<DataOutputStream> linkedHashSet0 = new LinkedHashSet<DataOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(83);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      linkedHashSet0.add(dataOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(1162);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|'k{h8V*PPYSi/fu9");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[ull3Mtring=<");
      Character character0 = Character.valueOf('\u001A');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate('G');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[34];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      LinkedHashSet<DataOutputStream> linkedHashSet0 = new LinkedHashSet<DataOutputStream>();
      CharBuffer charBuffer0 = CharBuffer.allocate(97);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('G');
      MockPrintStream mockPrintStream0 = new MockPrintStream("=<L$`t8Vvda~^] YJ</");
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecord(objectArray0);
      Short short0 = new Short((short) (-345));
      cSVPrinter1.print(short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer.allocate(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('8');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('q');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(1170);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
      IntStream intStream0 = charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) intStream0;
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat1.withHeaderComments(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      Class<Long> class0 = Long.class;
      ServiceLoader<Long> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(1170);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains a duplicate name: \"");
      IntStream intStream0 = charBuffer0.chars();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) intStream0;
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      doReturn(false).when(resultSet1).next();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(resultSet1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('m');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      Character character0 = new Character('-');
      Character character1 = new Character('\u001A');
      Character character2 = Character.valueOf('-');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character2);
      Character character3 = new Character('\u001A');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character1);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String[] stringArray0 = new String[0];
      cSVFormat4.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat4.print(stringWriter0);
      CSVFormat cSVFormat5 = cSVFormat3.withNullString((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat5);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "1f";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) uRI0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_l`\"(msM;";
      FileSystemHandling.shouldAllThrowIOExceptions();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      stringArray0[1] = "_s-).kDA[!NA=&r+.K";
      stringArray0[2] = "MySQL";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("iG)B$]S,NC\u0004_Ow", false);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withSkipHeaderRecord();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('j');
      MockPrintStream mockPrintStream0 = new MockPrintStream("The header contains a duplicate name: \"");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("The header contains a duplicate name: \"");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ":idZxaH=h-ZP";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('w');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":idZxaH=h-ZP");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
      Integer integer0 = new Integer((-1065));
      // Undeclared exception!
      try { 
        cSVPrinter1.print(integer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?fnSR(E]k7f11/^Qqd}");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('d');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter1);
      Object[] objectArray0 = new Object[6];
      objectArray0[4] = (Object) charArrayWriter1;
      objectArray0[5] = (Object) "?fnSR(E]k7f11/^Qqd}";
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The header contains a duplicate name: \"", 11, 11);
      IntStream intStream0 = charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVFormat0.print(charBuffer0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) intStream0;
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile.createTempFile(":idZxaH=+h-ZP", ":idZxaH=+h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":idZxaH=+h-ZP");
      mockPrintWriter0.append('J');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('i');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) ":idZxaH=+h-ZP";
      objectArray0[3] = object1;
      CSVFormat cSVFormat5 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat5.withDelimiter('K');
      CharBuffer.wrap((CharSequence) ":idZxaH=+h-ZP");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter0.close();
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("2m__*k\"d%-Te7M)YC.", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      LinkedHashSet<BufferedInputStream> linkedHashSet0 = new LinkedHashSet<BufferedInputStream>();
      LinkedHashSet<BufferedInputStream> linkedHashSet1 = new LinkedHashSet<BufferedInputStream>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet1);
      mockFileWriter0.append('g');
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) mockFileWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ":idZxaH=h-ZP";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('i');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":idZxaH=h-ZP");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      cSVPrinter1.close();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      LinkedHashSet<DataOutputStream> linkedHashSet0 = new LinkedHashSet<DataOutputStream>();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = 'M';
      charArray0[2] = 'K';
      charArray0[3] = '<';
      charArray0[4] = '7';
      charArray0[5] = ';';
      charArray0[6] = 'v';
      charArray0[7] = 'j';
      charArray0[8] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      try { 
        cSVPrinter0.print(charArrayReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('j');
      MockPrintStream mockPrintStream0 = new MockPrintStream("The header contains a duplicate name: \"");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("The header contains a duplicate name: \"");
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ":idZxaH=h-ZP";
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withCommentMarker('C');
      cSVFormat1.withNullString("@\"lQMa3J");
      Character character0 = new Character('C');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVPrinter0;
      objectArray1[1] = (Object) ":idZxaH=h-ZP";
      objectArray1[2] = (Object) ":idZxaH=h-ZP";
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.print(objectArray1[2]);
      cSVPrinter0.printRecord(objectArray0);
      StringReader stringReader0 = new StringReader(":idZxaH=h-ZP");
      cSVPrinter0.print(stringReader0);
      cSVPrinter1.printComment("i3}iU`8X");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('?');
      MockPrintStream mockPrintStream0 = new MockPrintStream("=<L$`t8Vvda~^] YJ</");
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      Object object0 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(cSVFormat2);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('*');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('t');
      MockPrintStream mockPrintStream0 = new MockPrintStream("&DtTjE@^;l");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat2.withIgnoreEmptyLines(false);
      objectArray0[1] = (Object) cSVFormat4;
      PrintStream printStream0 = mockPrintStream0.format("=<L$`t8Vvda~^] YJ</", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printStream0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      charBuffer0.clear();
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>(97);
      SQLWarning sQLWarning0 = new SQLWarning();
      priorityQueue0.add(sQLWarning0);
      Character character0 = Character.valueOf('g');
      cSVFormat0.withCommentMarker(character0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withNullString("he header contains a duplcate name: \"");
      Character character0 = Character.valueOf('1');
      cSVFormat1.withQuote(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".ZK>#Z/");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ".ZK>#Z/");
      charBuffer0.mark();
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      charBuffer0.clear();
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'j';
      charArray0[2] = '>';
      charArray0[3] = '1';
      charArray0[4] = '0';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      charArray0[8] = 'a';
      CharBuffer.wrap(charArray0);
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>(1231);
      DataTruncation dataTruncation0 = new DataTruncation(32, false, true, 13, 38);
      priorityQueue0.add(dataTruncation0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":idZxaH=h-ZP");
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withNullString("'`&Ne0,!GQ");
      Character character0 = new Character('h');
      Character character1 = Character.valueOf('1');
      cSVFormat1.withQuote(character1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'`&Ne0,!GQ");
      charBuffer0.mark();
      charBuffer0.codePoints();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      charBuffer0.clear();
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>(277);
      DataTruncation dataTruncation0 = new DataTruncation(4, false, false, 2, 110);
      priorityQueue0.add(dataTruncation0);
      cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withSkipHeaderRecord();
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "The header contains a duplicate name: \"";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains a duplicate name: \"");
      Character character0 = new Character('1');
      cSVFormat1.withQuote(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The header contains a duplicate name: \"");
      CharBuffer charBuffer1 = CharBuffer.allocate(2);
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>(277);
      DataTruncation dataTruncation0 = new DataTruncation(277, false, true, 38, 101);
      priorityQueue0.add(dataTruncation0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('t');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('?');
      MockPrintStream mockPrintStream0 = new MockPrintStream("=<L$`t8Vvda~^] YJ</");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      PrintStream printStream0 = mockPrintStream0.format("=<L$`t8Vvda~^] YJ</", objectArray0);
      CSVFormat cSVFormat5 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockPrintStream0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) quoteMode0;
      objectArray1[1] = (Object) printStream0;
      objectArray1[2] = (Object) cSVFormat1;
      objectArray1[3] = (Object) printStream0;
      objectArray1[4] = (Object) cSVFormat5;
      cSVPrinter0.printRecords(objectArray1);
      Class<SQLException> class0 = SQLException.class;
      ServiceLoader<SQLException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat4);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ":idZxaH=h-ZP";
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      Object object2 = new Object();
      cSVPrinter1.printRecords(objectArray0);
      Comparator<BufferedWriter> comparator0 = (Comparator<BufferedWriter>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.io.BufferedWriter.class) , any(java.io.BufferedWriter.class));
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>(comparator0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      treeSet0.add(bufferedWriter0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = object2;
      objectArray1[1] = (Object) ":idZxaH=h-ZP";
      objectArray1[2] = (Object) comparator0;
      objectArray1[3] = (Object) ":idZxaH=h-ZP";
      objectArray1[4] = (Object) cSVPrinter1;
      cSVFormat2.withNullString("Unexpected Quote value: ");
      cSVPrinter1.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter1.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withSkipHeaderRecord();
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("he header contains a duplcate name: \"");
      Character character0 = new Character('1');
      cSVFormat1.withQuote(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "he header contains a duplcate name: \"");
      charBuffer0.mark();
      CharBuffer charBuffer1 = CharBuffer.allocate(2);
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      charBuffer1.clear();
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>(277);
      DataTruncation dataTruncation0 = new DataTruncation(277, false, true, 38, 95);
      priorityQueue0.add(dataTruncation0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J|JO||");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullString=<");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf(')');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      cSVFormat3.withQuote(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.codePoints();
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "J|JO||";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('?');
      String string0 = "=<L$`t8Vvda~^] YJ</";
      MockPrintStream mockPrintStream0 = new MockPrintStream("=<L$`t8Vvda~^] YJ</");
      PrintStream printStream0 = mockPrintStream0.format("=<L$`t8Vvda~^] YJ</", (Object[]) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J|JO||");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullString=<");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf(')');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>(277);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) priorityQueue0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "J|JO||";
      objectArray0[3] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J|JO||");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullString=<");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf(')');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      int int0 = 277;
      PipedInputStream pipedInputStream0 = new PipedInputStream(277);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedInputStream0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":idZxaH=h-ZP");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) file0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) file0;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('G');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat1.withNullString(":idZxaH=h-ZP");
      cSVFormat3.withCommentMarker((Character) '|');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printComment(":idZxaH=h-ZP");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J|JO||");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullString=<");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf(')');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>(277);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      priorityQueue0.poll();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      priorityQueue0.poll();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ":idZxaH=h-ZP";
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('G');
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('G');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('B');
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker(character0);
      CSVPrinter cSVPrinter1 = cSVFormat6.print(mockPrintWriter0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter2.close();
      cSVFormat3.withNullString(":idZxaH=h-ZP");
      cSVPrinter2.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat4.withAllowMissingColumnNames(true);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":idZxaH=h-ZP");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) file0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) file0;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('G');
      cSVFormat1.withRecordSeparator("");
      char[] charArray0 = new char[7];
      charArray0[1] = '|';
      charArray0[2] = 'G';
      charArray0[3] = '|';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = '|';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.withNullString(":idZxaH=h-ZP");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) 'G');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("zYN3S[mdfPQ.+iS.Z&E");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":idZxaH=h-ZP");
      mockPrintWriter0.append('|');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat3.withRecordSeparator("YO");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("YO");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      cSVPrinter0.printComment("nkp`L[Zh(");
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('9');
      cSVFormat0.withQuote(character0);
      MockFile mockFile0 = new MockFile(" IgnoreHeaderCase:ignored");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = 'J';
      charArray0[5] = '9';
      charArray0[6] = '9';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printComment(" IgnoreHeaderCase:ignored");
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append('~');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) file0;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('J');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter0.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.withAllowMissingColumnNames(false);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J|JO||");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullString=<");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf(')');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>(277);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ":idZxaH=h-ZP";
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('G');
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('G');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('B');
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker(character0);
      cSVFormat6.print(mockPrintWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter1.close();
      cSVFormat3.withNullString(":idZxaH=h-ZP");
      cSVPrinter1.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat4.withAllowMissingColumnNames(true);
      cSVPrinter0.printRecords(objectArray0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter1.printRecord((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) charBuffer1;
      cSVFormat0.format(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "java.nio.StringCharBuffer@0000000003\tjava.nio.StringCharBuffer@0000000003";
      Object object2 = new Object();
      objectArray1[1] = object2;
      objectArray1[2] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":idZxaH=h-ZP");
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(printWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) ":idZxaH=h-ZP";
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      objectArray0[6] = (Object) quoteMode0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withNullString(":idZxaH=h-ZP");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat5.format(objectArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = '|';
      charArray0[3] = 'G';
      CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf(":idZxaH=h-ZP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.:idZxaH=h-ZP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "2m__*k\"d%-Te7M)YC\\.";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter("2m__*k\"d%-Te7M)YC.", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      LinkedHashSet<BufferedInputStream> linkedHashSet0 = new LinkedHashSet<BufferedInputStream>();
      LinkedHashSet<BufferedInputStream> linkedHashSet1 = new LinkedHashSet<BufferedInputStream>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet1);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[21];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockFileWriter0;
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("If\toV-b0zm@5g", false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator('A');
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      MockFile mockFile0 = new MockFile(" IgnoreHeaderCase:ignored");
      MockFileWriter mockFileWriter1 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) mockFileWriter1;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("2m__*k\"d%-Te7M)YC.", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      LinkedHashSet<BufferedInputStream> linkedHashSet0 = new LinkedHashSet<BufferedInputStream>();
      LinkedHashSet<BufferedInputStream> linkedHashSet1 = new LinkedHashSet<BufferedInputStream>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet1);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) mockFileWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append('~');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) file0;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('J');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter0.close();
      cSVPrinter0.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat3.withDelimiter('i');
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000002");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.printComment("Uv*h9EvTk=]*VH:xktC");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      cSVFormat0.withRecordSeparator("e~]!HBI");
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000002");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.printComment("Uv*h9EvTk=]*VH:xktC");
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":idZxaH=h-ZP");
      char char0 = '|';
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false, false, false, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Character character0 = Character.valueOf(char0);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(printWriter0);
      ResultSet resultSet1 = null;
      cSVPrinter0.printRecords(resultSet1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) resultSet1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) file0;
      objectArray0[6] = (Object) quoteMode0;
      objectArray0[7] = (Object) character0;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('j');
      MockPrintStream mockPrintStream0 = new MockPrintStream("The header contains a duplicate name: \"");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      HashSet<DataOutputStream> hashSet0 = new HashSet<DataOutputStream>(32, 102.41107F);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      hashSet0.add(dataOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J|JO||");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullString=<");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf(')');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>(277);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat.newFormat('7');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("NullSting=<");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Character character0 = Character.valueOf(')');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullSting=<");
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      PriorityQueue<SQLWarning> priorityQueue0 = new PriorityQueue<SQLWarning>(286);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J|JO||");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withNullString("NullString=<");
      Character.valueOf('');
      Character character0 = new Character('');
      cSVFormat1.withQuote(character0);
      MockFile mockFile0 = new MockFile("NullString=<");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = object0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.close();
      cSVPrinter0.close();
      try { 
        rowSetMetaDataImpl0.isDefinitelyWritable(0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid column index :0
         //
         verifyException("javax.sql.rowset.RowSetMetaDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.ROOT;
      Locale locale1 = locale0.stripExtensions();
      String string0 = "`te&YSN_&5WO+";
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedInputStream0;
      objectArray0[2] = (Object) locale1;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      mockPrintWriter0.format(locale1, "`te&YSN_&5WO+", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.withDelimiter('x');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char char0 = 'V';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('V');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat3.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withSkipHeaderRecord();
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) charBuffer1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Character character0 = Character.valueOf('9');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('9');
      Character character1 = Character.valueOf('1');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
      MockFile mockFile0 = new MockFile(" IgnoreHeaderCase:ignored");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) " IgnoreHeaderCase:ignored";
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 'G';
      charArray0[6] = 't';
      charArray0[7] = 't';
      charArray0[8] = 't';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      String string0 = "";
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '\r';
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) 't';
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) 't';
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat2;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[3];
      String string0 = "^lu";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("^lu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.^lu
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      int int0 = 2;
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 2, 2);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      cSVPrinter0.flush();
      ArrayList<MockFileInputStream> arrayList0 = new ArrayList<MockFileInputStream>();
      String string0 = "H3c|<y";
      String string1 = "";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("H3c|<y", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = new Character('\"');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVFormat4.withIgnoreHeaderCase(false);
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVFormat0.format(objectArray0);
      Appendable appendable0 = cSVPrinter0.getOut();
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'r';
      CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(appendable0);
      cSVPrinter1.printComment("biA'");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockFile mockFile0 = new MockFile(" IgnoreHeaderCase:ignored");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) " IgnoreHeaderCase:ignored";
      objectArray0[2] = (Object) " IgnoreHeaderCase:ignored";
      Object object1 = new Object();
      cSVPrinter0.flush();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) cSVPrinter0;
      Object object2 = new Object();
      objectArray0[8] = object2;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = new Character('\"');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVFormat0.format(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.print(character0);
      cSVPrinter0.println();
      Object[] objectArray1 = new Object[8];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) stringWriter0;
      objectArray1[2] = (Object) cSVFormat1;
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      cSVPrinter1.println();
      objectArray1[3] = (Object) cSVPrinter0;
      objectArray1[4] = (Object) cSVFormat0;
      objectArray1[5] = (Object) cSVFormat2;
      objectArray1[6] = (Object) stringWriter0;
      cSVFormat1.withCommentMarker('9');
      objectArray1[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(30);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")e{{-d}93X^$b");
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 30, 30);
      charBuffer0.codePoints();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('B');
      Character.valueOf('P');
      Character character0 = Character.valueOf('*');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charBuffer0);
      cSVPrinter1.close();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines();
      cSVPrinter0.close();
      CSVPrinter cSVPrinter2 = null;
      try {
        cSVPrinter2 = new CSVPrinter(charBuffer1, cSVFormat4);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('8');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('q');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 'G';
      charArray0[6] = 't';
      charArray0[7] = 't';
      charArray0[8] = 't';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.printComment("");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "' in ";
      MockFile mockFile0 = new MockFile("' in ", "' in ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char char0 = 'V';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('V');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat3.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.ROOT;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedInputStream0;
      objectArray0[2] = (Object) locale1;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "`te&YSN_&5WO+", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('x');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("2m__*k\"d%-Te7M)YC.", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      LinkedHashSet<BufferedInputStream> linkedHashSet0 = new LinkedHashSet<BufferedInputStream>();
      LinkedHashSet<BufferedInputStream> linkedHashSet1 = new LinkedHashSet<BufferedInputStream>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet1);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFileWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      File file0 = MockFile.createTempFile(":idZxaH=h-ZP", ":idZxaH=h-ZP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('9');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      MockFile mockFile0 = new MockFile(" IgnoreHeaderCase:ignored");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) mockFileWriter0;
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) " IgnoreHeaderCase:ignored";
      objectArray0[8] = (Object) mockFileWriter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }
}
