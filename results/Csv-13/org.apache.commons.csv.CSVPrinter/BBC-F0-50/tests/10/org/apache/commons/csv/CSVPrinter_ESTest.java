/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 23:30:59 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mzPr>QRe+P_CT`h=");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!kTFG%T");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("dJpB2C<tE=.=");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":^(Pq\nS");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withCommentMarker('.');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('9');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withNullString("%;r6u$-<o3`YT x1G");
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CSVFormat cSVFormat6 = cSVFormat1.withQuoteMode(quoteMode1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat6);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) quoteMode1;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('9');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) quoteMode0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_T3,W");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[#oo{Kv~.");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "[#oo{Kv~.";
      objectArray1[1] = (Object) "[#oo{Kv~.";
      objectArray1[2] = (Object) cSVPrinter0;
      objectArray1[3] = (Object) cSVPrinter0;
      objectArray1[4] = (Object) stringWriter0;
      objectArray1[5] = (Object) "[#oo{Kv~.";
      objectArray1[6] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray1[7] = object0;
      objectArray1[8] = (Object) "[#oo{Kv~.";
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("44*b%n~Zq9 ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("z1ZAR2 ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" O");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[22];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(":C^(PqpnS");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.add("#jh");
      linkedList0.add("");
      CSVFormat.newFormat('2');
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add(") EOF reached before encapsulated token finished");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[3] = (Object) linkedList1;
      objectArray0[4] = (Object) cSVFormat1;
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('}');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat1.withSkipHeaderRecord();
      cSVPrinter0.printComment(")\n");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat0.print(charBuffer1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'p';
      charArray0[2] = '|';
      charArray0[3] = 'm';
      charArray0[4] = '6';
      charArray0[5] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('|');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[12];
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      Charset charset0 = Charset.defaultCharset();
      charset0.newEncoder();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) charset0;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.print(stringWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("\rmb");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2237);
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      CharBuffer charBuffer0 = CharBuffer.allocate(2237);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charArrayWriter0.append((CharSequence) charBuffer1);
      charArray0[2] = 'J';
      charArray0[3] = 'u';
      charArray0[4] = 'e';
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(2237);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer1;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.getOut();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('v');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment(") EOF reached before encapsulaPeM token finished");
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printComment(") EOF reached before encapsulaPeM token finished");
      cSVPrinter0.printComment("\r\n");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(2101);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter0.print(pipedWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter1.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(2109);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      charBuffer0.put(32, 'b');
      cSVPrinter0.print(charset0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CharBuffer charBuffer0 = CharBuffer.allocate(63);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.print(charset0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      QuoteMode[] quoteModeArray0 = new QuoteMode[9];
      quoteModeArray0[0] = quoteMode0;
      quoteModeArray0[1] = quoteMode0;
      quoteModeArray0[2] = quoteMode0;
      quoteModeArray0[3] = quoteMode0;
      quoteModeArray0[4] = quoteMode0;
      quoteModeArray0[5] = quoteMode0;
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      quoteModeArray0[6] = quoteMode1;
      QuoteMode quoteMode2 = QuoteMode.MINIMAL;
      quoteModeArray0[7] = quoteMode2;
      quoteModeArray0[8] = quoteMode0;
      EnumSet<QuoteMode> enumSet0 = EnumSet.of(quoteMode0, quoteModeArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) enumSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("TQSw-,", "TQSw-,");
      Object[] objectArray0 = new Object[1];
      outputStreamWriter0.close();
      objectArray0[0] = (Object) charset0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(32);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "$Wn0iU");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("$Wn0iU");
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator("");
      cSVFormat4.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = cSVFormat6.print(stringWriter0);
      Character character0 = new Character('\'');
      cSVFormat4.withEscape(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      MockFile mockFile0 = new MockFile("EOF");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.println();
      cSVFormat3.withSkipHeaderRecord();
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringWriter0, cSVFormat4);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'x';
      charArray0[2] = ')';
      charArray0[3] = 'z';
      charArray0[4] = '\\';
      charArray0[5] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) ')');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(32);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('j');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("");
      cSVFormat1.print(stringWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter1.println();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "(startline ");
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      CharBuffer.allocate(32);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer1);
      cSVFormat1.withNullString("K_,FOXA`UkWoV'X:g");
      int int0 = (-1438);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%#(X:+\t'pC{q");
      objectArray0[0] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2237);
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      CharBuffer charBuffer0 = CharBuffer.allocate(2237);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charArrayWriter0.append((CharSequence) charBuffer1);
      charArray0[2] = 'J';
      charArray0[3] = 'u';
      charArray0[4] = 'e';
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(2237);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVPrinter1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('n');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) resultSet0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) resultSet0;
      objectArray0[5] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharBuffer charBuffer0 = CharBuffer.allocate(274);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '=';
      charArray0[2] = '0';
      charArray0[3] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.close();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("hVrM^fOocgH f%yJw", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)1;
      stringWriter0.flush();
      byteArray0[3] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('q');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter1.println();
      cSVPrinter0.close();
      cSVPrinter1.print(cSVFormat3);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)102;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) (byte)122;
      objectArray0[3] = (Object) (byte)122;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(32);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "org.apache.commons.csv.CSVFormat");
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('7');
      cSVFormat1.print(stringWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = objectArray0[1];
      objectArray0[3] = (Object) "org.apache.commons.csv.CSVFormat";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("vE&");
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat0.withIgnoreHeaderCase();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P5#.", "");
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('p');
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("vE&");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter2.println();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "6");
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) sQLTransientConnectionException0;
      objectArray0[1] = (Object) cSVFormat2;
      cSVPrinter2.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('q');
      cSVFormat2.withRecordSeparator('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter1.println();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "`t_pa*zt1e1");
      cSVPrinter0.print(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withQuote('q');
      cSVFormat1.withRecordSeparator('q');
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      HashSet<PushbackInputStream> hashSet0 = new HashSet<PushbackInputStream>(1270);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("FTJw[_");
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      cSVFormat1.withQuoteMode(quoteMode1);
      cSVFormat0.withIgnoreHeaderCase();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P5#.", "FTJw[_", 2878);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('p');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVPrinter0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("FTJw[_", "ef6E$ZD({g+I");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      CSVFormat.newFormat('2');
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add(") EOF reached before encapsulated token finished");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[3] = (Object) linkedList1;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withCommentMarker('B');
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'q';
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      HashSet<PushbackInputStream> hashSet0 = new HashSet<PushbackInputStream>(1692);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('q');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('q');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("format");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) ") EOF reached before encapsulated token finished";
      cSVFormat1.withDelimiter('q');
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('q');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("format");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      cSVPrinter0.print(cSVPrinter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) "FTJw[_";
      mockPrintWriter0.format("FTJw[_", objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter2.flush();
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter3 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter3.getOut();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SQLWarning sQLWarning0 = new SQLWarning("FTJw[_", "", (-1608));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Header:", " IgnoreHeaderCase:ignored", 2, sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("FTJw[_", sQLRecoverableException0);
      cSVPrinter2.print(sQLNonTransientConnectionException0);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 200);
      charArrayWriter0.writeTo(bufferedWriter0);
      Character character0 = new Character('.');
      cSVFormat1.withQuote(character0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character.valueOf(' ');
      Character character0 = new Character('q');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      stringWriter0.write((-131));
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) character0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) stringWriter0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.getOut();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('G');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter1.println();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      CSVPrinter cSVPrinter2 = cSVFormat2.print(stringWriter0);
      Short short0 = new Short((short)82);
      cSVPrinter2.print(short0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('q');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      HashSet<PushbackInputStream> hashSet0 = new HashSet<PushbackInputStream>(1830);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVPrinter0.println();
      LinkedHashSet<BufferedWriter> linkedHashSet0 = new LinkedHashSet<BufferedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      CSVFormat.newFormat('b');
      linkedList0.add(") EOF reached before encapsulated token finished");
      cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('&');
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat5.print(stringWriter0);
      cSVPrinter1.printComment(") EOF reached before encapsulated token finished");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.csv.CSVPrinter", "");
      cSVPrinter1.print(") EOF reached before encapsulated token finished");
      cSVPrinter1.printComment("?X}(");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('q');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.flush();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter1.getOut();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      cSVPrinter1.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      cSVFormat1.withCommentMarker('q');
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P5#.", "NON_NUMERIC", (-124));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "NON_NUMERIC";
      objectArray0[1] = (Object) "FTJw[_";
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('?');
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.flush();
      cSVPrinter1.printComment(".1_yL%w]W-`moW");
      cSVPrinter1.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("FTJw[_");
      cSVFormat0.withIgnoreHeaderCase();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vE&", "P5#.");
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('p');
      cSVFormat2.print(mockPrintWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(976);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat0.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVPrinter0.flush();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      linkedList0.add("");
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      CSVFormat.newFormat('0');
      linkedList0.add("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat4;
      cSVFormat2.withHeaderComments(objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) resultSet0;
      cSVFormat0.withCommentMarker('?');
      objectArray1[1] = (Object) linkedList0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('q');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      HashSet<PushbackInputStream> hashSet0 = new HashSet<PushbackInputStream>(1830);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVPrinter0.println();
      LinkedHashSet<BufferedWriter> linkedHashSet0 = new LinkedHashSet<BufferedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      CSVFormat.newFormat('b');
      linkedList0.add(") EOF reached before encapsulated token finished");
      CSVFormat cSVFormat5 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat4.withCommentMarker('&');
      cSVPrinter0.printRecord(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) cSVFormat5;
      objectArray1[1] = (Object) cSVFormat6;
      objectArray1[2] = (Object) ") EOF reached before encapsulated token finished";
      objectArray1[3] = (Object) cSVFormat5;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected Quote value: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char char0 = ',';
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(',');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter2, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) quoteMode0;
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(3222);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("FTJw[_", "FTJw[_", 4);
      arrayList0.add(sQLTransientConnectionException0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "FTJw[_");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charArrayWriter1.append((CharSequence) charBuffer1);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(14);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2237);
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      CharBuffer charBuffer0 = CharBuffer.allocate(2237);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) 'u';
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(3222);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 4);
      arrayList0.add(sQLTransientConnectionException0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('q');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      HashSet<PushbackInputStream> hashSet0 = new HashSet<PushbackInputStream>(1830);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('q');
      cSVPrinter0.println();
      LinkedHashSet<BufferedWriter> linkedHashSet0 = new LinkedHashSet<BufferedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      CSVFormat.newFormat('b');
      linkedList0.add(") EOF reached before encapsulated token finished");
      cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('&');
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat5.print(stringWriter0);
      cSVPrinter1.printComment(") EOF reached before encapsulated token finished");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.csv.CSVPrinter", (String) null);
      cSVPrinter1.print(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(3222);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P5#.", "NON_NUMERIC", (-124));
      arrayList0.add(sQLTransientConnectionException0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayList0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(3222);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P5#.", "NON_NUMERIC", (-124));
      arrayList0.add(sQLTransientConnectionException0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayList0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "FTJw[_";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer1, 2, 2);
      charArrayWriter1.append((CharSequence) charBuffer1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'Q';
      CharBuffer.wrap(charArray0);
      charArrayWriter0.append((CharSequence) charBuffer1);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        cSVPrinter1.print(cSVFormat2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      String string0 = "NON_NUMERIC";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NON_NUMERIC", "Unexpected Quote value: ", (-124));
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('?');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) quoteMode0;
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(3222);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("FTJw[_", "FTJw[_", 4);
      arrayList0.add(sQLTransientConnectionException0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) quoteMode0;
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(3222);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("FTJw[_", "FTJw[_", 4);
      arrayList0.add(sQLTransientConnectionException0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(3222);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P5#.", "NON_NUMERIC", (-124));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "NON_NUMERIC";
      objectArray0[1] = (Object) "FTJw[_";
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('?');
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printComment(".1_yL%w]W-`moW");
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(32);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<PipedWriter> treeSet0 = new TreeSet<PipedWriter>(comparator0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      HashSet<PushbackInputStream> hashSet0 = new HashSet<PushbackInputStream>(1830);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVPrinter0.println();
      HashSet<PushbackInputStream> hashSet1 = new HashSet<PushbackInputStream>(1830);
      cSVPrinter0.printRecord((Iterable<?>) hashSet1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      cSVFormat2.withIgnoreHeaderCase(true);
      linkedList0.add(") EOF reached before encapsulated token finished");
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray0);
      cSVPrinter0.println();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter1.print(") EOF reached before encapsulated token finished");
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');
      int int0 = 10;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("|-Yi", "", 10);
      cSVFormat2.withDelimiter('w');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('q');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('q');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat1;
      cSVFormat2.withNullString("$VALUES");
      cSVPrinter0.printRecords(objectArray1);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>(0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("$VALUES", sQLWarning0);
      cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2237);
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      CharBuffer charBuffer0 = CharBuffer.allocate(2237);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charArrayWriter0.append((CharSequence) charBuffer1);
      charArray0[2] = 'J';
      charArray0[3] = 'Q';
      charArray0[4] = 'e';
      charArray0[5] = 'q';
      CharBuffer charBuffer2 = CharBuffer.wrap(charArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer2);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(14);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("\"YP:, L)U:UO4*S#zR");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(976);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat0.withIgnoreEmptyLines();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVPrinter0.flush();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      linkedList0.add("");
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      CSVFormat.newFormat('0');
      linkedList0.add("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat4;
      cSVFormat2.withHeaderComments(objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) resultSet0;
      cSVFormat0.withCommentMarker('?');
      objectArray1[1] = (Object) linkedList0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.printComment("org.apache.commons.csv.QuoteMode");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("E{Z 1_m", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(3222);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P5#.", "NON_NUMERIC", (-124));
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) "NON_NUMERIC";
      objectArray0[1] = (Object) "FTJw[_";
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(") invalid parse sequence", "@w6Kk7j}\u0001Io)OnDl", (-870));
      arrayList0.add(sQLTransientConnectionException0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      cSVFormat1.withQuoteMode(quoteMode1);
      cSVFormat1.withCommentMarker('p');
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P5#.", "org.apache.commons.csv.CSVPrinter", 2878);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('p');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) "FTJw[_";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("P5#.");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVPrinter0.printComment("NON_NUMERIC");
      StringWriter stringWriter0 = new StringWriter(17);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("E{Z 1_m", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "E{Z 1_m";
      objectArray0[7] = (Object) "E{Z 1_m";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      Stack<MockFileOutputStream> stack0 = new Stack<MockFileOutputStream>();
      PriorityQueue<MockFileOutputStream> priorityQueue0 = new PriorityQueue<MockFileOutputStream>(stack0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(3222);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P5#.", "NON_NUMERIC", (-124));
      arrayList0.add(sQLTransientConnectionException0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayList0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FTJw[_");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>(3222);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P5#.", "NON_NUMERIC", (-124));
      arrayList0.add(sQLTransientConnectionException0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayList0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(32);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<PipedWriter> treeSet0 = new TreeSet<PipedWriter>(comparator0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      charBuffer0.chars();
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) charBuffer0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("44*b%n~Zq9}");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) "T 2F2Ff$(W|]L";
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVPrinter1;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('q');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('q');
      Object[] objectArray1 = new Object[10];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat3.withCommentMarker('`');
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecord(objectArray1);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(stringWriter0);
      cSVPrinter1.printRecords(objectArray1);
      cSVPrinter0.printComment((String) null);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter2.getOut();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('R');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat4);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      CSVFormat cSVFormat6 = cSVFormat4.withNullString("T 2;2FfW|]L");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat6);
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) charsetEncoder0;
      objectArray0[4] = (Object) charset0;
      objectArray0[5] = (Object) "TQSw-,";
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('q');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      HashSet<PushbackInputStream> hashSet0 = new HashSet<PushbackInputStream>(1830);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVPrinter0.println();
      LinkedHashSet<BufferedWriter> linkedHashSet0 = new LinkedHashSet<BufferedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      CSVFormat.newFormat('b');
      linkedList0.add(") EOF reached before encapsulated token finished");
      cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('&');
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat5.print(stringWriter0);
      cSVPrinter1.printComment(") EOF reached before encapsulated token finished");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.csv.CSVPrinter", (String) null);
      cSVPrinter1.print(sQLSyntaxErrorException0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2237);
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      CharBuffer charBuffer0 = CharBuffer.allocate(2237);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charArrayWriter0.append((CharSequence) charBuffer1);
      charArray0[2] = 'J';
      charArray0[3] = 'Q';
      charArray0[4] = 'e';
      charArray0[5] = 'q';
      CharBuffer charBuffer2 = CharBuffer.wrap(charArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer2);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      SQLWarning sQLWarning0 = new SQLWarning();
      cSVPrinter0.print(sQLWarning0);
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) 'u';
      objectArray0[2] = (Object) 'e';
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      String string0 = "";
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      charBuffer0.order();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat2.withRecordSeparator('\\');
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) cSVFormat2;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('q');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('q');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat1;
      cSVFormat2.withNullString("$VALUES");
      cSVPrinter0.printRecords(objectArray1);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>(0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.println();
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      File file0 = MockFile.createTempFile("?`8p$fvVX_R", "?`8p$fvVX_R", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockPrintWriter0.println(2356.903);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("YtNW [FC@");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
  }
}
