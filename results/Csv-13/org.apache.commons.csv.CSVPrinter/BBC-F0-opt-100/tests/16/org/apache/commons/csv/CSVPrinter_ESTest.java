/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 19:42:51 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'X';
      charArrayWriter0.write(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('}');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.withEscape('S');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat6 = cSVFormat5.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat6.print(charArrayWriter0);
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      TreeSet<SQLFeatureNotSupportedException> treeSet1 = new TreeSet<SQLFeatureNotSupportedException>((SortedSet<SQLFeatureNotSupportedException>) treeSet0);
      treeSet1.size();
      cSVPrinter0.printRecord((Iterable<?>) treeSet1);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) treeSet0;
      objectArray0[3] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
      MockPrintStream mockPrintStream0 = new MockPrintStream("D^Y+nH?$'ccD8~q?F");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter1.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9zO(!'Sa*");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cav^;g\"J");
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('`');
      Character character1 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("rqn_O");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(8);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, true, true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(string0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      cSVPrinter0.print(pushbackInputStream0);
      int int0 = 1237;
      ArrayList<PushbackInputStream> arrayList0 = new ArrayList<PushbackInputStream>(int0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 116);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Float float0 = new Float((float) 'a');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "' in ");
      cSVFormat0.print(charBuffer0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.printComment((String) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Object[] objectArray0 = new Object[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~ni<,Cq550>'rb:y}O>", "~ni<,Cq550>'rb:y}O>", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
      objectArray0[0] = (Object) sQLNonTransientConnectionException0;
      objectArray0[1] = (Object) sQLNonTransientConnectionException0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('n');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pushbackReader0, 49);
      CSVParser cSVParser0 = cSVFormat0.parse(lineNumberReader0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A");
      MockFileWriter mockFileWriter0 = new MockFileWriter("A");
      cSVFormat1.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withEscape('H');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.printStackTrace();
      PriorityQueue<BufferedInputStream> priorityQueue0 = new PriorityQueue<BufferedInputStream>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^W0@ReaI%+F/G)}sNJ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Integer integer0 = new Integer(2);
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = '\\';
      charArray0[2] = 'X';
      charArray0[3] = '';
      charArray0[4] = 'r';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "INVALID";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=JV3}m1kANj:`\".");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('p');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('p');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=JV3}m1kANj:`\".");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('p');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('p');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      Object object0 = new Object();
      cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withQuoteMode(quoteMode0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "' in ";
      PrintWriter printWriter0 = mockPrintWriter0.printf("format", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      PipedReader pipedReader0 = new PipedReader();
      cSVPrinter0.print(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("' in ");
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("' in ");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "' in ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVFormat2.withRecordSeparator("7tMjh I]!:~jGlL=*u");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      Character character0 = new Character('O');
      cSVFormat1.withQuote(character0);
      objectArray0[2] = (Object) "' in ";
      objectArray0[3] = (Object) cSVFormat2;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character.valueOf('R');
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withNullString(";");
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ";");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "org.apache.commons.csv.Assertions");
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(122);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[1];
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = 'l';
      charArray0[2] = '@';
      charArray0[3] = '>';
      charArrayWriter0.write(charArray0);
      objectArray0[0] = (Object) cSVFormat2;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
      String string0 = "org.apache.commons.csv.CSVPrinter";
      cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter");
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(122);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.withEscape('v');
      MockPrintStream mockPrintStream0 = new MockPrintStream("x%Gxbk&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2445);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1, 2445, 2445);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = new Character('N');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer2, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat3);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" ln ");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('l');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('l');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 'l');
      Float float0 = new Float((float) 'l');
      charArrayWriter0.append('l');
      cSVPrinter0.print(float0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[5];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"T");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(54);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) "\"T";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "\"T";
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.print(mockPrintWriter0);
      cSVFormat2.print(mockPrintWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"T");
      charBuffer0.asReadOnlyBuffer();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"T");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('n');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object object0 = new Object();
      ArrayDeque<MockFileWriter> arrayDeque0 = new ArrayDeque<MockFileWriter>();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}j}YP.A^/mp9t", "", (-425));
      cSVPrinter0.print(sQLTransientConnectionException0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "}j}YP.A^/mp9t";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) sQLTransientConnectionException0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.print(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Js");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Js");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) "Js";
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) charArrayWriter0;
      cSVFormat4.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat5);
      Object[] objectArray1 = new Object[1];
      Object object0 = new Object();
      objectArray1[0] = object0;
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.printComment("Js");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("7_jE~{MkAPkJ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      charArrayWriter0.append((CharSequence) "7_jE~{MkAPkJ");
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Js\\");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Js");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(35);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('s');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Js");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) evoSuiteFile0;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("k [~p#p5O");
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>((Comparator<? super CharArrayWriter>) null);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('P');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('I');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('%');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.append('I');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printComment("file");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "file", sQLSyntaxErrorException0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      cSVPrinter0.printComment("out");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      cSVFormat2.withRecordSeparator('l');
      cSVFormat0.withIgnoreEmptyLines();
      Object object0 = new Object();
      ArrayDeque<MockFileWriter> arrayDeque0 = new ArrayDeque<MockFileWriter>();
      char[] charArray0 = new char[7];
      cSVFormat0.withRecordSeparator('l');
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'G';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('%');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2028");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter2.close();
      cSVPrinter2.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      StringWriter stringWriter0 = new StringWriter();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "jgI{_-wXXyR\"$%u", sQLNonTransientConnectionException0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      sQLSyntaxErrorException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 116);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Float float0 = new Float((float) 'a');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "' in ");
      cSVFormat0.print(charBuffer0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      ArrayDeque<MockFileWriter> arrayDeque0 = new ArrayDeque<MockFileWriter>();
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>(arrayDeque0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('l');
      cSVFormat2.withRecordSeparator('a');
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 116);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("' in ");
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'a';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'a';
      charArray0[6] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) 'V';
      objectArray0[5] = (Object) "";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withCommentMarker('P');
      CharBuffer charBuffer0 = CharBuffer.allocate(48);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      String string0 = ", mapping=";
      cSVPrinter0.printComment(", mapping=");
      Appendable appendable0 = cSVPrinter0.getOut();
      charBuffer0.append('P');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = (Object) appendable0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JTs");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      ArrayDeque<MockFileWriter> arrayDeque0 = new ArrayDeque<MockFileWriter>();
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>(arrayDeque0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "JTs";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) arrayList0;
      cSVFormat2.format(objectArray0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 1402);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      char char0 = 'l';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "' in ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`:Y*");
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter1, cSVFormat1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(952);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      cSVFormat0.print(mockPrintWriter1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      // Undeclared exception!
      try { 
        cSVPrinter1.print(sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ea~a");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "ea~a", objectArray0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      cSVPrinter0.close();
      cSVFormat1.print(outputStreamWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVPrinter0.printComment((String) null);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cav^;g\"J");
      CharBuffer charBuffer0 = CharBuffer.allocate(3213);
      StringWriter stringWriter0 = new StringWriter(3213);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) charBuffer0, 1744, 1744);
      stringWriter1.append('6');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("file");
      Character character0 = new Character('t');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      Character character1 = Character.valueOf('S');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('o');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('A');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(stringWriter2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat5;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cav^;g\"J");
      CharBuffer charBuffer0 = CharBuffer.allocate(3213);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cav^;g\"J");
      Character character0 = new Character('`');
      Character character1 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("rqn_O");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      HashSet<MockFileWriter> hashSet0 = new HashSet<MockFileWriter>();
      PriorityQueue<OutputStreamWriter> priorityQueue1 = new PriorityQueue<OutputStreamWriter>(hashSet0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cav^;g\"J");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cav^;g\"J");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      LinkedHashSet<MockFileWriter> linkedHashSet0 = new LinkedHashSet<MockFileWriter>();
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>(linkedHashSet0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Cav^;g\"J";
      objectArray0[4] = (Object) cSVPrinter0;
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(pipedWriter0);
      cSVFormat0.toString();
      cSVPrinter1.getOut();
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Js\\");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Js");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(263, 263);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Comparator<CharArrayWriter> comparator0 = (Comparator<CharArrayWriter>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>(comparator0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Float float0 = new Float(0.0F);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter1.printRecords(resultSet0);
      cSVPrinter1.printRecords((Iterable<?>) treeSet0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Js";
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "Js";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cav^;g\"J");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cav^;g\"J");
      Character character0 = new Character('`');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      MockPrintStream mockPrintStream1 = (MockPrintStream)cSVPrinter0.getOut();
      cSVPrinter0.printComment("hV&JA?1;Fl5");
      mockPrintStream1.append('`');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      cSVFormat0.print(mockPrintStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"Ts");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('n');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "\"Ts";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ATR");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('a');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('a');
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>((Comparator<? super CharArrayWriter>) null);
      Object object0 = new Object();
      cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Js\\");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Js");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(263, 263);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('*');
      Character character0 = Character.valueOf('.');
      cSVFormat2.withCommentMarker(character0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.append('*');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintStream1);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter2.printRecords(objectArray0);
      mockPrintStream1.append((CharSequence) null);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1);
      cSVPrinter1.print(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Js\\");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Js");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(263, 263);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Comparator<CharArrayWriter> comparator0 = (Comparator<CharArrayWriter>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>(comparator0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Float float0 = new Float(0.0F);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      charArray0[7] = 'j';
      charArray0[8] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charArrayWriter0.append((CharSequence) charBuffer0, 2, 2);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.flush();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.printComment((String) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("k [~p#p5O");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVFormat2.withEscape((Character) null);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 116);
      DataTruncation dataTruncation0 = new DataTruncation(37, true, true, 116, 37);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("No header mapping was specified, the record values can't be accessed by name", dataTruncation0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("No header mapping was specified, the record values can't be accessed by name", sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]FJg+CIN9", sQLNonTransientException0);
      vector0.add(sQLRecoverableException0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Float float0 = new Float((float) 278);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("k [~p#p5O");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVFormat2.withEscape((Character) null);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 116);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Float float0 = new Float((float) 278);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Js\\");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Js");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Js";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) evoSuiteFile0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{*_EZt$a");
      cSVPrinter0.print(mockPrintWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter1.printRecord((Iterable<?>) sQLTimeoutException0);
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 116);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true, true, false).when(resultSet0).next();
      Float float0 = new Float((float) 2);
      cSVPrinter0.print(float0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 116);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("' in ");
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'a';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'a';
      charArray0[6] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVPrinter0.print(charArrayReader0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord((Iterable<?>) sQLTimeoutException0);
      cSVPrinter1.flush();
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("k [~p#p5O");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 116);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      Float float0 = new Float((float) 2);
      cSVPrinter0.print(float0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid char etween encapsulated token and delimiter");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVFormat0.withAllowMissingColumnNames();
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withCommentMarker('*');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('2');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cav^;g\"J");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cav^;g\"J");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      LinkedHashSet<MockFileWriter> linkedHashSet0 = new LinkedHashSet<MockFileWriter>();
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>(linkedHashSet0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Cav^;g\"J";
      objectArray0[4] = (Object) cSVPrinter0;
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(pipedWriter0);
      cSVPrinter1.getOut();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      try { 
        cSVPrinter1.print(sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.print(pipedWriter0);
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      pipedWriter0.close();
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>(linkedList0);
      Character.valueOf('v');
      Character character0 = new Character('Y');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat0.withEscape('$');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("J8XGUQ+l7Pk-b(e\"RQ1");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) charArrayWriter0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      TreeSet<SQLFeatureNotSupportedException> treeSet1 = new TreeSet<SQLFeatureNotSupportedException>((SortedSet<SQLFeatureNotSupportedException>) treeSet0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat0;
      ArrayDeque<MockFileWriter> arrayDeque0 = new ArrayDeque<MockFileWriter>();
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>(arrayDeque0);
      cSVFormat1.format(objectArray0);
      BufferedWriter bufferedWriter0 = null;
      try {
        bufferedWriter0 = new BufferedWriter((Writer) null, 1402);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat0.withHeader(resultSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      pipedWriter0.close();
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>(linkedList0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("k [~p#p5O");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('`');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("k [~p#p5O");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 116);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printComment("+U~tQOkej]np");
      ArrayDeque<CharArrayWriter> arrayDeque0 = new ArrayDeque<CharArrayWriter>();
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>(arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayDeque0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.println();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      arrayDeque0.add(charArrayWriter0);
      arrayDeque0.add(charArrayWriter0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 1014);
      bufferedInputStream0.skip(1014);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.flush();
      stringWriter0.flush();
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("k [~p#p5O");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>((SortedSet<? extends SQLRecoverableException>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat0.withHeader(resultSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      pipedWriter0.close();
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>(linkedList0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) resultSet0;
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Js");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "UEshV";
      MockFileWriter mockFileWriter0 = new MockFileWriter("UEshV");
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
      cSVFormat1.withNullString("");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.withCommentMarker('Y');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.append('Y');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cav^;g\"J");
      CharBuffer charBuffer0 = CharBuffer.allocate(3213);
      StringWriter stringWriter0 = new StringWriter(3213);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) charBuffer0, 1744, 1744);
      stringWriter1.append('6');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("file");
      Character character0 = new Character('t');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      Character character1 = Character.valueOf('S');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('u');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('A');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(stringWriter2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat5;
      cSVPrinter0.printRecords(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      cSVPrinter0.print(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(278, 116);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Float float0 = new Float((float) 2);
      cSVPrinter0.print(float0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat0;
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>();
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>(priorityQueue0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      Object[] objectArray1 = new Object[0];
      cSVFormat4.format(objectArray1);
      CharBuffer charBuffer0 = CharBuffer.allocate(2808);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
      cSVFormat2.print(charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      File file0 = MockFile.createTempFile("<S[PJq71\"", "}");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "<S[PJq71\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <S[PJq71\"
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printComment("+U~tQOkej]np");
      ArrayDeque<CharArrayWriter> arrayDeque0 = new ArrayDeque<CharArrayWriter>();
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>(arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayDeque0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.println();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      arrayDeque0.add(charArrayWriter0);
      arrayDeque0.add(charArrayWriter0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 1014);
      bufferedInputStream0.skip(1014);
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(bufferedInputStream0, "+U~tQOkej]np");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 1523;
      CharBuffer charBuffer0 = CharBuffer.allocate(1523);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.print(cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) appendable0;
      Iterable<SQLNonTransientException> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cav^;g\"J");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cav^;g\"J");
      Character character0 = new Character('`');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("hV&JA?1;Fl5");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      String[] stringArray0 = null;
      String string0 = "url";
      cSVFormat1.withRecordSeparator("url");
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("d{z46j@whcD.OA,9d.");
      MockFileWriter mockFileWriter0 = new MockFileWriter("d{z46j@whcD.OA,9d.");
      cSVFormat3.withQuote('u');
      cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character.valueOf('2');
      Appendable appendable0 = null;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('*');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Float float0 = new Float(0.0F);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      StringWriter stringWriter0 = new StringWriter(109);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printWriter0);
      cSVPrinter0.print(object0);
      Class<Console> class0 = Console.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Console> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[8] = object0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('*');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('`');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Js");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      PriorityQueue<OutputStreamWriter> priorityQueue1 = new PriorityQueue<OutputStreamWriter>((Collection<? extends OutputStreamWriter>) priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '}';
      charArray0[2] = 'n';
      charArray0[3] = 't';
      charArray0[4] = 'K';
      charArray0[5] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter2);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withEscape((Character) 'n');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('y');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat4);
      cSVPrinter0.print(charBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The quoteChar character and the delimiter cannot be the same ('", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('g');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('$');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      PriorityQueue<ObjectOutputStream> priorityQueue0 = new PriorityQueue<ObjectOutputStream>((SortedSet<? extends ObjectOutputStream>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ea~a");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "ea~a", objectArray0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }
}
