/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:39:05 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('u', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('%');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('u', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('u', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('u', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('u', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals('u', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('u', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('u', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals('u', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) resultSet0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(4, objectArray0.length);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('u', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('u', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals('u', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('%', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals(88, charArrayWriter0.size());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNotNull(cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", stringWriter0.toString());
      assertNotNull(cSVPrinter0);
      
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\"\"\t\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat0);
      
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertEquals(1, charArray0.length);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVPrinter0);
      
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVPrinter0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.evosuite.runtime.mock.java.lang.MockThrowable: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Throwable throwable0 = mockThrowable0.initCause(sQLFeatureNotSupportedException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.evosuite.runtime.mock.java.lang.MockThrowable: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", throwable0.toString());
      assertEquals("", throwable0.getMessage());
      assertNotNull(throwable0);
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) sQLFeatureNotSupportedException0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[4];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertEquals(1, charArray0.length);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.length());
      assertEquals("\u0000", charBuffer1.toString());
      assertEquals(1, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      assertEquals(1, charArray0.length);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.length());
      assertEquals("\u0000", charBuffer1.toString());
      assertEquals(1, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(cSVPrinter0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[4];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertEquals(1, charArray0.length);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNotNull(cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("", stringWriter0.toString());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n3cJJi?!f[Ke.0&");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      assertEquals("n3cJJi?!f[Ke.0&", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("n3cJJi?!f[Ke.0&", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNotNull(cSVPrinter0);
      
      cSVPrinter0.close();
      assertEquals("n3cJJi?!f[Ke.0&", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("n3cJJi?!f[Ke.0&", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      Object[] objectArray0 = new Object[1];
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNotNull(cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("", stringWriter0.toString());
      assertNotNull(cSVPrinter0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter('F');
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("IF", "IF", 'T');
      assertEquals("java.sql.SQLFeatureNotSupportedException: IF", sQLFeatureNotSupportedException0.toString());
      assertEquals("IF", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("IF", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(84, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLFeatureNotSupportedException0);
      assertEquals(3, intArray0.length);
      assertEquals("java.sql.SQLFeatureNotSupportedException: IF", sQLFeatureNotSupportedException0.toString());
      assertEquals("IF", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("IF", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(84, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLFeatureNotSupportedException: IF", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: IF", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)sQLFeatureNotSupportedException0.initCause(batchUpdateException0);
      assertEquals(3, intArray0.length);
      assertEquals("java.sql.SQLFeatureNotSupportedException: IF", sQLFeatureNotSupportedException0.toString());
      assertEquals("IF", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("IF", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(84, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLFeatureNotSupportedException: IF", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: IF", batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: IF", sQLFeatureNotSupportedException1.toString());
      assertEquals("IF", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("IF", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(84, sQLFeatureNotSupportedException1.getErrorCode());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNotNull(cSVFormat0);
      
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertEquals(1, charArray0.length);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(cSVPrinter0);
      
      Vector<StringWriter> vector0 = new Vector<StringWriter>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      PriorityQueue<StringWriter> priorityQueue0 = new PriorityQueue<StringWriter>(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      boolean boolean0 = priorityQueue0.add(stringWriter0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1, priorityQueue0.size());
      assertEquals("", stringWriter0.toString());
      assertFalse(vector0.contains(stringWriter0));
      assertTrue(priorityQueue0.contains(stringWriter0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter(482);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("", stringWriter0.toString());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNotNull(cSVFormat0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ALL", "?>^;[%[61lk8!JD~x", (-712));
      assertEquals("?>^;[%[61lk8!JD~x", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ALL", sQLFeatureNotSupportedException0.toString());
      assertEquals("ALL", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-712), sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNotNull(cSVPrinter0);
      
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNotNull(cSVFormat0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "u_");
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("u_", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("u_", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(cSVPrinter0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNotNull(cSVFormat0);
      
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertEquals(8, charArray0.length);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(cSVPrinter0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('{', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals('{', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[4];
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNotNull(cSVPrinter0);
      
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("", stringWriter0.toString());
      assertNotNull(cSVPrinter0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Cf", "Rg'e:^`@}3#", 441, batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("Rg'e:^`@}3#", sQLNonTransientException0.getSQLState());
      assertEquals(441, sQLNonTransientException0.getErrorCode());
      assertEquals("Cf", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: Cf", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)batchUpdateException0.initCause(sQLNonTransientException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("Rg'e:^`@}3#", sQLNonTransientException0.getSQLState());
      assertEquals(441, sQLNonTransientException0.getErrorCode());
      assertEquals("Cf", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: Cf", sQLNonTransientException0.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertNotNull(batchUpdateException1);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cf", "Rg'e:^`@}3#", sQLNonTransientException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("Rg'e:^`@}3#", sQLNonTransientException0.getSQLState());
      assertEquals(441, sQLNonTransientException0.getErrorCode());
      assertEquals("Cf", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: Cf", sQLNonTransientException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Rg'e:^`@}3#", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Cf", sQLTimeoutException0.toString());
      assertEquals("Cf", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<OutputStreamWriter> linkedHashSet0 = new LinkedHashSet<OutputStreamWriter>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNotNull(cSVFormat0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=3 lim=3 cap=3]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.limit());
      assertEquals(3, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 3, 3);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=3 lim=3 cap=3]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.limit());
      assertEquals(3, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer1.length());
      assertEquals(3, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertEquals(3, charBuffer1.limit());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(3, charBuffer1.position());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.hasArray());
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=3 lim=3 cap=3]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.limit());
      assertEquals(3, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer1.length());
      assertEquals(3, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertEquals(3, charBuffer1.limit());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(3, charBuffer1.position());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.hasArray());
      assertNotNull(cSVPrinter0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('u', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNotNull(cSVFormat0);
      
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertEquals(2, charArray0.length);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('u', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(cSVPrinter0);
      
      TreeSet<StringWriter> treeSet0 = new TreeSet<StringWriter>();
      assertNotNull(treeSet0);
      
      PriorityQueue<StringWriter> priorityQueue0 = new PriorityQueue<StringWriter>((Collection<? extends StringWriter>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      boolean boolean0 = priorityQueue0.add(stringWriter0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("", stringWriter0.toString());
      assertTrue(priorityQueue0.contains(stringWriter0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNotNull(cSVFormat0);
      
      PipedReader pipedReader0 = new PipedReader(13);
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      assertNotNull(bufferedReader0);
      
      CSVParser cSVParser0 = cSVFormat0.parse(bufferedReader0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertFalse(cSVParser0.isClosed());
      assertNotNull(cSVParser0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("", stringWriter0.toString());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNotNull(cSVFormat0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNotNull(cSVPrinter0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(',');
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', (char)cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', (char)cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("", stringWriter0.toString());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter(5);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertEquals(8, charArray0.length);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print(stringWriter0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n3cJJi?!f[Ke.0&");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      assertEquals("n3cJJi?!f[Ke.0&", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("n3cJJi?!f[Ke.0&", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNotNull(cSVPrinter0);
      
      cSVPrinter0.close();
      assertEquals("n3cJJi?!f[Ke.0&", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("n3cJJi?!f[Ke.0&", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 56);
      assertNotNull(bufferedOutputStream0);
      
      try { 
        cSVPrinter0.print(bufferedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("n3cJJi?!f[Ke.0&");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      assertEquals("n3cJJi?!f[Ke.0&", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("n3cJJi?!f[Ke.0&", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNotNull(cSVPrinter0);
      
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "IobL$,t.mweUZ@9");
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(15, charBuffer0.remaining());
      assertEquals(15, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(15, charBuffer0.capacity());
      assertEquals(15, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNotNull(cSVFormat0);
      
      Character character0 = Character.valueOf('y');
      assertNotNull(character0);
      assertEquals('y', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('y', (char)cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      assertEquals(8, objectArray0.length);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('y', (char)cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('y', (char)cSVFormat2.getCommentMarker());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = MockFile.createTempFile("/D<", "");
      assertTrue(file0.canRead());
      assertEquals("/tmp/D<0", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals("D<0", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      assertNotNull(mockFileWriter0);
      
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNotNull(cSVFormat0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "h4FvYFl");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.limit());
      assertEquals("h4FvYFl", charBuffer0.toString());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.limit());
      assertEquals("h4FvYFl", charBuffer0.toString());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Z');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('Z', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNotNull(cSVFormat0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('Z', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(cSVPrinter0);
      
      cSVPrinter0.println();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('Z', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("", stringWriter0.toString());
      assertNotNull(cSVPrinter0);
      
      cSVPrinter0.printComment("bCE3K<%2!3]r%?T5lqQS");
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter(11);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(29);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n3cJJi?!f[Ke.0&");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      LinkedHashSet<MockFileOutputStream> linkedHashSet0 = new LinkedHashSet<MockFileOutputStream>(1656, 3436.0488F);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) linkedHashSet0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "h4FvYFl");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Z');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(',');
      StringWriter stringWriter0 = new StringWriter(110);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("FYrmtQ6qTnU, v1t");
      assertEquals(", FYrmtQ6qTnU, v1t\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(',');
      StringWriter stringWriter0 = new StringWriter(110);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      SQLWarning sQLWarning0 = new SQLWarning("vNwe", "org.apache.commons.csv.CSVPrinter");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('.');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"Unexpected Quote value: \"\r\n\"Unexpected Quote value: \"\r\n\"Unexpected Quote value: \"\r\n\"Unexpected Quote value: \"\r\n\"Unexpected Quote value: \"\r\n\"Unexpected Quote value: \"\r\n\"Unexpected Quote value: \"\r\n\"Unexpected Quote value: \"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0+;'43,~0h]2wN-4(");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print((Object) null);
      assertEquals("\"0+;'43,~0h]2wN-4(\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Character character0 = new Character('r');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^3m(W)vM!8 X?$<GL");
      StringWriter stringWriter0 = new StringWriter('6');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"^3m(W)vM!8 X?$<GL\"\r\n\"^3m(W)vM!8 X?$<GL\"\r\n\"^3m(W)vM!8 X?$<GL\"\r\n\"^3m(W)vM!8 X?$<GL\"\r\n\"^3m(W)vM!8 X?$<GL\"\r\n\"^3m(W)vM!8 X?$<GL\"\r\n\"^3m(W)vM!8 X?$<GL\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}");
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[1];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"}\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":}");
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[1];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\":}\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9/<");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[15];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n9/<\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" [");
      Object[] objectArray0 = new Object[2];
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\" [\",\" [\"", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter('F');
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("IF", "IF", 'T');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord((Iterable<?>) sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: IF", sQLFeatureNotSupportedException0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter('F');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyFloat() , anyFloat());
      TreeSet<Float> treeSet0 = new TreeSet<Float>(comparator0);
      Float float0 = new Float(0.0F);
      treeSet0.add(float0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      assertTrue(treeSet0.contains(0.0F));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[1];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('1');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("X");
      cSVFormat1.withCommentMarker('x');
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(stringWriter0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AC-L(Ws>v");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print((Object) null);
      assertEquals("AC-L(Ws>v", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.print((Object) null);
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "^3m(W)vM8 X?$<GL");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(object0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "u_");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n3cJJi?!f[Ke.0&");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('G');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuffer0);
      StringBuffer stringBuffer1 = (StringBuffer)cSVPrinter0.getOut();
      assertEquals(0, stringBuffer1.length());
  }
}
