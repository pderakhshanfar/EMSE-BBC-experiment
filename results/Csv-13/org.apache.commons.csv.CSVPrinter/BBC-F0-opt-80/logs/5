* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-80
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 20262
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-13/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 971
* Using seed 757803938
* Starting evolution
bbc usage percentage is: 80%
* Initial Number of Goals in DynaMOSA = 190 / 971
[MASTER] 22:27:36.493 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:27:36.493 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:27:36.493 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:27:36.493 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:27:36.493 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:27:36.493 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:27:36.493 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:27:36.493 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:27:36.493 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:27:36.493 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:27:36.494 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:27:42.991 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:27:44.018 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:28:03.300 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 601s and 1189 generations, 646958 statements, best individual has fitness: 163.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 164
* Number of covered goals: 153
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 137
* Number of covered goals: 120
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 39
* Number of covered goals: 38
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 507
* Number of covered goals: 430
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 137
* Number of covered goals: 114
* Generated 68 tests with total length 417
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:39:10.318 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.9019833333333334% of time used, but only 29/68 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 48%
* Compiling and checking tests
[MASTER] 22:39:25.130 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:39:25.378 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:39:26.425 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_74_tmp__ESTest.test0(CSVPrinter_74_tmp__ESTest.java:27)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:26.425 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
cSVPrinter0.close();

[MASTER] 22:39:32.425 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_89_tmp__ESTest.test0(CSVPrinter_89_tmp__ESTest.java:29)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:32.425 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
Character character0 = new Character('C');
CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0);
CSVPrinter cSVPrinter0 = cSVFormat1.print(outputStreamWriter0);
Object[] objectArray0 = new Object[1];
objectArray0[0] = (Object) cSVPrinter0;
cSVPrinter0.printRecords(objectArray0);
assertEquals(1, objectArray0.length);


[MASTER] 22:39:39.181 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_105_tmp__ESTest.test0(CSVPrinter_105_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:39.181 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertNotNull(cSVPrinter0);
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.flush();

[MASTER] 22:39:42.419 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_107_tmp__ESTest.test0(CSVPrinter_107_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:42.419 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
assertNotNull(cSVFormat0);
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getQuoteMode());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertNotNull(cSVPrinter0);
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getQuoteMode());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(fileDescriptor0.valid());

SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("format", "ALL");
assertNotNull(sQLTimeoutException0);
assertEquals(0, sQLTimeoutException0.getErrorCode());
assertEquals("java.sql.SQLTimeoutException: format", sQLTimeoutException0.toString());
assertEquals("ALL", sQLTimeoutException0.getSQLState());
assertEquals("format", sQLTimeoutException0.getMessage());

cSVPrinter0.print(sQLTimeoutException0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-13/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-80/tests/5
* Done!

* Computation finished
