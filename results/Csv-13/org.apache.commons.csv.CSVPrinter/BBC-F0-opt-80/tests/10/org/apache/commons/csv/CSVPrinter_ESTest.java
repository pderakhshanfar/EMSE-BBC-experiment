/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:52:10 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.TreeSet;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile(",<iQk_bI:<>:7R~2", "AI");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AI");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      assertEquals(2L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CSVRecord [comment=", "' must not be null!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('X');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('t');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[2];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "M=");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1098);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[7];
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Character character0 = new Character('h');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      String string0 = "M=";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) cSVFormat4;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "eD/", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      cSVFormat4.withRecordSeparator('r');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream1);
      cSVPrinter0.printRecord(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.getOut();
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[2] = (Object) character0;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray1[4] = object0;
      objectArray1[5] = (Object) mockPrintStream1;
      objectArray1[6] = (Object) string0;
      objectArray1[1] = (Object) cSVFormat2;
      objectArray1[8] = (Object) resultSet0;
      cSVPrinter0.printRecords(objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile((String) null, "1_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "2A|(x}GOX`Hl5Qc");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      MockFile mockFile0 = new MockFile("M-tUURo@b]{PYt", "Escape=<");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) path0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<u|}|%\"}o%1%MOh~H+%", "' must not be null!");
      Path path0 = mockFile0.toPath();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) path0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[3];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "eD/");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[6];
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.print((Object) null);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      PriorityQueue<SQLNonTransientException> priorityQueue1 = new PriorityQueue<SQLNonTransientException>(priorityQueue0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>(2721, 2721);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('C');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("i/A*-");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printComment("!UH2s)}y$Z");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M=");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "M=");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(mockFileOutputStream0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter(", values=");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter(", values=");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(509);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "ALL";
      stringArray0[2] = "?U7x^ex";
      stringArray0[3] = "T3k&7%KTFOqal@hMr:W";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=[agG5dWqN^ulB%O[]e", "The comment start marker character cannot be a line break");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintStream0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "b?)6";
      stringArray0[1] = "out";
      stringArray0[2] = "hFn0}l:8";
      stringArray0[3] = "HTR!TK";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      Integer integer0 = new Integer(0);
      treeSet0.add(integer0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      assertEquals(30, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.println();
      assertArrayEquals(new char[] {'\r', '\n', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.println();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printComment((String) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(2742);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("=[agG5dWqN^ulB%O[]e", "The comment start marker character cannot be a line break");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Path path0 = mockFile0.toPath();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) path0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(98L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      TreeSet<Long> treeSet0 = new TreeSet<Long>();
      Long long0 = new Long(925L);
      treeSet0.add(long0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      assertTrue(treeSet0.contains(long0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("El");
      assertEquals(51, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('}');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Z%(5>QGC_4BI3Na%_0");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("The delimiter cannot be a line break");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile(",<iQk_bI:<>:7R~2", "Unexpected Quote value: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(56L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('M');
      MockPrintStream mockPrintStream0 = new MockPrintStream("97Aj&y#/9{G&&G,");
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('{');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[11];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9\"hVc>~=$N;");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals("\"9\"\"hVc>~=$N;\"\r\n\"9\"\"hVc>~=$N;\"\r\n\"9\"\"hVc>~=$N;\"\r\n\"9\"\"hVc>~=$N;\"\r\n\"9\"\"hVc>~=$N;\"\r\n\"9\"\"hVc>~=$N;\"\r\n\"9\"\"hVc>~=$N;\"\r\n\"9\"\"hVc>~=$N;\"\r\n\"9\"\"hVc>~=$N;\"\r\n\"9\"\"hVc>~=$N;\"\r\n\"9\"\"hVc>~=$N;\"\r\n", charArrayWriter0.toString());
      assertEquals(176, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}${BrTA");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals("\"}${BrTA\"\r\n", charArrayWriter0.toString());
      assertEquals(11, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[19];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]~U]CIF(");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals("\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n\"]~U]CIF(\"\r\n", charArrayWriter0.toString());
      assertEquals(228, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile((String) null, "1_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";,]LAg! |7Z=j{");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(144L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" 6/i ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(62, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("zt_Vx9$B:");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Integer integer0 = new Integer(29);
      cSVPrinter0.print(integer0);
      assertEquals(28, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("EkS@zkMWcsP3tjK", "EkS@zkMWcsP3tjK");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Path path0 = mockFile0.toPath();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) path0);
      assertEquals(102L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('M');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile(",<iQk_bI:<>:7R~2", "0PI");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0PI");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      assertEquals(3L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("", "The comment start character and the quoteCher cannotbbe thesame ('");
      Path path0 = mockFile0.toPath();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("=[agG5dWqN^ulB%O[]e", "The comment start marker character cannot be a line break");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "' must not be null!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "' must not be null!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
  }
}
