/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 01:14:03 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.toString();
      cSVFormat0.withNullString("f:oy!");
      String[] stringArray0 = new String[3];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", 32, 48);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A");
      MockFileWriter mockFileWriter0 = new MockFileWriter("A");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVFormat0.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "A";
      objectArray0[4] = (Object) mockFileWriter0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) "A";
      objectArray0[8] = (Object) cSVPrinter1;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.print(objectArray0[5]);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("eJSY#O");
      MockFileWriter mockFileWriter0 = new MockFileWriter("eJSY#O");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("l,,ha,pou");
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "l,,ha,pou");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "B$jB1u1JUf:I+";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":");
      MockFileWriter mockFileWriter0 = new MockFileWriter(":");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0&KBM0SBO3");
      String[] stringArray0 = new String[1];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\"');
      Character character0 = new Character('r');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withIgnoreHeaderCase();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1313);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('\"');
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charArrayWriter1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withNullString("1");
      MockFileWriter mockFileWriter0 = new MockFileWriter("|/&Vt");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("|/&Vt");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("XUr, !aA4>mY0", "XUr, !aA4>mY0", sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLTransientConnectionException0);
      cSVPrinter0.print("|/&Vt");
      // Undeclared exception!
      cSVPrinter1.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!");
      String[] stringArray0 = new String[2];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "IXFb~ fw[93a4,Dtr+";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("IXFb~ fw[93a4,Dtr+");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat4);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      MockFileWriter mockFileWriter0 = new MockFileWriter("TDF");
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("TDF");
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_*");
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withNullString("phBJE|*j<ZBAz7Z!");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1@";
      cSVFormat0.withHeader(stringArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("du@ R1$r&aZ^3H");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte byte0 = new Byte((byte) (-53));
      arrayList0.add(byte0);
      TreeSet<Byte> treeSet0 = new TreeSet<Byte>(arrayList0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("1@");
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('L');
      Character character0 = new Character('r');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat2.withRecordSeparator('L');
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter("TDF");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVFormat1.print(mockFileWriter0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('L');
      Character character0 = new Character('r');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat2.withRecordSeparator('L');
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter("TDF");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockFileWriter0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      cSVPrinter0.print(cSVPrinter1);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('q');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Short short0 = new Short((short)57);
      cSVPrinter1.print(short0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
      cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withRecordSeparator("l%_;n&&]9A\u0004;l#-OHH");
      MockFileWriter mockFileWriter0 = new MockFileWriter("UQc$wdb#'R~z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      cSVPrinter1.close();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) "org.apache.commons.csv.QuoteMode";
      try { 
        cSVPrinter1.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "du@ R1$r&aZ^3H";
      objectArray0[1] = (Object) null;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("du@ R1$r&aZ^3H");
      cSVFormat1.withNullString((String) null);
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("du@ R1$r&aZ^3H");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("emDL/", "emDL/", (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("format", (Throwable) null);
      cSVPrinter0.print((Object) null);
      Stack<DataOutputStream> stack0 = new Stack<DataOutputStream>();
      ArrayDeque<DataOutputStream> arrayDeque0 = new ArrayDeque<DataOutputStream>(stack0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('d');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 115, (-724));
      cSVPrinter0.print(byteArrayInputStream0);
      cSVPrinter0.printComment("Unexpected Quote value: ");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Character character0 = new Character('d');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      Character character1 = new Character('p');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character1);
      CharBuffer charBuffer0 = CharBuffer.allocate(1231);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1231, 1231);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("IXFb~ fw[93a4,Dtr+");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat4);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>(comparator0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.print("IXFb~ fw[93a4,Dtr+");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      cSVFormat2.withIgnoreHeaderCase(false);
      PipedWriter pipedWriter1 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter1, cSVFormat1);
      cSVPrinter0.printComment("");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("org.apache.commons.csv.CSVPrinter$1");
      cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat5 = cSVFormat2.withNullString("/o_h\"iRtoqS{fY$ .F");
      Character character0 = new Character('{');
      Character character1 = Character.valueOf('{');
      cSVFormat5.withQuote(character1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_uKNZ=n", true);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "du@ R1$r&aZ^3H";
      objectArray0[1] = (Object) null;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("n");
      Character character0 = new Character('Q');
      cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('Q');
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat4.withQuoteMode(quoteMode0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("s\"");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "[#}xV299!M{HsC'Z", (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLRecoverableException0);
      cSVPrinter0.print("");
      cSVPrinter0.printRecords((Iterable<?>) sQLWarning0);
      cSVPrinter0.printComment(") invalid char between encapsulated token and delimiter");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "du@ R1$r&aZ^3H";
      objectArray0[0] = (Object) null;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withRecordSeparator('r');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("du@ R1$r&aZ^3H");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "du@ R1$r&aZ^3H";
      cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "du@ R1$r&aZ^3H");
      cSVFormat4.print(charBuffer0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat4.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat5);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) pipedWriter0;
      Character character0 = new Character('-');
      Character character1 = new Character('-');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      try { 
        cSVPrinter0.printComment("Unexpected Quote value: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print(charArrayWriter0);
      cSVPrinter0.flush();
      Character character0 = new Character('d');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter1.close();
      cSVPrinter1.printComment("Unexpectey Quote value: ");
      Object[] objectArray0 = new Object[6];
      hashSet0.add((Integer) null);
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) "Unexpectey Quote value: ";
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecords((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('H');
      Character character0 = new Character('r');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat2.withIgnoreHeaderCase(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("TDF", false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVFormat1.print(mockFileWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) "TDF";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print("TDF");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.slice();
      charBuffer0.get(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '%';
      objectArray0[1] = (Object) '%';
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ow=AU'g])CNj=@sU>");
      stringArray0[0] = "s\"";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      Short short0 = new Short((short)0);
      cSVPrinter1.print(short0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[3] = (Object) pipedWriter0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("(line ");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "du@ R1$r&aZ^3H";
      objectArray0[1] = (Object) null;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('r');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("W!+~^+(zTy!$n5");
      Character character0 = new Character('d');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      CSVFormat cSVFormat7 = CSVFormat.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s\"", true);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      CSVPrinter cSVPrinter0 = cSVFormat7.print(outputStreamWriter0);
      cSVPrinter0.println();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat6.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat6);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
      cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withRecordSeparator("l%_;n&&]9A\u0004;l#-OHH");
      MockFileWriter mockFileWriter0 = new MockFileWriter("UQc$wdb#'R~z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      cSVPrinter1.close();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) "org.apache.commons.csv.QuoteMode";
      Object object1 = new Object();
      objectArray0[2] = object1;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('H');
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ", true);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) "Unexpected Quote value: ";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('H');
      Character character0 = new Character('_');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ", true);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVPrinter0.print(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withRecordSeparator("4[e^r");
      MockFileWriter mockFileWriter0 = new MockFileWriter("4[e^r");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "4[e^r";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "' must not be null!";
      objectArray0[1] = (Object) pipedWriter0;
      cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      cSVPrinter0.printComment("' must not be null!");
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset.defaultCharset();
      ByteBuffer.allocateDirect(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '\\';
      charBuffer0.put(charArray0, 0, 0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = null;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("j}w1tQ>b-%YxZ");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1825);
      charArrayWriter0.append('P');
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(122);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('7');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat0);
      CharBuffer charBuffer0 = CharBuffer.allocate(122);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      cSVPrinter1.print(cSVFormat0);
      cSVPrinter1.flush();
      cSVPrinter1.printComment("XsOE]");
      cSVPrinter1.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('I');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[1] = '.';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = ':';
      charArray0[7] = 'I';
      charArray0[8] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer1);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      cSVPrinter0.print(stringWriter2);
      cSVPrinter0.flush();
      Character character0 = new Character('@');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) 'I');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat1);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.close();
      cSVPrinter1.printComment("");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withQuote('j');
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) pipedWriter0;
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "du@ R1$r&aZ^3H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "du@ R1$r&aZ^3H";
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>(comparator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("J>dJ/S|/]#o", "J>dJ/S|/]#o");
      priorityQueue0.add(sQLFeatureNotSupportedException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.printRecord((Iterable<?>) sQLFeatureNotSupportedException0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLFeatureNotSupportedException0);
      cSVPrinter0.print(sQLRecoverableException0);
      cSVPrinter0.printComment("Index for header '%s' is %d but CSVRecord only has %d values!");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("du@ R1$r&aZ^3H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("du@ R1$r&aZ^3H", "du@ R1$r&aZ^3H", (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLRecoverableException0);
      cSVPrinter0.print(sQLWarning0);
      cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile("du@ R1$r&aZ^3H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "du@ R1$r&aZ^3H";
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1755)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      String string0 = "";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      Object object0 = null;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter0.print("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      cSVFormat2.withIgnoreHeaderCase(false);
      PipedWriter pipedWriter1 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter1, cSVFormat1);
      cSVPrinter0.printComment("");
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = null;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      objectArray0[4] = (Object) charset0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      Class<Console> class0 = Console.class;
      ServiceLoader.load(class0);
      MockFile mockFile0 = new MockFile("Nqt:c/o[;", "c_m;Xb kk>m");
      mockFile0.setExecutable(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>(vector0);
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet1 = new TreeSet<SQLInvalidAuthorizationSpecException>((Collection<? extends SQLInvalidAuthorizationSpecException>) treeSet0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      Character character1 = Character.valueOf('D');
      cSVFormat2.withEscape(character1);
      cSVFormat2.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.println();
      Iterable<MockFileOutputStream> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2ey1&? fyN/Tgxi>=");
      Locale locale0 = Locale.KOREAN;
      mockPrintWriter0.println(2322.59F);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "format";
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      locale0.getDisplayName();
      objectArray0[3] = (Object) "format";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "format", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) arrayList0, locale_FilteringMode0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArrayWriter0;
      Object[] objectArray1 = new Object[1];
      cSVPrinter0.printRecords(objectArray1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
      Character character0 = new Character('d');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) hashSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printComment("Unexpected Quote value: ");
      cSVPrinter1.printComment("hP");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1231);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wF'iTLp>";
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter$1";
      stringArray0[2] = "xLc5e";
      stringArray0[3] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('6');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      cSVFormat1.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      MockFile mockFile0 = new MockFile("4[e^r", "C7J3Q5Nz");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      cSVFormat1.withQuoteMode(quoteMode1);
      cSVFormat2.withAllowMissingColumnNames();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4[e^r", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("4[e^r");
      PrintStream printStream0 = mockPrintStream0.format("4[e^r", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      Class<Console> class0 = Console.class;
      ServiceLoader<Console> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".d{!");
      PrintWriter printWriter0 = mockPrintWriter0.append('2');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printWriter0);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      cSVPrinter0.close();
      LinkedList<MockFileOutputStream> linkedList0 = new LinkedList<MockFileOutputStream>();
      HashSet<MockFileOutputStream> hashSet0 = new HashSet<MockFileOutputStream>(linkedList0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) hashSet0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1423);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      stringWriter0.write("]");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("OBMD1Z1xG");
      SQLDataException sQLDataException0 = new SQLDataException("<!ix>;", "The escape character cannot be a line break", 3, sQLTimeoutException0);
      cSVPrinter0.print(sQLDataException0);
      assertEquals(3, sQLDataException0.getErrorCode());
  }
}
