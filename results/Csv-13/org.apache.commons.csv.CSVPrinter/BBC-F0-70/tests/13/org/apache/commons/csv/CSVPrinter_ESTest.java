/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 05:30:22 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('l');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("geC+j hwd>9k%,5mb");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("Y\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Y\n";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) "Y\n";
      objectArray0[8] = (Object) "Y\n";
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('s');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("geC+j hwd>9k%,5mb");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.printComment("geC+j hwd>9k%,5mb");
      cSVPrinter0.println();
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "e.*ise";
      MockFileWriter mockFileWriter0 = new MockFileWriter("e.*ise", false);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('z');
      cSVFormat0.withCommentMarker(character0);
      mockFileWriter0.getEncoding();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader(18);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedReader0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVParser0;
      objectArray0[7] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('%');
      StringWriter stringWriter0 = new StringWriter(13);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '%';
      intArray0[1] = (int) '%';
      intArray0[2] = (int) '%';
      intArray0[3] = (int) '%';
      intArray0[4] = 13;
      intArray0[5] = (int) '%';
      intArray0[6] = (int) '%';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", batchUpdateException0);
      batchUpdateException0.initCause(sQLTimeoutException0);
      cSVPrinter1.print(sQLTimeoutException0);
      // Undeclared exception!
      cSVPrinter1.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Q*L6";
      stringArray0[1] = "0q'EmM&";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Character character0 = new Character('^');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('_');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('H');
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = 'H';
      charArray0[3] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("The escape caracterncannot^be a linebea");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(']');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(']');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      Character character0 = Character.valueOf(']');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(23);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('f');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      StringWriter stringWriter0 = new StringWriter(372);
      CharBuffer charBuffer0 = CharBuffer.allocate(372);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('f');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) charBuffer0, 372, 372);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter3);
      cSVPrinter0.printComment("");
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      Class<Console> class0 = Console.class;
      ServiceLoader<Console> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(97);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('.');
      cSVPrinter0.print(charArrayWriter1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0*$~DF>)<>4[$KJ!s ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVFormat1.toString();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("\"");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('i');
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat4.print(stringWriter0);
      cSVFormat3.format(objectArray0);
      cSVPrinter0.print(stringWriter0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVFormat2;
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[2] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".>Sw>mt8,]~BLwhgNby");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("<(&\"l#");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"JVCLNuo3t,7qq(3");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>(3);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      cSVPrinter0.printComment("EpY5Y.bX%4G");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("EpY5Y.bX%4G", hashMap0, sQLFeatureNotSupportedException0);
      priorityQueue0.add(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      LinkedHashSet<PipedOutputStream> linkedHashSet0 = new LinkedHashSet<PipedOutputStream>();
      linkedHashSet0.add((PipedOutputStream) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Q*Wesd^Z)68cigSnY'");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) "Q*Wesd^Z)68cigSnY'";
      objectArray0[2] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) linkedHashSet0;
      objectArray0[6] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      CharBuffer charBuffer0 = CharBuffer.allocate(701);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Float float0 = new Float(0.0);
      cSVPrinter0.print(float0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withEscape(',');
      CharBuffer charBuffer0 = CharBuffer.allocate(302);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = "\"$/t3qfA5";
      StringReader stringReader0 = new StringReader("\"$/t3qfA5");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      String string1 = "";
      // Undeclared exception!
      try { 
        cSVPrinter0.print("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.withIgnoreSurroundingSpaces();
      CharBuffer charBuffer0 = CharBuffer.allocate(701);
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      cSVPrinter0.print(charset0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(35).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(2480);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\'');
      Character character0 = new Character('');
      Character character1 = new Character('');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#A2~I!*");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("}>$ysu=9Yz|vw|cl?Z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printComment(")$D");
      cSVPrinter0.printRecords(objectArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("#A2~I!*");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Charset.defaultCharset();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.print((Object) null);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.printRecord((Iterable<?>) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#A2~I!*");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      cSVPrinter0.print("#A2~I!*");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      LinkedHashSet<PipedOutputStream> linkedHashSet0 = new LinkedHashSet<PipedOutputStream>();
      linkedHashSet0.add((PipedOutputStream) null);
      CharBuffer.allocate(104);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8c)]");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Z");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[18];
      objectArray0[9] = (Object) cSVFormat0;
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBuffer.allocate(2480);
      StringWriter stringWriter0 = new StringWriter();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Float float0 = new Float((double) 2480);
      cSVPrinter0.print(float0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) sQLNonTransientConnectionException0;
      objectArray0[1] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('3');
      CharBuffer charBuffer0 = CharBuffer.allocate(29);
      cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("The escape caracterncannot^be a linebea");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2480);
      CharBuffer charBuffer1 = CharBuffer.allocate(572);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<MockFileOutputStream> arrayList0 = new ArrayList<MockFileOutputStream>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('L');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('h');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withSkipHeaderRecord();
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer1, cSVFormat4);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientConnectionException0);
      cSVPrinter2.print(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharBuffer.allocate(2480);
      CharBuffer charBuffer0 = CharBuffer.allocate(572);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<MockFileOutputStream> arrayList0 = new ArrayList<MockFileOutputStream>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      CSVFormat.newFormat('t');
      CSVFormat.newFormat('t');
      cSVPrinter0.print(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharBuffer charBuffer0 = CharBuffer.allocate(572);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.print(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2480);
      CharBuffer.allocate(37);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator(' ');
      cSVFormat5.withAllowMissingColumnNames();
      cSVFormat5.withCommentMarker('');
      Character character0 = new Character('');
      cSVFormat4.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printComment("Hl<(@9UKm65");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false, false, false, false).when(resultSet0).next();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharBuffer.allocate(2480);
      CharBuffer charBuffer0 = CharBuffer.allocate(572);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<MockFileOutputStream> arrayList0 = new ArrayList<MockFileOutputStream>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('t');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      CSVFormat.newFormat('t');
      CSVFormat.newFormat('t');
      cSVPrinter0.print(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      hashSet0.add(pipedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      ArrayList<MockFileOutputStream> arrayList0 = new ArrayList<MockFileOutputStream>();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');
      cSVFormat0.withRecordSeparator('g');
      cSVFormat1.withSkipHeaderRecord();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.format("org.apache.commons.csv.Token", (Object[]) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      CSVFormat.newFormat('l');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      cSVFormat1.print(printStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0, charset0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0, 22);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      cSVPrinter1.print(lineNumberReader0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2480);
      HashSet<PipedOutputStream> hashSet0 = new LinkedHashSet<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      HashSet<PipedOutputStream> hashSet1 = new HashSet<PipedOutputStream>();
      hashSet1.add(pipedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Charset.defaultCharset();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat3);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("X.v/b:;P3|~w,$d@3$&", sQLSyntaxErrorException0);
      cSVPrinter1.print(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharBuffer charBuffer0 = CharBuffer.allocate(2480);
      CharBuffer charBuffer1 = CharBuffer.allocate(572);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<MockFileOutputStream> arrayList0 = new ArrayList<MockFileOutputStream>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('t');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      CSVFormat.newFormat('v');
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter1.print(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2480);
      CharBuffer charBuffer1 = CharBuffer.allocate(43);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('M');
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('\\');
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = new Character(' ');
      cSVFormat3.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charBuffer1);
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat4);
      cSVPrinter1.printComment("");
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2480);
      CharBuffer.allocate(37);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator(' ');
      cSVFormat5.withCommentMarker('');
      Character character0 = new Character('');
      cSVFormat4.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printComment("Hl<(@9UKm65");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharBuffer.allocate(2480);
      CharBuffer.allocate(572);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer0 = CharBuffer.allocate(2480);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('B');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      cSVPrinter0.getOut();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(572);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      SQLException sQLException0 = new SQLException("S[F+j", "The escape character and the delimiter cannot be the same ('");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("S[F+j", sQLException0);
      stack0.add(sQLTransientConnectionException0);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("wpigkXo%&1K.29s");
      cSVPrinter1.print(cSVPrinter0);
      cSVPrinter1.print(cSVFormat1);
      cSVPrinter2.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(48);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('\'');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      Vector<DataOutputStream> vector0 = new Vector<DataOutputStream>(48, 0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVFormat2.withHeader((ResultSetMetaData) null);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(784);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      charBuffer0.flip();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) quoteMode0;
      objectArray0[4] = (Object) pipedWriter0;
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      objectArray0[5] = (Object) quoteMode0;
      objectArray0[6] = (Object) pipedWriter0;
      objectArray0[7] = (Object) quoteMode0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      charArray0[1] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.getOut();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer1);
      int int0 = 3;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      hashSet0.iterator();
      hashSet0.add((PipedOutputStream) null);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withAllowMissingColumnNames();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharBuffer.allocate(2480);
      CharBuffer charBuffer0 = CharBuffer.allocate(37);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat3.withCommentMarker('');
      Character character0 = new Character('');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('U');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) character0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) charBuffer0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) cSVFormat5;
      Object object3 = new Object();
      objectArray0[8] = object3;
      CSVFormat cSVFormat6 = cSVFormat5.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat6);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.withHeaderComments(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      hashSet0.iterator();
      hashSet0.add((PipedOutputStream) null);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.withHeaderComments(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.print(objectArray0[0]);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('o');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('t');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("\"S", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"S", "", sQLTransientException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(character0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      hashSet0.iterator();
      hashSet0.add((PipedOutputStream) null);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("The comment start marker character cannot be a line break", "e.");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      Character character0 = new Character('o');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("The comment start marker character cannot be a line break", "The comment start marker character cannot be a line break");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("e.", "e.", sQLTransientException0);
      cSVPrinter0.print(sQLRecoverableException0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("The comment start marker character cannot be a line break");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String string0 = "";
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      hashSet0.iterator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      hashSet0.iterator();
      hashSet0.add((PipedOutputStream) null);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      cSVPrinter1.flush();
      // Undeclared exception!
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      hashSet0.iterator();
      PipedOutputStream pipedOutputStream0 = null;
      hashSet0.add((PipedOutputStream) null);
      cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) hashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("out");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('0');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withAllowMissingColumnNames(true);
      MockFile mockFile0 = new MockFile((File) null, "U_>mn-DaT4{lYO");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = objectArray0[0];
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write(2104);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("out");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('0');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat4.withNullString("out");
      MockFile mockFile0 = new MockFile((File) null, "U_>mn-DaT4{lYO");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat4;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" MjBD}S*Q2?c z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockFile0.toURI();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectOutputStream0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      objectOutputStream0.close();
      hashSet0.iterator();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.close();
      cSVFormat0.print(mockPrintStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.format(objectArray0);
      cSVFormat0.print(mockPrintStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      MockFile mockFile1 = new MockFile("", "~&RDf$");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter(542);
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      File file0 = MockFile.createTempFile("JBJ=)<Hrj{ EpZ1", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.printRecord(objectArray0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      vector0.add((SQLIntegrityConstraintViolationException) null);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat0.withSkipHeaderRecord();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.flush();
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      char[] charArray0 = new char[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.flush();
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader<MockPrintStream> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" MjBD}S*Q2?c z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      mockFile0.toURI();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      cSVPrinter0.print(lineNumberReader0);
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      objectOutputStream0.close();
      hashSet0.iterator();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      hashSet0.add(pipedOutputStream0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write(38);
      SQLTransientException sQLTransientException0 = new SQLTransientException(" MjBD}S*Q2?c z", " MjBD}S*Q2?c z");
      cSVPrinter1.print(sQLTransientException0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream1;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) hashSet0;
      cSVPrinter1.printRecords(objectArray0);
      ArrayDeque<ObjectInputStream> arrayDeque0 = new ArrayDeque<ObjectInputStream>();
      PriorityQueue<Byte> priorityQueue0 = new PriorityQueue<Byte>(57);
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.print(" MjBD}S*Q2?c z");
      Appendable appendable0 = cSVPrinter1.getOut();
      CSVPrinter cSVPrinter2 = cSVFormat1.print(appendable0);
      cSVPrinter2.flush();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("out");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('0');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat2.withAllowMissingColumnNames(true);
      MockFile mockFile0 = new MockFile((File) null, "U_>mn-DaT4{lYO");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat5;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = objectArray0[3];
      cSVFormat6.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('0');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "YxQiD";
      stringArray0[1] = "The comment start marker character cannot be a line break";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('i');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.close();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.flush();
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[8];
      stringArray0[1] = "YxQiD";
      stringArray0[2] = "$u(`8r#xf H&";
      stringArray0[3] = "The comment start marker character cannot be a line break";
      stringArray0[4] = "e.";
      stringArray0[5] = "} 5$kA$;";
      stringArray0[6] = "b6@I#H";
      stringArray0[7] = "out";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('i');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.close();
      cSVPrinter0.print("o;F1v^`*n");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>(3);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines(true);
      File file0 = MockFile.createTempFile("HY-CT}{hVha9 ixS)g", "HY-CT}{hVha9 ixS)g");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      objectOutputStream0.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.print(charArrayWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.append('=');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "YxQiD";
      stringArray0[2] = "$u(`8r#xf H&";
      stringArray0[3] = "The comment start marker character cannot be a line break";
      stringArray0[4] = "e.";
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(stringArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) "The comment start marker character cannot be a line break");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('y');
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "oXaDq_8a?T}3";
      stringArray0[1] = "z<?82W4:'G)/;[U?";
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(stringArray0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "z<?82W4:'G)/;[U?");
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "U_>mn-DaT4{lYO");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "U_>mn-DaT4{lYO");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat4);
      cSVPrinter0.print(mockFile0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('\'');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>(arrayList0);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>(hashSet0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = 'y';
      charArray0[5] = '\'';
      try { 
        pipedWriter0.write(charArray0, 3, 3886);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      cSVFormat0.withSkipHeaderRecord();
      objectArray0[0] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      MockFile mockFile0 = new MockFile((File) null, "");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat3.format(objectArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVFormat@0000000003\t\torg.apache.commons.csv.CSVFormat@0000000005", "org.apache.commons.csv.CSVFormat@0000000003\t\torg.apache.commons.csv.CSVFormat@0000000005");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.csv.CSVFormat@0000000003\t\torg.apache.commons.csv.CSVFormat@0000000005
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter(542);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '>';
      charArray0[2] = 'N';
      charArray0[3] = '6';
      charArray0[4] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2480);
      CharBuffer.allocate(37);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      charBuffer0.append('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat2.withCommentMarker('');
      Character character0 = new Character('');
      cSVFormat3.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printComment("Hl<(@9UKm65");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVPrinter0.print(cSVFormat3);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printComment("Hl<(@9UKm65");
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(' ');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(' ');
      char char0 = '3';
      Character character0 = Character.valueOf('3');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(pipedWriter0);
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      try { 
        cSVPrinter0.printComment("6TPHzQD:&Na");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('y');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVFormat");
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>(arrayList0);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>(hashSet0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      try { 
        pipedWriter0.write(charArray0, 2057, 2057);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Va?/6<b*[l@KJLc");
      mockPrintStream0.println("Va?/6<b*[l@KJLc");
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayVariant(locale1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat0.withRecordSeparator('!');
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat2.withCommentMarker((Character) null);
      objectArray0[3] = (Object) "Va?/6<b*[l@KJLc";
      mockPrintStream0.print(779.20465F);
      objectArray0[4] = (Object) cSVFormat2;
      mockPrintStream0.format(locale0, "Va?/6<b*[l@KJLc", objectArray0);
      cSVFormat1.withRecordSeparator('m');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" MjBD}S*Q2?c z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toURI();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectOutputStream0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      ArrayList<PipedOutputStream> arrayList0 = new ArrayList<PipedOutputStream>();
      hashSet0.addAll(arrayList0);
      objectOutputStream0.close();
      hashSet0.iterator();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      hashSet0.add(pipedOutputStream1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ArrayDeque<ObjectInputStream> arrayDeque0 = new ArrayDeque<ObjectInputStream>();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1469);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printComment(")bK,}");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      StringWriter stringWriter0 = new StringWriter(1231);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      Object object2 = new Object();
      objectArray0[4] = object2;
      cSVFormat1.withCommentMarker(']');
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      ArrayDeque<InputStreamReader> arrayDeque0 = new ArrayDeque<InputStreamReader>();
      MockFile mockFile0 = new MockFile("F,K<*%Twv3q!", "=D(IwJ");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" MjBD}S*Q2?c z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockFile0.toURI();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectOutputStream0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      objectOutputStream0.close();
      hashSet0.iterator();
      Object object0 = new Object();
      cSVFormat0.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      mockPrintWriter0.append('k');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "YxQiD";
      stringArray0[2] = "$u(`8r#xf H&";
      stringArray0[3] = "The comment start marker character cannot be a line break";
      stringArray0[4] = "e.";
      stringArray0[5] = "} 5$kA$;";
      stringArray0[6] = "b6@I#H";
      stringArray0[7] = "out";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('i');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(1, stringArray0.length);
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals(1, stringArray0.length);
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals(1, stringArray0.length);
      assertNotNull(cSVPrinter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" MjBD}S*Q2?c z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      mockFile0.toURI();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      cSVPrinter0.print(objectOutputStream0);
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      HashSet<PipedOutputStream> hashSet1 = new HashSet<PipedOutputStream>();
      hashSet0.addAll(hashSet1);
      pipedOutputStream0.flush();
      objectOutputStream0.close();
      hashSet0.iterator();
      hashSet0.add(pipedOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write(1440);
      cSVPrinter0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedInputStream0;
      objectArray0[1] = (Object) " MjBD}S*Q2?c z";
      objectArray0[2] = (Object) objectOutputStream0;
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<ObjectInputStream> arrayDeque0 = new ArrayDeque<ObjectInputStream>();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.print(hashSet0);
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
      assertEquals(41L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter(542);
      stringWriter0.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = null;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("out");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "out";
      objectArray0[4] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "out", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('c');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat3);
      LinkedHashSet<Long> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<Long>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withCommentMarker('G');
      cSVFormat0.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
