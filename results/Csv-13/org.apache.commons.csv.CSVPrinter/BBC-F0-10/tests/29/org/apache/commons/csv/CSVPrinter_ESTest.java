/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 06:36:01 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Character character0 = new Character('<');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      Character character1 = Character.valueOf('N');
      cSVFormat4.withCommentMarker(character1);
      String string0 = "P%]9G;Sxp:";
      MockFile mockFile0 = new MockFile("jQg~ [~l}'g$2SO", "P%]9G;Sxp:");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.printComment("/");
      Object[] objectArray0 = new Object[7];
      cSVFormat3.withEscape(character0);
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "jQg~ [~l}'g$2SO";
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat4;
      cSVPrinter0.printRecord(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.print("P%]9G;Sxp:");
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('U');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ak$ zcq";
      stringArray0[1] = "i|:AL},obF";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.withNullString("i|:AL},obF");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = null;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      String string0 = "x}e.";
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      ServiceLoader<FilterOutputStream> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) pipedWriter0;
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = 'O';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("gG|[ r4 6!>!_5!&");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[klpo2#y$vq4H");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(">!EWz`j^BdZEy,Ow");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      stringWriter0.append((CharSequence) ">!EWz`j^BdZEy,Ow");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      Character character0 = new Character('g');
      Character character1 = new Character('=');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character1);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "jQg~ L;H[~l}'g$2SO");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLDataException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLNonTransientConnectionException1);
      cSVPrinter0.print(stringWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('n');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('+');
      CharBuffer.allocate(10);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('n');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('+');
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("X-kVq=s;;{L`! p2");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "X-kVq=s;;{L`! p2");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Unexp!ctd Quote vaXue:2", 18, 18);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('f');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("=gm#huf=BT");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CSVParser cSVParser0 = cSVFormat1.parse(charArrayReader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(30);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, true, true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.printRecords(resultSet1);
      String string0 = "";
      cSVPrinter0.printComment(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLDataException sQLDataException0 = new SQLDataException();
      char char0 = 'q';
      CSVFormat cSVFormat0 = CSVFormat.newFormat(char0);
      cSVFormat0.withIgnoreEmptyLines();
      char char1 = 'j';
      Character character0 = Character.valueOf(char1);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(17);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("3r?s_hEWM*TUy7T");
      cSVFormat1.withNullString("3r?s_hEWM*TUy7T");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      cSVPrinter0.printComment("3r?s_hEWM*TUy7T");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('a');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.add("");
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      cSVFormat2.withIgnoreSurroundingSpaces();
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withNullString("];?/`9JcLi5U9Dd<M");
      MockFileWriter mockFileWriter0 = new MockFileWriter("Ax]044V.O(NG{<", true);
      mockFileWriter0.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVFormat.newFormat('}');
      try { 
        cSVPrinter0.print("];?/`9JcLi5U9Dd<M");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(34);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException("xWAzub4ObMRZ", "xWAzub4ObMRZ", 28, sQLInvalidAuthorizationSpecException0);
      Throwable throwable0 = sQLInvalidAuthorizationSpecException0.initCause(sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException("xNEh}", "xNEh}", sQLInvalidAuthorizationSpecException0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "xNEh}";
      objectArray0[2] = (Object) throwable0;
      objectArray0[3] = (Object) sQLDataException1;
      objectArray0[4] = (Object) "xWAzub4ObMRZ";
      objectArray0[5] = (Object) sQLDataException1;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9^g/F,%+JMp");
      Object[] objectArray0 = new Object[4];
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('<');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      cSVFormat3.withQuoteMode(quoteMode1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.print(cSVFormat3);
      Character character0 = new Character('<');
      Character character1 = new Character('n');
      cSVFormat2.withQuote(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      Integer integer0 = new Integer(31);
      cSVPrinter0.print(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" Sc`^EBf9Q[02Q?");
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter1.println();
      cSVPrinter0.print((Object) null);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "-AK$ifmR-ta+:y;{", 1, (Map<String, ClientInfoStatus>) null, (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" Sc`^EBf9Q[02Q?", sQLClientInfoException0);
      cSVPrinter2.print(sQLTimeoutException0);
      TreeSet<String> treeSet0 = new TreeSet<String>((Comparator<? super String>) null);
      treeSet0.add("-]>#/>u7P&mO");
      cSVPrinter1.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = new Character('v');
      Character.valueOf('v');
      cSVFormat1.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.println();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat3);
      cSVPrinter1.flush();
      cSVPrinter1.getOut();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter1;
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
      Character character0 = new Character('c');
      cSVFormat0.withCommentMarker(character0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("pHxk*KzP", ") invalid char between encapsulated token and delimiter", sQLTransientConnectionException0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 114);
      cSVPrinter0.print(stringWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(bufferedWriter0, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("I]Y^KalM4bR");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      cSVFormat0.print(charBuffer0);
      int int0 = 114;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("4h0LoDrOT'", "I]Y^KalM4bR", (Throwable) null);
      cSVFormat0.withDelimiter('B');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLTransientConnectionException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('e');
      Character character0 = new Character('c');
      cSVFormat0.withCommentMarker(character0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("M>5_QDR'$o5WI1TzwT", "pHxk*KzP", sQLTransientConnectionException0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 114);
      cSVPrinter0.print(bufferedWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(bufferedWriter0, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("I]Y^KalM4bR");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withNullString("The quoteChar character and the delimiter cannot be the same ('");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.println();
      Long long0 = new Long((-1467L));
      Long long1 = Long.getLong("I]Y^KalM4bR", long0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(long1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withAllowMissingColumnNames();
      Charset charset0 = Charset.defaultCharset();
      String string0 = "";
      ByteBuffer byteBuffer0 = charset0.encode("");
      charset0.decode(byteBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('B');
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVFormat1.withSkipHeaderRecord();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) charBuffer0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[3] = (Object) stringBuffer0;
      objectArray0[4] = (Object) stringBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('a');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) arrayDeque0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat2;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = new Character('v');
      Character character1 = Character.valueOf('c');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character1);
      Character character2 = Character.valueOf('v');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter0.println();
      cSVPrinter0.print(character2);
      cSVPrinter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" S`EBf9Q[02Q?");
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('n');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      Character character0 = new Character('n');
      CSVFormat cSVFormat4 = cSVFormat0.withQuote(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat4);
      Integer integer0 = new Integer(1525);
      cSVPrinter0.print(character0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
      cSVFormat1.withAllowMissingColumnNames();
      Character character0 = new Character('v');
      Character.valueOf('c');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Character.valueOf('v');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat3.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVFormat3.withSkipHeaderRecord();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("I]Y^KalM4bR");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      cSVFormat1.withSkipHeaderRecord();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter1.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charset0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withRecordSeparator("");
      cSVFormat0.withEscape('2');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
      ArrayList<PipedWriter> arrayList0 = new ArrayList<PipedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(6);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
      cSVFormat1.withNullString("Unexpected Quote value: ");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Short short0 = new Short((short)423);
      cSVPrinter0.print(short0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) quoteMode0;
      objectArray0[4] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVPrinter0.printRecord(objectArray0);
      CSVFormat.newFormat('\'');
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'j';
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('w');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) '6');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'j';
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('w');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) '6');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = new Character('v');
      Character character1 = Character.valueOf('c');
      cSVFormat2.withCommentMarker(character1);
      Character character2 = Character.valueOf('v');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character2);
      String string0 = "*9B!QZ!%@.H>";
      MockFile mockFile0 = new MockFile("P%]9G;Sxp:", "*9B!QZ!%@.H>");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      cSVFormat3.print(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      String string1 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'j';
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
      cSVFormat1.withNullString("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "Unexpected Quote value: ";
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.println();
      cSVPrinter0.print(objectArray0[2]);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'j';
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "Unexpected Quote value: ";
      objectArray0[3] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.println();
      Character character0 = new Character('j');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.getOut();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(" Sc`^EBf9Q[02Q?");
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      Stack<SQLDataException> stack1 = new Stack<SQLDataException>();
      priorityQueue0.addAll(stack1);
      cSVFormat0.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter1.println();
      cSVPrinter0.print(cSVPrinter1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stack0;
      objectArray0[1] = null;
      objectArray0[2] = (Object) stack0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) " Sc`^EBf9Q[02Q?";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter1.printRecords(objectArray0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) resultSet0;
      objectArray1[1] = (Object) cSVPrinter0;
      objectArray1[2] = (Object) priorityQueue0;
      objectArray1[3] = (Object) stack0;
      objectArray1[4] = (Object) resultSet0;
      objectArray1[5] = (Object) stack1;
      objectArray1[6] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(114);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator('1');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter1.println();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("Unexpected Quote value: ", "BrcZ`@W", 114, sQLTransientConnectionException0);
      cSVPrinter1.print(sQLWarning0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) sQLTransientConnectionException0;
      objectArray0[3] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("I]Y^KalM4bR");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Charset.defaultCharset();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("I]Y^KalM4bR");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      cSVFormat1.print(charBuffer0);
      Charset.defaultCharset();
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = '?';
      CharBuffer.wrap(charArray0);
      StringWriter stringWriter0 = new StringWriter(110);
      StringWriter stringWriter1 = stringWriter0.append('M');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      Character character0 = new Character('|');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote((Character) null);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat4);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(405);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("D>)8_HXS&{UDs|");
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      String string0 = " Sc`^EBf9Q[02Q?";
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(" Sc`^EBf9Q[02Q?");
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      priorityQueue0.addAll(stack0);
      cSVFormat3.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter1.println();
      cSVPrinter0.print((Object) null);
      CSVFormat.newFormat('g');
      cSVFormat1.print(stringWriter0);
      String string1 = "org.apache.commons.csv.Assertions";
      CSVPrinter cSVPrinter2 = null;
      try {
        cSVPrinter2 = new CSVPrinter(stringWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(" Sc`^EBf9Q[02Q?");
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      priorityQueue0.addAll(stack0);
      cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.println();
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[0];
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.flush();
      Long long0 = new Long(1058L);
      cSVPrinter1.print(long0);
      cSVPrinter1.getOut();
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)19;
      mockPrintStream0.write(byteArray0, 7, (-550));
      bufferedOutputStream0.write(5);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Unexpected Quote value: ";
      PrintStream printStream0 = mockPrintStream1.printf("Unexpected Quote value: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'j';
      charArray0[3] = '|';
      charArray0[3] = 'M';
      charArray0[4] = 'a';
      charArray0[5] = '?';
      CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append('M');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('|');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'a';
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.println();
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = (-190);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, (-1433), intArray0, (Throwable) null);
      cSVPrinter0.print(batchUpdateException0);
      cSVPrinter0.printComment((String) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("I]Y^KalM4bR");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, (-2451), intArray0, (Throwable) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-127);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[0] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      Long long0 = new Long((-1415L));
      // Undeclared exception!
      try { 
        cSVPrinter0.print(long0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null, 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      charArrayWriter1.writeTo(charArrayWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      TreeSet<MockFileWriter> treeSet0 = new TreeSet<MockFileWriter>();
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>((SortedSet<? extends MockFileWriter>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Stack<MockPrintStream> stack0 = new Stack<MockPrintStream>();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charArrayWriter1;
      cSVPrinter0.printRecord(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment("");
      cSVPrinter0.print((Object) null);
      cSVPrinter0.println();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("}'Fy8Nsv@(SuKV");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Character character0 = new Character('<');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      Character character1 = Character.valueOf('N');
      cSVFormat4.withCommentMarker(character1);
      MockFile mockFile0 = new MockFile("jQg~ [~l}'g$2SO", "P%]9G;Sxp:");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.printComment("/");
      Object[] objectArray0 = new Object[7];
      cSVFormat3.withEscape(character0);
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "jQg~ [~l}'g$2SO";
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat4;
      cSVPrinter0.printRecord(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.print("P%]9G;Sxp:");
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter1.close();
      try { 
        cSVPrinter0.printComment("P%]9G;Sxp:");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('c');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('a');
      MockFile mockFile0 = new MockFile("jQg~ [~l}'g$2SO", "s9B!QI!@.y>");
      mockFile0.setReadable(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      SQLException sQLException0 = new SQLException("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLException0);
      cSVPrinter0.print(sQLNonTransientException0);
      cSVPrinter0.printComment("jQg~ [~l}'g$2SO");
      cSVFormat1.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(6);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
      cSVFormat1.withNullString("Unexpected Quote value: ");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Unexpected Quote value: ", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientException0);
      batchUpdateException0.getNextException();
      SQLDataException sQLDataException0 = new SQLDataException("Unexpected Quote value: ", "Unexpected Quote value: ", (Throwable) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.print(stringWriter0);
      cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Unexpected Quote value: ", batchUpdateException0);
      cSVPrinter0.print(cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Character character0 = new Character('<');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      Character character1 = Character.valueOf('N');
      cSVFormat4.withCommentMarker(character1);
      String string0 = "P%]9G;Sxp:";
      MockFile mockFile0 = new MockFile("jQg~ [~l}'g$2SO", "P%]9G;Sxp:");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.printComment("/");
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat5 = cSVFormat3.withEscape(character0);
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "jQg~ [~l}'g$2SO";
      objectArray0[2] = (Object) cSVFormat3;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "P%]9G;Sxp:");
      CSVPrinter cSVPrinter1 = cSVFormat5.print(charBuffer0);
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(34);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      String string0 = "";
      cSVFormat1.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter1.print((Object) null);
      CSVFormat.newFormat('\"');
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(" Sc`^EBf9Q[02Q?");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat3;
      cSVPrinter0.println();
      cSVPrinter0.print(cSVFormat0);
      CSVFormat.newFormat('@');
      cSVPrinter0.printComment(" Sc`^EBf9Q[02Q?");
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.println();
      cSVPrinter0.print((Object) null);
      CSVFormat.newFormat('G');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVFormat1;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(" Sc`^EBf9Q[02Q?");
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter1.println();
      cSVPrinter0.print(cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) " Sc`^EBf9Q[02Q?";
      objectArray0[1] = null;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) priorityQueue0;
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringWriter0);
      cSVPrinter2.flush();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.println();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%r4XJ";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.withHeaderComments(stringArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.println();
      Double double0 = new Double(4);
      cSVPrinter0.print(cSVFormat0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat.newFormat('J');
      cSVPrinter0.printComment("lf4c&jhQ!5)R");
      cSVPrinter1.printRecord((Object[]) stringArray0);
      TreeSet<SQLDataException> treeSet0 = null;
      try {
        treeSet0 = new TreeSet<SQLDataException>((SortedSet<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('V');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ".g%Ft{ed{";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      char char0 = 'Q';
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) ".g%Ft{ed{", (-2581), 1207);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharSequence charSequence0 = null;
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null, 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      charArrayWriter1.writeTo(charArrayWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      TreeSet<MockFileWriter> treeSet0 = new TreeSet<MockFileWriter>();
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>((SortedSet<? extends MockFileWriter>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Stack<MockPrintStream> stack0 = new Stack<MockPrintStream>();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charArrayWriter1;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer1);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('C');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter2, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Character character0 = new Character('<');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      Character character1 = Character.valueOf('N');
      cSVFormat4.withCommentMarker(character1);
      String string0 = "P%]9G;Sxp:";
      MockFile mockFile0 = new MockFile("jQg~ [~l}'g$2SO", "P%]9G;Sxp:");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      String string1 = "/";
      cSVPrinter0.printComment("/");
      Object[] objectArray0 = new Object[7];
      cSVFormat3.withEscape(character0);
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "jQg~ [~l}'g$2SO";
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat4;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Character character0 = new Character('<');
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      Character.valueOf('<');
      Character character1 = new Character('q');
      cSVFormat2.withCommentMarker(character1);
      MockFile mockFile0 = new MockFile("P%]9G;Sxp:", "file");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.printComment("file");
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      Character character2 = new Character('N');
      cSVFormat4.withEscape(character2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jQg~ [~l}'g$2SO";
      stringArray0[1] = "P%]9G;Sxp:";
      stringArray0[2] = "file";
      stringArray0[3] = "file";
      stringArray0[4] = "P%]9G;Sxp:";
      stringArray0[5] = "jQg~ [~l}'g$2SO";
      stringArray0[6] = "file";
      stringArray0[7] = "P%]9G;Sxp:";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'file' in [jQg~ [~l}'g$2SO, P%]9G;Sxp:, file, file, P%]9G;Sxp:, jQg~ [~l}'g$2SO, file, P%]9G;Sxp:]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char char0 = 'j';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      ResultSet resultSet0 = null;
      cSVFormat0.withHeader((ResultSet) null);
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.println();
      cSVPrinter0.print((Object) null);
      CSVFormat.newFormat('G');
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[7");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[7";
      PrintWriter printWriter0 = mockPrintWriter0.format("format", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('}');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withCommentMarker('}');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat3.withCommentMarker('*');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      cSVPrinter0.print(cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'j';
      charArray0[2] = '|';
      charArray0[3] = 'M';
      charArray0[4] = 'a';
      charArray0[5] = '?';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.append('M');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('|');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[3] = (Object) 'M';
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withEscape('p');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.csv.CSVPrinter", sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.print(sQLTransactionRollbackException0);
      cSVPrinter0.printRecord((Iterable<?>) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("I]Y^KalM4bR");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Charset.defaultCharset();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>(2016, comparator0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      priorityQueue0.addAll(stack0);
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) "I]Y^KalM4bR";
      cSVFormat0.withAllowMissingColumnNames();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
      cSVPrinter0.printComment("");
      objectArray0[3] = (Object) byteBuffer0;
      objectArray0[4] = (Object) "I]Y^KalM4bR";
      objectArray0[5] = (Object) "I]Y^KalM4bR";
      objectArray0[6] = (Object) charset0;
      byteBuffer0.slice();
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat0.withNullString("' must not be null!");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
      MockPrintStream mockPrintStream0 = new MockPrintStream("' must not be null!");
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      cSVFormat2.print(printStream0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'j';
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "Unexpected Quote value: ";
      objectArray0[3] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.println();
      Double double0 = new Double(0.0);
      cSVPrinter0.print(cSVFormat0);
      CSVFormat.newFormat('6');
      cSVPrinter0.printComment(")E/TL7C");
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = 'o';
      charArray0[2] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'j';
      charArray0[2] = '|';
      charArray0[3] = 'M';
      charArray0[4] = 'a';
      charArray0[5] = '?';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'a';
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('p');
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("p", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("p", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter");
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("p", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[1] = (Object) pipedOutputStream0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("p", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      cSVPrinter0.close();
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("p", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      cSVPrinter0.printComment("OUh`nZRW(W'E#zFlB");
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("p", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("p", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      cSVPrinter0.printComment("OUh`nZRW(W'E#zFlB");
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals("p", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('V');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('V', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('V', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('V', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(".g%Ft{ed{");
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('V', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('V', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('V', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isNullStringSet());
      assertEquals(".g%Ft{ed{", cSVFormat3.getNullString());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('&');
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('V', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('V', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('V', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isNullStringSet());
      assertEquals(".g%Ft{ed{", cSVFormat3.getNullString());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isNullStringSet());
      assertEquals(".g%Ft{ed{", cSVFormat4.getNullString());
      assertEquals("&", cSVFormat4.getRecordSeparator());
      assertEquals('V', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(".g%Ft{ed{");
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('V', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('V', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('V', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.isNullStringSet());
      assertEquals(".g%Ft{ed{", cSVFormat3.getNullString());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isNullStringSet());
      assertEquals(".g%Ft{ed{", cSVFormat4.getNullString());
      assertEquals("&", cSVFormat4.getRecordSeparator());
      assertEquals('V', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(" Sc`^EBf9Q[02Q?");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat3;
      cSVPrinter0.println();
      cSVPrinter0.print(cSVFormat0);
      objectArray0[2] = (Object) cSVFormat3;
      CSVFormat.newFormat('@');
      objectArray0[3] = (Object) cSVFormat3;
      cSVPrinter0.printComment(" Sc`^EBf9Q[02Q?");
      objectArray0[4] = (Object) " Sc`^EBf9Q[02Q?";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      cSVFormat0.withHeader((ResultSet) null);
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.println();
      cSVPrinter0.print((Object) null);
      CSVFormat.newFormat('G');
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.printComment("[VAZo6");
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.flush();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      char[] charArray0 = new char[2];
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      charArray0[0] = '~';
      charArray0[1] = 'Q';
      stringWriter0.write(charArray0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }
}
