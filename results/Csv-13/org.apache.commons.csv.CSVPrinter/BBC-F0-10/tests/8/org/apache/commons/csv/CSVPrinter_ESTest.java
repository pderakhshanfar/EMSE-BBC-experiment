/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 06:23:45 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withDelimiter('+');
      cSVFormat0.toString();
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.print(charBuffer0);
      PriorityQueue<BufferedWriter> priorityQueue0 = new PriorityQueue<BufferedWriter>();
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>(priorityQueue0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedList0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('(');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(';');
      Character character0 = Character.valueOf('~');
      cSVFormat1.withEscape(character0);
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      charArray0[5] = '(';
      charArray0[6] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.append(';');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("The delimiter cannot be a line break");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('.');
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AZ-Z");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      stringWriter0.write("ZnEOO$K^Z9j]e'Bd");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(90);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, true, true).when(resultSet0).next();
      // Undeclared exception!
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("b'/y2O?t 3vu");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-776), 18);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      CSVParser cSVParser0 = cSVFormat1.parse(inputStreamReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('s');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "No quotes m@de set but no escape chaMacter is st", 32, 32);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("No quotes m@de set but no escape chaMacter is st");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('e');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedWriter0;
      cSVFormat1.withHeaderComments(objectArray0);
      boolean boolean0 = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(51);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "O[Y\"Fz";
      stringArray0[1] = "6P";
      stringArray0[2] = "R";
      stringArray0[3] = "M9c-vR<w'@}+:=&EP";
      stringArray0[4] = "[}'AC{25U";
      stringArray0[5] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[14];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals(42, charArrayWriter0.size());
      assertEquals("0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[4];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals(12, charArrayWriter0.size());
      assertEquals("9\r\n9\r\n9\r\n9\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u0085");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\u0085";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) "\u0085";
      objectArray0[3] = (Object) "\u0085";
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[21];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":ap@)");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals("\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n\":ap@)\"\r\n", charArrayWriter0.toString());
      assertEquals(189, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[21];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]>_u@VadC,Zrwx'V");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals("\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n\"]>_u@VadC,Zrwx'V\"\r\n", charArrayWriter0.toString());
      assertEquals(420, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(101, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[21];
      cSVFormat0.withQuote('k');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6-vw=[D;P");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals("k6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n", charArrayWriter1.toString());
      assertEquals("k6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n6-vw=[D;P\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[21];
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('l');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(" 3h\u0007&70ug");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals("l 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\tl 3h\u0007&70ugl\r\n", charArrayWriter0.toString());
      assertEquals(253, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[21];
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('l');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("F,/qi=2%/}*NkMQv");
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) stringArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[21];
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withQuote('k');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("-vw=[D;P");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals("k\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n\"-vw=[D;P\"\r\n", charArrayWriter1.toString());
      assertEquals(253, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '-';
      charArray0[2] = 'H';
      charArray0[3] = '=';
      charArray0[4] = 'p';
      charArray0[5] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) set0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.getBuffer();
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('e');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = '=';
      charArray0[5] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer1, cSVFormat0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      ArrayList<String> arrayList0 = new ArrayList<String>(set0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      cSVFormat0.withHeaderComments(stringArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1346);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>();
      ArrayDeque<MockFileInputStream> arrayDeque0 = new ArrayDeque<MockFileInputStream>(linkedHashSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(',');
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("812JM}u;)gOeN]w");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(',');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("F,/q'=%%/}*NkMQv");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withSkipHeaderRecord();
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = 'h';
      charArray0[3] = ',';
      charArray0[4] = 'F';
      charArray0[5] = ',';
      charArray0[6] = 'F';
      charArray0[7] = '[';
      charArray0[8] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) ',';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start and the escape character cannot be the same ('", (String) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('Q');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      cSVPrinter0.print(class0);
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) mockFileWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) serviceLoader0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("RecordSeparator=<");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) pipedReader0;
      cSVPrinter0.printRecords(objectArray0);
      Collection<SQLTransactionRollbackException> collection0 = null;
      Vector<SQLTransientException> vector0 = null;
      try {
        vector0 = new Vector<SQLTransientException>((Collection<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      cSVFormat0.print(charArrayWriter0);
      cSVFormat2.print(charArrayWriter0);
      charArrayWriter0.write((-2269));
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>((Comparator<? super Float>) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) charArrayWriter0;
      cSVFormat2.withHeaderComments(objectArray0);
      Character character0 = new Character('X');
      cSVFormat1.withEscape(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(97);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      cSVFormat0.print(charArrayWriter0);
      cSVFormat2.print(charArrayWriter0);
      charArrayWriter0.write((-2269));
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>((Comparator<? super Float>) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) charArrayWriter0;
      cSVFormat2.withHeaderComments(objectArray0);
      Character character0 = new Character('X');
      cSVFormat1.withEscape(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(97);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(',');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("F,/q'=%%/}*NkMQv");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.print((Object) null);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'F';
      intArray0[1] = (int) 'F';
      intArray0[2] = (int) ',';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("F,/q'=%%/}*NkMQv", intArray0);
      batchUpdateException0.getNextException();
      DataTruncation dataTruncation0 = new DataTruncation((-631), false, false, (-631), (-631), (Throwable) null);
      cSVPrinter0.print(dataTruncation0);
      assertEquals(56, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>(comparator0);
      Float float0 = new Float((-1.0));
      priorityQueue0.add(float0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[19];
      objectArray0[2] = (Object) cSVFormat0;
      Comparator<Float> comparator1 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Float> priorityQueue1 = new PriorityQueue<Float>(comparator1);
      Comparator<Float> comparator2 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Float> priorityQueue2 = new PriorityQueue<Float>(comparator2);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.print(priorityQueue2);
      cSVPrinter0.print(charArrayWriter0);
      cSVPrinter0.printComment("#Yc+bb_sb}o\"[XlqjT");
      assertEquals(97, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat2.print(charArrayWriter0);
      cSVFormat0.print(charArrayWriter0);
      cSVFormat1.withCommentMarker('%');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      ArrayList<String> arrayList0 = new ArrayList<String>(set0);
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
      assertEquals(408, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('x');
      cSVFormat0.withSkipHeaderRecord(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(',');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("F,/q'=%%/}*NkMQv");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(charArrayWriter0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>(comparator0);
      cSVPrinter1.printComment("");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) priorityQueue0;
      objectArray0[6] = (Object) comparator0;
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
      Long long0 = new Long((-1L));
      cSVPrinter0.print(long0);
      assertEquals(411, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
      Integer integer0 = new Integer(1259);
      cSVPrinter0.print(integer0);
      assertEquals(74, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(',');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("F,/q'=%%/}*NkMQv");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(charArrayWriter0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>(comparator0);
      cSVPrinter1.printComment("");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat6;
      objectArray0[5] = (Object) priorityQueue0;
      objectArray0[6] = (Object) comparator0;
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(386, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(',');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("F,/q'=%%/}*NkMQv");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)cSVPrinter0.getOut();
      assertEquals(140, charArrayWriter0.size());
      assertEquals(140, charArrayWriter1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(stringArray0);
      Character character0 = new Character('m');
      Character character1 = Character.valueOf('k');
      cSVFormat1.withEscape(character1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'x';
      charArray0[6] = '|';
      charArray0[7] = 'x';
      charArray0[8] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(character1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('n');
      cSVFormat1.print(charArrayWriter0);
      charArrayWriter0.reset();
      charArrayWriter0.reset();
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      StringWriter stringWriter0 = new StringWriter(30);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charArrayWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVPrinter1;
      cSVPrinter1.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('a');
      cSVFormat1.print(charArrayWriter0);
      charArrayWriter0.reset();
      charArrayWriter0.reset();
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter1.printRecord((Object[]) stringArray0);
      cSVPrinter1.getOut();
      assertEquals(61, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('i');
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('i');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      charArrayWriter1.reset();
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat2.withHeaderComments(stringArray0);
      Character character0 = new Character('m');
      Character character1 = Character.valueOf('j');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("|Bax|'EU");
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      cSVPrinter1.printRecords((Object[]) stringArray0);
      cSVPrinter0.printComment("");
      cSVPrinter2.printRecords((Object[]) stringArray0);
      assertEquals(9, charArrayWriter0.size());
      assertEquals("|Bax|'EU\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('e');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedWriter0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      stringWriter0.append('D');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('i');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      charArrayWriter0.reset();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVPrinter0;
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('i');
      Character character0 = new Character('m');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      Character.valueOf('|');
      Object object2 = new Object();
      cSVPrinter1.print(cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.println();
      cSVPrinter1.printComment("The header contains a duplicate entry: '");
      cSVPrinter1.printRecord(objectArray0);
      assertEquals(453, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.reset();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      Character character0 = new Character('b');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Character character1 = Character.valueOf('|');
      Object object0 = new Object();
      cSVPrinter0.print(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) character1;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(167, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.reset();
      Character.valueOf('b');
      Character character0 = Character.valueOf('M');
      cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('b');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) character0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(cSVFormat2);
      assertEquals(350, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = stringWriter0.append('D');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      Character.valueOf('G');
      Character character0 = new Character('m');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter1);
      Object object0 = new Object();
      cSVPrinter1.printRecord(objectArray0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1, 99);
      cSVPrinter0.print((Object) null);
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = stringWriter0.append('D');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      stringWriter1.append((CharSequence) stringBuffer0);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      cSVPrinter0.flush();
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('p');
      cSVFormat3.withRecordSeparator('p');
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = stringWriter0.append('D');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('i');
      cSVFormat0.withIgnoreEmptyLines();
      charArrayWriter0.reset();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter1);
      Character character0 = new Character('p');
      Character.valueOf('5');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      stringWriter0.append('D');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('i');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      charArrayWriter0.reset();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVPrinter0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      Character character0 = new Character('m');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      Character.valueOf('|');
      Object object2 = new Object();
      cSVPrinter1.print(cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(253, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.reset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Character character0 = new Character('%');
      Character character1 = Character.valueOf('%');
      cSVFormat0.withCommentMarker(character1);
      cSVFormat0.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.reset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("vTclA!eOdr5");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(4, comparator0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object object0 = new Object();
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("RecordSeparator=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1021);
      charArrayWriter0.reset();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) sQLSyntaxErrorException0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) "RecordSeparator=<";
      Object object0 = new Object();
      objectArray0[4] = object0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Character character0 = new Character('x');
      Character character1 = Character.valueOf('M');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character1);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('M');
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat3);
      Character.valueOf('M');
      Character character2 = Character.valueOf('M');
      cSVFormat0.withCommentMarker(character2);
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter2 = cSVFormat1.print(pipedWriter0);
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>(comparator0);
      cSVPrinter2.printRecords((Iterable<?>) sQLSyntaxErrorException0);
      cSVPrinter2.printRecords(objectArray0);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = stringWriter0.append('>');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('>');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      SQLWarning sQLWarning0 = new SQLWarning("3", "\"5oI7D?", 114);
      cSVPrinter1.print(sQLWarning0);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringWriter0);
      cSVPrinter2.printComment((String) null);
      cSVPrinter1.printRecords((Iterable<?>) sQLWarning0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[5] = (Object) "3";
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printComment((String) null);
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter2));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = stringWriter0.append('D');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray0);
      Character character0 = new Character('5');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat1);
      Character.valueOf('2');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat3.withCommentMarker(character0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter1);
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>((Comparator<? super Float>) null);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('A');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withAllowMissingColumnNames(false);
      String string0 = "9ERyf)z;";
      cSVFormat2.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9ERyf)z;");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter0.flush();
      cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('e');
      cSVPrinter0.printComment("9ERyf)z;");
      rowSetMetaDataImpl0.getColumnCount();
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Iterable<MockFileInputStream> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("RecordSeparator=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.print(pipedWriter0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter1.getOut();
      cSVFormat0.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter2 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter2.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("RecordSeparator=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.print(pipedWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      String string0 = "";
      cSVFormat1.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('A');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat3.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9ERyf)z;");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.flush();
      cSVFormat3.withSkipHeaderRecord();
      cSVFormat2.withRecordSeparator('e');
      cSVPrinter0.printComment("9ERyf)z;");
      rowSetMetaDataImpl0.getColumnCount();
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      MockFile mockFile0 = new MockFile(string0, string0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      StringWriter stringWriter0 = new StringWriter(25);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.getBuffer();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('G');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat5);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.isEmpty();
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      Character character0 = Character.valueOf('G');
      cSVFormat4.withQuote(character0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.printComment("forma2");
      assertEquals("\r\n\"\"\r\n\r\n\r\n", stringWriter2.toString());
      assertEquals("\r\n\"\"\r\n\r\n\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.isEmpty();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(pipedWriter0);
      cSVPrinter1.printRecords((Iterable<?>) treeSet0);
      Object[] objectArray0 = new Object[3];
      cSVFormat1.withDelimiter('/');
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = (Object) pipedWriter0;
      cSVFormat2.withDelimiter('/');
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("RecordSeparator=<", "RecordSeparator=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.print(pipedWriter0);
      cSVPrinter0.printRecord((Iterable<?>) sQLSyntaxErrorException0);
      assertEquals("RecordSeparator=<", sQLSyntaxErrorException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.isEmpty();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(pipedWriter0);
      try { 
        cSVPrinter1.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      cSVFormat2.withAllowMissingColumnNames();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(32, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat1.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('A');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat3.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9ERyf)z;");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.flush();
      cSVFormat3.withSkipHeaderRecord();
      cSVFormat2.withRecordSeparator('e');
      cSVPrinter0.printComment("9ERyf)z;");
      rowSetMetaDataImpl0.getColumnCount();
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      MockFile mockFile0 = new MockFile("", "");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = stringWriter0.append('D');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      stringWriter1.append((CharSequence) stringBuffer0);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat4);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.isEmpty();
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      Character.valueOf('D');
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) treeSet0;
      objectArray1[2] = (Object) quoteMode0;
      cSVPrinter0.printRecords(objectArray1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat0);
      cSVPrinter1.print(cSVFormat4);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringBuffer0);
      cSVPrinter2.getOut();
      cSVPrinter0.flush();
      assertEquals(383, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.skip((-1040L));
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      mockPrintStream0.println(false);
      pipedOutputStream0.write(byteArray0, (int) (byte)0, (int) (byte)0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Vector<MockFileInputStream> vector0 = new Vector<MockFileInputStream>();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      pipedInputStream0.close();
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      inputStreamReader0.getEncoding();
      CSVParser cSVParser0 = cSVFormat0.parse(inputStreamReader0);
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat2.withQuote(',');
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVFormat0.withQuote((Character) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe closed
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat4.withIgnoreHeaderCase(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Appendable appendable0 = null;
      CSVPrinter cSVPrinter1 = null;
      try {
        cSVPrinter1 = new CSVPrinter((Appendable) null, cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments((Object[]) null);
      Character character0 = new Character('0');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('V');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('P');
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(97);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1, 97, 97);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.reset();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      Character character0 = new Character('b');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Character character1 = Character.valueOf('|');
      Object object0 = new Object();
      cSVPrinter0.print(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) character1;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(195, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = stringWriter0.append('D');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      stringWriter1.append((CharSequence) stringBuffer0);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) stringWriter0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat4);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      Character character0 = Character.valueOf('D');
      cSVFormat2.withQuote(character0);
      cSVPrinter0.printComment("|K");
      assertEquals(167, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter(13);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.reset();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat3.withRecordSeparator('L');
      cSVPrinter0.printComment("");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.getColumnCount();
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.println();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = stringWriter0.append('D');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[8];
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(stringWriter2);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.reset();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      Character character0 = new Character('b');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      char char0 = 'A';
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('A');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat3.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9ERyf)z;");
      cSVFormat4.print(mockPrintWriter0);
      Character character0 = new Character('c');
      CSVFormat cSVFormat6 = cSVFormat5.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat6);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      String string0 = "";
      cSVFormat1.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('A');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat3.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9ERyf)z;");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.flush();
      cSVFormat3.withSkipHeaderRecord();
      cSVFormat2.withRecordSeparator('e');
      cSVPrinter0.printComment("9ERyf)z;");
      rowSetMetaDataImpl0.getColumnCount();
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(114);
      StringWriter stringWriter1 = stringWriter0.append('D');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      stringWriter1.append((CharSequence) stringBuffer0);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) stringWriter0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat4);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.isEmpty();
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      Character character0 = Character.valueOf('D');
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('D')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      LinkedHashSet<CharArrayWriter> linkedHashSet0 = new LinkedHashSet<CharArrayWriter>();
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      cSVFormat2.withAllowMissingColumnNames();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(78, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("_Nlh-z?)>T*v");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("format");
      Character character0 = Character.valueOf('m');
      cSVFormat2.withCommentMarker(character0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.print((-310L));
      cSVFormat4.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.close();
      PriorityQueue<BufferedOutputStream> priorityQueue0 = new PriorityQueue<BufferedOutputStream>(4957);
      mockPrintWriter0.append('v');
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[4];
      mockFileOutputStream0.getChannel();
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("_Nlh-z?)>T*v");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.skip((-1040L));
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      mockPrintStream0.println(false);
      pipedOutputStream0.write(byteArray0, (int) (byte)0, (int) (byte)0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Vector<MockFileInputStream> vector0 = new Vector<MockFileInputStream>();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      pipedInputStream0.close();
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      inputStreamReader0.getEncoding();
      cSVFormat0.parse(inputStreamReader0);
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat2.withQuote(',');
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(cSVFormat2);
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("%", "%");
      try { 
        cSVPrinter0.print(sQLSyntaxErrorException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
}
