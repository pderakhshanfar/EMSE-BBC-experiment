* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-30
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 18259
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-13/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 971
* Using seed 3223012705
* Starting evolution
bbc usage percentage is: 30%
* Initial Number of Goals in DynaMOSA = 190 / 971
[MASTER] 22:27:20.915 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:27:20.915 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:27:20.915 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:27:20.915 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:27:20.916 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:27:20.916 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:27:20.916 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:27:20.916 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:27:20.916 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:27:20.916 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:27:20.916 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:27:22.514 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:27:27.570 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:36:59.588 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLSyntaxErrorException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLTransientException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLDataException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLTransactionRollbackException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
* Search finished after 602s and 1195 generations, 622644 statements, best individual has fitness: 170.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 164
* Number of covered goals: 151
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 137
* Number of covered goals: 120
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 34
* Number of covered goals: 34
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 83%
* Total number of goals: 507
* Number of covered goals: 419
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 137
* Number of covered goals: 114
* Generated 64 tests with total length 396
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:38:50.862 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8532% of time used, but only 30/64 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 47%
* Compiling and checking tests
[MASTER] 22:39:01.821 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:39:02.142 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:39:03.916 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<32> but was:<31>
[MASTER] 22:39:03.922 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVFormat");
CharArrayWriter charArrayWriter0 = new CharArrayWriter();
CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
CSVFormat cSVFormat1 = cSVFormat0.withEscape('1');
Object[] objectArray0 = new Object[8];
objectArray0[0] = (Object) mockFileWriter0;
objectArray0[1] = (Object) "org.apache.commons.csv.CSVFormat";
Object object0 = new Object();
objectArray0[2] = object0;
objectArray0[3] = (Object) "org.apache.commons.csv.CSVFormat";
objectArray0[4] = (Object) charArrayWriter0;
Object object1 = new Object();
objectArray0[6] = object1;
cSVFormat1.withHeaderComments(objectArray0);
SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.csv.CSVFormat");
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(65);
MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
cSVPrinter0.printRecords((Iterable<?>) sQLWarning0);
assertEquals(32, byteArrayOutputStream0.size());


[MASTER] 22:39:10.781 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_102_tmp__ESTest.test0(CSVPrinter_102_tmp__ESTest.java:49)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:10.786 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
assertNotNull(cSVFormat0);
assertEquals('|', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isNullStringSet());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertNotNull(cSVPrinter0);
assertEquals('|', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(fileDescriptor0.valid());

SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("charset");
assertNotNull(sQLSyntaxErrorException0);
assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
assertNull(sQLSyntaxErrorException0.getSQLState());
assertEquals("charset", sQLSyntaxErrorException0.getMessage());
assertEquals("java.sql.SQLSyntaxErrorException: charset", sQLSyntaxErrorException0.toString());

SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.csv.CSVPrinter", "Lh0I=BT", 114, sQLSyntaxErrorException0);
assertNotNull(sQLRecoverableException0);
assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
assertNull(sQLSyntaxErrorException0.getSQLState());
assertEquals("charset", sQLSyntaxErrorException0.getMessage());
assertEquals("java.sql.SQLSyntaxErrorException: charset", sQLSyntaxErrorException0.toString());
assertEquals(114, sQLRecoverableException0.getErrorCode());
assertEquals("Lh0I=BT", sQLRecoverableException0.getSQLState());
assertEquals("org.apache.commons.csv.CSVPrinter", sQLRecoverableException0.getMessage());
assertEquals("java.sql.SQLRecoverableException: org.apache.commons.csv.CSVPrinter", sQLRecoverableException0.toString());

cSVPrinter0.print(sQLRecoverableException0);

[MASTER] 22:39:25.528 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test38 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_128_tmp__ESTest.test38(CSVPrinter_128_tmp__ESTest.java:1034)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:25.529 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());

char[] charArray0 = new char[4];
CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
assertNotNull(charBuffer0);
assertEquals(4, charBuffer0.length());
assertTrue(charBuffer0.hasArray());
assertTrue(charBuffer0.hasRemaining());
assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
assertEquals(4, charBuffer0.remaining());
assertEquals(0, charBuffer0.position());
assertFalse(charBuffer0.isDirect());
assertFalse(charBuffer0.isReadOnly());
assertEquals(4, charBuffer0.limit());
assertEquals(0, charBuffer0.arrayOffset());
assertEquals(4, charBuffer0.capacity());
assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
assertEquals(4, charArray0.length);

CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
assertNotNull(cSVPrinter0);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertEquals(4, charBuffer0.length());
assertTrue(charBuffer0.hasArray());
assertTrue(charBuffer0.hasRemaining());
assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
assertEquals(4, charBuffer0.remaining());
assertEquals(0, charBuffer0.position());
assertFalse(charBuffer0.isDirect());
assertFalse(charBuffer0.isReadOnly());
assertEquals(4, charBuffer0.limit());
assertEquals(0, charBuffer0.arrayOffset());
assertEquals(4, charBuffer0.capacity());
assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
assertEquals(4, charArray0.length);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

cSVPrinter0.print(mockFileWriter0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-13/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-30/tests/4
* Done!

* Computation finished
