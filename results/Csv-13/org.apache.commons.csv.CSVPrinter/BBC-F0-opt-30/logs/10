* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-30
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 8378
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-13/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 971
* Using seed 2405038615
* Starting evolution
bbc usage percentage is: 30%
* Initial Number of Goals in DynaMOSA = 190 / 971
[MASTER] 22:28:24.344 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:28:24.344 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:28:24.345 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:28:24.345 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:28:24.345 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:28:24.345 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:28:24.345 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:28:24.345 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:28:24.345 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:28:24.345 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:28:24.345 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:28:30.994 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:28:38.590 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:30:29.381 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 22:33:04.350 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[MASTER] 22:33:35.029 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.ObjectInputStream due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.PushbackInputStream due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.PushbackInputStream due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.PipedInputStream due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.PipedOutputStream due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 22:37:34.578 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLFeatureNotSupportedException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLIntegrityConstraintViolationException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.util.HashMap due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
* Search finished after 603s and 1361 generations, 701177 statements, best individual has fitness: 162.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 164
* Number of covered goals: 153
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 137
* Number of covered goals: 121
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 43
* Number of covered goals: 43
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 507
* Number of covered goals: 430
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 137
* Number of covered goals: 115
* Generated 72 tests with total length 443
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:39:48.392 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8882333333333333% of time used, but only 30/72 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 42%
* Compiling and checking tests
[MASTER] 22:39:59.809 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:40:00.031 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:40:00.788 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_77_tmp__ESTest.test0(CSVPrinter_77_tmp__ESTest.java:25)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:40:00.788 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
CSVFormat cSVFormat0 = CSVFormat.RFC4180;
CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
cSVPrinter0.close();

[MASTER] 22:40:08.654 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_105_tmp__ESTest.test0(CSVPrinter_105_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:40:08.654 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getNullString());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getNullString());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

cSVPrinter0.println();

[MASTER] 22:40:12.963 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_113_tmp__ESTest.test0(CSVPrinter_113_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:40:12.964 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals('Y', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getRecordSeparator());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals('Y', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getRecordSeparator());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

cSVPrinter0.flush();

[MASTER] 22:40:16.255 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_115_tmp__ESTest.test0(CSVPrinter_115_tmp__ESTest.java:50)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:40:16.256 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" SkipHeaderRecord:", false);
assertNotNull(mockFileOutputStream0);

BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
assertNotNull(bufferedOutputStream0);

ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
assertNotNull(objectOutputStream0);

cSVPrinter0.print(objectOutputStream0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-13/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-30/tests/10
* Done!

* Computation finished
