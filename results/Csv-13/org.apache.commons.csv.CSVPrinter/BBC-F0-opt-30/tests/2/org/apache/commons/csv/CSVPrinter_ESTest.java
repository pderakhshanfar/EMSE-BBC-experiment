/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:41:43 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.SyncFailedException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('J');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\u008F');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> CommentStart=<\u008F> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> CommentStart=<\u008F> RecordSeparator=<\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = 'p';
      charArray0[2] = 'a';
      charArray0[3] = '>';
      charArray0[4] = ' ';
      charArray0[5] = 'x';
      charArray0[6] = '7';
      charArray0[7] = 'b';
      charArray0[8] = 'U';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('p');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) '>');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('E');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("7SN'[Eyra3BjzV[zaY");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\u008F');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.withRecordSeparator('i');
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("egdCQZ[ A5");
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> CommentStart=<\u008F> RecordSeparator=<\r\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'R';
      charArray0[2] = 'M';
      charArray0[3] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'M';
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) 'M';
      objectArray0[3] = (Object) 'R';
      objectArray0[4] = (Object) 'Y';
      objectArray0[5] = (Object) 'Y';
      objectArray0[6] = (Object) 'Y';
      charBuffer0.compact();
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('3');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('o');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVFormat3.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "Te header conaics a tuli{ateFentF4T '";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Te header conaics a tuli{ateFentF4T '");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Te header conaics a tuli{ateFentF4T '");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter1 = null;
      try {
        cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Z?9#B[");
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.withNullString("Z?9#B[");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Z?9#B[");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>(1237);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!K");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!K");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Double double0 = new Double(1.0);
      cSVPrinter0.print(double0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "'fKZ7e20:", (-2), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLTransientException0);
      objectArray0[4] = object1;
      objectArray0[5] = (Object) sQLFeatureNotSupportedException0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[13];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9OmS+LmStY/2");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLTransientException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(67);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 67, 67);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('g');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('G');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat3);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[10];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A06(YLf/bJ");
      StringWriter stringWriter0 = new StringWriter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StringWriter stringWriter0 = new StringWriter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      Long long0 = new Long((-1L));
      cSVPrinter0.print(long0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@7& e\"", (String) null);
      vector0.add(sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      StringWriter stringWriter1 = new StringWriter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(98);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment((String) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0c_gVkr8A|)<");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('8');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.withNullString(",ZKZMpmu_Lh8R");
      MockFileWriter mockFileWriter0 = new MockFileWriter(",ZKZMpmu_Lh8R");
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('8');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printComment("h?oS](6XiX|pbP^+*N");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "1;\\4Ix1";
      cSVFormat0.withNullString("1;\u0004Ix1");
      Character character0 = Character.valueOf('8');
      cSVFormat0.withEscape(character0);
      cSVFormat0.withSkipHeaderRecord(false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) mockFileWriter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      StringWriter stringWriter1 = new StringWriter();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quoteMode0;
      objectArray0[4] = (Object) pipedWriter0;
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}0=QGaNfLkAcs");
      MockFileWriter mockFileWriter0 = new MockFileWriter("}0=QGaNfLkAcs", true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("};HnB3Wm,w:!A)i");
      CharBuffer charBuffer0 = CharBuffer.allocate(1598);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("v:&4)<D2`9c7");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("PF} S-2S(A");
      Character.valueOf('l');
      Character character0 = new Character(';');
      cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[10];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("!\"ZF.-");
      cSVFormat0.withNullString("!\"ZF.-");
      MockFileWriter mockFileWriter0 = new MockFileWriter("v:&4)<D2`9c7");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@~(?U2%");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(" `p");
      MockFileWriter mockFileWriter0 = new MockFileWriter("@~(?U2%");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[10];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withNullString("`ueZ0bh\"DPE]ww3;");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("`ueZ0bh\"DPE]ww3;");
      MockFileWriter mockFileWriter0 = new MockFileWriter("e!}:&8XTem0#G");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('l');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "\"I", 71, (Throwable) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) outputStreamWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) null;
      cSVPrinter0.close();
      objectArray0[6] = (Object) sQLTransientConnectionException0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('l');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withAllowMissingColumnNames(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      Character character0 = Character.valueOf('R');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.print(cSVFormat1);
      cSVPrinter1.printComment("66TuG x<6kx");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      Character character0 = new Character('R');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("66TuG x<6kx");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "66TuG x<6kx");
      cSVPrinter0.print(stringWriter1);
      cSVPrinter0.printComment("66TuG x<6kx");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 3);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      bufferedWriter0.write(3);
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '4';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@~W(?U2%");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>(2427);
      vector0.add((SQLIntegrityConstraintViolationException) null);
      vector0.ensureCapacity(3168);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) "1)`/471yw";
      objectArray0[3] = (Object) "WMxmTa$lyD";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) "WMxmTa$lyD";
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('B');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('K');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`meh|VcS=]\"";
      stringArray0[1] = ",";
      stringArray0[2] = "out";
      stringArray0[3] = "]";
      stringArray0[4] = ") invalid char between encapsulated token and delimiter";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('w');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('w');
      Character character1 = Character.valueOf('l');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      cSVFormat1.withAllowMissingColumnNames(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "\"I", 71, (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLTransientConnectionException0);
      cSVPrinter0.print(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@~W(?U2%");
      MockFile mockFile0 = new MockFile("1)`/471yw");
      File file0 = MockFile.createTempFile("@~W(?U2%", "WMxmTa$lyD", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.print(mockPrintWriter0);
      Object object1 = new Object();
      Object object2 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVFormat1.withQuote(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "@~W(?U2%";
      objectArray0[2] = (Object) cSVPrinter1;
      objectArray0[3] = (Object) "WMxmTa$lyD";
      objectArray0[5] = object2;
      objectArray0[6] = object2;
      objectArray0[7] = (Object) "1)`/471yw";
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator('u');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('u');
      charArrayWriter0.flush();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('u');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVFormat2.withAllowMissingColumnNames(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      Stack<OutputStreamWriter> stack0 = new Stack<OutputStreamWriter>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(".p", ";v&O*8al", 116);
      cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) ".p";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) pipedOutputStream0;
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(116);
      cSVPrinter1.printRecords((Iterable<?>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withRecordSeparator("");
      Character.valueOf('P');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("1)`/471yw");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      Object object1 = new Object();
      Object object2 = new Object();
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat1);
      Stack<OutputStreamWriter> stack0 = new Stack<OutputStreamWriter>();
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[3];
      Object object3 = new Object();
      objectArray0[0] = object3;
      objectArray0[1] = (Object) cSVFormat1;
      Object object4 = new Object();
      objectArray0[2] = object4;
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":,s5i\"wF+aqe0S");
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withIgnoreHeaderCase(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Vector<OutputStreamWriter> vector0 = new Vector<OutputStreamWriter>(57, 57);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "@~U2\\%";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@~U2%");
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      cSVFormat0.print(printWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "@~U2%";
      objectArray0[1] = (Object) "@~U2%";
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "cV-]RL4C/g'i<", 1, 1);
      Object object0 = new Object();
      Object object1 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('s');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('s');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("cV-]RL4C/g'i<");
      cSVFormat5.withQuoteMode(quoteMode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator("No more CSV records available");
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat7 = cSVFormat6.withQuoteMode(quoteMode1);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "cV-]RL4C/g'i<", 1, 1);
      CSVPrinter cSVPrinter0 = cSVFormat7.print(charBuffer0);
      Object object2 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "cV-]RL4C/g'i<";
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) charArrayWriter0;
      Object object3 = new Object();
      objectArray0[4] = object3;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('1');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character1 = new Character('n');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('`');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = 'n';
      charArray0[2] = '`';
      charArray0[3] = 'w';
      charArray0[4] = '1';
      charArray0[5] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.reset();
      CSVParser cSVParser0 = cSVFormat1.parse(charArrayReader0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Vector<OutputStreamWriter> vector0 = new Vector<OutputStreamWriter>(110, 57);
      cSVPrinter0.print(cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: (line 1) invalid char between encapsulated token and delimiter
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(477);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Character.valueOf('@');
      Character character0 = new Character('C');
      cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withNullString((String) null);
      cSVFormat2.print(stringWriter0);
      char char0 = 'D';
      Character.valueOf('D');
      Character.valueOf('@');
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('@');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1)/471yw");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.printComment("66TuG x<6kx");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat5.withIgnoreHeaderCase(true);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter2 = cSVFormat3.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat4;
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "cV-]RL4C/g'i<", 1, 1);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('Q');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('+');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat2.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat6);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@~W(?U2%");
      PrintWriter printWriter0 = mockPrintWriter0.append('?');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) printWriter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) cSVFormat3;
      mockPrintWriter0.println('w');
      objectArray0[7] = (Object) printWriter0;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('u');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('u');
      charArrayWriter0.flush();
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('u');
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      char[] charArray0 = new char[0];
      charArrayWriter0.write(charArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DataTruncation dataTruncation0 = new DataTruncation((-1186), false, true, (-1186), 0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) dataTruncation0;
      objectArray0[5] = (Object) cSVFormat1;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('u');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('u');
      charArrayWriter0.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('u');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVFormat3.withAllowMissingColumnNames(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      Stack<OutputStreamWriter> stack0 = new Stack<OutputStreamWriter>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", ".p", 116);
      cSVPrinter0.print(cSVFormat2);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLInvalidAuthorizationSpecException0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) sQLInvalidAuthorizationSpecException0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter1.printRecords(objectArray0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(116);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("1)`/471yw");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      Character character1 = Character.valueOf('P');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character1);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter2.printComment("66TuG x<6kx");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) cSVFormat4;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "1)`/471yw";
      objectArray0[4] = (Object) cSVPrinter2;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) "1)`/471yw";
      objectArray0[7] = (Object) "1)`/471yw";
      cSVPrinter1.printRecord(objectArray0);
      cSVFormat2.print(stringWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('^');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character1 = new Character('w');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.print(pipedWriter0);
      Object object1 = new Object();
      Object object2 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Character character2 = Character.valueOf('{');
      cSVFormat0.withQuote(character2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = object2;
      Object object3 = new Object();
      objectArray0[6] = object3;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      charArrayWriter0.flush();
      DataTruncation dataTruncation0 = new DataTruncation((-9), true, true, 4, (-9));
      Character character0 = Character.valueOf('X');
      Character character1 = new Character('w');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker((Character) null);
      cSVFormat2.withCommentMarker(character0);
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CSVParser cSVParser0 = cSVFormat1.parse(charArrayReader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.print(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.printRecords((Iterable<?>) cSVParser0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) dataTruncation0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVPrinter2.printRecord(objectArray0);
      try { 
        cSVPrinter2.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      QuoteMode quoteMode1 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVPrinter0.println();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DataTruncation dataTruncation0 = new DataTruncation((-650), false, false, 339, (-650));
      Character.valueOf('X');
      Character character0 = new Character('U');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CSVParser cSVParser0 = cSVFormat0.parse(charArrayReader0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter1.print(charArrayReader0);
      charArrayReader0.read(charBuffer0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.getOut();
      cSVPrinter2.printRecords((Iterable<?>) cSVParser0);
      // Undeclared exception!
      try { 
        cSVPrinter2.print(cSVPrinter0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".fv)";
      stringArray0[1] = "Excel";
      stringArray0[2] = "format";
      stringArray0[3] = "out";
      stringArray0[4] = "";
      stringArray0[5] = "g\f6";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('\"');
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVPrinter0.println();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DataTruncation dataTruncation0 = new DataTruncation((-650), false, false, 339, (-650));
      Character.valueOf('X');
      Character character0 = new Character('U');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CSVParser cSVParser0 = cSVFormat0.parse(charArrayReader0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter1.print(charArrayReader0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('u');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('u');
      charArrayWriter0.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('u');
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      char[] charArray0 = new char[0];
      charArrayWriter0.write(charArray0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DataTruncation dataTruncation0 = new DataTruncation((-1186), false, true, (-1186), 0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) dataTruncation0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment((String) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('+');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '1';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('u');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('u');
      charArrayWriter0.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('u');
      cSVFormat3.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      char[] charArray0 = new char[0];
      charArrayWriter0.write(charArray0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DataTruncation dataTruncation0 = new DataTruncation((-1186), false, true, (-1186), 0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'u';
      cSVFormat2.withIgnoreHeaderCase(false);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      CSVParser cSVParser0 = cSVFormat3.parse(charArrayReader0);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
      cSVPrinter0.print(charArrayReader0);
      cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('l');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVFormat0.withCommentMarker((Character) null);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) appendable0;
      objectArray0[2] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) appendable0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment((String) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('l');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Appendable appendable0 = cSVPrinter0.getOut();
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker((Character) null);
      cSVPrinter0.printComment((String) null);
      cSVFormat4.print(appendable0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVPrinter0.println();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DataTruncation dataTruncation0 = new DataTruncation(339, true, false, 339, (-650));
      Character character0 = Character.valueOf('X');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.withIgnoreHeaderCase(false);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVFormat2.parse(charArrayReader0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter1.print((Object) null);
      cSVPrinter1.printRecords((Iterable<?>) dataTruncation0);
      cSVPrinter1.print(cSVPrinter0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecord((Iterable<?>) dataTruncation0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('x');
      charArrayWriter0.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('x');
      cSVFormat3.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      char[] charArray0 = new char[0];
      charArrayWriter0.write(charArray0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DataTruncation dataTruncation0 = new DataTruncation((-1186), false, true, (-1186), 0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'x';
      cSVFormat2.withIgnoreHeaderCase(false);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      CSVParser cSVParser0 = cSVFormat3.parse(charArrayReader0);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
      cSVPrinter0.print(charArrayReader0);
      cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[4];
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) '\u0000';
      Object object0 = new Object();
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) charArrayWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      cSVPrinter0.printRecords(objectArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('l');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.getOut();
      cSVFormat0.withCommentMarker((Character) null);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) ";}.", 1, 1);
      Object object0 = new Object();
      Object object1 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[2];
      Object object2 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator('x');
      CSVFormat cSVFormat1 = CSVFormat.newFormat('x');
      charArrayWriter0.flush();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('x');
      cSVFormat2.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.println();
      cSVPrinter0.println();
      char[] charArray0 = new char[15];
      charArray0[0] = 'x';
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVFormat0.parse(charArrayReader0);
      cSVPrinter0.print(cSVFormat0);
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withDelimiter('l');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'R';
      charArray0[2] = 'M';
      charArray0[3] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'M';
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) 'M';
      objectArray0[3] = (Object) 'R';
      objectArray0[4] = (Object) 'Y';
      objectArray0[5] = (Object) 'Y';
      objectArray0[6] = (Object) 'Y';
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gsZE_1TqE{?M\"$";
      stringArray0[1] = "Index for header '%s' is %d but CSVRecord only has %d values!";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "gsZE_1TqE{?M\"$", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append('W');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter2);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.flush();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      charArrayWriter0.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('x');
      cSVFormat3.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.println();
      cSVPrinter0.println();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVFormat3.parse(charArrayReader0);
      cSVPrinter0.print((Object) null);
      cSVFormat1.withAllowMissingColumnNames(true);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@~W(?U2%");
      PrintWriter printWriter0 = mockPrintWriter0.append('?');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) printWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "@~W(?U2\\%";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@~W(?U2%");
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '5';
      charArray0[5] = '?';
      charArray0[6] = '?';
      charArray0[7] = '?';
      charArray0[8] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVFormat0.parse(charArrayReader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      String string1 = "org.apache.commons.csv.CSVPrinter$1";
      Long.getLong("org.apache.commons.csv.CSVPrinter$1");
      cSVPrinter0.print((Object) null);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('2');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.withCommentMarker('2');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "cV-]RL4C/g'i<", 1, 1);
      StringWriter stringWriter2 = stringWriter0.append('2');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter2);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) resultSet0;
      objectArray0[4] = (Object) stringWriter2;
      objectArray0[6] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat0);
      cSVPrinter1.flush();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 3);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      bufferedWriter0.write(3);
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '4';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\"');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat2);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '4';
      objectArray0[1] = (Object) '4';
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) bufferedWriter0;
      objectArray0[5] = (Object) '4';
      objectArray0[6] = (Object) '4';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('2');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('2');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cV-]RL4C/g'i<", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) resultSet0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat2;
      Stack<ObjectOutputStream> stack0 = new Stack<ObjectOutputStream>();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('2');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('2');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cV-]RL4C/g'i<");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) resultSet0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      ServiceLoader<FilterOutputStream> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("#b.WkIS2");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      charArrayWriter0.flush();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DataTruncation dataTruncation0 = new DataTruncation((-1186), false, true, (-1186), 0);
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVFormat0.parse(charArrayReader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Character character0 = Character.valueOf('P');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("1)`/471yw");
      cSVFormat2.print(stringWriter0);
      Character character1 = Character.valueOf('P');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter1.printComment("66TuG x<6kx");
      cSVFormat0.print(stringWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("]");
      PrintStream printStream0 = mockPrintStream0.append('>');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('l');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.getOut();
      cSVFormat0.withCommentMarker((Character) null);
      cSVPrinter0.close();
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "gsZE_1TqE{?M\"$";
      stringArray0[1] = "Index for header '%s' is %d but CSVRecord only has %d values!";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      StringWriter stringWriter0 = new StringWriter(32);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Index for header '%s' is %d but CSVRecord only has %d values!");
      StringWriter stringWriter2 = stringWriter1.append('l');
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat3);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.print(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("]");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("]");
      FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.append('>');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("]");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gsZE_1TqE{?M\"$";
      stringArray0[1] = "Index for header '%s' is %d but CSVRecord only has %d values!";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "gsZE_1TqE{?M\"$", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append('W');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter2);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter2);
      ArrayDeque<BufferedOutputStream> arrayDeque0 = new ArrayDeque<BufferedOutputStream>();
      cSVPrinter1.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter1.print(cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("]");
      PrintStream printStream0 = mockPrintStream0.append('>');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gsZE_1TqE{?M\"$";
      stringArray0[1] = "Index for header '%s' is %d but CSVRecord only has %d values!";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "gsZE_1TqE{?M\"$", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append('W');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter2);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@~W(?U2%");
      PrintWriter printWriter0 = mockPrintWriter0.append('?');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      charArrayWriter0.flush();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(')');
      cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = new Character('y');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = object0;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) charArrayWriter0;
      cSVFormat2.withQuote('Y');
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      Vector<MockFileReader> vector0 = new Vector<MockFileReader>();
      HashSet<MockFileReader> hashSet0 = new HashSet<MockFileReader>(vector0);
      Vector<MockFileReader> vector1 = new Vector<MockFileReader>(hashSet0);
      cSVPrinter0.printRecords((Iterable<?>) vector1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("1)/471yw");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      Character character1 = Character.valueOf('P');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character1);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter2.printComment("66TuG x<6kx");
      cSVFormat1.withIgnoreHeaderCase(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[20];
      objectArray0[11] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) cSVFormat4;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "1)/471yw";
      objectArray0[4] = (Object) cSVPrinter2;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) "1)/471yw";
      objectArray0[7] = (Object) "1)/471yw";
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecord(objectArray0);
      CSVPrinter cSVPrinter3 = cSVFormat2.print(stringWriter0);
      cSVPrinter3.printComment("&g~tgeh&");
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1017);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 26);
      bufferedWriter0.write(1207);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "w/a9");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTransientConnectionException0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      cSVPrinter0.flush();
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'x';
      charArray0[2] = 'E';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'v';
      charArray0[6] = 'E';
      charArray0[7] = ' ';
      bufferedWriter0.write(charArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("+`DYx#_iBX");
      mockFileWriter0.append('x');
      Class<Long> class0 = Long.class;
      ServiceLoader<Long> serviceLoader0 = ServiceLoader.load(class0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(bufferedWriter0);
      cSVPrinter1.printRecords((Iterable<?>) sQLTransientConnectionException0);
      cSVPrinter1.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter1.flush();
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "cV-]RL4C/g'i<", 1, 1);
      Object object0 = new Object();
      Object object1 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = object0;
      cSVPrinter0.printRecords(objectArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      charArrayWriter0.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('x');
      cSVFormat3.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.println();
      cSVPrinter0.println();
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVFormat0.parse(charArrayReader0);
      cSVPrinter0.print(cSVFormat0);
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('2');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('2');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cV-]RL4C/g'i<", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) resultSet0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 3);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      bufferedWriter0.write(3);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(bufferedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.write("out");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      charArrayWriter0.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('x');
      cSVFormat3.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.println();
      cSVPrinter0.println();
      DataTruncation dataTruncation0 = new DataTruncation((-1186), false, true, (-1186), 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVFormat0.parse(charArrayReader0);
      cSVPrinter0.print(dataTruncation0);
      cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
      cSVPrinter0.print(cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'R';
      charArray0[2] = 'M';
      charArray0[3] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'M';
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) 'M';
      objectArray0[3] = (Object) 'R';
      objectArray0[4] = (Object) 'Y';
      objectArray0[5] = (Object) 'Y';
      objectArray0[6] = (Object) 'Y';
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
