* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-70
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 20634
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-13/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 971
* Using seed 3094196371
* Starting evolution
bbc usage percentage is: 70%
* Initial Number of Goals in DynaMOSA = 190 / 971
[MASTER] 22:28:17.550 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:28:17.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:28:17.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:28:17.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:28:17.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:28:17.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:28:17.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:28:17.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:28:17.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:28:17.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:28:17.552 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:28:18.760 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:28:36.014 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:32:45.671 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLTimeoutException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
* Search finished after 605s and 1395 generations, 732415 statements, best individual has fitness: 157.0
* Minimizing test suite
[MASTER] 22:39:27.935 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 164
* Number of covered goals: 153
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 137
* Number of covered goals: 121
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 38
* Number of covered goals: 38
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 507
* Number of covered goals: 434
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 137
* Number of covered goals: 115
* Generated 98 tests with total length 1675
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:40:11.827 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6723333333333333% of time used, but only 44/98 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 30%
* Compiling and checking tests
[MASTER] 22:40:37.782 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:40:37.942 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:40:40.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_119_tmp__ESTest.test0(CSVPrinter_119_tmp__ESTest.java:50)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:40:40.734 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
MockFileWriter mockFileWriter0 = new MockFileWriter("0Wr,TQ3kn,^j/$%b7Q");
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
Locale locale0 = Locale.TRADITIONAL_CHINESE;
String string0 = "+e\"i;?0 [j~CF0ty";
Object[] objectArray0 = new Object[3];
Writer writer0 = mockFileWriter0.append((CharSequence) "0Wr,TQ3kn,^j/$%b7Q", 1, 1);
objectArray0[0] = (Object) cSVFormat0;
objectArray0[1] = (Object) mockPrintWriter0;
objectArray0[2] = (Object) cSVFormat0;
CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
cSVPrinter0.close();
RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
Object object0 = new Object();
CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
MockPrintStream mockPrintStream0 = new MockPrintStream("ALL");
CSVPrinter cSVPrinter1 = cSVFormat2.print(writer0);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
cSVPrinter1.print(mockPrintStream1);

[MASTER] 22:40:46.317 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_141_tmp__ESTest.test0(CSVPrinter_141_tmp__ESTest.java:29)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:40:46.322 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
StringWriter stringWriter0 = new StringWriter();
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
Locale.Category locale_Category0 = Locale.Category.DISPLAY;
cSVPrinter0.print(mockFileWriter0);

[MASTER] 22:40:50.890 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_147_tmp__ESTest.test0(CSVPrinter_147_tmp__ESTest.java:52)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:40:50.891 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());

StringWriter stringWriter0 = new StringWriter();
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertNotNull(cSVPrinter0);
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.close();

[MASTER] 22:41:01.491 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_171_tmp__ESTest.test0(CSVPrinter_171_tmp__ESTest.java:35)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:41:01.495 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
assertFalse(boolean0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());

CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
assertNotNull(cSVFormat1);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getNullString());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isNullStringSet());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
assertNotNull(rowSetMetaDataImpl0);

CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
assertNotNull(cSVFormat2);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getNullString());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isNullStringSet());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat2.getCommentMarker());
assertNull(cSVFormat2.getQuoteMode());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getNullString());
assertEquals(',', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getEscapeCharacter());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertFalse(cSVFormat2.isNullStringSet());
assertFalse(cSVFormat2.getAllowMissingColumnNames());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);

CSVFormat cSVFormat3 = cSVFormat2.withEscape('i');
assertNotNull(cSVFormat3);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getNullString());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isNullStringSet());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat2.getCommentMarker());
assertNull(cSVFormat2.getQuoteMode());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getNullString());
assertEquals(',', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getEscapeCharacter());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertFalse(cSVFormat2.isNullStringSet());
assertFalse(cSVFormat2.getAllowMissingColumnNames());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals(',', cSVFormat3.getDelimiter());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.isNullStringSet());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertNull(cSVFormat3.getQuoteMode());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertFalse(cSVFormat3.getAllowMissingColumnNames());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertNull(cSVFormat3.getCommentMarker());
assertEquals('i', (char)cSVFormat3.getEscapeCharacter());
assertTrue(cSVFormat3.isEscapeCharacterSet());
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat1);

CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
assertNotNull(cSVFormat4);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getNullString());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isNullStringSet());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat2.getCommentMarker());
assertNull(cSVFormat2.getQuoteMode());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getNullString());
assertEquals(',', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getEscapeCharacter());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertFalse(cSVFormat2.isNullStringSet());
assertFalse(cSVFormat2.getAllowMissingColumnNames());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals(',', cSVFormat3.getDelimiter());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.isNullStringSet());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertNull(cSVFormat3.getQuoteMode());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertFalse(cSVFormat3.getAllowMissingColumnNames());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertNull(cSVFormat3.getCommentMarker());
assertEquals('i', (char)cSVFormat3.getEscapeCharacter());
assertTrue(cSVFormat3.isEscapeCharacterSet());
assertTrue(cSVFormat4.getIgnoreHeaderCase());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertNull(cSVFormat4.getQuoteMode());
assertEquals(',', cSVFormat4.getDelimiter());
assertTrue(cSVFormat4.getIgnoreEmptyLines());
assertNull(cSVFormat4.getCommentMarker());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.isNullStringSet());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat4.getAllowMissingColumnNames());
assertNull(cSVFormat4.getNullString());
assertFalse(cSVFormat4.isCommentMarkerSet());
assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
assertEquals('i', (char)cSVFormat4.getEscapeCharacter());
assertTrue(cSVFormat4.isEscapeCharacterSet());
assertTrue(cSVFormat4.isQuoteCharacterSet());
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertTrue(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat3);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat4);

[MASTER] 22:41:06.210 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_182_tmp__ESTest.test0(CSVPrinter_182_tmp__ESTest.java:134)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:41:06.213 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertNotNull(cSVFormat0);
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isQuoteCharacterSet());

StringWriter stringWriter0 = new StringWriter();
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
assertNotNull(cSVFormat1);
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getQuoteMode());
assertEquals('0', (char)cSVFormat1.getEscapeCharacter());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuoteCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isNullStringSet());
assertTrue(cSVFormat1.isEscapeCharacterSet());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\t', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
assertNotNull(cSVFormat2);
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertTrue(cSVFormat2.isEscapeCharacterSet());
assertFalse(cSVFormat2.getAllowMissingColumnNames());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertFalse(cSVFormat2.isNullStringSet());
assertNull(cSVFormat2.getNullString());
assertNull(cSVFormat2.getCommentMarker());
assertEquals('\t', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertNull(cSVFormat2.getQuoteCharacter());
assertEquals("\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isQuoteCharacterSet());
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
assertNotNull(cSVPrinter0);
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertTrue(cSVFormat2.isEscapeCharacterSet());
assertFalse(cSVFormat2.getAllowMissingColumnNames());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertFalse(cSVFormat2.isNullStringSet());
assertNull(cSVFormat2.getNullString());
assertNull(cSVFormat2.getCommentMarker());
assertEquals('\t', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertNull(cSVFormat2.getQuoteCharacter());
assertEquals("\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isQuoteCharacterSet());
assertFalse(fileDescriptor0.valid());
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));

CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
assertNotNull(cSVFormat3);
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertNull(cSVFormat3.getCommentMarker());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertNull(cSVFormat3.getQuoteMode());
assertEquals('\t', cSVFormat3.getDelimiter());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertFalse(cSVFormat3.getAllowMissingColumnNames());
assertNull(cSVFormat3.getQuoteCharacter());
assertTrue(cSVFormat3.isEscapeCharacterSet());
assertFalse(cSVFormat3.isNullStringSet());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals("\n", cSVFormat3.getRecordSeparator());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.isQuoteCharacterSet());
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);

cSVPrinter0.flush();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-13/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-70/tests/9
* Done!

* Computation finished
