/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 05:34:53 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)94;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "C6DO";
      stringArray0[1] = "HeaderComments:";
      stringArray0[2] = "jmVk'XL";
      stringArray0[3] = "";
      stringArray0[4] = "Unexpected Quote value: ";
      stringArray0[5] = "yPJm\")R[";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      cSVFormat0.print(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9@Lz?D?j");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(']');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>(727);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      CSVParser cSVParser0 = cSVFormat0.parse(inputStreamReader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "EOF whilst processing escape sequence";
      stringArray0[1] = "p)JW";
      stringArray0[2] = "^+%?boH+*Fz3#5[1v4g";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('f');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0, charset0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(outputStreamWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("18dS");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('_');
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ystxXI\"5>k--I", true);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(outputStreamWriter0);
      outputStreamWriter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[19];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 16, 16);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("Unexpcted Qute value` ");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('a');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('^');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\" in ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(']');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>(727);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>(arrayList0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0s?;I'@LHm1= <v3^");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.getStackTrace();
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = ',';
      charArray0[2] = 'z';
      charArray0[3] = '_';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charBuffer0.read(charBuffer1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("A!m;'~y({Ia9yN@~T)");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":");
      cSVFormat1.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(":");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('y');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('y');
      cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.print(character0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      StringWriter stringWriter0 = new StringWriter('\u0000');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0000');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.print(stringWriter0);
      cSVFormat0.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(101);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, true, true).when(resultSet0).next();
      // Undeclared exception!
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('y');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('y');
      cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('y');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('y');
      cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      cSVFormat0.withNullString(":US?;I'@<Hm1= <v3^");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":US?;I'@<Hm1= <v3^");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6tt wY ~");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_e%fe($<[/");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("-J.(z;<!@_*o,)-+");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3sF(^6B8c:");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[15];
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      cSVFormat0.withEscape((Character) '\u0000');
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 4, 4);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer2, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(stringWriter0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      cSVFormat1.withNullString("org.apache.commons.csv.Assertions");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(326);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character.valueOf('G');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      Float float0 = new Float(3716.797386165917);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'G';
      intArray0[1] = 326;
      intArray0[2] = 326;
      intArray0[3] = (int) 'G';
      intArray0[4] = (-1487);
      intArray0[5] = 326;
      intArray0[6] = 700;
      intArray0[7] = (int) 'G';
      intArray0[8] = 326;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      cSVPrinter0.print(batchUpdateException0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) 326;
      objectArray0[2] = (Object) (-1487);
      objectArray0[3] = (Object) 326;
      objectArray0[4] = (Object) fileSystemHandling0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecord((Iterable<?>) batchUpdateException0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3sF(^6B8c:");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.print(stringWriter0);
      Float float0 = new Float(0.0);
      try { 
        cSVPrinter0.print(float0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'H';
      charArray0[2] = '-';
      charArray0[3] = '.';
      charArray0[4] = 't';
      charArray0[5] = '8';
      charArray0[6] = 'C';
      charArray0[7] = 'r';
      charArray0[8] = '~';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 'C';
      objectArray0[1] = (Object) '8';
      objectArray0[2] = (Object) '-';
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) 't';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator('+');
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat3.withDelimiter('<');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('i');
      cSVFormat2.print(pipedWriter0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(326);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      String string0 = "org.pacheQcommons.csv.CSVPrinter";
      cSVFormat1.withRecordSeparator("org.pacheQcommons.csv.CSVPrinter");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('N');
      cSVFormat0.withCommentMarker('w');
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.pacheQcommons.csv.CSVPrinter", "", 326, sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      stack0.add(sQLTransactionRollbackException0);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('0');
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) '\'');
      Character character0 = Character.valueOf('\'');
      cSVFormat0.withQuote(character0);
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('W');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) '\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stack0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) '\'';
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) '\'';
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      LinkedHashSet<DataInputStream> linkedHashSet0 = new LinkedHashSet<DataInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(44);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      linkedHashSet0.add(dataInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = '.';
      charArray0[2] = 'Q';
      charArray0[3] = '<';
      charArray0[4] = 'v';
      charArray0[5] = '-';
      charArray0[6] = '6';
      charArray0[7] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      PipedReader pipedReader0 = new PipedReader(118);
      PipedWriter pipedWriter1 = new PipedWriter(pipedReader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedWriter1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(103);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) '\'');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '\'';
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) '\'';
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      cSVPrinter1.print(cSVPrinter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.close();
      Object object1 = new Object();
      cSVPrinter0.print(object1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(103);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) '\'');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '\'';
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) '\'';
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      cSVPrinter1.print(cSVPrinter0);
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('\'');
      cSVFormat4.withEscape('[');
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat5.print(stringWriter0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      cSVPrinter1.print(sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.print(cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(326);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character.valueOf('N');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat1.withEscape('N');
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.csv.CSVPrinter", "org.apache.commons.csv.CSVPrinter");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "org.apache.commons.csv.CSVPrinter");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('<');
      CSVFormat cSVFormat6 = cSVFormat5.withEscape('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat6);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      Object object1 = new Object();
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('}');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('-');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      Object object1 = new Object();
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.csv.CSVPrinter$1", "org.apache.commons.csv.CSVPrinter$1", 813);
      stack0.add(sQLTransactionRollbackException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) stack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("v\"YK;l");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Locale locale0 = Locale.UK;
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      Stack<SQLTransactionRollbackException> stack1 = new Stack<SQLTransactionRollbackException>();
      stack1.add(sQLTransactionRollbackException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      cSVFormat0.withAllowMissingColumnNames();
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      cSVPrinter0.print(sQLWarning0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withRecordSeparator('_');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("2,W2WRkNfB6q");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      StringWriter stringWriter0 = new StringWriter(122);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "2.i3&U5(a";
      cSVFormat1.withRecordSeparator('I');
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) stringWriter1;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "2,W2WRkNfB6q";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(43);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.withCommentMarker('@');
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('@');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printComment("ms1}1,dw4");
      cSVPrinter0.close();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(' ');
      CSVPrinter cSVPrinter1 = cSVFormat3.print(pipedWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      cSVPrinter1.print((Object) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter2.print((Object) null);
      cSVPrinter2.print("ms1}1,dw4");
      try { 
        cSVPrinter1.printComment("Unexpected Quote value: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('0');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      cSVFormat2.withEscape('\'');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      cSVPrinter1.print(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      Double double0 = new Double(108);
      cSVPrinter1.print(double0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('0');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      cSVFormat2.withEscape('\'');
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JER}'u<E<HnY-", hashMap0, sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JER}'u<E<HnY-", sQLClientInfoException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      stack0.add(sQLTransactionRollbackException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      cSVFormat1.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object object0 = new Object();
      cSVPrinter1.print(object0);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringWriter0);
      cSVPrinter2.printComment("");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = new Character('g');
      cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Locale locale0 = Locale.UK;
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      stack0.add(sQLTransactionRollbackException0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) stack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(326);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('N');
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVFormat0.withDelimiter('{');
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) character0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("E&ZRLqF5^PSW|", " =w^F|q#Fy v[", " =w^F|q#Fy v[", 326);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "E&ZRLqF5^PSW|", "", 1448);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      stack0.add(sQLTransactionRollbackException0);
      cSVPrinter0.printRecord((Iterable<?>) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(955);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      Character character0 = Character.valueOf('y');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      cSVPrinter1.print(cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.print(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(110);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(' ');
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withIgnoreSurroundingSpaces();
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = 'f';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.close();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DO-vE3g");
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      HashMap<String, ClientInfoStatus> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, ClientInfoStatus>(110, (-1136.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1136.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Locale locale0 = Locale.UK;
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("|?e8`");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("|?e8`", "' in ", "|?e8`", 1695);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("|?e8`", "", "' in ", 1695);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("' in ", "' in ", "b1D`+gu4?e$8M]il/", 1142);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      stack0.add(sQLTransactionRollbackException0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) stack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('-');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Object object0 = new Object();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":{xr/kn(11]+", ":{xr/kn(11]+", 5);
      cSVPrinter0.print(sQLRecoverableException0);
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withQuote((Character) null);
      Locale locale0 = Locale.UK;
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) stack0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      cSVFormat0.withEscape((Character) '\'');
      CSVFormat cSVFormat1 = CSVFormat.newFormat('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) null;
      cSVPrinter0.print(stringWriter0);
      objectArray0[2] = (Object) '\'';
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('v');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('v');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) filterOutputStream0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(filterOutputStream0);
      PriorityQueue<MockFileOutputStream> priorityQueue0 = new PriorityQueue<MockFileOutputStream>();
      HashSet<MockFileOutputStream> hashSet0 = new HashSet<MockFileOutputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(26);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      Character character0 = new Character('b');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = object0;
      Object object3 = new Object();
      objectArray0[7] = object3;
      cSVPrinter0.printRecords(objectArray0);
      Object object4 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('{');
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) '\'');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) null;
      cSVFormat2.withQuote('|');
      StringWriter stringWriter1 = new StringWriter();
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter1 = null;
      try {
        cSVPrinter1 = new CSVPrinter(stringWriter1, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("n2zXq}", "n2zXq}");
      sQLTransientException0.printStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      try { 
        cSVPrinter0.print(sQLTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter1.println();
      Object object0 = new Object();
      cSVPrinter1.printRecord(objectArray0);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(stack0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) '\'');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('$');
      StringWriter stringWriter1 = stringWriter0.append('$');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter0.printComment((String) null);
      cSVFormat2.withIgnoreSurroundingSpaces();
      stringWriter0.flush();
      cSVPrinter0.getOut();
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EIP0$:9(G*");
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('P');
      mockPrintWriter0.write("");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      mockPrintWriter0.flush();
      CSVFormat.newFormat('/');
      PriorityQueue<LineNumberReader> priorityQueue0 = new PriorityQueue<LineNumberReader>();
      LinkedList<LineNumberReader> linkedList0 = new LinkedList<LineNumberReader>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.flush();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      doReturn(false).when(resultSet1).next();
      cSVPrinter0.printRecords(resultSet1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) resultSet1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) '\'');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('$');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.close();
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(5);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 111);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) bufferedWriter0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat3;
      objectArray0[8] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(326);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character.valueOf('N');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('N');
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat5);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      cSVPrinter0.print(cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("FmsS!-ztn*v0_wr?(L*", "&maA8O", 1050);
      cSVPrinter1.print(sQLTimeoutException0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) sQLTimeoutException0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(5);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 111);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) bufferedWriter0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat3;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(5);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 111);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat0.withRecordSeparator(',');
      objectArray0[3] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) bufferedWriter0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat3;
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[2] = (Object) cSVPrinter0;
      objectArray1[3] = (Object) bufferedWriter0;
      objectArray1[4] = (Object) null;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecords(objectArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EIP0$:9(G*");
      mockPrintWriter0.write("EIP0$:9(G*");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      mockPrintWriter0.flush();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('/');
      PriorityQueue<LineNumberReader> priorityQueue0 = new PriorityQueue<LineNumberReader>();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
      byteArrayOutputStream0.write(9);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      cSVPrinter0.print(objectOutputStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.printComment("7");
      cSVPrinter1.close();
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) byteArrayOutputStream0;
      cSVPrinter1.printRecord(objectArray1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      cSVPrinter1.print(bufferedOutputStream0);
      CSVPrinter cSVPrinter2 = cSVFormat3.print(mockPrintWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '0';
      charArray0[2] = '@';
      charArray0[3] = 'f';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.println();
      assertArrayEquals(new char[] {'\n', '0', '@', 'f'}, charArray0);
      assertEquals(1, charBuffer0.position());
      
      cSVPrinter0.printComment("A Dyl0z|[x2sDoGbJ");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(28);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat2.withEscape('N');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat4;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) '\'');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('$');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      PriorityQueue<BufferedWriter> priorityQueue0 = new PriorityQueue<BufferedWriter>(48);
      File file0 = MockFile.createTempFile("%W)2w;IC9qd'!?", "Ctj`Pd");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 2997);
      Class<PipedInputStream> class0 = PipedInputStream.class;
      ServiceLoader<PipedInputStream> serviceLoader0 = ServiceLoader.load(class0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter1.getOut();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) bufferedWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) '\'');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('$');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) '\'';
      objectArray0[3] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.printComment("aUXUob7<)j");
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EIP0$:9(G*");
      cSVFormat0.withRecordSeparator('P');
      mockPrintWriter0.write("");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      mockPrintWriter0.flush();
      CSVFormat.newFormat('/');
      PriorityQueue<LineNumberReader> priorityQueue0 = new PriorityQueue<LineNumberReader>();
      LinkedList<LineNumberReader> linkedList0 = new LinkedList<LineNumberReader>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.flush();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EIP0$:9(G*");
      mockPrintWriter0.write("");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVFormat0.withIgnoreEmptyLines(false);
      mockPrintWriter0.flush();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('/');
      PriorityQueue<LineNumberReader> priorityQueue0 = new PriorityQueue<LineNumberReader>();
      cSVFormat1.withAllowMissingColumnNames();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      byteArrayOutputStream0.write(9);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      cSVPrinter0.print(objectOutputStream0);
      PriorityQueue<BufferedWriter> priorityQueue1 = new PriorityQueue<BufferedWriter>(48);
      File file0 = MockFile.createTempFile("Ctj`Pd", "%W)2w;IC9qd'!?");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1);
      Class<PipedInputStream> class0 = PipedInputStream.class;
      ServiceLoader<PipedInputStream> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.RFC4180;
          CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
          CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
          String[] stringArray0 = new String[1];
          stringArray0[0] = "2.i3&U5(a";
          CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
          CSVFormat cSVFormat4 = cSVFormat3.withQuote('n');
          StringWriter stringWriter0 = new StringWriter();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
          Locale locale0 = Locale.UK;
          PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "2.i3&U5(a", (Object[]) stringArray0);
          CSVPrinter cSVPrinter0 = cSVFormat4.print(printWriter0);
          cSVPrinter0.println();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cgOiG@1mCd3wYiWI";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.close();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      cSVPrinter0.print(stringWriter0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = CSVFormat.newFormat(' ');
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter2.printComment("cgOiG@1mCd3wYiWI");
      cSVPrinter1.close();
      cSVPrinter2.printRecord((Object[]) stringArray0);
      cSVPrinter1.print(cSVFormat3);
      cSVPrinter0.getOut();
      CSVPrinter cSVPrinter3 = cSVFormat1.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter3.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EIP0$:9(G*");
      cSVFormat0.withRecordSeparator('P');
      mockPrintWriter0.write("");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVFormat0.withIgnoreEmptyLines(false);
      mockPrintWriter0.flush();
      CSVFormat.newFormat('/');
      PriorityQueue<LineNumberReader> priorityQueue0 = new PriorityQueue<LineNumberReader>();
      LinkedList<LineNumberReader> linkedList0 = new LinkedList<LineNumberReader>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      StringWriter stringWriter0 = new StringWriter(108);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) '\'');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('$');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter0.printComment((String) null);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      cSVPrinter1.flush();
      CSVPrinter cSVPrinter2 = cSVFormat4.print(stringWriter0);
      TreeSet<MockFileWriter> treeSet0 = new TreeSet<MockFileWriter>();
      cSVPrinter2.printRecords((Iterable<?>) treeSet0);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      cSVPrinter3.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVPrinter0, cSVPrinter2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cgOiG@1mCd3wYiWI";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "cgOiG@1mCd3wYiWI");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter1.close();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      cSVPrinter0.print(stringWriter1);
      StringWriter stringWriter2 = stringWriter1.append('2');
      cSVPrinter0.printComment("cgOiG@1mCd3wYiWI");
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVPrinter0.getOut();
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) priorityQueue0;
      objectArray0[1] = (Object) "cgOiG@1mCd3wYiWI";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) stringWriter2;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(318, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.printComment("aUXUob7<)j");
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('Z');
      cSVFormat1.toString();
      Character character0 = Character.valueOf('Z');
      cSVFormat0.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat4.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
