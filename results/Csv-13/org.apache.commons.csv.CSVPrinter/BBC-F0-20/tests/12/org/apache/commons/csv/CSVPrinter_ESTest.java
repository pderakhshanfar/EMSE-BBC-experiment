/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 06:30:04 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('a');
      MockFileWriter mockFileWriter0 = new MockFileWriter("The escape character cannot be a line break");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("&/\n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('t');
      MockFileWriter mockFileWriter0 = new MockFileWriter("The escape character cannot be a line break");
      mockFileWriter0.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter1 = stringWriter0.append('p');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLException sQLException0 = new SQLException("3Kc", "", 474, sQLTransientException0);
      Throwable throwable0 = sQLTransientException0.initCause(sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransientException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) stringWriter0;
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) "";
      objectArray1[3] = (Object) throwable0;
      objectArray1[4] = (Object) stringWriter0;
      Object object1 = new Object();
      objectArray1[5] = object1;
      objectArray1[6] = (Object) stringWriter1;
      objectArray1[7] = (Object) "";
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('t');
      MockFileWriter mockFileWriter0 = new MockFileWriter("The escape character cannot be a line break");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      Character character0 = Character.valueOf('B');
      cSVFormat0.withCommentMarker(character0);
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "The escape character cannot be a line break";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("\r\n");
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printComment("The escape character cannot be a line break");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(30);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      char char0 = '\"';
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('\"');
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charBuffer1.read(charBuffer0);
      charBuffer0.put(charBuffer1);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.withEscape('\"');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[14];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A>Oxw^");
      cSVFormat0.print(stringWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "A>Oxw^");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      Character character0 = new Character('!');
      Character character1 = Character.valueOf('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      Integer integer0 = new Integer(627);
      cSVPrinter1.print(integer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0hs>UTw>' l");
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("0hs>UTw>' l");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter1.printRecords(objectArray0);
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVPrinter1;
      objectArray0[3] = (Object) cSVPrinter1;
      Integer integer0 = new Integer(627);
      cSVPrinter1.print(integer0);
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('7');
      cSVFormat1.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Nw`%4wV{c5^%`");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('7');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      Class<Float> class0 = Float.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Float> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" M");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9P\"P#f");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('t');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("The escape character cannot be a line break");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) "The escape character cannot be a line break";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      StringWriter stringWriter0 = new StringWriter();
      try { 
        cSVPrinter0.printComment("The escape character cannot be a line break");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      cSVFormat0.withEscape('\"');
      StringWriter stringWriter0 = new StringWriter(400);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('U');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat3.withSkipHeaderRecord(true);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("EOF");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator('^');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "jTz)M]%<}e=@[PO");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("aQOePoqGFJj");
      sQLTransientException0.fillInStackTrace();
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withRecordSeparator(':');
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("cw. #");
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLException sQLException0 = new SQLException("3Kc", "", 474, sQLTransientException0);
      sQLTransientException0.initCause(sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransientException0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      Character character0 = Character.valueOf('I');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 394);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      cSVFormat2.print(mockPrintWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[1] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.allocate(114);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.getOut();
      charBuffer0.codePoints();
      cSVPrinter0.close();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>(treeSet0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>(linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("jTz)M]%<}e=@[PO");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1141);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(10);
      stringWriter0.append((CharSequence) "jTz)M]%<}e=@[PO");
      stringWriter0.append('4');
      stringWriter0.write(10);
      MockFile mockFile0 = new MockFile("jTz)M]%<}e=@[PO", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "jTz)M]%<}e=@[PO", (-1943));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("' must not be null!", sQLTransactionRollbackException0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      cSVPrinter1.print(byteArrayOutputStream1);
      cSVPrinter1.close();
      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "C8(itnLe9!";
      stringArray0[1] = "]";
      stringArray0[2] = "f]1g4uB&HPvq.";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      Object[] objectArray0 = new Object[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat0.withNullString("cuT&0XR");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "cuT&0XR");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.Token$Type");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withRecordSeparator('f');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("The comment start character and the quoteChar cannot be the same ('");
      cSVFormat3.withNullString("^qy*HAOI-%j=Qi");
      cSVFormat3.withSkipHeaderRecord();
      cSVFormat2.print(mockPrintStream0);
      cSVFormat1.withEscape('j');
      cSVFormat2.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The comment start character and the quoteChar cannot be the same ('", 28, 33);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat3);
      MockPrintStream mockPrintStream1 = new MockPrintStream("The comment start character and the quoteChar cannot be the same ('");
      // Undeclared exception!
      try { 
        cSVPrinter1.print(mockPrintStream1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}QJev\u0004pV*HW~iH>");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.printComment("");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~");
      cSVFormat1.withEscape('M');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      Locale locale0 = Locale.ROOT;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Tu!pmy\";5", sQLTransientException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("jTz)M]%<}e=@[PO");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "jTz)M]%<}e=@[PO";
      objectArray0[1] = (Object) sQLTransientException0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "Tu!pmy\";5";
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "Tu!pmy\";5", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      cSVPrinter0.close();
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>(linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      vector0.add(byteArrayOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      Long long0 = new Long(1L);
      mockPrintStream0.println((Object) long0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('l');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("34");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      cSVFormat0.withCommentMarker('h');
      cSVFormat1.withSkipHeaderRecord(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.printf("34", objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('{');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat4);
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray1[3] = object1;
      objectArray1[4] = (Object) appendable0;
      objectArray1[5] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat4);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Writer writer0 = bufferedWriter0.append('V');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat4);
      cSVPrinter0.close();
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.close();
      LinkedHashSet<ObjectOutputStream> linkedHashSet0 = new LinkedHashSet<ObjectOutputStream>(2);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) appendable0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) appendable0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) writer0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat4.withRecordSeparator(':');
      cSVFormat4.withNullString("_83b#r(gW[?Hj");
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("");
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat6.print(stringWriter0);
      cSVFormat2.withEscape('}');
      cSVFormat3.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat5);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      Locale locale0 = Locale.ROOT;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      cSVFormat1.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('l');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("34");
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream('l');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "34");
      StringWriter stringWriter2 = stringWriter1.append('l');
      stringWriter2.write(50);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) byteArrayOutputStream0;
      objectArray1[1] = objectArray0[2];
      objectArray0[2] = object0;
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "34", 10);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("34", sQLTransactionRollbackException0);
      cSVPrinter2.print(sQLRecoverableException0);
      cSVPrinter0.close();
      cSVPrinter1.printRecords((Iterable<?>) sQLRecoverableException0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(42);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, true, true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      String string0 = "$qFg*rNwdP!9|`$Ee";
      cSVPrinter0.printComment(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[4];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' must not be null!");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("@cuT&0XR");
      cSVFormat1.print(stringWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printComment("@cuT&0XR");
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("@cuT&0XR");
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringWriter0);
      CSVPrinter cSVPrinter3 = cSVFormat2.print(stringWriter0);
      cSVPrinter3.printRecords(objectArray0);
      cSVPrinter2.printRecord(objectArray0);
      cSVPrinter1.printComment("@cuT&0XR");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      Locale locale0 = Locale.ROOT;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("jTz)M]%<}e=@[PO", sQLTransientException0);
      cSVPrinter0.print((Object) null);
      cSVPrinter1.close();
      cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.print(cSVPrinter1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      Locale locale0 = Locale.CHINESE;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("jTz)M]%<}e=@[PO");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("jTz)M]%<}e=@[PO", sQLTransientException0);
      cSVPrinter0.print((Object) null);
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-1984));
      cSVFormat1.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(83);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('/');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('/');
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) sQLRecoverableException0;
      objectArray0[2] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) charArrayWriter1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter2.getOut();
      cSVPrinter2.printRecords((Iterable<?>) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[7];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3xPf;c @F_hQ9s(-b");
      cSVFormat1.withNullString("/Gm>S%L2S+");
      File file0 = MockFile.createTempFile("3xPf;c @F_hQ9s(-b", "/Gm>S%L2S+", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.TAIWAN;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'j';
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Parameter '");
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringWriter1);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter2.printRecord(objectArray0);
      cSVPrinter1.printComment("|UJ");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('l');
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter("]", false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVParser", true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      try { 
        cSVPrinter1.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('^');
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter("]", false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "]");
      stringWriter0.append(':');
      StringWriter stringWriter2 = stringWriter1.append('e');
      try { 
        cSVPrinter0.print(stringWriter2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      Locale locale0 = Locale.CHINESE;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("jTz)M]%<}e=@[PO", sQLTransientException0);
      cSVPrinter0.print((Object) null);
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-1984));
      cSVFormat1.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(83);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('o');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('o');
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) sQLRecoverableException0;
      objectArray0[2] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) charArrayWriter1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter2.getOut();
      cSVPrinter2.printRecords((Iterable<?>) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(']');
      Character character0 = new Character('w');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      Short short0 = new Short((short)238);
      String string0 = "TYb8E{GC_o-Tr2^yM";
      try { 
        MockFile.createTempFile("TYb8E{GC_o-Tr2^yM", "TYb8E{GC_o-Tr2^yM");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('3');
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("jTz)M]%<}e=@[PO");
      cSVFormat5.withRecordSeparator("jTz)M]%<}e=@[PO");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "jTz)M]%<}e=@[PO");
      StringWriter stringWriter2 = stringWriter1.append('3');
      stringWriter2.write(50);
      Object object3 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.Token$Type");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "jTz)M]%<}e=@[PO";
      objectArray0[2] = (Object) "jTz)M]%<}e=@[PO";
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('f');
      cSVFormat1.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = ':';
      charArray0[8] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ':';
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) ':';
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('l');
      cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(90);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object object1 = new Object();
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('l');
      stringWriter2.write(50);
      Object object2 = new Object();
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) byteArrayOutputStream0;
      objectArray1[1] = object2;
      objectArray1[2] = object1;
      objectArray1[3] = object0;
      Object object3 = new Object();
      objectArray1[4] = object3;
      objectArray1[5] = object2;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat0.withEscape('.');
      cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>(1237);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      StringWriter stringWriter0 = new StringWriter(102);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("jTz)M]%<}e=@[PO");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLTransientException0);
      cSVPrinter1.print("jTz)M]%<}e=@[PO");
      cSVPrinter1.printRecords((Iterable<?>) sQLRecoverableException0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) sQLTransientException0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "jTz)M]%<}e=@[PO";
      cSVPrinter1.printRecords(objectArray0);
      Character character0 = new Character('o');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Float float0 = new Float((double) 102);
      cSVPrinter2.print(float0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      cSVPrinter1.print(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = cSVFormat5.print(stringWriter0);
      cSVFormat1.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('l');
      cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(90);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append('K');
      stringWriter1.write(4411);
      Object object3 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat.newFormat('A');
      Character.valueOf('4');
      CharBuffer charBuffer0 = CharBuffer.allocate(157);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 157, 157);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      stringWriter0.write(44);
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("jTz)M]%<}e=@[PO");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('>');
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("jTz)M]%<}e=@[PO");
      cSVFormat5.withRecordSeparator("jTz)M]%<}e=@[PO");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter('>');
      stringWriter1.write(57);
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      Character character0 = Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.withEscape('4');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("K^)G#9");
      CharBuffer charBuffer0 = CharBuffer.allocate(1936);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
      cSVPrinter0.print(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = new Character('n');
      cSVFormat2.withCommentMarker(character0);
      cSVFormat2.withSkipHeaderRecord(true);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      Character character0 = Character.valueOf('4');
      cSVFormat0.withCommentMarker(character0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      StringWriter stringWriter0 = new StringWriter(5);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      stringWriter1.append((CharSequence) stringBuffer0, 0, 0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVPrinter1.println();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) pipedWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = ") invalid char between encapsulated token and delimiter";
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      stringWriter0.write(charArray0);
      stringWriter0.write(") invalid char between encapsulated token and delimiter");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(") invalid char between encapsulated token and delimiter");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('.');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(1237);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "", 1237, intArray0, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(":Qpg~5", batchUpdateException0);
      arrayList0.add((SQLNonTransientException) sQLSyntaxErrorException0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('l');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("34");
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream('l');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "34");
      StringWriter stringWriter2 = stringWriter1.append('l');
      stringWriter2.write(50);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) byteArrayOutputStream0;
      objectArray1[1] = objectArray0[2];
      objectArray0[2] = object0;
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("(7)&Vr4/E E\"GlXSd");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("34", sQLTransientException0);
      cSVPrinter2.print(sQLRecoverableException0);
      cSVPrinter0.close();
      cSVPrinter1.printRecords((Iterable<?>) sQLRecoverableException0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[10];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      Character character0 = Character.valueOf('4');
      cSVFormat0.withCommentMarker(character0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false, false, false, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.print(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Character character0 = Character.valueOf('r');
      cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) stringBuffer0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringBuffer0;
      objectArray0[7] = (Object) stringWriter0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      LinkedList<MockPrintStream> linkedList0 = new LinkedList<MockPrintStream>();
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printComment("')");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      Object object3 = new Object();
      objectArray0[6] = object3;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(10);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      TreeSet<MockFileWriter> treeSet0 = new TreeSet<MockFileWriter>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Qf$k^C_}");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('#');
      cSVFormat0.withEscape(character0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Qf$k^C_}";
      objectArray0[1] = (Object) mockPrintStream0;
      mockPrintStream0.printf(locale0, "Qf$k^C_}", objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.withCommentMarker('3');
      cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("HeaderComments:");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVFormat";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "org.apache.commons.csv.CSVFormat", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockPrintStream0, appendable0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char char0 = 'A';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      char char1 = '4';
      Character.valueOf('4');
      int int0 = 804;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(804);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('4');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(10);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      cSVPrinter0.close();
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      Character character0 = Character.valueOf('4');
      cSVFormat0.withCommentMarker(character0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) pipedWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) resultSet0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      Character character0 = Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      cSVFormat0.print(pipedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=?e5");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('^');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.println();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      cSVPrinter0.print(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=?e5");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('^');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.println();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)80;
      Stack<String> stack0 = new Stack<String>();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      cSVPrinter0.print(byteArrayInputStream0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('.');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(4);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("jTz)M]%<}e=@[PO");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVFormat";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "org.apache.commons.csv.CSVFormat", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("V F!PZ~}SmFY+4O4e");
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      Object object3 = new Object();
      objectArray0[6] = object3;
      objectArray0[7] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) stringBuffer0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(") invalid char between encapsulated token and delimiter");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Qf$k^C_}");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Qf$k^C_}");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("y?2=3o");
      Character character0 = Character.valueOf('4');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }
}
