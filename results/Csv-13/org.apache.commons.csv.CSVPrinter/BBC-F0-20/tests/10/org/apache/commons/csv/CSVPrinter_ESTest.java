/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 06:23:39 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayDeque;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.TreeSet;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv%CSVPrinter$1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('S');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      MockFileWriter mockFileWriter0 = new MockFileWriter("x3", false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "6ltG");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(116);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("%=4W{'O");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("XVbgu&P", "XVbgu&P", (-518));
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLTransientConnectionException1);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("%=4W{'O");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      LinkedHashSet<MockPrintWriter> linkedHashSet0 = new LinkedHashSet<MockPrintWriter>();
      linkedHashSet0.add(mockPrintWriter0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv%CSVPrinter$1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("%=4W{'O");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      TreeSet<MockPrintWriter> treeSet0 = new TreeSet<MockPrintWriter>();
      LinkedHashSet<MockPrintWriter> linkedHashSet0 = new LinkedHashSet<MockPrintWriter>(treeSet0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      cSVPrinter0.close();
      linkedHashSet0.add(mockPrintWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) '/';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("%=4W{'O");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      TreeSet<BufferedOutputStream> treeSet0 = new TreeSet<BufferedOutputStream>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("The delimiter cannot be a line break");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>(linkedList0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "D%ER:q>fKZ#");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment(",$M.Bo0+1O");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('N');
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("@KXGOFF!");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("The delimiter cannot be a line break");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(fileSystemHandling0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      PipedReader pipedReader0 = new PipedReader(4);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("%=4W{'O");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter("(Osl;XJx");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ") EOF reached before encapsulated token finished");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(28);
      CSVFormat cSVFormat0 = CSVFormat.valueOf("MySQL");
      Character character0 = new Character('/');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('/');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charBuffer0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("The delimiter cannot be a line break");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(50);
      linkedList0.add(byteArrayOutputStream0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      assertTrue(linkedList0.contains(byteArrayOutputStream0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      MockFileWriter mockFileWriter0 = new MockFileWriter("x3", false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("^:HOel7qEX");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.printComment((String) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("%=4W{'O");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("%=4W{'O");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("The delimiter cannot be a line break");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(122);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, true, true).when(resultSet0).next();
      // Undeclared exception!
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("The delimiter cannot be a line break");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("%=4W{'O");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      TreeSet<MockPrintWriter> treeSet0 = new TreeSet<MockPrintWriter>();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) treeSet0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("XVbgu&P", "XVbgu&P", (-518));
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
      assertEquals((-518), sQLTransientConnectionException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "hXDz%!");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>(treeSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("The delimiter cannot be a line brea#");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("The delimiter cannot be a line brea#");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('~');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments((Object[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(48);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(outputStreamWriter0);
      SQLDataException sQLDataException0 = new SQLDataException("`zziwvRsR", (Throwable) null);
      cSVPrinter0.print(sQLDataException0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("The delimiter cannot be a line break");
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('@');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print("bV8dNB,1Y,InX}");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(10);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(50, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("{Qqn");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{Qqn");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[15];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(15, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("^:HOel7qEX");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^:HOel7qEX");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("?Z?oA+/*");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?Z?oA+/*");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[27];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(27, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0xWU@The+V<");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"=(V5U)Fq@CJ.p$gG_");
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"=(V5U)Fq@CJ.p$gG_");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("D%Ek:q>fKZ#");
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(10, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Th delimiter cannot be a line brea#");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Byte byte0 = new Byte((byte)114);
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(") invalid jhar between encapsulated token and delimiter");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      Byte byte0 = new Byte((byte)40);
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("The delimiter cannot be a line break");
      Object[] objectArray0 = new Object[5];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Th delimiter cannot be a line brea#");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[8];
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("Delimiter=<\\\t> Escape=<> RecordSeparator=<\\n> SkipHeaderRecord:false\nDelimiter=<\\\t> Escape=<> RecordSeparator=<\\n> SkipHeaderRecord:false\nDelimiter=<\\\t> Escape=<> RecordSeparator=<\\n> SkipHeaderRecord:false\nDelimiter=<\\\t> Escape=<> RecordSeparator=<\\n> SkipHeaderRecord:false\nDelimiter=<\\\t> Escape=<> RecordSeparator=<\\n> SkipHeaderRecord:false\nDelimiter=<\\\t> Escape=<> RecordSeparator=<\\n> SkipHeaderRecord:false\nDelimiter=<\\\t> Escape=<> RecordSeparator=<\\n> SkipHeaderRecord:false\nDelimiter=<\\\t> Escape=<> RecordSeparator=<\\n> SkipHeaderRecord:false\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[4];
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      LinkedHashSet<MockPrintWriter> linkedHashSet0 = new LinkedHashSet<MockPrintWriter>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6blRG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      linkedHashSet0.add(mockPrintWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "6blRG");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(1061);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("%=4W{'O");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      cSVPrinter0.close();
      Object object0 = new Object();
      try { 
        cSVPrinter0.print(object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(839);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("The delimiter cannot be a line brea#");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockPrintStream0, appendable0);
  }
}
