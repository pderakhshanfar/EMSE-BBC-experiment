* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 19556
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-13/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 971
* Using seed 2824186489
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 190 / 971
[MASTER] 15:45:40.483 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 15:45:40.484 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 15:45:40.484 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 15:45:40.484 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 15:45:40.484 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 15:45:40.484 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 15:45:40.484 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 15:45:40.484 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 15:45:40.484 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 15:45:40.484 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 15:45:40.485 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 15:45:42.764 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 15:45:46.998 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords([Ljava/lang/Object;)V: I23 Branch 65 IFEQ L491 - false: 12816,10667,764| Number of FF evals: 13920
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: Line 343: 42,0,0| Number of FF evals: 209
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I250 Branch 47 IFNE L270 - false: 694,0,0| Number of FF evals: 1117
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I164 Branch 42 IF_ICMPEQ L241 - true: 55,0,0| Number of FF evals: 349
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/sql/ResultSet;)V: I18 Branch 68 IF_ICMPGT L514 - true: 508,0,0| Number of FF evals: 1741
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/lang/Iterable;)V: I8 Branch 61 IFEQ L439 - false: 29,0,0| Number of FF evals: 1146
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I182 Branch 44 IFNE L248 - true: 169,0,0| Number of FF evals: 401
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I51 Branch 27 TABLESWITCH L207 Default-Case - true: 15586,11988,1779| Number of FF evals: 13909
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I107 Branch 31 IFEQ L231 - true: 27,0,0| Number of FF evals: 1966
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I161 Branch 41 IF_ICMPEQ L241 - true: 2446,1786,22| Number of FF evals: 13946
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V: I74 Branch 5 IFNE L76 - true: 51,0,0| Number of FF evals: 141
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I80 Branch 20 IF_ICMPNE L170 - false: 1183,787,0| Number of FF evals: 7056
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I110 Branch 32 IF_ICMPLT L231 - true: 2210,56,8| Number of FF evals: 3394
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/lang/Iterable;)V: I29 Branch 63 IFEQ L442 - true: 269,0,0| Number of FF evals: 785
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 168: 550,0,0| Number of FF evals: 1624
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I56 Branch 18 IF_ICMPLE L165 - true: 767,77,0| Number of FF evals: 3705
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I51 Branch 25 TABLESWITCH L207 Case 3 - true: 15564,11970,1786| Number of FF evals: 13909
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I51 Branch 17 IF_ICMPNE L163 - false: 707,0,0| Number of FF evals: 2132
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I63 Branch 28 IFNE L212 - true: 478,0,0| Number of FF evals: 1109
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.close()V: I5 Branch 6 IFEQ L87 - true: 5,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I56 Branch 18 IF_ICMPLE L165 - false: 422,0,0| Number of FF evals: 2066
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V: I57 Branch 3 IFNULL L71 - true: 3,0,0| Number of FF evals: 907
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 177: 550,0,0| Number of FF evals: 1624
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I42 Branch 14 IF_ICMPEQ L163 - true: 1350,795,0| Number of FF evals: 8612
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I13 Branch 51 IFNE L319 - true: 344,0,0| Number of FF evals: 1189
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 174: 550,0,0| Number of FF evals: 1624
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I113 Branch 33 IF_ICMPLE L231 - true: 2519,365,44| Number of FF evals: 5065
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 175: 550,0,0| Number of FF evals: 1624
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecord(Ljava/lang/Iterable;)V: I8 Branch 59 IFEQ L373 - false: 55,0,0| Number of FF evals: 1153
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I123 Branch 36 IF_ICMPLT L231 - true: 2519,365,82| Number of FF evals: 3735
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecord(Ljava/lang/Iterable;)V: I8 Branch 59 IFEQ L373 - true: 15,0,0| Number of FF evals: 1202
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I68 Branch 57 IF_ICMPNE L328 - true: 2031,206,7| Number of FF evals: 6248
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecord(Ljava/lang/Iterable;)V: Line 377: 15,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I51 Branch 26 TABLESWITCH L207 Case 4 - true: 8,0,0| Number of FF evals: 6114
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecord(Ljava/lang/Iterable;)V: Line 376: 15,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecord(Ljava/lang/Iterable;)V: Line 373: 15,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/lang/Iterable;)V: Line 447: 31,0,0| Number of FF evals: 178
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords([Ljava/lang/Object;)V: Line 499: 5,0,0| Number of FF evals: 18
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I127 Branch 37 IF_ICMPLE L231 - false: 2639,1204,289| Number of FF evals: 5684
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.print(Ljava/lang/Object;)V: I13 Branch 9 IFNONNULL L127 - true: 1234,0,0| Number of FF evals: 4166
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.print(Ljava/lang/Object;)V: I13 Branch 9 IFNONNULL L127 - false: 11,0,0| Number of FF evals: 2995
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.flush()V: I5 Branch 7 IFEQ L100 - false: 15,0,0| Number of FF evals: 212
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I5 Branch 50 IFNE L316 - true: 344,0,0| Number of FF evals: 1205
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I199 Branch 45 IF_ICMPGT L253 - false: 1280,692,57| Number of FF evals: 8814
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I48 Branch 16 IF_ICMPEQ L163 - true: 374,0,0| Number of FF evals: 1926
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords([Ljava/lang/Object;)V: I14 Branch 64 IF_ICMPGE L490 - true: 5,0,0| Number of FF evals: 4741
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I53 Branch 54 LOOKUPSWITCH L326 Case 13 - true: 1289,632,118| Number of FF evals: 5459
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I51 Branch 23 TABLESWITCH L207 Case 1 - true: 96,0,0| Number of FF evals: 271
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.flush()V: Line 103: 15,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I40 Branch 22 IFNONNULL L204 - false: 8,0,0| Number of FF evals: 6012
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords([Ljava/lang/Object;)V: I36 Branch 66 IFEQ L493 - false: 291,0,0| Number of FF evals: 557
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.flush()V: Line 100: 15,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I115 Branch 21 IF_ICMPLE L184 - true: 5,0,0| Number of FF evals: 1046
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I137 Branch 38 IF_ICMPGT L233 - false: 2974,707,15| Number of FF evals: 8247
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.flush()V: I5 Branch 7 IFEQ L100 - true: 48,0,0| Number of FF evals: 82
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I70 Branch 19 IF_ICMPNE L168 - false: 1183,787,0| Number of FF evals: 7055
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I13 Branch 51 IFNE L319 - false: 1059,0,0| Number of FF evals: 2307
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I51 Branch 24 TABLESWITCH L207 Case 2 - false: 8,0,0| Number of FF evals: 6123
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I43 Branch 52 IF_ICMPGE L324 - true: 42,0,0| Number of FF evals: 962
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I285 Branch 49 IF_ICMPNE L283 - false: 128,0,0| Number of FF evals: 338
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I43 Branch 52 IF_ICMPGE L324 - false: 42,0,0| Number of FF evals: 928
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I207 Branch 46 IFNE L260 - true: 38,0,0| Number of FF evals: 2551
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I53 Branch 53 LOOKUPSWITCH L326 Case 10 - true: 1570,913,120| Number of FF evals: 5983
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I91 Branch 30 IFEQ L224 - true: 27,0,0| Number of FF evals: 811
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.print(Ljava/lang/Object;)V: I3 Branch 8 IFNONNULL L125 - false: 4,0,0| Number of FF evals: 5100
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I61 Branch 56 IF_ICMPGE L328 - true: 3927,3270,120| Number of FF evals: 13473
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/sql/ResultSet;)V: I10 Branch 67 IFEQ L513 - true: 10,0,0| Number of FF evals: 356
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I158 Branch 40 IF_ICMPEQ L241 - true: 2446,1786,20| Number of FF evals: 13946
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/lang/Iterable;)V: I16 Branch 62 IFEQ L440 - true: 29,0,0| Number of FF evals: 1146
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I61 Branch 56 IF_ICMPGE L328 - false: 1289,632,118| Number of FF evals: 5459
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/sql/ResultSet;)V: I10 Branch 67 IFEQ L513 - false: 501,0,0| Number of FF evals: 1701
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I91 Branch 30 IFEQ L224 - false: 30,0,0| Number of FF evals: 1984
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I167 Branch 43 IF_ICMPNE L241 - false: 408,0,0| Number of FF evals: 799
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/sql/ResultSet;)V: I18 Branch 68 IF_ICMPGT L514 - false: 3381,2258,76| Number of FF evals: 9023
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I116 Branch 34 IF_ICMPLT L231 - true: 2395,241,43| Number of FF evals: 3525
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I45 Branch 15 IF_ICMPEQ L163 - true: 1350,795,0| Number of FF evals: 8611
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I86 Branch 29 IFGT L219 - true: 25,0,0| Number of FF evals: 4937
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I120 Branch 35 IF_ICMPLE L231 - true: 2566,412,90| Number of FF evals: 5139
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: Line 342: 42,0,0| Number of FF evals: 209
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I86 Branch 29 IFGT L219 - false: 52,0,0| Number of FF evals: 2265
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/sql/ResultSet;)V: Line 519: 10,0,0| Number of FF evals: 31
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/lang/Iterable;)V: I16 Branch 62 IFEQ L440 - false: 5307,4036,347| Number of FF evals: 13909
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I53 Branch 55 LOOKUPSWITCH L326 Default-Case - false: 1530,665,148| Number of FF evals: 5463
* Search finished after 604s and 348 generations, 225721 statements, best individual has fitness: 94.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 164
* Number of covered goals: 159
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 137
* Number of covered goals: 130
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 507
* Number of covered goals: 462
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 137
* Number of covered goals: 124
* Generated 65 tests with total length 436
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:56:46.754 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.68265% of time used, but only 21/65 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 45%
* Compiling and checking tests
[MASTER] 15:56:50.961 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_7_1628265410961
[MASTER] 15:56:50.962 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 15:56:51.527 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:56:51.915 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:56:52.398 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:56:52.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:56:52.757 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:56:52.913 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:56:53.064 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:56:56.375 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_24_tmp__ESTest.test0(CSVPrinter_24_tmp__ESTest.java:29)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:56:56.375 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
String[] stringArray0 = new String[2];
stringArray0[1] = "@gj>ruQ<ERN7ANHX";
CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
CSVFormat cSVFormat2 = cSVFormat1.withNullString("@gj>ruQ<ERN7ANHX");
CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
assertNotNull(cSVPrinter0);


[MASTER] 15:57:04.508 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_42_tmp__ESTest.test0(CSVPrinter_42_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:04.509 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
assertNotNull(mockPrintStream0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

cSVPrinter0.println();
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertFalse(fileDescriptor0.valid());


[MASTER] 15:57:08.941 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_45_tmp__ESTest.test0(CSVPrinter_45_tmp__ESTest.java:88)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:08.942 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNotNull(cSVFormat0);

String[] stringArray0 = new String[2];
stringArray0[1] = "@gj>ruQ<ERN7ANHX";
CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertNull(cSVFormat1.getQuoteMode());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isNullStringSet());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotNull(cSVFormat1);
assertEquals(2, stringArray0.length);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);

[MASTER] 15:57:13.305 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_49_tmp__ESTest.test0(CSVPrinter_49_tmp__ESTest.java:49)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:13.311 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
assertNotNull(mockPrintWriter0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
assertNull(sQLTransactionRollbackException0.getMessage());
assertNull(sQLTransactionRollbackException0.getSQLState());
assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
assertNotNull(sQLTransactionRollbackException0);

cSVPrinter0.print(sQLTransactionRollbackException0);

[MASTER] 15:57:19.503 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_64_tmp__ESTest.test0(CSVPrinter_64_tmp__ESTest.java:365)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:19.519 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertNotNull(cSVFormat0);

QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isNullStringSet());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotNull(cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isNullStringSet());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertNull(cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertEquals(',', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isNullStringSet());
assertTrue(cSVFormat2.getAllowMissingColumnNames());
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertTrue(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertNotNull(cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);

CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isNullStringSet());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertNull(cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertEquals(',', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isNullStringSet());
assertTrue(cSVFormat2.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertNull(cSVFormat3.getNullString());
assertTrue(cSVFormat3.getAllowMissingColumnNames());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat3.getQuoteMode());
assertFalse(cSVFormat3.isNullStringSet());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertNull(cSVFormat3.getEscapeCharacter());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getCommentMarker());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertFalse(cSVFormat3.isEscapeCharacterSet());
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertTrue(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat1));
assertNotNull(cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);

String[] stringArray0 = new String[2];
stringArray0[0] = "";
stringArray0[1] = "@gj>ruQ<ERN7ANHX";
CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isNullStringSet());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertNull(cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertEquals(',', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isNullStringSet());
assertTrue(cSVFormat2.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertNull(cSVFormat3.getNullString());
assertTrue(cSVFormat3.getAllowMissingColumnNames());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat3.getQuoteMode());
assertFalse(cSVFormat3.isNullStringSet());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertNull(cSVFormat3.getEscapeCharacter());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getCommentMarker());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertFalse(cSVFormat3.isEscapeCharacterSet());
assertNull(cSVFormat4.getNullString());
assertTrue(cSVFormat4.getAllowMissingColumnNames());
assertTrue(cSVFormat4.isQuoteCharacterSet());
assertFalse(cSVFormat4.isCommentMarkerSet());
assertNull(cSVFormat4.getCommentMarker());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.getIgnoreHeaderCase());
assertFalse(cSVFormat4.isEscapeCharacterSet());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals(',', cSVFormat4.getDelimiter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat4.getQuoteMode());
assertFalse(cSVFormat4.isNullStringSet());
assertNull(cSVFormat4.getEscapeCharacter());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertTrue(cSVFormat2.equals((Object)cSVFormat3));
assertTrue(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertNotNull(cSVFormat4);
assertEquals(2, stringArray0.length);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat1);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
assertNotNull(mockPrintStream0);

Locale locale0 = Locale.GERMANY;
assertEquals("de", locale0.getLanguage());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale0.getCountry());
assertEquals("deu", locale0.getISO3Language());
assertEquals("", locale0.getVariant());
assertNotNull(locale0);

PrintStream printStream0 = mockPrintStream0.printf(locale0, "t!MLkY", (Object[]) stringArray0);
assertFalse(fileDescriptor0.valid());
assertEquals("de", locale0.getLanguage());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale0.getCountry());
assertEquals("deu", locale0.getISO3Language());
assertEquals("", locale0.getVariant());
assertNotNull(printStream0);
assertEquals(2, stringArray0.length);
assertSame(mockPrintStream0, printStream0);
assertSame(printStream0, mockPrintStream0);

CSVPrinter cSVPrinter0 = cSVFormat4.print(printStream0);
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isNullStringSet());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertNull(cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertEquals(',', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isNullStringSet());
assertTrue(cSVFormat2.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertNull(cSVFormat3.getNullString());
assertTrue(cSVFormat3.getAllowMissingColumnNames());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat3.getQuoteMode());
assertFalse(cSVFormat3.isNullStringSet());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertNull(cSVFormat3.getEscapeCharacter());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getCommentMarker());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertFalse(cSVFormat3.isEscapeCharacterSet());
assertNull(cSVFormat4.getNullString());
assertTrue(cSVFormat4.getAllowMissingColumnNames());
assertTrue(cSVFormat4.isQuoteCharacterSet());
assertFalse(cSVFormat4.isCommentMarkerSet());
assertNull(cSVFormat4.getCommentMarker());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.getIgnoreHeaderCase());
assertFalse(cSVFormat4.isEscapeCharacterSet());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals(',', cSVFormat4.getDelimiter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat4.getQuoteMode());
assertFalse(cSVFormat4.isNullStringSet());
assertNull(cSVFormat4.getEscapeCharacter());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(fileDescriptor0.valid());
assertEquals("de", locale0.getLanguage());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale0.getCountry());
assertEquals("deu", locale0.getISO3Language());
assertEquals("", locale0.getVariant());
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertTrue(cSVFormat2.equals((Object)cSVFormat3));
assertTrue(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat4));
assertTrue(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertNotNull(cSVPrinter0);
assertEquals(2, stringArray0.length);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat1);
assertSame(mockPrintStream0, printStream0);
assertSame(printStream0, mockPrintStream0);

RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
assertNotNull(rowSetMetaDataImpl0);

ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
doReturn(true, false).when(resultSet0).next();
cSVPrinter0.printRecords(resultSet0);
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isNullStringSet());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertNull(cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertEquals(',', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isNullStringSet());
assertTrue(cSVFormat2.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertNull(cSVFormat3.getNullString());
assertTrue(cSVFormat3.getAllowMissingColumnNames());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat3.getQuoteMode());
assertFalse(cSVFormat3.isNullStringSet());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertNull(cSVFormat3.getEscapeCharacter());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getCommentMarker());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertFalse(cSVFormat3.isEscapeCharacterSet());
assertNull(cSVFormat4.getNullString());
assertTrue(cSVFormat4.getAllowMissingColumnNames());
assertTrue(cSVFormat4.isQuoteCharacterSet());
assertFalse(cSVFormat4.isCommentMarkerSet());
assertNull(cSVFormat4.getCommentMarker());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.getIgnoreHeaderCase());
assertFalse(cSVFormat4.isEscapeCharacterSet());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals(',', cSVFormat4.getDelimiter());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat4.getQuoteMode());
assertFalse(cSVFormat4.isNullStringSet());
assertNull(cSVFormat4.getEscapeCharacter());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(fileDescriptor0.valid());
assertEquals("de", locale0.getLanguage());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale0.getCountry());
assertEquals("deu", locale0.getISO3Language());
assertEquals("", locale0.getVariant());
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertTrue(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertTrue(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertTrue(cSVFormat2.equals((Object)cSVFormat3));
assertTrue(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat4));
assertTrue(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertEquals(2, stringArray0.length);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat1);
assertSame(mockPrintStream0, printStream0);
assertSame(printStream0, mockPrintStream0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-13/org.apache.commons.csv.CSVPrinter/BBC-F0-100/tests/30
* Done!

* Computation finished
