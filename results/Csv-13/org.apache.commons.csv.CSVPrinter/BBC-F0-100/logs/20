* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 18612
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-13/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 971
* Using seed 1394544011
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 190 / 971
[MASTER] 15:45:21.138 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 15:45:21.138 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 15:45:21.138 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 15:45:21.138 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 15:45:21.139 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 15:45:21.139 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 15:45:21.139 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 15:45:21.139 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 15:45:21.139 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 15:45:21.143 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 15:45:21.144 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 15:45:23.626 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 15:45:41.584 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 15:51:30.215 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLTransactionRollbackException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLRecoverableException due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 15:53:22.090 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLFeatureNotSupportedException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.sql.SQLClientInfoException due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 15:54:10.108 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords([Ljava/lang/Object;)V: I23 Branch 65 IFEQ L491 - false: 63826,61916,6841| Number of FF evals: 75708
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I250 Branch 47 IFNE L270 - false: 685,0,0| Number of FF evals: 1872
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I164 Branch 42 IF_ICMPEQ L241 - true: 57,0,0| Number of FF evals: 863
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.print(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I34 Branch 12 IFEQ L142 - true: 17,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/sql/ResultSet;)V: I18 Branch 68 IF_ICMPGT L514 - true: 37,0,0| Number of FF evals: 674
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/lang/Iterable;)V: I8 Branch 61 IFEQ L439 - false: 12,0,0| Number of FF evals: 4283
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I182 Branch 44 IFNE L248 - true: 196,0,0| Number of FF evals: 1833
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I250 Branch 47 IFNE L270 - true: 4,0,0| Number of FF evals: 9439
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.print(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I34 Branch 12 IFEQ L142 - false: 37,0,0| Number of FF evals: 19553
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I51 Branch 27 TABLESWITCH L207 Default-Case - true: 70942,67670,6448| Number of FF evals: 75672
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 184: 248,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I161 Branch 41 IF_ICMPEQ L241 - true: 12865,12185,861| Number of FF evals: 75675
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V: I74 Branch 5 IFNE L76 - true: 66,0,0| Number of FF evals: 172
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I80 Branch 20 IF_ICMPNE L170 - false: 15558,14678,36| Number of FF evals: 74672
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 187: 248,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I110 Branch 32 IF_ICMPLT L231 - true: 2380,656,25| Number of FF evals: 8722
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/lang/Iterable;)V: I29 Branch 63 IFEQ L442 - true: 281,0,0| Number of FF evals: 884
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.print(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I19 Branch 11 IFEQ L139 - true: 17,0,0| Number of FF evals: 19661
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I63 Branch 28 IFNE L212 - false: 2030,0,0| Number of FF evals: 1974
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 168: 364,0,0| Number of FF evals: 987
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: Line 270: 4,0,0| Number of FF evals: 35
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I56 Branch 18 IF_ICMPLE L165 - true: 496,0,0| Number of FF evals: 4434
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I51 Branch 25 TABLESWITCH L207 Case 3 - true: 16483,13217,2504| Number of FF evals: 17849
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I63 Branch 28 IFNE L212 - true: 2066,0,0| Number of FF evals: 1864
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.close()V: I5 Branch 6 IFEQ L87 - true: 246,0,0| Number of FF evals: 488
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I51 Branch 17 IF_ICMPNE L163 - false: 1067,0,0| Number of FF evals: 4432
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I56 Branch 18 IF_ICMPLE L165 - false: 362,0,0| Number of FF evals: 6614
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V: I57 Branch 3 IFNULL L71 - true: 10,0,0| Number of FF evals: 2890
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 177: 364,0,0| Number of FF evals: 987
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I113 Branch 33 IF_ICMPLE L231 - true: 2643,919,48| Number of FF evals: 11485
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I42 Branch 14 IF_ICMPEQ L163 - true: 11438,10647,20| Number of FF evals: 75593
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 174: 364,0,0| Number of FF evals: 987
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecord(Ljava/lang/Iterable;)V: I8 Branch 59 IFEQ L373 - false: 36,0,0| Number of FF evals: 5055
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 175: 364,0,0| Number of FF evals: 987
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I123 Branch 36 IF_ICMPLT L231 - true: 3335,1451,170| Number of FF evals: 11617
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecord(Ljava/lang/Iterable;)V: I8 Branch 59 IFEQ L373 - true: 15,0,0| Number of FF evals: 7778
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I68 Branch 57 IF_ICMPNE L328 - true: 2562,667,0| Number of FF evals: 8447
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecord(Ljava/lang/Iterable;)V: Line 377: 15,0,0| Number of FF evals: 35
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecord(Ljava/lang/Iterable;)V: Line 376: 15,0,0| Number of FF evals: 35
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I274 Branch 48 IF_ICMPGE L281 - false: 53,0,0| Number of FF evals: 4942
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecord(Ljava/lang/Iterable;)V: Line 373: 15,0,0| Number of FF evals: 20
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 156: 248,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I51 Branch 26 TABLESWITCH L207 Case 4 - false: 2030,0,0| Number of FF evals: 3989
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 154: 248,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 155: 248,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords([Ljava/lang/Object;)V: Line 499: 15,0,0| Number of FF evals: 26
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I127 Branch 37 IF_ICMPLE L231 - false: 2326,1336,67| Number of FF evals: 12476
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 158: 248,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: Line 159: 248,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.print(Ljava/lang/Object;)V: I13 Branch 9 IFNONNULL L127 - true: 1582,0,0| Number of FF evals: 9661
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords([Ljava/lang/Object;)V: I14 Branch 64 IF_ICMPGE L490 - false: 15,0,0| Number of FF evals: 20880
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.print(Ljava/lang/Object;)V: I13 Branch 9 IFNONNULL L127 - false: 4,0,0| Number of FF evals: 9233
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I199 Branch 45 IF_ICMPGT L253 - false: 1300,727,2| Number of FF evals: 10558
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.println()V: I9 Branch 58 IFNULL L353 - true: 37,0,0| Number of FF evals: 237
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I48 Branch 16 IF_ICMPEQ L163 - true: 362,0,0| Number of FF evals: 4692
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I53 Branch 54 LOOKUPSWITCH L326 Case 13 - true: 18047,17288,441| Number of FF evals: 67632
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords([Ljava/lang/Object;)V: I14 Branch 64 IF_ICMPGE L490 - true: 15,0,0| Number of FF evals: 22037
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I51 Branch 23 TABLESWITCH L207 Case 1 - true: 2030,0,0| Number of FF evals: 1947
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I115 Branch 21 IF_ICMPLE L184 - false: 248,0,0| Number of FF evals: 18644
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I40 Branch 22 IFNONNULL L204 - true: 2030,0,0| Number of FF evals: 4076
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I137 Branch 38 IF_ICMPGT L233 - false: 3494,1399,35| Number of FF evals: 16073
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I115 Branch 21 IF_ICMPLE L184 - true: 319,0,0| Number of FF evals: 4291
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords([Ljava/lang/Object;)V: I36 Branch 66 IFEQ L493 - false: 67,0,0| Number of FF evals: 991
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.flush()V: I5 Branch 7 IFEQ L100 - true: 51,0,0| Number of FF evals: 149
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I70 Branch 19 IF_ICMPNE L168 - false: 15558,14678,36| Number of FF evals: 74672
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords([Ljava/lang/Object;)V: Line 490: 15,0,0| Number of FF evals: 26
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I13 Branch 51 IFNE L319 - false: 623,0,0| Number of FF evals: 1941
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I285 Branch 49 IF_ICMPNE L283 - false: 53,0,0| Number of FF evals: 1502
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I31 Branch 13 IF_ICMPGE L161 - false: 248,0,0| Number of FF evals: 18668
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I51 Branch 24 TABLESWITCH L207 Case 2 - true: 2030,0,0| Number of FF evals: 1972
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I207 Branch 46 IFNE L260 - true: 4,0,0| Number of FF evals: 9171
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I53 Branch 53 LOOKUPSWITCH L326 Case 10 - true: 19062,18303,487| Number of FF evals: 71465
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I31 Branch 13 IF_ICMPGE L161 - true: 248,0,0| Number of FF evals: 21446
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I285 Branch 49 IF_ICMPNE L283 - true: 53,0,0| Number of FF evals: 4933
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I91 Branch 30 IFEQ L224 - true: 16,0,0| Number of FF evals: 1224
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.print(Ljava/lang/Object;)V: I3 Branch 8 IFNONNULL L125 - false: 4,0,0| Number of FF evals: 15918
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I61 Branch 56 IF_ICMPGE L328 - true: 20045,19286,575| Number of FF evals: 75685
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/sql/ResultSet;)V: I10 Branch 67 IFEQ L513 - true: 211,0,0| Number of FF evals: 1044
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I158 Branch 40 IF_ICMPEQ L241 - true: 12865,12185,876| Number of FF evals: 75675
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/lang/Iterable;)V: I16 Branch 62 IFEQ L440 - true: 26,0,0| Number of FF evals: 4318
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I61 Branch 56 IF_ICMPGE L328 - false: 18047,17288,441| Number of FF evals: 67632
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/sql/ResultSet;)V: I10 Branch 67 IFEQ L513 - false: 247,0,0| Number of FF evals: 1078
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I91 Branch 30 IFEQ L224 - false: 3,0,0| Number of FF evals: 4958
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I167 Branch 43 IF_ICMPNE L241 - false: 1179,0,0| Number of FF evals: 2273
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/sql/ResultSet;)V: I18 Branch 68 IF_ICMPGT L514 - false: 10329,8268,880| Number of FF evals: 27007
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: Line 217: 40,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I116 Branch 34 IF_ICMPLT L231 - true: 2471,747,25| Number of FF evals: 10677
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndEscape(Ljava/lang/CharSequence;II)V: I45 Branch 15 IF_ICMPEQ L163 - true: 11438,10643,20| Number of FF evals: 75593
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I120 Branch 35 IF_ICMPLE L231 - true: 1691,0,0| Number of FF evals: 5410
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V: I86 Branch 29 IFGT L219 - false: 3,0,0| Number of FF evals: 5212
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/sql/ResultSet;)V: Line 519: 211,0,0| Number of FF evals: 495
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printComment(Ljava/lang/String;)V: I53 Branch 55 LOOKUPSWITCH L326 Default-Case - false: 20109,19073,672| Number of FF evals: 67634
Number of times BBC is called, activated, and useful for org.apache.commons.csv.CSVPrinter.printRecords(Ljava/lang/Iterable;)V: I16 Branch 62 IFEQ L440 - false: 46821,45759,76| Number of FF evals: 75707
* Search finished after 601s and 1843 generations, 948690 statements, best individual has fitness: 122.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 164
* Number of covered goals: 159
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 137
* Number of covered goals: 126
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 41
* Number of covered goals: 41
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 507
* Number of covered goals: 458
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 137
* Number of covered goals: 120
* Generated 75 tests with total length 465
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:56:57.928 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6677% of time used, but only 15/75 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 15:57:17.739 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:57:17.746 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_75_tmp__ESTest.test0(CSVPrinter_75_tmp__ESTest.java:26)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:17.747 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
Appendable appendable0 = cSVPrinter0.getOut();
assertSame(mockPrintWriter0, appendable0);


[MASTER] 15:57:25.283 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:57:25.688 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_80_tmp__ESTest.test0(CSVPrinter_80_tmp__ESTest.java:26)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:25.688 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
cSVPrinter0.close();

[MASTER] 15:57:30.609 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_91_tmp__ESTest.test0(CSVPrinter_91_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:30.611 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertNotNull(cSVFormat0);
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getQuoteMode());

Object[] objectArray0 = new Object[8];
FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
assertNotNull(cSVPrinter0);
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.printRecord(objectArray0);
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(fileDescriptor0.valid());
assertEquals(8, objectArray0.length);


[MASTER] 15:57:34.481 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_96_tmp__ESTest.test0(CSVPrinter_96_tmp__ESTest.java:28)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:34.483 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertNotNull(cSVFormat0);
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.isEscapeCharacterSet());

String[] stringArray0 = new String[2];
stringArray0[0] = "ra-";
CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
assertNotNull(cSVFormat1);
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuoteMode());
assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
assertEquals('\t', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertTrue(cSVFormat1.isEscapeCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertNull(cSVFormat1.getNullString());
assertNull(cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isQuoteCharacterSet());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals(2, stringArray0.length);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

CSVFormat cSVFormat2 = cSVFormat1.withQuote('r');
assertNotNull(cSVFormat2);
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuoteMode());
assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
assertEquals('\t', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertTrue(cSVFormat1.isEscapeCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertNull(cSVFormat1.getNullString());
assertNull(cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isQuoteCharacterSet());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\t', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertNull(cSVFormat2.getQuoteMode());
assertNull(cSVFormat2.getCommentMarker());
assertEquals('r', (char)cSVFormat2.getQuoteCharacter());
assertFalse(cSVFormat2.isNullStringSet());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getAllowMissingColumnNames());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals("\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertTrue(cSVFormat2.isEscapeCharacterSet());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertEquals(2, stringArray0.length);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);

[MASTER] 15:57:42.925 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_116_tmp__ESTest.test0(CSVPrinter_116_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:42.925 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertNotNull(cSVPrinter0);
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.flush();

[MASTER] 15:57:46.309 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_118_tmp__ESTest.test0(CSVPrinter_118_tmp__ESTest.java:48)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:46.310 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.TDF;
assertNotNull(cSVFormat0);
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertNotNull(cSVPrinter0);
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(fileDescriptor0.valid());

byte[] byteArray0 = new byte[9];
ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)4, (byte)48);
assertNotNull(byteArrayInputStream0);
assertEquals(5, byteArrayInputStream0.available());
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertEquals(9, byteArray0.length);

cSVPrinter0.print(byteArrayInputStream0);

[MASTER] 15:57:54.660 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_145_tmp__ESTest.test0(CSVPrinter_145_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:57:54.661 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
assertNotNull(cSVFormat0);
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertNotNull(cSVPrinter0);
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.println();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 8
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-13/org.apache.commons.csv.CSVPrinter/BBC-F0-100/tests/20
* Done!

* Computation finished
