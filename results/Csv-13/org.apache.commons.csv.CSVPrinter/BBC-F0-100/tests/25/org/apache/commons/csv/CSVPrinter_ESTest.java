/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 16:01:29 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Cgometita+t{");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 21);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0);
      CSVParser cSVParser0 = cSVFormat1.parse(inputStreamReader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('a');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      cSVFormat0.withCommentMarker('<');
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",(#", "Mi:UWe#U\"R", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLTransientConnectionException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('x');
      Character character1 = new Character('x');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.CSVFormat@0000000001");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("-xXM[Df/_R0");
      Character character0 = new Character('4');
      cSVFormat1.withEscape(character0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("hBIOkt<GA/");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("The comment start character and the quoteChar cannot be the same ('");
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      cSVPrinter0.printComment("The comment start character and the quoteChar cannot be the same ('");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<OutputStreamWriter> treeSet0 = new TreeSet<OutputStreamWriter>(comparator0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Character character0 = Character.valueOf('a');
      Character character1 = new Character('m');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) character1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('j');
      cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      cSVFormat1.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('j');
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = '>';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Character character0 = new Character('F');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) '>';
      objectArray0[2] = (Object) 'j';
      objectArray0[3] = (Object) 'j';
      objectArray0[4] = (Object) 'j';
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.CSVFormat@0000000001\tjava.lang.Character@0000000007\tjava.lang.Character@0000000008\tjava.lang.Character@0000000009\tjava.lang.Character@0000000010");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("xQmj~\u0005_nN<Z7|zI6");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 79;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(79);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('');
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1);
      charArrayWriter0.writeTo(charArrayWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      Collection<SQLTimeoutException> collection0 = null;
      cSVPrinter0.printComment("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      cSVPrinter0.close();
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[qcN[sb)R");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset.defaultCharset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("hBIOkt<GA/");
      Object[] objectArray0 = new Object[1];
      MockPrintStream mockPrintStream1 = new MockPrintStream("Unexpected Quote value: ");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      PriorityQueue<BufferedOutputStream> priorityQueue0 = new PriorityQueue<BufferedOutputStream>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5x+F(KBzI4$*\"dqp");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Q_Vw>");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Double double0 = new Double(206.8736225747601);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(double0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "_V:w>");
      Object[] objectArray0 = new Object[16];
      Character character0 = new Character('F');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("hBIOkt<GA/");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("hBIOkt<GA/");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(charset0);
      Long long0 = new Long(0L);
      cSVPrinter0.print(long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset.defaultCharset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("hBIOkt<GA/");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('5');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('t');
      Character character0 = Character.valueOf('1');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      cSVFormat5.withSkipHeaderRecord();
      cSVFormat5.withNullString("hBIOkt<GA/");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.print("Unexpected Quote value: ");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintStream mockPrintStream0 = new MockPrintStream("3Zf)0-");
      byte[] byteArray0 = new byte[0];
      mockPrintStream0.write(byteArray0, 57, 102);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      linkedList0.add(objectOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '@';
      charArray0[2] = ']';
      charArray0[3] = 'c';
      charArray0[4] = '(';
      charArray0[5] = 'h';
      charArray0[6] = 'w';
      charArray0[7] = '`';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) linkedList0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "=gH,N 2_y!t5]YQ%4i";
      Character.valueOf('B');
      Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "=gH,N 2_y!t5]YQ%4i");
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('h');
      ByteBuffer.allocateDirect('A');
      StringWriter stringWriter0 = new StringWriter(53);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.printComment(":=s*u`$#8s9esj");
      int[] intArray0 = new int[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, ":=s*u`$#8s9esj", (-807));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", ";L9<hZ!i<+aJ", 53, intArray0, sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[ADK- -:&3", "", 114, batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("format", "[ADK- -:&3", 25, sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(53, false, false, (-807), 25, sQLTransientConnectionException0);
      cSVPrinter0.print(dataTruncation0);
      cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) dataTruncation0;
      objectArray0[2] = (Object) dataTruncation0;
      objectArray0[3] = (Object) dataTruncation0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withNullString(",n{*09zp^2?H\"'z^VP@");
      File file0 = MockFile.createTempFile(",n{*09zp^2?H\"'z^VP@", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      linkedList0.add(objectOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('{');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      pipedWriter0.close();
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("format");
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      Charset.defaultCharset();
      cSVFormat0.withRecordSeparator("format");
      ByteBuffer.allocate(5339);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.print(stringWriter1);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVPrinter1;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9;>`/+WrQs+@-n(+Wb|");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('6');
      Character character0 = new Character('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset.defaultCharset();
      CharBuffer.wrap((CharSequence) "9;>`/+WrQs+@-n(+Wb|");
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!.>\"cLqJ");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9;>`/+WrQs+@-n(+Wb|");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('6');
      Character character0 = new Character('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset.defaultCharset();
      CharBuffer.wrap((CharSequence) "9;>`/+WrQs+@-n(+Wb|");
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "9;>`/+WrQs+@-n(+Wb|";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=gH,N 2_y!t5]YQ%4i");
      cSVFormat0.withCommentMarker('{');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf('A');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.withRecordSeparator("=gH,N 2_y!t5]YQ%4i");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter(86);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=gH,N 2_y!t5]YQ%4i");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('j');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf('A');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat2.withRecordSeparator("l?ENQR4<4;''seo?z7");
      cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter(36);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) cSVPrinter0;
      objectArray1[2] = (Object) null;
      Object object2 = new Object();
      objectArray1[3] = object2;
      objectArray1[4] = object1;
      objectArray1[5] = (Object) cSVFormat0;
      objectArray1[6] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!f_,>L");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('{');
      MockPrintStream mockPrintStream0 = new MockPrintStream("!f_,>L");
      mockPrintStream0.println("!f_,>L");
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('^');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[5] = (Object) linkedList0;
      objectArray0[6] = (Object) "!f_,>L";
      objectArray0[7] = (Object) linkedList0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!f_,>L");
      cSVFormat0.withCommentMarker('{');
      Character.valueOf('=');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!f_,>L");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('h');
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect('A');
      StringWriter stringWriter0 = new StringWriter(86);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.print("format");
      Object object0 = new Object();
      cSVPrinter0.printComment("format");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "format";
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) byteBuffer0;
      cSVPrinter0.printRecord(objectArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('h');
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect('A');
      StringWriter stringWriter0 = new StringWriter(86);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.print("format");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) byteBuffer0;
      objectArray0[2] = object0;
      objectArray0[2] = (Object) "format";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(object0);
      cSVPrinter0.printComment("format");
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!f_,>L");
      cSVFormat0.withCommentMarker('{');
      Character.valueOf('=');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!f_,>L");
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("The comment start character and the quoteChar cannot be the same ('");
      Charset.defaultCharset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("hBIOkt<GA/");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      linkedList0.add(objectOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVFormat2.withRecordSeparator('P');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.close();
      cSVPrinter1.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.getOut();
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      MockFile mockFile0 = new MockFile((File) null, ":AsQ");
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[3] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[6] = (Object) quoteMode0;
      objectArray0[0] = (Object) cSVFormat0;
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ServiceLoader<BatchUpdateException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.getOut();
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withNullString("!f_,>L");
      cSVFormat0.withCommentMarker('{');
      Character.valueOf('=');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!f_,>L");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-91);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 40, 65);
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>();
      hashSet0.add(byteArrayInputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) hashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.withQuote('.');
      MockPrintStream mockPrintStream0 = new MockPrintStream("ox<zQeqH6H[l,/~.i");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat1.withQuote((Character) null);
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printStream0);
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecord(objectArray0);
      mockPrintStream0.checkError();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withIgnoreEmptyLines();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('@');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat0.withCommentMarker('\u001D');
      MockFile mockFile0 = new MockFile((File) null, ":AsQ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[3] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[6] = (Object) quoteMode0;
      objectArray0[8] = (Object) cSVFormat2;
      cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.print(cSVFormat5);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = Character.valueOf('z');
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset.defaultCharset();
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat0.withIgnoreEmptyLines(true);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat6.print(charArrayWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(character0);
      cSVPrinter0.printComment("No quotes mode set but no escape character is set");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("The comment start character and the quoteChar cannot be the same ('");
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-42);
      MockPrintStream mockPrintStream0 = new MockPrintStream("hBIOkt<GA/");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      linkedList0.add(objectOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-42), (byte) (-42));
      cSVFormat2.withRecordSeparator('P');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.close();
      cSVPrinter1.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.getOut();
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.withNullString("7CAnO{KNV38nT~EW");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(':');
      Character character0 = Character.valueOf('A');
      Character.valueOf('W');
      cSVFormat2.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5339);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) "7CAnO{KNV38nT~EW");
      charArrayWriter0.append((CharSequence) charBuffer0);
      Object object0 = new Object();
      cSVFormat0.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer1);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedWriter0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("!f_,>L");
      cSVFormat0.withCommentMarker('{');
      Character character0 = Character.valueOf('A');
      Character character1 = Character.valueOf('=');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5339);
      charset0.decode(byteBuffer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!f_,>L");
      charArrayWriter0.append((CharSequence) charBuffer0);
      Object object0 = new Object();
      cSVFormat3.withRecordSeparator('^');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) character0;
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("format");
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('{');
      Character character0 = Character.valueOf('A');
      cSVFormat2.withEscape(character0);
      Charset.defaultCharset();
      cSVFormat3.withCommentMarker(character0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 5339);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('A');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      cSVPrinter0.print(cSVFormat4);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('.');
      MockPrintStream mockPrintStream0 = new MockPrintStream("ox<zQeqH6H[l,/~.i");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      cSVFormat1.print(printStream0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('c');
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat4 = cSVFormat2.withHeaderComments(objectArray1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat4);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter1.print((Object) null);
      CSVPrinter cSVPrinter2 = new CSVPrinter(pipedWriter0, cSVFormat3);
      StringReader stringReader0 = new StringReader("");
      try { 
        cSVPrinter2.print(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('?');
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("Escape=<");
      Charset.defaultCharset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("The comment start character and the quoteChar cannot be the same ('");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      linkedList0.add(objectOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>(3, 1.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1623), (-1623));
      hashSet0.add(byteArrayInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVFormat.newFormat('?');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) objectOutputStream0;
      objectArray0[1] = (Object) objectOutputStream0;
      objectArray0[2] = (Object) "format";
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) objectOutputStream0;
      objectArray0[8] = (Object) hashSet0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withNullString("!f_,>L");
      cSVFormat0.withCommentMarker('{');
      Character.valueOf('A');
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5339);
      charset0.decode(byteBuffer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!f_,>L");
      charArrayWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter0 = new StringWriter(5339);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('^');
      cSVFormat3.withRecordSeparator('&');
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withNullString("format");
      cSVFormat1.withCommentMarker('{');
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('{');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect('A');
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      StringWriter stringWriter0 = new StringWriter(86);
      stringWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.print("format");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) charset0;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) character0;
      objectArray1[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("format");
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('{');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QTL?Cv");
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5339);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charArrayWriter0.append((CharSequence) "format");
      StringWriter stringWriter0 = new StringWriter('{');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      byteArrayInputStream0.mark((byte)57);
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>();
      hashSet0.add(byteArrayInputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVFormat.newFormat('~');
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVPrinter cSVPrinter2 = cSVFormat3.print(charBuffer0);
      cSVPrinter2.flush();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      char char0 = '@';
      Character character0 = new Character('@');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat0.withCommentMarker('&');
      MockFile mockFile0 = new MockFile((File) null, ":AsQ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) quoteMode0;
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withIgnoreEmptyLines(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":AsQ", 1, 1);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat5);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("format");
      cSVFormat1.withCommentMarker('{');
      Character character0 = Character.valueOf('A');
      cSVFormat2.withEscape(character0);
      Charset.defaultCharset();
      ByteBuffer.allocate(5339);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(false);
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = '{';
      charArray0[4] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("hBIOkt<GA/");
      cSVFormat3.withNullString("The comment start character and the quoteChar cannot be the same ('");
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-42);
      MockPrintStream mockPrintStream0 = new MockPrintStream("hBIOkt<GA/");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      objectOutputStream0.writeInt((byte)91);
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      linkedList0.add(objectOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>((byte)91, 1.0F);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-42), (byte) (-42));
      hashSet0.add(byteArrayInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('?');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVPrinter1.flush();
      cSVPrinter1.getOut();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("hBIOkt<GA/");
      cSVFormat1.withNullString("?{nkDo");
      cSVFormat0.withCommentMarker('?');
      Character character0 = Character.valueOf('%');
      cSVFormat2.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(15);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charArrayWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter0 = new StringWriter(86);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
      cSVFormat4.withRecordSeparator('%');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) byteBuffer0;
      objectArray0[2] = (Object) "?{nkDo";
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat3;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      objectArray0[5] = (Object) "?{nkDo";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[6] = (Object) character0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat1.withCommentMarker(' ');
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) charBuffer1;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat3;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat2.withDelimiter(' ');
      cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat1.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVFormat1.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = new Character('@');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat0.withCommentMarker('&');
      MockFile mockFile0 = new MockFile((File) null, ":AsQ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) quoteMode0;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) cSVFormat2;
      cSVFormat3.withHeaderComments(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      mockFile0.toURL();
      cSVPrinter0.flush();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) ":AsQ";
      cSVFormat3.withRecordSeparator('@');
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) character0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.close();
      cSVPrinter0.printComment(":AsQ");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("hBIOkt<GA/");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("The comment start character and the quoteChar cannot be the same ('");
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-42);
      MockPrintStream mockPrintStream0 = new MockPrintStream("hBIOkt<GA/");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      linkedList0.add(objectOutputStream0);
      cSVFormat3.print(mockPrintStream0);
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>((byte)91, 1.0F);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-42), (byte) (-42));
      hashSet0.add(byteArrayInputStream0);
      cSVFormat4.withRecordSeparator('P');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) charset0;
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat4.print(mockPrintStream0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = Character.valueOf('z');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65);
      cSVFormat1.withSkipHeaderRecord();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter1);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      Vector<PipedWriter> vector0 = new Vector<PipedWriter>();
      LinkedHashSet<PipedWriter> linkedHashSet0 = new LinkedHashSet<PipedWriter>(vector0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("format");
      cSVFormat2.withCommentMarker('{');
      Character character0 = Character.valueOf('A');
      cSVFormat3.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5339);
      charset0.decode(byteBuffer0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "format");
      StringWriter stringWriter0 = new StringWriter(86);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Character character0 = new Character('A');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter(';');
      cSVFormat4.withCommentMarker((Character) null);
      cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat5.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter1.print(objectArray0[0]);
      cSVPrinter1.flush();
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = '%';
      charArray0[2] = '^';
      charArray0[3] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(' ');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) '<';
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      cSVPrinter0.close();
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('p');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      Object[] objectArray0 = new Object[0];
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('.');
      MockPrintStream mockPrintStream0 = new MockPrintStream("ox<zQeqH6H[l,/~.i");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      mockPrintStream0.printf("", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.printComment("ox<zQeqH6H[l,/~.i");
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~U+P^-<Xg@e,J-T=\"r");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "~U+P^-<Xg@e,J-T=\"r");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[4] = (Object) charArrayWriter1;
      objectArray0[2] = (Object) charArrayWriter1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) charArrayWriter1;
      objectArray0[5] = (Object) "~U+P^-<Xg@e,J-T=\"r";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
      cSVFormat1.withCommentMarker('~');
      Character.valueOf('{');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('A');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(5339);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      StringWriter stringWriter0 = new StringWriter(5339);
      stringWriter0.append((CharSequence) "format");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter1.flush();
      cSVPrinter1.print((Object) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charset0;
      Object object2 = new Object();
      objectArray0[1] = object2;
      Object object3 = new Object();
      objectArray0[2] = object3;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('{');
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("");
      Character.valueOf(',');
      Character character0 = new Character('A');
      cSVFormat0.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5339);
      Charset charset0 = Charset.defaultCharset();
      charset0.decode(byteBuffer0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "format");
      StringWriter stringWriter0 = new StringWriter(44);
      Object object0 = new Object();
      Character character1 = new Character('A');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat4);
      cSVFormat0.withRecordSeparator(',');
      Object[] objectArray0 = new Object[6];
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = Character.valueOf('z');
      cSVFormat2.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset.defaultCharset();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator("q");
      CSVPrinter cSVPrinter1 = cSVFormat6.print(charArrayWriter0);
      cSVPrinter1.println();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = new Character('@');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat0.withCommentMarker('&');
      MockFile mockFile0 = new MockFile((File) null, ":AsQ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) quoteMode0;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) cSVFormat2;
      cSVFormat3.withHeaderComments(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      mockFile0.toURL();
      cSVPrinter0.flush();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) ":AsQ";
      cSVFormat3.withRecordSeparator('@');
      objectArray1[1] = (Object) mockFile0;
      objectArray1[2] = (Object) character0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("hBIOkt<GA/");
      cSVFormat3.withNullString("The comment start character and the quoteChar cannot be the same ('");
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-42);
      MockPrintStream mockPrintStream0 = new MockPrintStream("hBIOkt<GA/");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      LinkedList<ObjectOutputStream> linkedList0 = new LinkedList<ObjectOutputStream>();
      linkedList0.add(objectOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>((byte)91, 1.0F);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-42), (byte) (-42));
      hashSet0.add(byteArrayInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('?');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVPrinter1.flush();
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.withNullString("format");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('{');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" IgnoreHeaderCase:ignored");
      cSVFormat3.withAllowMissingColumnNames(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      cSVFormat3.withIgnoreSurroundingSpaces();
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)114;
      mockPrintStream0.write(byteArray0, 282, (int) (byte)114);
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale1, " IgnoreHeaderCase:ignored", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printStream0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      cSVPrinter0.print(pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character.valueOf('n');
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(91);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charArrayWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.withQuote('.');
      MockPrintStream mockPrintStream0 = new MockPrintStream("ox<zQeqH6H[l,/~.i");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat1.withQuote((Character) null);
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printStream0);
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecord(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withIgnoreEmptyLines();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = '%';
      charArray0[2] = '^';
      charArray0[3] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('C');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockFile0;
      mockPrintWriter0.format(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      cSVFormat0.withHeaderComments(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printStream0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = '%';
      charArray0[2] = '^';
      charArray0[3] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = Character.valueOf('z');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter1);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter(2748);
      StringWriter stringWriter1 = stringWriter0.append('h');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("format");
      cSVFormat1.withCommentMarker('{');
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5339);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      StringWriter stringWriter0 = new StringWriter(86);
      stringWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.print("format");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) charset0;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) character0;
      objectArray1[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      objectArray0[3] = object1;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withCommentMarker('2');
      cSVFormat1.format(objectArray0);
      Character character0 = new Character('R');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) null);
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = new Character('@');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat0.withCommentMarker('&');
      MockFile mockFile0 = new MockFile((File) null, ":AsQ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) quoteMode0;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) cSVFormat2;
      cSVFormat3.withHeaderComments(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      mockFile0.toURL();
      cSVPrinter0.flush();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) ":AsQ";
      cSVFormat3.withRecordSeparator('@');
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) character0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.withNullString("format");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('{');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" IgnoreHeaderCase:ignored");
      cSVFormat3.withAllowMissingColumnNames(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)114;
      mockPrintStream0.write(byteArray0, 282, (int) (byte)114);
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale1, " IgnoreHeaderCase:ignored", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printStream0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("hBIOkt<GA/");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("The comment start character and the quoteChar cannot be the same ('");
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      cSVPrinter0.printComment("The comment start character and the quoteChar cannot be the same ('");
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('I');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('`');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "]27|R{5F`G9o^m*j~v";
      stringArray0[2] = "-E]!lY;_";
      cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      cSVFormat1.withIgnoreHeaderCase();
      MockFileWriter mockFileWriter0 = new MockFileWriter("q/U*!_VY}X8dMqvu", true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      HashSet<ByteArrayOutputStream> hashSet0 = new HashSet<ByteArrayOutputStream>();
      char char0 = '8';
      cSVFormat0.withDelimiter('8');
      int int0 = (-1212);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('k');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
