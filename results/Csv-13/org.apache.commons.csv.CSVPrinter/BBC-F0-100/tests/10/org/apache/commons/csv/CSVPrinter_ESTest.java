/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 03:14:37 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      objectArray0[4] = (Object) cSVFormat0;
      CharBuffer charBuffer0 = CharBuffer.allocate(92);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 92, 92);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      LinkedList<StringWriter> linkedList0 = new LinkedList<StringWriter>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[6];
      Stack<DataInputStream> stack0 = new Stack<DataInputStream>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      stack0.add(dataInputStream0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('h');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>((SortedSet<? extends SQLSyntaxErrorException>) treeSet0);
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Integer integer0 = new Integer(111);
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9A!jGx");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.withDelimiter('.');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat5);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'f';
      charArray0[2] = 'D';
      charArray0[3] = 'I';
      charArray0[4] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{hO^E`lw#p^@-X m";
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter$1";
      stringArray0[2] = "5w^,7fI}TC";
      stringArray0[3] = "a(PAh?x!wM1Z)UY3";
      stringArray0[4] = "Unexpected Quote value: ";
      String string0 = "5}u%wS Osi";
      stringArray0[5] = "5}u%wS Osi";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#F4SRq^");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = new Character('G');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[2] = (Object) "#F4SRq^";
      objectArray1[3] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVParser0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) charArrayWriter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AG o>lmBzz");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) charArrayWriter0;
      objectArray1[1] = (Object) "AG o>lmBzz";
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) "AG o>lmBzz";
      objectArray1[4] = (Object) "AG o>lmBzz";
      cSVPrinter0.printRecord(objectArray1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.withDelimiter('');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      String string0 = "rg.+pache.common.csv.CSVPrinter$1";
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~@/JHp|;");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<QJA^");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('z');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charArrayWriter1);
      charArrayWriter0.write("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 61);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1533);
      intArray0[1] = 61;
      intArray0[2] = 61;
      intArray0[3] = 61;
      intArray0[4] = 61;
      intArray0[5] = 61;
      intArray0[6] = 61;
      intArray0[7] = 61;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(batchUpdateException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      cSVFormat0.print(charArrayWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0>Loa+BnUJ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("The quoteChar character and the delimiter cannot be the same ('");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "org.apache.commons.csv.CSVPrinter$1");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat0.withDelimiter('8');
      Charset charset0 = Charset.forName("Default");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("f");
      cSVFormat0.withDelimiter('~');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "f");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('D');
      cSVFormat2.withNullString("hL,A\",V(DP.");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(110);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(byteArrayOutputStream0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) "Unexpected Quote value: ";
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.withDelimiter('');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("746Eo!ZplI8DgLd");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("rg.+pache.common.csv.CSVPrinter$1");
      try { 
        cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      StringWriter stringWriter0 = new StringWriter(90);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('p');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Character character0 = new Character('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockPrintWriter0;
      cSVPrinter1.printRecord(objectArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter2.printRecords((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_");
      cSVFormat0.withNullString("_");
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[6];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      StringWriter stringWriter0 = new StringWriter(90);
      cSVFormat2.print(stringWriter0);
      cSVFormat2.withSkipHeaderRecord(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      cSVFormat3.print(charArrayWriter0);
      Object[] objectArray0 = new Object[8];
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(bufferedWriter0);
      cSVPrinter1.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter(35);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "The comment start and the escape character cannot be the same ('");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "The comment start and the escape character cannot be the same ('", 35, 35);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter2);
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter1);
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) stringWriter2;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "&+";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("&+");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat1.withRecordSeparator('');
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(274);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('p');
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Stack<ObjectOutputStream> stack0 = new Stack<ObjectOutputStream>();
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>(stack0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.print(hashSet0);
      cSVFormat1.withSkipHeaderRecord(true);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLWarning sQLWarning0 = new SQLWarning();
      cSVFormat1.withAllowMissingColumnNames(true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" SkipHeaderRecord:", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(" SkipHeaderRecord:", "org.apache.commons.csv.CSVPrinter", sQLWarning0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      stack0.toArray(sQLTransientConnectionExceptionArray0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.println();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("xt\u0000S");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) sQLTransientConnectionException1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) hashSet0;
      objectArray0[6] = (Object) sQLTransientConnectionExceptionArray0[0];
      objectArray0[7] = (Object) hashSet0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The comment start and the escape character cannot be the same ('", 25, 25);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "The comment start and the escape character cannot be the same ('";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) "The comment start and the escape character cannot be the same ('";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withCommentMarker('[');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(9);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("&+");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('}');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.csv.CSVPrinter$1");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('[');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("7IzH_fayBQl");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Character character0 = new Character('c');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat4.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat7 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat6.print(charArrayWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("HVJl&1IJA=R0HU7?Z<");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('}');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.csv.CSVPrinter$1");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      File file0 = MockFile.createTempFile("5!FJ@", "5!FJ@");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      String string0 = "string";
      String string1 = "";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i:t\u0006e3Znv7A";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('n');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.printComment("i:t\u0006e3Znv7A");
      cSVPrinter1.printRecord((Object[]) stringArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}fL_yYJ1");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      cSVPrinter1.print(dataInputStream0);
      cSVPrinter1.printRecord((Object[]) stringArray0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("HVJl&1IJA=R0HU7?Z<");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "jeUwprE#");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "jeUwprE#");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('I');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      String string0 = "7!XpO\"Y/";
      try { 
        cSVPrinter0.printComment("7!XpO\"Y/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('[');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(10);
      String string0 = null;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      StringWriter stringWriter0 = new StringWriter(90);
      cSVFormat2.print(stringWriter0);
      cSVFormat2.withSkipHeaderRecord(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      cSVFormat3.print(charArrayWriter0);
      Object[] objectArray0 = new Object[8];
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(bufferedWriter0);
      cSVPrinter1.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile("HVJl&1IJA=R0HU7?Z<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('n');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat0.withNullString("The comment start and the escape character cannot be the same ('");
      cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(1237);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('X');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter1);
      Object object0 = new Object();
      cSVPrinter0.println();
      cSVPrinter0.printComment("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) charArrayWriter1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) charArrayWriter1;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(14);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = new Character('~');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      cSVFormat2.withQuote('O');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator("The comment start and the escape character cannot be the same ('");
      cSVFormat2.withNullString("");
      cSVFormat4.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charBuffer0);
      cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter1 = cSVFormat6.print(charArrayWriter0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter1.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(charBuffer0);
      cSVPrinter2.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('[');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(10);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object object0 = new Object();
      cSVPrinter0.println();
      cSVPrinter0.printComment("Unexpected Quote value: ");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[2];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');
      cSVFormat0.withCommentMarker('M');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withSkipHeaderRecord(false);
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 2851);
      BufferedWriter bufferedWriter1 = new BufferedWriter(bufferedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter1, cSVFormat0);
      cSVPrinter0.close();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) bufferedWriter1;
      objectArray0[1] = (Object) bufferedWriter1;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');
      cSVFormat0.withNullString("q;r");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter1.printComment((String) null);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[7];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);
      StringWriter stringWriter0 = new StringWriter(4);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[6];
      cSVPrinter0.flush();
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('H');
      Character character0 = Character.valueOf('p');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      StringWriter stringWriter0 = new StringWriter(4);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(274);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('p');
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Stack<ObjectOutputStream> stack0 = new Stack<ObjectOutputStream>();
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>(stack0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.print(hashSet0);
      cSVFormat1.withSkipHeaderRecord(true);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLWarning sQLWarning0 = new SQLWarning();
      cSVFormat1.withAllowMissingColumnNames(true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" SkipHeaderRecord:", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(" SkipHeaderRecord:", "org.apache.commons.csv.CSVPrinter", sQLWarning0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      stack0.toArray(sQLTransientConnectionExceptionArray0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.print(cSVFormat1);
      Set<String> set0 = charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter");
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) set0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.toString();
      cSVFormat2.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharBuffer.allocate(2106);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat6.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) null;
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharBuffer.allocate(2106);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat6.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat5;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.printComment("");
      cSVPrinter1.printRecord(objectArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Float float0 = new Float((float) 2106);
      cSVPrinter1.print(float0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFile mockFile0 = new MockFile("HVJl&1IJA=R0HU7?Z<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "HVJl&1IJA=R0HU7?Z<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "HVJl&1IJA=R0HU7?Z<";
      objectArray0[1] = (Object) mockFile0;
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat0);
      Stack<ObjectOutputStream> stack0 = new Stack<ObjectOutputStream>();
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>(stack0);
      cSVPrinter0.flush();
      cSVPrinter1.printRecord((Iterable<?>) stack0);
      cSVPrinter1.print(printStream0);
      cSVPrinter0.printComment("HVJl&1IJA=R0HU7?Z<");
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) mockPrintStream0;
      objectArray1[1] = (Object) hashSet0;
      objectArray1[2] = (Object) cSVPrinter1;
      objectArray1[3] = (Object) cSVPrinter0;
      objectArray1[4] = (Object) mockPrintStream0;
      objectArray1[5] = (Object) resultSet0;
      objectArray1[6] = (Object) printStream0;
      cSVPrinter1.printRecords(objectArray1);
      cSVPrinter0.printComment("HVJl&1IJA=R0HU7?Z<");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "HVJl&1IJA=R0HU7?Z<";
      MockFile mockFile0 = new MockFile("HVJl&1IJA=R0HU7?Z<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "HVJl&1IJA=R0HU7?Z<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      doReturn(true, true, true, true, true).when(resultSet1).next();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) "HVJl&1IJA=R0HU7?Z<";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) printStream0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockFile0;
      objectArray0[8] = (Object) resultSet1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(resultSet1);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) string0;
      objectArray1[1] = (Object) mockFile0;
      objectArray1[2] = (Object) string0;
      objectArray1[3] = (Object) resultSet0;
      int int0 = 35;
      rowSetMetaDataImpl0.getColumnTypeName(int0);
      String string1 = " SurroundingSpaces:ignored";
      mockPrintStream0.println(string1);
      objectArray1[4] = (Object) cSVFormat0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int int1 = 468;
      StringWriter stringWriter0 = new StringWriter(int1);
      stringWriter0.flush();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      cSVFormat0.print(bufferedWriter0);
      cSVPrinter0.printComment(string1);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2106);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(27);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.printRecord((Iterable<?>) linkedHashSet0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      int[] intArray0 = new int[7];
      intArray0[0] = 27;
      intArray0[1] = 27;
      intArray0[2] = 27;
      intArray0[3] = 27;
      intArray0[4] = 2106;
      intArray0[5] = 2106;
      intArray0[6] = 34;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("%!CKLw", "out");
      DataTruncation dataTruncation0 = new DataTruncation(122, false, false, (-1926), 2106, sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("i[`q@A*vWC", "6Zf73", intArray0, dataTruncation0);
      cSVPrinter1.print(batchUpdateException0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) batchUpdateException0;
      objectArray0[1] = (Object) dataInputStream0;
      objectArray0[2] = (Object) sQLNonTransientException0;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile("HVJl&1IJA=R0HU7?Z<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "HVJl&1IJA=R0HU7?Z<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "HVJl&1IJA=R0HU7?Z<";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "HVJl&1IJA=R0HU7?Z<";
      objectArray0[3] = (Object) resultSet0;
      mockPrintStream0.println(" SurroundingSpaces:ignored");
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockFile0;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl1).when(resultSet1).getMetaData();
      cSVFormat0.withHeader(resultSet1);
      Stack<DataInputStream> stack0 = new Stack<DataInputStream>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-91);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      stack0.add(dataInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i:t\u0006e3Znv7A";
      stringArray0[1] = "}2p!:{/Dg\"{rV%)n";
      stringArray0[2] = ".}P52m~U0zJ";
      stringArray0[3] = "org.apache.commons.csv.CSVRecord";
      stringArray0[4] = "Unexpected Quote value: ";
      stringArray0[5] = "[3{Upmb";
      stringArray0[4] = "format";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(".}P52m~U0zJ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVRecord");
      cSVPrinter0.printRecord((Object[]) stringArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("HVJl&1IJA=R0HU7?Z<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "HVJl&1IJA=R0HU7?Z<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "HVJl&1IJA=R0HU7?Z<";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "HVJl&1IJA=R0HU7?Z<";
      mockPrintStream0.println(" SurroundingSpaces:ignored");
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockFile0;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      Stack<DataInputStream> stack0 = new Stack<DataInputStream>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-91);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      stack0.add(dataInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('-');
      Character character0 = Character.valueOf('-');
      cSVFormat2.withQuote(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Stack<Byte> stack0 = new Stack<Byte>();
      ArrayDeque<Byte> arrayDeque0 = new ArrayDeque<Byte>(stack0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) stack0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) stack0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2106);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.printComment("i[`q@A*vWC");
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("i[`q@A*vWC");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharBuffer.allocate(2106);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat6.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) null;
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(274);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('p');
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Stack<ObjectOutputStream> stack0 = new Stack<ObjectOutputStream>();
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>(stack0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.print(hashSet0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      charArray0[6] = '#';
      CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) charset0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charBuffer1;
      objectArray0[4] = (Object) "Delimiter=<\t> QuoteChar=<p> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) byteBuffer0;
      objectArray0[7] = (Object) byteBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2058);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      int int0 = 0;
      charArrayWriter0.write(0);
      cSVFormat0.withQuote('$');
      cSVPrinter0.printComment("org.apache.commons.csv.CSVParser");
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFile mockFile0 = new MockFile("HVJl&1IJA=R0HU7?Z<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "HVJl&1IJA=R0HU7?Z<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "HVJl&1IJA=R0HU7?Z<";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "HVJl&1IJA=R0HU7?Z<";
      objectArray0[3] = (Object) resultSet0;
      mockPrintStream0.println(" SurroundingSpaces:ignored");
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockFile0;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl1).when(resultSet1).getMetaData();
      cSVFormat0.withHeader(resultSet1);
      Stack<DataInputStream> stack0 = new Stack<DataInputStream>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(bufferedWriter0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "HVJl&1IJA=R0HU7?Z<";
      MockFile mockFile0 = new MockFile("HVJl&1IJA=R0HU7?Z<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "HVJl&1IJA=R0HU7?Z<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) resultSet0;
      String string1 = " SurroundingSpaces:ignored";
      mockPrintStream0.println(string1);
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockFile0;
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      cSVFormat0.withHeader(resultSet1);
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) resultSet0;
      objectArray0[8] = (Object) resultSet0;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet2).getMetaData();
      doReturn(false).when(resultSet2).next();
      cSVPrinter0.printRecords(resultSet2);
      int int0 = 502;
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>(int0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.close();
      cSVPrinter0.print(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2058);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      int int0 = 0;
      charArrayWriter0.write(0);
      cSVFormat0.withQuote('$');
      cSVPrinter0.printComment(".%IP=E*@}kgtqK");
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      TreeSet<PipedInputStream> treeSet0 = new TreeSet<PipedInputStream>();
      TreeSet<PipedInputStream> treeSet1 = new TreeSet<PipedInputStream>((SortedSet<PipedInputStream>) treeSet0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(274);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('p');
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Stack<ObjectOutputStream> stack0 = new Stack<ObjectOutputStream>();
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>(stack0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.print(hashSet0);
      cSVFormat1.withSkipHeaderRecord(true);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLWarning sQLWarning0 = new SQLWarning();
      cSVFormat1.withAllowMissingColumnNames(true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" SkipHeaderRecord:", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(" SkipHeaderRecord:", "org.apache.commons.csv.CSVPrinter", sQLWarning0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      stack0.toArray(sQLTransientConnectionExceptionArray0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.print(cSVFormat1);
      charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "HVJl&1IJA=R0HU7?Z<";
      MockFile mockFile0 = new MockFile("HVJl&1IJA=R0HU7?Z<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "HVJl&1IJA=R0HU7?Z<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.close();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printComment("out");
      cSVPrinter0.printComment("8#");
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "HVJl&1IJA=R0HU7?Z<";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "HVJl&1IJA=R0HU7?Z<";
      objectArray0[3] = (Object) resultSet0;
      mockPrintStream0.println(" SurroundingSpaces:ignored");
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockFile0;
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat0.withHeader(resultSet1);
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) resultSet0;
      objectArray0[8] = (Object) resultSet0;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet2).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", sQLSyntaxErrorException0);
      Stack<ObjectOutputStream> stack0 = new Stack<ObjectOutputStream>();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLSyntaxErrorException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException0;
      stack0.toArray(sQLTransientConnectionExceptionArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(bufferedWriter0);
      cSVPrinter0.printRecord((Iterable<?>) sQLTransientConnectionException1);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2106);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      ArrayDeque<SQLClientInfoException> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "HVJl&1IJA=R0HU7?Z<";
      MockFile mockFile0 = new MockFile("HVJl&1IJA=R0HU7?Z<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "HVJl&1IJA=R0HU7?Z<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'Y';
      charArray0[2] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 13, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i:t\u0006e3Znv7A";
      stringArray0[1] = "}2p!:{/Dg\"{rV%)n";
      stringArray0[2] = ".}P52m~U0zJ";
      stringArray0[3] = "org.apache.commons.csv.CSVRecord";
      stringArray0[4] = "Unexpected Quote value: ";
      stringArray0[5] = "[3{Upmb";
      stringArray0[6] = "format";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('M');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("4s`Dm)kHTIub");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVRecord");
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "format";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("format");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      mockPrintWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('*');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      mockPrintWriter0.flush();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('z');
      Character character0 = Character.valueOf('z');
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('z')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(bufferedWriter0);
      cSVPrinter0.printComment((String) null);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(274);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('p');
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Stack<ObjectOutputStream> stack0 = new Stack<ObjectOutputStream>();
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>(stack0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.print(hashSet0);
      cSVFormat1.withSkipHeaderRecord(true);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLWarning sQLWarning0 = new SQLWarning();
      cSVFormat1.withAllowMissingColumnNames(true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" SkipHeaderRecord:", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(" SkipHeaderRecord:", "org.apache.commons.csv.CSVPrinter", sQLWarning0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray1 = stack0.toArray(sQLTransientConnectionExceptionArray0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.print(cSVFormat1);
      charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord((Object[]) sQLTransientConnectionExceptionArray1);
      assertEquals(135, charBuffer1.remaining());
      assertEquals(139, charBuffer1.position());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat2);
      cSVPrinter0.close();
  }
}
