/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 16:00:00 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r&mB\n");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('D');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\rn");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('J');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('R');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ALL");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.printComment("MINIMAL");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('X');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character0 = new Character('%');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('X');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withCommentMarker('B');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("\r\n");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('G');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withEscape('p');
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter$1";
      stringArray0[2] = "No header mapping was specified, the record values can't be accessed by name";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('r');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter$1";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('r');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z'<k/_n&c2d;3$<Z#");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("`.pcePL");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|?FG]{T][C*.");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|?FG]{T][C*.");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z'<k/_n&c2d;3$<Z#");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Z'<k/_n&c2d;3$<Z#";
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) "Unexpected Quote value: ";
      objectArray0[5] = (Object) "Unexpected Quote value: ";
      objectArray0[6] = objectArray0[5];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(M{mHy:");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(M{mHy:");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.print((Object) null);
      HashSet<BufferedWriter> hashSet0 = new HashSet<BufferedWriter>();
      cSVPrinter1.printRecords((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<I_n&B_2P;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5(/xKd+WI#so8Dk9");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = null;
      objectArray0[1] = (Object) "ZY<I_n&B_2P;3$<#";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('M');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      char char0 = '9';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<i_&_DP M5;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ZY<i_&_DP M5;3$<#");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print("ZY<i_&_DP M5;3$<#");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
      cSVFormat1.withNullString((String) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.CSVFormat@0000000000000000001");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("Index for header '%s' is %d but CSVRecord only has %d values!");
      CharBuffer charBuffer0 = CharBuffer.allocate(103);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 103, 103);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Double double0 = new Double((-2150.03369804735));
      // Undeclared exception!
      try { 
        cSVPrinter0.print(double0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.withQuote((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = null;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object0 = new Object();
      charBuffer0.asReadOnlyBuffer();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter1.printRecords(objectArray0);
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Byte byte0 = new Byte((byte)80);
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('M');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[1];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("G'jM!}1h# A2 O");
      ArrayDeque<Console> arrayDeque0 = new ArrayDeque<Console>();
      ArrayDeque<Console> arrayDeque1 = arrayDeque0.clone();
      ArrayDeque<Console> arrayDeque2 = arrayDeque1.clone();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('>');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat2.print(charArrayWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("EORECORD");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      String string0 = "Do]l8Zi";
      String string1 = "?I5-{Ui78DVh|Z1A[";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("?I5-{Ui78DVh|Z1A[", "?I5-{Ui78DVh|Z1A[", (-711));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("out", "(", 57, sQLNonTransientConnectionException0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ERECORD");
      Vector<SQLException> vector0 = new Vector<SQLException>();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('u');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.printComment("");
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) "ERECORD";
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('X');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.withRecordSeparator("D-$9&y2&");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment(") ivali\" char betweUn encapsulated token and delimiter");
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('M');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected Quote value: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter0.getOut();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<I_n&_2P;3$<&#");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('8');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "ZY<I_n&_2P;3$<&#";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) character0;
      cSVFormat2.withHeaderComments(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("N<VwGs3;d");
      cSVPrinter0.printComment("ZY<I_n&_2P;3$<&#");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('M');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat.newFormat('r');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat2;
      cSVFormat0.withHeaderComments(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.withIgnoreHeaderCase();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("suBv`B#VELR ^2.[e");
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+", (String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat1.withNullString((String) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "+");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EORECORD");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3Z1{q$&Vllqwa7;Hnu");
      cSVFormat1.format(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("3Z1{q$&Vllqwa7;Hnu\t3Z1{q$&Vllqwa7;Hnu\t3Z1{q$&Vllqwa7;Hnu\t3Z1{q$&Vllqwa7;Hnu\t3Z1{q$&Vllqwa7;Hnu\t3Z1{q$&Vllqwa7;Hnu");
      PrintStream printStream0 = mockPrintStream0.append('z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("reader", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("out");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\\');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("reader");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      objectArray0[0] = (Object) "reader";
      objectArray0[1] = (Object) "out";
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.allocate(54);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":wz(Bn$c`cD7nxQ%S2");
      // Undeclared exception!
      try { 
        cSVPrinter0.print(mockFileOutputStream0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<I_n&_2P;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "ZY<I_\\&_DP;3$<#";
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char char0 = '{';
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('{');
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("7iT", "");
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 39, intArray0, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", (-84), batchUpdateException0);
      sQLNonTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "wX.=^Z", 30, batchUpdateException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      String string0 = "";
      try { 
        cSVPrinter0.print(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<I_n&_2P;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "ZY<I_n&_2P;3$<#";
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) stack0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter1.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("out", "");
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Do]l8Zi", "E", 0, intArray0, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0, batchUpdateException0);
      sQLNonTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Do]l8Zi", 0, sQLNonTransientConnectionException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat0.withCommentMarker('Q');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Do]l8Zi";
      objectArray0[1] = (Object) "";
      Object object3 = new Object();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter1.print(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<I_n&_2P;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = 'i';
      charArray0[2] = ')';
      charArray0[3] = '\'';
      charArray0[4] = 'u';
      charArray0[5] = 'r';
      charArray0[6] = '?';
      charArray0[7] = '+';
      charArray0[8] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 1);
      stack0.add((SQLException) dataTruncation0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      cSVPrinter0.print(dataInputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stack0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) sequenceInputStream0;
      objectArray0[4] = (Object) stack0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) sQLRecoverableException0;
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<I_&_DP;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = new Character('.');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      String string0 = "";
      String string1 = "Do]l8Zi";
      String string2 = "out";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Do]l8Zi", "out", 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Do]l8Zi", "", 0, intArray0, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0, batchUpdateException0);
      sQLTransientConnectionException0.setNextException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Do]l8Zi", 0, sQLNonTransientConnectionException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      Object object0 = new Object();
      char char0 = '2';
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(char0);
      Object object1 = new Object();
      Object object2 = new Object();
      char char1 = 'Q';
      cSVFormat0.withCommentMarker(char1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) string1;
      objectArray0[1] = (Object) string0;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) string2;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat1.toString();
      Object object3 = new Object();
      objectArray0[5] = object3;
      cSVFormat1.format(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) quoteMode0;
      objectArray0[6] = (Object) stringWriter0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('`');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(stringWriter0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.printRecord((Iterable<?>) stack0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVPrinter1;
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) resultSet0;
      objectArray1[4] = (Object) cSVPrinter0;
      objectArray1[5] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray1[7] = object0;
      cSVFormat1.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = new Character('9');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('I');
      CSVFormat cSVFormat6 = cSVFormat5.withQuoteMode(quoteMode0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat6);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) quoteMode0;
      objectArray0[6] = (Object) stringWriter0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('`');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(stringWriter0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.printRecord((Iterable<?>) stack0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVPrinter1;
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) resultSet0;
      objectArray1[4] = (Object) cSVPrinter0;
      objectArray1[5] = (Object) cSVPrinter0;
      objectArray1[6] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray1[7] = object0;
      cSVFormat1.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Do]l8Zi", "out", 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Do]l8Zi", "", 0, intArray0, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0, batchUpdateException0);
      sQLNonTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Do]l8Zi", 0, sQLNonTransientConnectionException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat0.withCommentMarker('Q');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Do]l8Zi";
      objectArray0[1] = (Object) "";
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "out";
      objectArray0[4] = (Object) cSVFormat1;
      Object object3 = new Object();
      objectArray0[5] = object3;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)108;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) (byte)21;
      objectArray0[2] = (Object) charset0;
      objectArray0[3] = (Object) (byte)21;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter(0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer1);
      CharBuffer charBuffer2 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer2, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) stack0;
      objectArray0[3] = (Object) stack0;
      objectArray0[4] = (Object) byteBuffer0;
      objectArray0[5] = (Object) byteBuffer0;
      objectArray0[6] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZY<&_DP;3$<#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<&_DP;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ZY<&_DP;3$<#");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("6;fO(U5a", "ZY<&_DP;3$<#", (-262));
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("reader", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("out");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\\');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("reader");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      objectArray0[0] = (Object) "reader";
      objectArray0[1] = (Object) "out";
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1252);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '+';
      charArray0[2] = 'b';
      stringWriter0.write(charArray0);
      cSVFormat0.withNullString("dY");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      cSVPrinter0.print(sQLClientInfoException0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat1.withNullString("");
      int int0 = 1408;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 2438, 1408);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('j');
      StringWriter stringWriter0 = new StringWriter(39);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      PriorityQueue<SQLWarning> priorityQueue1 = new PriorityQueue<SQLWarning>(priorityQueue0);
      stringWriter0.close();
      stringWriter0.flush();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("g#b>Y*j55e)SV", "CommentStart=<", 5914);
      DataTruncation dataTruncation0 = new DataTruncation(39, false, true, 5914, 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      priorityQueue0.add(dataTruncation0);
      SQLWarning sQLWarning0 = new SQLWarning("format", "format", 39, sQLInvalidAuthorizationSpecException0);
      priorityQueue1.add(sQLWarning0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.printComment("g#b>Y*j55e)SV");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('B');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVPrinter0;
      Object object3 = new Object();
      objectArray0[6] = object3;
      cSVPrinter1.printRecords(objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat2;
      objectArray1[1] = (Object) cSVFormat1;
      cSVPrinter1.printRecords(objectArray1);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withEscape('I');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tp!o~v");
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      mockPrintStream0.print(26);
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('l');
      CSVFormat cSVFormat5 = cSVFormat3.withQuote('9');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      HashSet<MockPrintWriter> hashSet0 = new HashSet<MockPrintWriter>(1321);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) resultSet0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) resultSetMetaData0;
      cSVPrinter0.printRecord(objectArray0);
      hashSet0.add(mockPrintWriter0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      Object object0 = new Object();
      CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('9');
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray1[2] = object1;
      objectArray1[3] = (Object) stringWriter0;
      objectArray1[4] = (Object) cSVFormat6;
      Object object2 = new Object();
      objectArray1[5] = object2;
      cSVFormat6.format(objectArray1);
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<&_DP;3$<#");
      StringWriter stringWriter0 = new StringWriter(103);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      LinkedHashSet<MockFileOutputStream> linkedHashSet0 = new LinkedHashSet<MockFileOutputStream>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("format");
      linkedHashSet0.add(mockFileOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.println();
      cSVFormat0.print(stringWriter0);
      cSVPrinter0.getOut();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tp!o~v");
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('l');
      cSVFormat2.withQuote('9');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('9');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat4;
      Object object2 = new Object();
      objectArray0[5] = object2;
      cSVFormat4.format(objectArray0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      doReturn(false).when(resultSet1).next();
      cSVPrinter0.printRecords(resultSet1);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.csv.CSVFormat@00000000019org.apache.commons.csv.CSVFormat@00000000079ljava.llang.Object@0000000008l9ljava.io.StringWriter@0000000009l9org.apache.commons.csv.CSVFormat@00000000059ljava.llang.Object@0000000010l");
      cSVPrinter0.print(object2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gDj");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      StringWriter stringWriter0 = new StringWriter(90);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      stringWriter0.write(90);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "gDj";
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'U';
      intArray0[1] = (int) 'U';
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("gDj", "gDj", 90, intArray0, sQLNonTransientConnectionException0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      priorityQueue0.add(batchUpdateException0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printComment("')");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) stringBuffer0, 0, 0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<p6k9");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<p6k9");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z1;jB=X[[");
      MockPrintStream mockPrintStream0 = new MockPrintStream("NullString=<");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      mockPrintStream0.print(1321);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('l');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('9');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) resultSet1;
      HashSet<MockPrintWriter> hashSet0 = new HashSet<MockPrintWriter>(1321);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "NullString=<";
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat3;
      cSVFormat4.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('D');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(cSVPrinter0);
      cSVPrinter0.printComment("D7hGSc");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@z");
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)102;
      byteArray0[2] = (byte) (-2);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-36);
      byteArray0[3] = (byte)17;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printComment("");
      Object object0 = new Object();
      cSVPrinter0.print("@z");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter1.print(object0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) quoteMode0;
      Stack<SQLException> stack0 = new Stack<SQLException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      stack0.add((SQLException) sQLRecoverableException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.format(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(24);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gDj");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      StringWriter stringWriter0 = new StringWriter(90);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '`';
      stringWriter0.write(90);
      mockPrintWriter0.println(charArray0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      ArrayDeque<DataOutputStream> arrayDeque0 = new ArrayDeque<DataOutputStream>();
      ArrayDeque<DataOutputStream> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter1.print(arrayDeque1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVPrinter1;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter1.printComment("-/f<t~XNAr{M7%L");
      cSVPrinter1.getOut();
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      assertEquals("\r\n", stringWriter0.toString());
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.printComment("MINIMAL");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":A:V` G?=FpF5e00z");
      Vector<SQLException> vector0 = new Vector<SQLException>();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>(2716, comparator0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter");
      cSVPrinter0.printComment("cs!");
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<&_DP;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character character0 = Character.valueOf('R');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      cSVFormat2.withRecordSeparator('R');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      objectArray0[6] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(rowSetMetaDataImpl0);
      Object[] objectArray1 = new Object[1];
      cSVPrinter0.printRecord(objectArray1);
      HashSet<Byte> hashSet0 = null;
      try {
        hashSet0 = new HashSet<Byte>((-3933), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3933
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<&_DP;3$<#");
      StringWriter stringWriter0 = new StringWriter(103);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      LinkedHashSet<MockFileOutputStream> linkedHashSet0 = new LinkedHashSet<MockFileOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.println();
      cSVPrinter0.print((Object) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      PriorityQueue<BatchUpdateException> priorityQueue1 = new PriorityQueue<BatchUpdateException>(priorityQueue0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 21;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "MySQL", 21, intArray0, (Throwable) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      priorityQueue1.add(batchUpdateException0);
      cSVPrinter0.printRecord((Iterable<?>) batchUpdateException0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<&_DP;3$<#");
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(", mapping=");
      cSVFormat2.withSkipHeaderRecord(true);
      Character character1 = new Character('?');
      cSVFormat1.withEscape(character1);
      cSVFormat0.withRecordSeparator('-');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('?');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      PriorityQueue<BatchUpdateException> priorityQueue1 = new PriorityQueue<BatchUpdateException>(priorityQueue0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 21;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "MySQL", 21, intArray0, (Throwable) null);
      priorityQueue1.add(batchUpdateException0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("1AZ`T/y");
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<&_DP;3$<#");
      StringWriter stringWriter0 = new StringWriter(103);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) vector0;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('U');
      cSVFormat0.withRecordSeparator("'}Stat2N8?");
      MockPrintStream mockPrintStream0 = new MockPrintStream("M<@#N\u0007&==5");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(objectOutputStream0, true);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter1, cSVFormat1);
      cSVPrinter0.close();
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~DN8Gk", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "~DN8Gk");
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0, 25);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('(');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gDj");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      StringWriter stringWriter0 = new StringWriter(122);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      mockPrintWriter0.append((CharSequence) "gDj");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printComment("gDj");
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) vector0;
      objectArray0[2] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<&_DP;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.flush();
      StringWriter stringWriter0 = new StringWriter(7);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      cSVPrinter1.printRecord((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character character0 = new Character('q');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Vector<BufferedReader> vector0 = new Vector<BufferedReader>(2667, 2667);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter1.printRecord((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) vector0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      cSVFormat0.print(stringWriter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("c9e@+");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "c9e@+", objectArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) byteArrayOutputStream0;
      objectArray1[2] = (Object) byteArrayOutputStream0;
      objectArray1[3] = (Object) cSVFormat0;
      objectArray1[4] = (Object) printStream0;
      objectArray1[5] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray1[6] = object0;
      PrintStream printStream1 = mockPrintStream1.printf("c9e@+", objectArray1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream1, false);
      Character character0 = new Character('L');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('%');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("a/-F.Hoa7");
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<&_DP;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      mockPrintWriter0.print(0.0F);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZY<\\&_DP;3$<#");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      objectArray0[4] = (Object) "ZY<&_DP;3$<#";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[7] = object2;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) rowSetMetaDataImpl0;
      objectArray1[1] = (Object) rowSetMetaDataImpl0;
      objectArray1[2] = object0;
      objectArray1[3] = (Object) cSVFormat1;
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[5] = object1;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gDj");
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('`', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('`', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('`', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      
      Character character0 = Character.valueOf('$');
      assertNotNull(character0);
      assertEquals('$', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('`', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('`', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('`', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('$', (char)cSVFormat2.getCommentMarker());
      assertNull(cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(false);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('`', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('`', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals('`', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      
      Character character1 = new Character('s');
      assertNotNull(character1);
      assertEquals('s', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      CSVFormat cSVFormat4 = cSVFormat1.withEscape(character1);
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(character1.equals((Object)character0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('`', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('`', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertEquals('`', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertEquals('s', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('*');
      assertNotNull(cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('`', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('`', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals('`', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('`', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertEquals("*", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat5);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('`', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('`', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals('`', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('`', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertEquals("*", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('`', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('`', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals('`', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('`', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertEquals("*", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      
      cSVPrinter0.print(character1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('`', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('`', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals('`', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('`', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertEquals("*", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('`', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('`', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertEquals('`', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('`', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertEquals("*", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      
      HashSet<Byte> hashSet0 = null;
      try {
        hashSet0 = new HashSet<Byte>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZY<&_DP;3$<#");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "ZY<&_DP;3$<#";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[7] = object2;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) rowSetMetaDataImpl0;
      objectArray1[1] = (Object) rowSetMetaDataImpl0;
      objectArray1[2] = object0;
      objectArray1[3] = (Object) cSVFormat2;
      objectArray1[4] = (Object) cSVFormat0;
      objectArray1[5] = object1;
      cSVPrinter0.printRecords(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1954);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charArrayWriter0;
      cSVFormat1.withIgnoreEmptyLines();
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("`sTTaI", "D'ADXD~q");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // D'ADXD~q
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
