* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-10
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 9882
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-13/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 971
* Using seed 1230697048
* Starting evolution
bbc usage percentage is: 10%
* Initial Number of Goals in DynaMOSA = 190 / 971
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:27:07.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:27:11.625 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:29:09.568 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:32:46.369 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.BufferedWriter due to org.evosuite.ga.ConstructionFailedException: Have no generator for class java.io.Console canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 22:35:12.661 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.ObjectInputStream due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.PushbackInputStream due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.PipedInputStream due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.PipedOutputStream due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.PipedInputStream due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 22:35:47.470 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.io.LineNumberReader due to org.evosuite.ga.ConstructionFailedException: Have no generator for class java.io.Console canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 22:36:31.673 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
[MASTER] 22:36:59.422 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 601s and 1326 generations, 696528 statements, best individual has fitness: 117.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 164
* Number of covered goals: 159
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 137
* Number of covered goals: 126
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 507
* Number of covered goals: 458
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 137
* Number of covered goals: 120
* Generated 69 tests with total length 430
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:38:38.729 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.901% of time used, but only 12/69 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 22:38:54.089 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:38:54.285 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:38:54.411 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:38:54.415 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_71_tmp__ESTest.test0(CSVPrinter_71_tmp__ESTest.java:28)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:38:54.416 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.TDF;
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);

[MASTER] 22:38:57.889 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:38:58.106 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:38:58.428 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_76_tmp__ESTest.test0(CSVPrinter_76_tmp__ESTest.java:26)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:38:58.428 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
cSVPrinter0.flush();

[MASTER] 22:39:02.270 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_80_tmp__ESTest.test0(CSVPrinter_80_tmp__ESTest.java:31)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:02.271 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
rowSetMetaDataImpl0.setColumnCount(1231);
ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
doReturn(true, false).when(resultSet0).next();
cSVPrinter0.printRecords(resultSet0);

[MASTER] 22:39:09.436 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_97_tmp__ESTest.test0(CSVPrinter_97_tmp__ESTest.java:52)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:09.437 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals('K', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(bufferedOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
assertNotNull(mockPrintStream0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals('K', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
assertNotNull(rowSetMetaDataImpl0);

ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
doReturn(false).when(resultSet0).next();
cSVPrinter0.printRecords(resultSet0);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals('K', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(fileDescriptor0.valid());


[MASTER] 22:39:12.787 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_99_tmp__ESTest.test0(CSVPrinter_99_tmp__ESTest.java:85)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:12.788 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNotNull(cSVFormat0);

CSVFormat cSVFormat1 = cSVFormat0.withNullString("Kg]r[*Y=_!-!h#BF");
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getEscapeCharacter());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertNull(cSVFormat1.getQuoteMode());
assertEquals("Kg]r[*Y=_!-!h#BF", cSVFormat1.getNullString());
assertTrue(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertNotNull(cSVFormat1);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getEscapeCharacter());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertNull(cSVFormat1.getQuoteMode());
assertEquals("Kg]r[*Y=_!-!h#BF", cSVFormat1.getNullString());
assertTrue(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getCommentMarker());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

cSVPrinter0.print((Object) null);

[MASTER] 22:39:16.194 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_101_tmp__ESTest.test0(CSVPrinter_101_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:16.196 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertEquals('K', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertEquals('K', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

cSVPrinter0.println();
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertEquals('K', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(fileDescriptor0.valid());


[MASTER] 22:39:19.757 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_106_tmp__ESTest.test0(CSVPrinter_106_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:19.761 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

cSVPrinter0.close();

[MASTER] 22:39:23.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_110_tmp__ESTest.test0(CSVPrinter_110_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:23.291 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('}');
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('}', (char)cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertNull(cSVFormat1.getEscapeCharacter());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertTrue(cSVFormat1.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertEquals(',', cSVFormat1.getDelimiter());
assertNotNull(cSVFormat1);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(fileDescriptor0.valid());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('}', (char)cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertNull(cSVFormat1.getEscapeCharacter());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertTrue(cSVFormat1.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertEquals(',', cSVFormat1.getDelimiter());
assertNotNull(cSVPrinter0);

cSVPrinter0.printComment("Uj*g$/ttA~V'R");

[MASTER] 22:39:27.865 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_117_tmp__ESTest.test0(CSVPrinter_117_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:27.865 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

Object[] objectArray0 = new Object[9];
cSVPrinter0.printRecord(objectArray0);

[MASTER] 22:39:31.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_123_tmp__ESTest.test0(CSVPrinter_123_tmp__ESTest.java:53)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:31.943 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
assertNull(cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals('K', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getRecordSeparator());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(bufferedOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
assertNotNull(mockPrintStream0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
assertNull(cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals('K', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertNull(cSVFormat0.getRecordSeparator());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
cSVPrinter0.printRecords(resultSet0);

[MASTER] 22:39:36.565 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_129_tmp__ESTest.test0(CSVPrinter_129_tmp__ESTest.java:47)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:36.565 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

cSVPrinter0.println();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 11
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-13/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-10/tests/3
* Done!

* Computation finished
