* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-10
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 3452
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-13/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 971
* Using seed 2380989394
* Starting evolution
bbc usage percentage is: 10%
* Initial Number of Goals in DynaMOSA = 190 / 971
[MASTER] 22:26:46.283 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:26:46.283 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:26:46.283 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:26:46.284 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:26:46.284 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:26:46.284 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:26:46.284 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:26:46.284 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:26:46.284 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:26:46.285 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:26:46.285 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:26:48.268 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:26:51.596 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 601s and 772 generations, 442671 statements, best individual has fitness: 168.0
* Minimizing test suite
[MASTER] 22:37:50.615 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 164
* Number of covered goals: 152
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 137
* Number of covered goals: 120
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 83%
* Total number of goals: 507
* Number of covered goals: 423
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 137
* Number of covered goals: 114
* Generated 91 tests with total length 1658
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:38:40.905 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6705% of time used, but only 28/91 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 30%
* Compiling and checking tests
[MASTER] 22:39:10.214 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:39:10.652 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:39:11.884 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_96_tmp__ESTest.test0(CSVPrinter_96_tmp__ESTest.java:49)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:11.899 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
MockFile mockFile0 = new MockFile(".e!^N", ".e!^N");
MockFile mockFile1 = new MockFile(mockFile0, ".e!^N");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream1);
Object[] objectArray0 = new Object[4];
Object object0 = new Object();
objectArray0[0] = object0;
objectArray0[1] = (Object) mockFile1;
objectArray0[2] = (Object) mockFile0;
objectArray0[3] = (Object) mockFile1;
StringWriter stringWriter0 = new StringWriter();
StringWriter stringWriter1 = stringWriter0.append('U');
stringWriter1.write("weQi]");
cSVPrinter0.printRecord(objectArray0);
CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
cSVPrinter1.flush();
cSVPrinter1.close();
cSVPrinter0.printComment(".e!^N");
cSVPrinter1.close();
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
cSVPrinter0.print(mockPrintStream0);
cSVPrinter1.printRecords(objectArray0);
Appendable appendable0 = cSVPrinter1.getOut();
assertSame(stringWriter0, appendable0);


[MASTER] 22:39:15.495 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_99_tmp__ESTest.test0(CSVPrinter_99_tmp__ESTest.java:52)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:15.496 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
StringWriter stringWriter0 = new StringWriter();
StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
StringBuffer stringBuffer0 = stringWriter1.getBuffer();
cSVFormat1.withHeader((String[]) null);
char[] charArray0 = new char[0];
stringWriter1.write(charArray0);
CSVPrinter cSVPrinter0 = cSVFormat2.print(stringBuffer0);
Object[] objectArray0 = new Object[7];
cSVPrinter0.flush();
objectArray0[0] = (Object) stringWriter1;
objectArray0[1] = (Object) cSVFormat2;
cSVFormat0.withIgnoreEmptyLines();
objectArray0[2] = (Object) cSVPrinter0;
objectArray0[3] = (Object) cSVFormat1;
stringWriter1.flush();
stringWriter0.write("");
objectArray0[4] = (Object) cSVFormat2;
objectArray0[5] = (Object) cSVPrinter0;
objectArray0[6] = (Object) cSVFormat1;
cSVPrinter0.printRecord(objectArray0);
cSVPrinter0.flush();
cSVPrinter0.close();
cSVPrinter0.printComment("");
cSVPrinter0.close();
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
cSVPrinter0.print(mockFileOutputStream0);
cSVPrinter0.printRecords(objectArray0);
assertEquals(654, stringBuffer0.length());


[MASTER] 22:39:18.873 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_102_1633646358873
[MASTER] 22:39:18.874 [logback-2] ERROR JUnitAnalyzer - Failed to create tmp dir
[MASTER] 22:39:21.403 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_116_tmp__ESTest.test0(CSVPrinter_116_tmp__ESTest.java:57)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:21.405 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
StringWriter stringWriter0 = new StringWriter();
StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
StringBuffer stringBuffer0 = stringWriter1.getBuffer();
String[] stringArray0 = null;
cSVFormat1.withHeader((String[]) null);
char[] charArray0 = new char[0];
stringWriter1.write(charArray0);
CSVPrinter cSVPrinter0 = cSVFormat2.print(stringBuffer0);
Object[] objectArray0 = new Object[7];
cSVPrinter0.flush();
objectArray0[0] = (Object) stringWriter1;
objectArray0[1] = (Object) cSVFormat2;
cSVFormat0.withIgnoreEmptyLines();
SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (Throwable) null);
cSVPrinter0.print(sQLTimeoutException0);
objectArray0[2] = (Object) cSVPrinter0;
objectArray0[3] = (Object) cSVFormat1;
stringWriter1.flush();
stringWriter0.write("");
objectArray0[4] = (Object) cSVFormat2;
objectArray0[5] = (Object) cSVPrinter0;
objectArray0[6] = (Object) cSVFormat1;
cSVPrinter0.printRecord(objectArray0);
cSVPrinter0.flush();
cSVPrinter0.close();
cSVPrinter0.printComment("");
cSVPrinter0.close();
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
cSVPrinter0.print(mockFileOutputStream0);
cSVPrinter0.printRecords(objectArray0);
cSVPrinter0.printRecord((Object[]) null);

[MASTER] 22:39:35.747 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_146_tmp__ESTest.test0(CSVPrinter_146_tmp__ESTest.java:538)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:35.815 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFileWriter mockFileWriter0 = new MockFileWriter("The header contains a duplicate name: [");
assertNotNull(mockFileWriter0);

CSVFormat cSVFormat0 = CSVFormat.EXCEL;
assertNotNull(cSVFormat0);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertNotNull(cSVPrinter0);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());

CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
assertNotNull(cSVFormat1);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuoteMode());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));

QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
assertNotNull(cSVFormat2);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuoteMode());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isNullStringSet());
assertNull(cSVFormat2.getNullString());
assertTrue(cSVFormat2.getAllowMissingColumnNames());
assertNull(cSVFormat2.getEscapeCharacter());
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));

CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
assertNotNull(cSVFormat3);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuoteMode());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isNullStringSet());
assertNull(cSVFormat2.getNullString());
assertTrue(cSVFormat2.getAllowMissingColumnNames());
assertNull(cSVFormat2.getEscapeCharacter());
assertNull(cSVFormat3.getCommentMarker());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertFalse(cSVFormat3.isEscapeCharacterSet());
assertNull(cSVFormat3.getEscapeCharacter());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat3.getQuoteMode());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isNullStringSet());
assertFalse(cSVFormat3.getAllowMissingColumnNames());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat0);
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat2));

CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord();
assertNotNull(cSVFormat4);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat4.isCommentMarkerSet());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertNull(cSVFormat4.getNullString());
assertTrue(cSVFormat4.getAllowMissingColumnNames());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.getIgnoreHeaderCase());
assertNull(cSVFormat4.getEscapeCharacter());
assertFalse(cSVFormat4.isNullStringSet());
assertEquals(',', cSVFormat4.getDelimiter());
assertFalse(cSVFormat4.isEscapeCharacterSet());
assertTrue(cSVFormat4.getSkipHeaderRecord());
assertNull(cSVFormat4.getCommentMarker());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertNull(cSVFormat4.getQuoteMode());
assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
assertTrue(cSVFormat4.isQuoteCharacterSet());
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat0);
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));

CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
assertNotNull(cSVFormat5);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuoteMode());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat5.isNullStringSet());
assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
assertNull(cSVFormat5.getQuoteMode());
assertNull(cSVFormat5.getNullString());
assertTrue(cSVFormat5.getAllowMissingColumnNames());
assertFalse(cSVFormat5.getIgnoreHeaderCase());
assertFalse(cSVFormat5.getIgnoreEmptyLines());
assertTrue(cSVFormat5.isQuoteCharacterSet());
assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
assertNull(cSVFormat5.getEscapeCharacter());
assertEquals(',', cSVFormat5.getDelimiter());
assertFalse(cSVFormat5.isEscapeCharacterSet());
assertNull(cSVFormat5.getCommentMarker());
assertFalse(cSVFormat5.isCommentMarkerSet());
assertEquals("\r\n", cSVFormat5.getRecordSeparator());
assertTrue(cSVFormat5.getSkipHeaderRecord());
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat5, cSVFormat0);
assertNotSame(cSVFormat5, cSVFormat4);
assertNotSame(cSVFormat5, cSVFormat1);
assertNotSame(cSVFormat5, cSVFormat3);
assertNotSame(cSVFormat5, cSVFormat2);
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat5.equals((Object)cSVFormat0));
assertFalse(cSVFormat5.equals((Object)cSVFormat4));
assertFalse(cSVFormat5.equals((Object)cSVFormat1));
assertFalse(cSVFormat5.equals((Object)cSVFormat3));
assertFalse(cSVFormat5.equals((Object)cSVFormat2));

CSVFormat cSVFormat6 = cSVFormat0.withSkipHeaderRecord();
assertNotNull(cSVFormat6);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat6.isCommentMarkerSet());
assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
assertNull(cSVFormat6.getNullString());
assertTrue(cSVFormat6.getAllowMissingColumnNames());
assertFalse(cSVFormat6.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
assertTrue(cSVFormat6.isQuoteCharacterSet());
assertFalse(cSVFormat6.isEscapeCharacterSet());
assertNull(cSVFormat6.getCommentMarker());
assertEquals("\r\n", cSVFormat6.getRecordSeparator());
assertTrue(cSVFormat6.getSkipHeaderRecord());
assertNull(cSVFormat6.getQuoteMode());
assertFalse(cSVFormat6.getIgnoreHeaderCase());
assertFalse(cSVFormat6.isNullStringSet());
assertNull(cSVFormat6.getEscapeCharacter());
assertEquals(',', cSVFormat6.getDelimiter());
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat6, cSVFormat2);
assertNotSame(cSVFormat6, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat4);
assertNotSame(cSVFormat6, cSVFormat5);
assertNotSame(cSVFormat6, cSVFormat1);
assertNotSame(cSVFormat6, cSVFormat0);
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat6.equals((Object)cSVFormat2));
assertFalse(cSVFormat6.equals((Object)cSVFormat3));
assertFalse(cSVFormat6.equals((Object)cSVFormat5));
assertFalse(cSVFormat6.equals((Object)cSVFormat1));
assertTrue(cSVFormat6.equals((Object)cSVFormat4));
assertFalse(cSVFormat6.equals((Object)cSVFormat0));

CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines();
assertNotNull(cSVFormat7);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat6.isCommentMarkerSet());
assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
assertNull(cSVFormat6.getNullString());
assertTrue(cSVFormat6.getAllowMissingColumnNames());
assertFalse(cSVFormat6.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
assertTrue(cSVFormat6.isQuoteCharacterSet());
assertFalse(cSVFormat6.isEscapeCharacterSet());
assertNull(cSVFormat6.getCommentMarker());
assertEquals("\r\n", cSVFormat6.getRecordSeparator());
assertTrue(cSVFormat6.getSkipHeaderRecord());
assertNull(cSVFormat6.getQuoteMode());
assertFalse(cSVFormat6.getIgnoreHeaderCase());
assertFalse(cSVFormat6.isNullStringSet());
assertNull(cSVFormat6.getEscapeCharacter());
assertEquals(',', cSVFormat6.getDelimiter());
assertNull(cSVFormat7.getCommentMarker());
assertEquals("\r\n", cSVFormat7.getRecordSeparator());
assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
assertTrue(cSVFormat7.getIgnoreEmptyLines());
assertTrue(cSVFormat7.getSkipHeaderRecord());
assertFalse(cSVFormat7.isEscapeCharacterSet());
assertTrue(cSVFormat7.isQuoteCharacterSet());
assertFalse(cSVFormat7.getIgnoreHeaderCase());
assertFalse(cSVFormat7.isCommentMarkerSet());
assertNull(cSVFormat7.getQuoteMode());
assertEquals(',', cSVFormat7.getDelimiter());
assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
assertNull(cSVFormat7.getNullString());
assertTrue(cSVFormat7.getAllowMissingColumnNames());
assertFalse(cSVFormat7.isNullStringSet());
assertNull(cSVFormat7.getEscapeCharacter());
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat6, cSVFormat2);
assertNotSame(cSVFormat6, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat4);
assertNotSame(cSVFormat6, cSVFormat5);
assertNotSame(cSVFormat6, cSVFormat7);
assertNotSame(cSVFormat6, cSVFormat1);
assertNotSame(cSVFormat6, cSVFormat0);
assertNotSame(cSVFormat7, cSVFormat2);
assertNotSame(cSVFormat7, cSVFormat6);
assertNotSame(cSVFormat7, cSVFormat3);
assertNotSame(cSVFormat7, cSVFormat1);
assertNotSame(cSVFormat7, cSVFormat5);
assertNotSame(cSVFormat7, cSVFormat0);
assertNotSame(cSVFormat7, cSVFormat4);
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat6.equals((Object)cSVFormat2));
assertFalse(cSVFormat6.equals((Object)cSVFormat3));
assertFalse(cSVFormat6.equals((Object)cSVFormat5));
assertFalse(cSVFormat6.equals((Object)cSVFormat1));
assertTrue(cSVFormat6.equals((Object)cSVFormat4));
assertFalse(cSVFormat6.equals((Object)cSVFormat0));
assertFalse(cSVFormat7.equals((Object)cSVFormat2));
assertFalse(cSVFormat7.equals((Object)cSVFormat6));
assertFalse(cSVFormat7.equals((Object)cSVFormat3));
assertFalse(cSVFormat7.equals((Object)cSVFormat1));
assertFalse(cSVFormat7.equals((Object)cSVFormat5));
assertFalse(cSVFormat7.equals((Object)cSVFormat0));
assertFalse(cSVFormat7.equals((Object)cSVFormat4));

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
assertNotNull(mockPrintStream0);

CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintStream0);
assertNotNull(cSVPrinter1);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuoteMode());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isNullStringSet());
assertNull(cSVFormat2.getNullString());
assertTrue(cSVFormat2.getAllowMissingColumnNames());
assertNull(cSVFormat2.getEscapeCharacter());
assertFalse(fileDescriptor0.valid());
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat7);
assertNotSame(cSVFormat1, cSVFormat6);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat7);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat5);
assertNotSame(cSVFormat2, cSVFormat6);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVPrinter1, cSVPrinter0);
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat7));
assertFalse(cSVFormat1.equals((Object)cSVFormat6));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat7));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat5));
assertFalse(cSVFormat2.equals((Object)cSVFormat6));
assertTrue(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));

CSVPrinter cSVPrinter2 = cSVFormat7.print(mockPrintStream0);
assertNotNull(cSVPrinter2);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat6.isCommentMarkerSet());
assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
assertNull(cSVFormat6.getNullString());
assertTrue(cSVFormat6.getAllowMissingColumnNames());
assertFalse(cSVFormat6.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
assertTrue(cSVFormat6.isQuoteCharacterSet());
assertFalse(cSVFormat6.isEscapeCharacterSet());
assertNull(cSVFormat6.getCommentMarker());
assertEquals("\r\n", cSVFormat6.getRecordSeparator());
assertTrue(cSVFormat6.getSkipHeaderRecord());
assertNull(cSVFormat6.getQuoteMode());
assertFalse(cSVFormat6.getIgnoreHeaderCase());
assertFalse(cSVFormat6.isNullStringSet());
assertNull(cSVFormat6.getEscapeCharacter());
assertEquals(',', cSVFormat6.getDelimiter());
assertNull(cSVFormat7.getCommentMarker());
assertEquals("\r\n", cSVFormat7.getRecordSeparator());
assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
assertTrue(cSVFormat7.getIgnoreEmptyLines());
assertTrue(cSVFormat7.getSkipHeaderRecord());
assertFalse(cSVFormat7.isEscapeCharacterSet());
assertTrue(cSVFormat7.isQuoteCharacterSet());
assertFalse(cSVFormat7.getIgnoreHeaderCase());
assertFalse(cSVFormat7.isCommentMarkerSet());
assertNull(cSVFormat7.getQuoteMode());
assertEquals(',', cSVFormat7.getDelimiter());
assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
assertNull(cSVFormat7.getNullString());
assertTrue(cSVFormat7.getAllowMissingColumnNames());
assertFalse(cSVFormat7.isNullStringSet());
assertNull(cSVFormat7.getEscapeCharacter());
assertFalse(fileDescriptor0.valid());
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat6, cSVFormat2);
assertNotSame(cSVFormat6, cSVFormat3);
assertNotSame(cSVFormat6, cSVFormat4);
assertNotSame(cSVFormat6, cSVFormat5);
assertNotSame(cSVFormat6, cSVFormat7);
assertNotSame(cSVFormat6, cSVFormat1);
assertNotSame(cSVFormat6, cSVFormat0);
assertNotSame(cSVFormat7, cSVFormat2);
assertNotSame(cSVFormat7, cSVFormat6);
assertNotSame(cSVFormat7, cSVFormat3);
assertNotSame(cSVFormat7, cSVFormat1);
assertNotSame(cSVFormat7, cSVFormat5);
assertNotSame(cSVFormat7, cSVFormat0);
assertNotSame(cSVFormat7, cSVFormat4);
assertNotSame(cSVPrinter2, cSVPrinter0);
assertNotSame(cSVPrinter2, cSVPrinter1);
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat6.equals((Object)cSVFormat2));
assertFalse(cSVFormat6.equals((Object)cSVFormat3));
assertFalse(cSVFormat6.equals((Object)cSVFormat5));
assertFalse(cSVFormat6.equals((Object)cSVFormat7));
assertFalse(cSVFormat6.equals((Object)cSVFormat1));
assertTrue(cSVFormat6.equals((Object)cSVFormat4));
assertFalse(cSVFormat6.equals((Object)cSVFormat0));
assertFalse(cSVFormat7.equals((Object)cSVFormat2));
assertFalse(cSVFormat7.equals((Object)cSVFormat6));
assertFalse(cSVFormat7.equals((Object)cSVFormat3));
assertFalse(cSVFormat7.equals((Object)cSVFormat1));
assertFalse(cSVFormat7.equals((Object)cSVFormat5));
assertFalse(cSVFormat7.equals((Object)cSVFormat0));
assertFalse(cSVFormat7.equals((Object)cSVFormat4));
assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));

CSVPrinter cSVPrinter3 = cSVFormat0.print(mockPrintStream0);
assertNotNull(cSVPrinter3);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(fileDescriptor0.valid());
assertNotSame(cSVPrinter3, cSVPrinter0);
assertNotSame(cSVPrinter3, cSVPrinter2);
assertNotSame(cSVPrinter3, cSVPrinter1);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat1);
assertFalse(cSVPrinter3.equals((Object)cSVPrinter0));
assertFalse(cSVPrinter3.equals((Object)cSVPrinter2));
assertFalse(cSVPrinter3.equals((Object)cSVPrinter1));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));

StringReader stringReader0 = new StringReader("BK';yA]HI41wY9)2/");
assertNotNull(stringReader0);

cSVPrinter3.print(stringReader0);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(fileDescriptor0.valid());
assertNotSame(cSVPrinter3, cSVPrinter0);
assertNotSame(cSVPrinter3, cSVPrinter2);
assertNotSame(cSVPrinter3, cSVPrinter1);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat1);
assertFalse(cSVPrinter3.equals((Object)cSVPrinter0));
assertFalse(cSVPrinter3.equals((Object)cSVPrinter2));
assertFalse(cSVPrinter3.equals((Object)cSVPrinter1));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));

Double double0 = new Double((-152.95613184));
assertNotNull(double0);
assertEquals((-152.95613184), (double)double0, 0.01);

cSVPrinter1.print(double0);
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuoteMode());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuoteMode());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals(QuoteMode.NON_NUMERIC, cSVFormat2.getQuoteMode());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isEscapeCharacterSet());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isNullStringSet());
assertNull(cSVFormat2.getNullString());
assertTrue(cSVFormat2.getAllowMissingColumnNames());
assertNull(cSVFormat2.getEscapeCharacter());
assertFalse(fileDescriptor0.valid());
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat7);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat6);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat7);
assertNotSame(cSVFormat1, cSVFormat6);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat7);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat5);
assertNotSame(cSVFormat2, cSVFormat6);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVPrinter1, cSVPrinter0);
assertNotSame(cSVPrinter1, cSVPrinter2);
assertNotSame(cSVPrinter1, cSVPrinter3);
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat7));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat6));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat7));
assertFalse(cSVFormat1.equals((Object)cSVFormat6));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat7));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat5));
assertFalse(cSVFormat2.equals((Object)cSVFormat6));
assertTrue(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
assertFalse(cSVPrinter1.equals((Object)cSVPrinter3));


[MASTER] 22:39:43.518 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_171_tmp__ESTest.test0(CSVPrinter_171_tmp__ESTest.java:28)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:39:43.522 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVFormat cSVFormat0 = CSVFormat.TDF;
assertNotNull(cSVFormat0);
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());

CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
assertNotNull(cSVFormat1);
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getNullString());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));

CSVFormat cSVFormat2 = cSVFormat1.withEscape('^');
assertNotNull(cSVFormat2);
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getNullString());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isNullStringSet());
assertFalse(cSVFormat2.getAllowMissingColumnNames());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getQuoteMode());
assertEquals('^', (char)cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertEquals('\t', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertTrue(cSVFormat2.isEscapeCharacterSet());
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));

CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
assertNotNull(cSVFormat3);
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getNullString());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isNullStringSet());
assertFalse(cSVFormat2.getAllowMissingColumnNames());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getQuoteMode());
assertEquals('^', (char)cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertEquals('\t', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertTrue(cSVFormat2.isEscapeCharacterSet());
assertFalse(cSVFormat3.getAllowMissingColumnNames());
assertFalse(cSVFormat3.isNullStringSet());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertTrue(cSVFormat3.isEscapeCharacterSet());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNull(cSVFormat3.getCommentMarker());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getNullString());
assertEquals('\t', cSVFormat3.getDelimiter());
assertNull(cSVFormat3.getQuoteMode());
assertEquals('^', (char)cSVFormat3.getEscapeCharacter());
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat0);
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
assertNotNull(cSVPrinter0);
assertFalse(fileDescriptor0.valid());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertNull(cSVFormat0.getEscapeCharacter());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat1.getEscapeCharacter());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getNullString());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.isNullStringSet());
assertFalse(cSVFormat1.isEscapeCharacterSet());
assertNull(cSVFormat1.getCommentMarker());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isNullStringSet());
assertFalse(cSVFormat2.getAllowMissingColumnNames());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getQuoteMode());
assertEquals('^', (char)cSVFormat2.getEscapeCharacter());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoteCharacterSet());
assertEquals('\t', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isCommentMarkerSet());
assertNull(cSVFormat2.getCommentMarker());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getIgnoreHeaderCase());
assertTrue(cSVFormat2.isEscapeCharacterSet());
assertFalse(cSVFormat3.getAllowMissingColumnNames());
assertFalse(cSVFormat3.isNullStringSet());
assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
assertTrue(cSVFormat3.isEscapeCharacterSet());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNull(cSVFormat3.getCommentMarker());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertTrue(cSVFormat3.isQuoteCharacterSet());
assertFalse(cSVFormat3.getIgnoreHeaderCase());
assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.isCommentMarkerSet());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getNullString());
assertEquals('\t', cSVFormat3.getDelimiter());
assertNull(cSVFormat3.getQuoteMode());
assertEquals('^', (char)cSVFormat3.getEscapeCharacter());
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));

Double double0 = new Double(0.0);
assertNotNull(double0);
assertEquals(0.0, (double)double0, 0.01);

cSVPrinter0.print(double0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-13/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-10/tests/1
* Done!

* Computation finished
