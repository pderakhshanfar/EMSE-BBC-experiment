/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:44:29 GMT 2020
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("YmXVp");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals(1, 1, "%");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W0&");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(87, int0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 14);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aIS+qgB@ Kv}>l");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ZfL:U");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("`[6@v3~h5IhJscys^");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[1] = '`';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("`.xfv,M^0}_w86");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      charArray0[3] = 'a';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'a', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("L:i$Me9ZB&)ja['I7c|");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("38o9x(5BL;");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("YtXM,V2");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("`9b}GX}");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.prser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('(');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9=N`IqA|VXC");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("9", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("d'[");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("d'[");
      assertTrue(boolean0);
      assertEquals(3, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(4, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|f3n(W");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('|', char0);
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("f3", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array mustonot contain any@nuwl objects");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("A", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9u%)J:H]bi*~b&7>>");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("9", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3W0&");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("3", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("W", string1);
      assertNotNull(string1);
      assertEquals(2, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = characterReader0.consumeHexSequence();
      assertEquals("0", string2);
      assertNotNull(string2);
      assertEquals(3, characterReader0.pos());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("Mark invalid", string0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(13, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(13, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zqO7FaF>e.v");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("zqO7", string0);
      assertNotNull(string0);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("Mark", string0);
      assertNotNull(string0);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RZAB%&!eu");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("RZAB", string0);
      assertNotNull(string0);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("sBSVczfBRo");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("sBSVcz", string0);
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ZSf?{w2SZK.2^iq8~lD");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("ZSf", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("Array", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vPPM*");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("vPPM*", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(6, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(6, characterReader0.pos());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("?bU.35IOm");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("?bU.35IOm");
      assertTrue(boolean0);
      assertEquals(9, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(10, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("s'/kNf");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("s", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("'/kNf", string1);
      assertEquals(1, charArray0.length);
      assertNotNull(string1);
      assertEquals(6, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("`.xfv,M^0}_w86");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[4] = 'w';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("`.xfv,M^0}_", string0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'w', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("d'[");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("d'[");
      assertTrue(boolean0);
      assertEquals(3, characterReader0.pos());
      
      char[] charArray0 = new char[3];
      characterReader0.advance();
      assertEquals(4, characterReader0.pos());
      
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertEquals(4, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YmPM,Vp");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[3];
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("mPM,Vp", string0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertEquals(7, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("?bU.35IOm");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("?bU.35IOm");
      assertTrue(boolean0);
      assertEquals(9, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(10, characterReader0.pos());
      
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertEquals(10, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("Mark invalid");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("?bU.35IOm");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("?bU.35IOm");
      assertTrue(boolean0);
      assertEquals(9, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(10, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('[');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vPPM*");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("vPPM*", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(6, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 0, 0, "");
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-2946), (-2946), "org.jsoup.helper.Validate");
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?Xn");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals(0, 0, "");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("1", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(1, int0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YmPM,Vp");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("YmPM,Vp");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('b');
      assertEquals("Mark invalid", string0);
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("Mark invalid");
      assertEquals((-1), int0);
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('F');
      assertEquals((-1), int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3W0&");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('3', char0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("YmXM,Vp");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('Y', char0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9=N`IqA|VXC");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo("9=N`IqA|VXC");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3W0&");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('3', char0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals((char[]) null, 2103, 2103, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, (-603), 12, "Must be true");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -603
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("O/x~qy'3imR$");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals(9, 9, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals(13, 1, "1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R:7{TW0y;ql_cn9[I");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1077);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo("W~Y03QT%u$b49g$*");
      assertEquals("R:7{TW0y;ql_cn9[I", string0);
      assertNotNull(string0);
      assertEquals(17, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kWh#Op?6&I");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf(charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`.xfv,M^0}_w86");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 5);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('a');
      assertEquals("`.xfv", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf('');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase(":");
      assertTrue(boolean0);
      assertEquals(1, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesLetter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("YmXM,Vp");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W0&");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("W0", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('&', char0);
      assertEquals(3, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesDigit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("d", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nQ");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("nQ", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("YmXM,Vp");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 409);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.hTlpe4.Validate");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W0&");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("W0", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('&', char0);
      assertEquals(3, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matches(']');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase("I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase(":");
      assertTrue(boolean0);
      assertEquals(1, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsume(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("V83N2:VWe'");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]j7eB!");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 33);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.mark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+u]?=4y+.P+B5/<k");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('2');
      assertEquals("+u]?=4y+.P+B5/<k", string0);
      assertNotNull(string0);
      assertEquals(16, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.isEmpty();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase(":");
      assertTrue(boolean0);
      assertEquals(1, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.current();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("d", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("Object must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("u)>,#%b(HY@NY]");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j0FT@y%z&");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTagName();
      assertEquals("j0FT@y%z&", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("%", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("` HFK%/as3[0g");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Must be false");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo(',');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j0FT@y%z&");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeToEnd();
      assertEquals("j0FT@y%z&", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTagName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`.xfv,M^0}_w86");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 5);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('a');
      assertEquals("`.xfv", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterThenDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("%", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`.xfv,M^0}_w86");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 5);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('a');
      assertEquals("`.xfv", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7-)d");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTagName();
      assertEquals("7-)d", string0);
      assertNotNull(string0);
      assertEquals(4, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("d", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DI;P{7SH\"OAv");
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, 2384);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K[Z#g;fK9F<LYq&!a/");
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, (-388));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null, (-540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cx0BxpWkC");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      char[] charArray0 = new char[9];
      characterReader0.consumeTo("Object must not be null");
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeTo("Cx0BxpWkC");
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wNJE ");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.isEmpty();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.rangeEquals(1, 1, "%");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Nim}@1h87Zd'xt1");
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.consumeTo('?');
      characterReader0.unconsume();
      characterReader0.consumeData();
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      boolean boolean0 = characterReader0.containsIgnoreCase("L");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.matchConsume("w<I8]/EW=U@]H+z!Y'V");
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9xtgQJKUe/Ul R");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("+JOn}s!51JLbo.");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R:7{TW0y;ql_cn9[I");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1077);
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{}l}e&{%Ey)zO[");
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zX$@");
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.prser.CharacterReader");
      characterReader0.consumeLetterSequence();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(3, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.helper.Validate");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zX$@");
      char[] charArray0 = new char[1];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("TcTG02AFj}egz");
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("d'[");
      characterReader0.matchConsumeIgnoreCase("d'[");
      char[] charArray0 = new char[3];
      characterReader0.matchesAnySorted(charArray0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("<L=0~BXH>8lQW37b");
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("d'[");
      characterReader0.matchConsumeIgnoreCase("d'[");
      char[] charArray0 = new char[3];
      characterReader0.matchesAny(charArray0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Y[*=<FWkB>m?C(w_hW");
      boolean boolean0 = characterReader0.matchesIgnoreCase("}xK^Wh[5{Ojvx");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.prser.CharacterReader");
      characterReader0.consumeData();
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("XP");
      assertEquals(31, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 409);
      boolean boolean0 = characterReader0.matches("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("d'[");
      characterReader0.matchConsumeIgnoreCase("d'[");
      characterReader0.advance();
      boolean boolean0 = characterReader0.matches("");
      assertEquals(4, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R:7{TW0y;ql_cn9[I");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1077);
      boolean boolean0 = characterReader0.matches(":$");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      boolean boolean0 = characterReader0.matches('\uFFFF');
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&k");
      boolean boolean0 = characterReader0.matches('&');
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      boolean boolean0 = characterReader0.matches('M');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.prser.CharacterReader");
      characterReader0.consumeLetterSequence();
      characterReader0.consumeDigitSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cx0BxpWkC");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      char[] charArray0 = new char[9];
      characterReader0.consumeTo("Object must not be null");
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeDigitSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8ar:Xk.b invalid");
      characterReader0.consumeHexSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9=N`IqA|VXC");
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("9", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      characterReader0.consumeTagName();
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(32, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H>p7(S6pHrH$wr#^");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("H", string0);
      
      characterReader0.consumeTagName();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("M8r]J}X?<\u0004`wK Ow#");
      characterReader0.consumeTagName();
      assertEquals(8, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\"e/VJ-/g6m/L0");
      characterReader0.consumeTagName();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      characterReader0.consumeTagName();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%:i)f*iFaZE|<zwE");
      characterReader0.consumeData();
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("4&OVVT");
      String string0 = characterReader0.consumeData();
      assertEquals(1, characterReader0.pos());
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("<m1BZSbW{?-96t");
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("F");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("F", string0);
      
      char[] charArray0 = new char[8];
      characterReader0.consumeToAny(charArray0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[LX.i]:}gKJOID2!.;\"");
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      characterReader0.consumeToAny(charArray0);
      int int0 = characterReader0.nextIndexOf('K');
      assertEquals(9, characterReader0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("TcTG02AFj}egz");
      characterReader0.consumeTo("F");
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lnV");
      characterReader0.consumeTo('V');
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.helper.Validate");
      boolean boolean0 = characterReader0.containsIgnoreCase("org.jsoup.helper.Validate");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      int int0 = characterReader0.nextIndexOf("o");
      assertEquals(0, characterReader0.pos());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LM");
      boolean boolean0 = characterReader0.containsIgnoreCase("LM");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[LX.i]:}gKJOID2!.;\"");
      int int0 = characterReader0.nextIndexOf('K');
      assertEquals(9, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("83N2:VWen");
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("cBUymI8@9");
      characterReader0.mark();
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[LX.i]:}gKJOID2!.a;\"");
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: No buffer left to unconsume
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("YmXM,Vp");
      characterReader0.consume();
      characterReader0.consumeTagName();
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      characterReader0.consumeTagName();
      characterReader0.consume();
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(33, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ReE");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("`");
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("d'[");
      boolean boolean0 = characterReader0.rangeEquals(64, 64, "d'[");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Nim}@1h87Zd'xt1");
      String string0 = characterReader0.toString();
      assertEquals("Nim}@1h87Zd'xt1", string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      characterReader0.advance();
      int int0 = characterReader0.nextIndexOf("o");
      assertEquals(1, characterReader0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nQ");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeToEnd();
      boolean boolean0 = characterReader0.isEmpty();
      assertEquals(2, characterReader0.pos());
      assertTrue(boolean0);
  }
}
