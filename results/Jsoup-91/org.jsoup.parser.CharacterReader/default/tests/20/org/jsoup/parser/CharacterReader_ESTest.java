/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:39:53 GMT 2020
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = 'k';
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 5, 5, "a[AAh");
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'k'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0@t/nra}I");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aYUhu^D#zA;#");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OD~%STo=VLcSM3>Pn!K");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[3];
      charArray0[2] = 'O';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BUNYk0=Ij1%RR]");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'v', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Must be false");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("ihj1=F");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matches("rray");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("3>");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("3", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matches("");
      assertTrue(boolean0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rGZe#&v.lcmxG{#|U;p");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matches('|');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0Xw");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("0", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ZYqeP5,\"");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("ZYqeP5,\"", string0);
      assertEquals(8, characterReader0.pos());
      assertNotNull(string0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(9, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertEquals(9, characterReader0.pos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ef2>PB!nNeSWucY'IIC");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("Ef2", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("a", string0);
      assertEquals(2, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FhE1=F");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 37);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("F", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("A", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|S7|-<6.Vmu)");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo('\"');
      assertEquals("|S7|-<6.Vmu)", string0);
      assertEquals(12, characterReader0.pos());
      assertNotNull(string0);
      
      characterReader0.advance();
      assertEquals(13, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertEquals(13, characterReader0.pos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9Da_f2nph~Wz60[]");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("9", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BUNYk0=Ij1%RR]");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("BUNYk0", string0);
      assertEquals(6, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7gvIz2-ip!{VT]'");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("7", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("gvIz2", string1);
      assertEquals(6, characterReader0.pos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rGZe#&v.lcmxG{#|U;p");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("rGZe", string0);
      assertEquals(4, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zdwZ427tKfyP8vt/X3");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("zdwZ", string0);
      assertEquals(4, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("YqeP5,\"");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[9];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("YqeP5,\"", string0);
      assertEquals(9, charArray0.length);
      assertEquals(7, characterReader0.pos());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(8, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("", string1);
      assertEquals(8, characterReader0.pos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.consume();
      assertEquals('A', char0);
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("rray", string0);
      assertEquals(5, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("b");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("b", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(2, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertEquals(2, characterReader0.pos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6uZXWKls7S");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[8];
      charArray0[3] = '6';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
      assertEquals(0, characterReader0.pos());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Object must not be null");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsume("Object must not be null");
      assertTrue(boolean0);
      assertEquals(23, characterReader0.pos());
      
      char[] charArray0 = new char[7];
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(24, characterReader0.pos());
      
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      assertEquals(24, characterReader0.pos());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7gvIz2-ip!{VT]'");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[5];
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("7", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals("gvIz2-ip!{VT]'", string1);
      assertEquals(5, charArray0.length);
      assertEquals(15, characterReader0.pos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|S7|-<6.Vmu)");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[3];
      String string0 = characterReader0.consumeTo('\"');
      assertEquals("|S7|-<6.Vmu)", string0);
      assertEquals(12, characterReader0.pos());
      assertNotNull(string0);
      
      characterReader0.advance();
      assertEquals(13, characterReader0.pos());
      
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals("", string1);
      assertEquals(3, charArray0.length);
      assertEquals(13, characterReader0.pos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(5EGlr$*<bU]Q");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[0];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("(5EGlr$*<bU]Q", string0);
      assertEquals(0, charArray0.length);
      assertEquals(14, characterReader0.pos());
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = characterReader0.containsIgnoreCase("0!t3f7RJ");
      assertFalse(boolean0);
      assertEquals(14, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo("oi)V");
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      assertNotNull(string0);
      
      characterReader0.advance();
      assertEquals(31, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo('.');
      assertEquals("", string1);
      assertEquals(30, characterReader0.pos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",fv!L6V+~'9KgB?R,K");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals(",fv!L6V+~'9KgB?R,K", string0);
      assertEquals(19, characterReader0.pos());
      assertNotNull(string0);
      
      characterReader0.unconsume();
      assertEquals(18, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("b");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("b", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(2, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string1);
      assertEquals(2, characterReader0.pos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{)GX^:.");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("{)GX^:.", string0);
      assertEquals(7, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.toString();
      assertEquals("", string1);
      assertEquals(7, characterReader0.pos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 0, 0, "");
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.rangeEquals(0, 0, "");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("/#+Q62c5 `_");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.rangeEquals(0, 0, "/#+Q62c5 `_");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0$==t");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      int int0 = characterReader0.nextIndexOf("0$==t");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7gvIz2-ip!{VT]'");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "gvIz2");
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("gvIz2", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      int int0 = characterReader0.nextIndexOf(charBuffer0);
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("gvIz2", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'ePOjd,=a");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      int int0 = characterReader0.nextIndexOf('\'');
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("7gvIz2-ip!{VT]'");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      int int0 = characterReader0.nextIndexOf('I');
      assertEquals(3, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(5EGlr$*<bU]Q");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      int int0 = characterReader0.nextIndexOf('I');
      assertEquals((-1), int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6uZXWKls7S");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.current();
      assertEquals('6', char0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0@t/nra}I");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("0@t/nra}I");
      assertTrue(boolean0);
      assertEquals(9, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("", string0);
      assertEquals(9, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^Um23ol4-xmBueXVN=");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo('^');
      assertEquals("", string0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals((char[]) null, 109, 109, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 'k', 3, "Mar");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 107
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|S7|-<6.Vmu)");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals(0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Must be false");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf(charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesLetter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Object must not be null");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("Object must not be null", string0);
      assertEquals(23, characterReader0.pos());
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase("Mark invalid");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be null");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("Mark invalid", string0);
      assertEquals(12, characterReader0.pos());
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesDigit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer lft to unonsue");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("YpqePn,%");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches('P');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|S7|-<6.Vmu)");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsume("]tB[nL0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.isEmpty();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("]tB[nL0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("wRiJ.~#MFo(6(t4:,<'");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2554);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k:?");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("k:?", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Must be false");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fk+-$Sv");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('8');
      assertEquals("Fk+-$Sv", string0);
      assertEquals(7, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("Fk+-$Sv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo('0');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 103);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTagName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("N", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterThenDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Object must not be null");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("Object must not be null", string0);
      assertEquals(23, characterReader0.pos());
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F{f|5d`,Cf.");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeData();
      assertEquals("F{f|5d`,Cf.", string0);
      assertEquals(11, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.helper.Validate");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(1486L);
      assertEquals(25L, long0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, (-2538));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("JgtqhMfbz>W");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 5, 5, "{bgdG");
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("a[AAh");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('k');
      assertEquals("a[AAh", string0);
      assertEquals(5, characterReader0.pos());
      assertNotNull(string0);
      
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[3];
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals("a[AAh", string1);
      assertEquals(3, charArray0.length);
      assertEquals(5, characterReader0.pos());
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{)GX^:.");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.containsIgnoreCase("{)GX^:.");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7gvIz2-ip!{VT]'");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.containsIgnoreCase("2");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("JgtqhMfbz>W");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(",CkyE@MiKsJ)r[(&LV");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7gvIz2-ip!{VT]'");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("7gvIz2-ip!{VT]'", string0);
      assertEquals(15, characterReader0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|S7|-<6.Vmu)");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z.nBgiS");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 3227);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0@t/nra}I");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("b");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("b", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zFO?<y32B;");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z%");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7gvIz2-ip!{VT]'");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesAnySorted((char[]) null);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("g>NabTRZ2^8fh'4X");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'g', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("g^G,|+H[|R*EN q%,");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Object must not be null");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.matchConsume("Object must not be null");
      characterReader0.consume();
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertEquals(24, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{)GX^:.");
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BUNYkb0=IMj1%RR]");
      boolean boolean0 = characterReader0.matchConsume("/KtYp)h5f");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{)GX^:.");
      boolean boolean0 = characterReader0.matches("YDv`~ :[");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BUNYkb0=IMj1%RR]");
      boolean boolean0 = characterReader0.matches('B');
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zFO?<y32B;");
      boolean boolean0 = characterReader0.matches('t');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{)GX^:.");
      characterReader0.consumeToEnd();
      characterReader0.matches('a');
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7gvIz2-ip!{VT]'");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("7", string0);
      
      int int0 = characterReader0.nextIndexOf("7");
      assertEquals(1, characterReader0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterSequence();
      characterReader0.consumeDigitSequence();
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9");
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("9", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9CuheXoEWi2");
      characterReader0.consumeHexSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0$==t");
      characterReader0.consumeHexSequence();
      characterReader0.consumeTo('=');
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Q|loNQ!+$I");
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.consumeData();
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7gvIz2-ip!{VT]'");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterThenDigitSequence();
      boolean boolean0 = characterReader0.containsIgnoreCase("2");
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F{f|5d`,Cf.");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterSequence();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8o=d>0a2_x<_");
      characterReader0.consumeTagName();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("M~]Pli<$){=HiBh]1e");
      characterReader0.consumeTagName();
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("hV$Uk.bK/");
      characterReader0.consumeTagName();
      assertEquals(8, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|S7|-<6.Vmu)");
      characterReader0.consumeData();
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\"R(|W&x");
      characterReader0.consumeData();
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("crray must not cVntain any nu`l Xbjects");
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(35, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'h';
      CharacterReader characterReader0 = new CharacterReader(")_x6/jhz@_tBd]$<X");
      characterReader0.consumeToAny(charArray0);
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("NZz}b|wRMhy");
      characterReader0.consumeTo("z");
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9");
      characterReader0.consumeTo("9");
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      characterReader0.consumeTo('k');
      int int0 = characterReader0.pos();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zFO?<y32B;");
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8eFx,3:t^fxn&");
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: No buffer left to unconsume
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("b");
      characterReader0.consumeHexSequence();
      characterReader0.consume();
      characterReader0.matchesLetter();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9CuheXoEWi2");
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{bgdG");
      characterReader0.consumeTo(']');
      char char0 = characterReader0.current();
      assertEquals(5, characterReader0.pos());
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z%");
      char char0 = characterReader0.current();
      assertEquals(0, characterReader0.pos());
      assertEquals('z', char0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{)GX^:.");
      characterReader0.consumeToEnd();
      boolean boolean0 = characterReader0.isEmpty();
      assertEquals(7, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.parser.CharacterReader");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
      characterReader0.advance();
      char[] charArray0 = new char[3];
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(32, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{bgdG");
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("<[bd=&DK#9yh");
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals(12, 12, "<[bd=&DK#9yh");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zFO?<y32B;");
      String string0 = characterReader0.toString();
      assertEquals("zFO?<y32B;", string0);
      assertEquals(0, characterReader0.pos());
  }
}
