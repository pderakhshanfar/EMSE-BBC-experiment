/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:37:02 GMT 2020
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 0, 1, "R");
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9ueR]n[&a[5z9\"hUj1");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2{%[B0Mn@7HeJA^00`");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[1] = '0';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '0', '\u0000', '\u0000'}, charArray0);
      assertEquals("2{%[B", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertEquals(5, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zqM(YVFj !V[tZg*?");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array mu<t not contain any null objects");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'a';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'a'}, charArray0);
      assertEquals("Arr", string0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertEquals(3, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Znk/pJ^RJuIje");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DiT[]pP,l[9;@W");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      
      int int0 = stringReader0.read(charBuffer0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertEquals(1, int0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(1, charBuffer0.position());
      
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[6];
      charArray0[3] = 'l';
      charArray0[5] = 'e';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'l', '\u0000', 'e'}, charArray0);
      assertEquals("org.jsoup.pars", string0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertEquals(14, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'l', '\u0000', 'e'}, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertEquals(14, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Must be true");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase(";f{Pd6k|7 H");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("znY!");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("Mark", string0);
      assertNotNull(string0);
      assertEquals(4, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("+KC{\"0zKEuO");
      assertFalse(boolean0);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{Pd6k|j H");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('0');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("80A`O");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("80", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k8=");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[7];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("k8=", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertEquals(3, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(4, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("a");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("a", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F7@?LlaYaGZZQ");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("F7", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0_oobd:%k-VH0CS");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(".6ORmb9d'h&[");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('x');
      assertEquals(".6ORmb9d'h&[", string0);
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(13, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(13, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("xRJtr9}W1w+qF>N");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("xRJtr9", string0);
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zqM(YVFj !V[tZg*?");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("zqM", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("Array", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ucz%FlQ~ )D,zj8BH");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 68);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("Ucz", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("wvZ/G#");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("wvZ", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("Array", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{Pd6k|j H");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("{Pd6k|j H");
      assertTrue(boolean0);
      assertEquals(9, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(10, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("uv4T`Nr|,y|Br\"`t");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("v4T`Nr|,y|Br\"`t", string0);
      assertNotNull(string0);
      assertEquals(16, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("uv4T`Nr|,y|Br\"`t");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("uv4T`Nr|,y|Br\"`t");
      assertTrue(boolean0);
      assertEquals(16, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(17, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(17, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("A", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeData();
      assertEquals("rray must not contain any null objects", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(39, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[8];
      StringReader stringReader0 = new StringReader("832XnI");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("32XnI", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("Mark invalid", string0);
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(13, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      String string1 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, charArray0.length);
      assertEquals(13, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo("");
      assertEquals(":", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("iEf<}v+n|%RriMr");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('}');
      assertEquals("iEf<", string0);
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("}v+n|%RriMr", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, charArray0.length);
      assertEquals(16, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringReader stringReader0 = new StringReader("]HBBH(h:l7");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("]HBBH(h:l7", string0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertEquals(10, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(11, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('z');
      assertEquals((-1), int0);
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8;,q@)<``v{h\"9");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("8;,q@)", string0);
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertNotNull(string0);
      assertEquals(30, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(31, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(31, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = CharacterReader.rangeEquals((char[]) null, 0, 0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals(0, 0, "");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Must be true");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("Must", string0);
      assertNotNull(string0);
      assertEquals(4, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(4, int0);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1wadbx9{B[&9DUU?Rg");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("1wadbx9{B[&9DUU?Rg", string0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertEquals(18, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("1wadbx");
      assertEquals((-1), int0);
      assertEquals(18, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@`tw~J");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('`');
      assertEquals(0, int0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("96U]GL9");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('9', char0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Znk/pJ^RJuIje");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('Z', char0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("832XnI");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('8', char0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals((char[]) null, (-1248), (-1248), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 0, 1, "B");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",q7Ug1^j'^ztwqy:");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals(1596, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YP");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("YP", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("YP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf(charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf('/');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 4215);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesLetter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 70);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase("String must not be empty");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{Pd6k|j H");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesDigit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",q7Ug1^j'^ztwqy:");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('');
      assertEquals(",q7Ug1^j'^ztwqy:", string0);
      assertNotNull(string0);
      assertEquals(16, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted((char[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("YJgswb");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("JPU_\"w,6d");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(Sza@C'");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("sX|Ot2}Gd=");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",q7Ug1^j'^ztwqy:");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.mark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.current();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      char char0 = characterReader0.consume();
      assertEquals('P', char0);
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8UUWKO g'");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2618);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";f{P6k|7 H");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[16];
      StringReader stringReader0 = new StringReader("zizzBVzm~~cXUF");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("Array must not contain any null objects");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("U ");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      stringReader0.close();
      characterReader0.consumeTo(')');
      // Undeclared exception!
      try { 
        characterReader0.consumeTo(')');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2618);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTagName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NJ>CwHj\"M0");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      stringReader0.close();
      characterReader0.consumeTo(":*Z]5c9");
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterThenDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C`!R1jDU]A8,,`!^$");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeData();
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Must be true");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      stringReader0.close();
      characterReader0.consumeTo('[');
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jC{h,<K{c*Y");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2184);
      stringReader0.close();
      characterReader0.consumeToEnd();
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BL$A{(g");
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, (-41));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k5Pd@Rd4");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTo("A4");
      boolean boolean0 = characterReader0.isEmpty();
      assertEquals(8, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k8=");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 0, 1, ")");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k5Pd@Rd4");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterSequence();
      characterReader0.consumeTo("A4");
      assertEquals(8, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(");
      characterReader0.consumeTo(')');
      characterReader0.unconsume();
      characterReader0.consumeTagName();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("J2H:}]=");
      boolean boolean0 = characterReader0.containsIgnoreCase("J2H:}]=");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("p1^m");
      boolean boolean0 = characterReader0.containsIgnoreCase("p1^m");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("uv4T`Nr|,y|Br\"`t");
      boolean boolean0 = characterReader0.matchConsume("Must be false");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("/Cx)]:c{vFFd25A&=$_");
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k8=");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{Pd6k|j H");
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.parser.CharacterReader");
      char[] charArray0 = new char[1];
      stringReader0.read();
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{Pd6k|j H");
      char[] charArray0 = new char[3];
      charArray0[1] = '{';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(");
      characterReader0.consumeTo(')');
      char[] charArray0 = new char[0];
      characterReader0.matchesAnySorted(charArray0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharacterReader characterReader0 = new CharacterReader(",GX?X(FjE");
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("uv4T`Nr|,y|Br\"`t");
      characterReader0.matchConsumeIgnoreCase("uv4T`Nr|,y|Br\"`t");
      characterReader0.advance();
      characterReader0.consumeData();
      assertEquals(17, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("832XnI");
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9ueR]n[&a[5z9\"hUj1");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("Must be true");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{Pd6k|j H");
      boolean boolean0 = characterReader0.matches("{Pd6k|j H");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(");
      boolean boolean0 = characterReader0.matches("Of7e-(?S");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@{mY`oVb!B");
      boolean boolean0 = characterReader0.matches('@');
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("DiT[]pP,l[9;@W");
      characterReader0.consumeTagName();
      boolean boolean0 = characterReader0.matches('Z');
      assertEquals(14, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Znk/pJ^RuIje");
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.consumeDigitSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k8=");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[7];
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeDigitSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("4f~bmR)Z");
      characterReader0.consumeHexSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9#l/s{k0mzJp4FT ");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("9", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{Pd6k|j H");
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y{W+fL");
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k5Pd@Rd4");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("k", string0);
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("k5Pd@Rd4");
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(");
      characterReader0.consumeTo(')');
      characterReader0.consumeLetterSequence();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Jmjhg)rT>xUr2kk");
      characterReader0.consumeTagName();
      assertEquals(8, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Znk/pJ^RuIje");
      characterReader0.consumeTagName();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{Pd6k|j H");
      characterReader0.consumeTagName();
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("P_s]q'<M<k3ya");
      characterReader0.consumeData();
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1wadbx91B[&9DUU?Rg");
      characterReader0.consumeData();
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9ueR]n[&a[5z9\"hUj1");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertArrayEquals(new char[] {'9', 'u', 'e', 'R'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1wadbx9{B[&9DUU?Rg");
      char[] charArray0 = new char[2];
      charArray0[1] = '9';
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.consumeDigitSequence();
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F7@?LlaYaGZZQ");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTo('F');
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",q7Ug1^j'^ztwqy:");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.containsIgnoreCase(",q7Ug1^j'^ztwqy:");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YP");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.consumeTo("YP");
      assertEquals(0, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("jyXuG,67y=");
      characterReader0.consumeTo("=e<FMxVqQL39");
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k5Pd@Rd4");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTo("A4");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(8, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      characterReader0.consumeToAny(charArray0);
      int int0 = characterReader0.nextIndexOf("o");
      assertEquals(16, characterReader0.pos());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      int int0 = characterReader0.nextIndexOf("o");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@`tw~J");
      int int0 = characterReader0.nextIndexOf('`');
      assertEquals(0, characterReader0.pos());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k5Pd@Rd4");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8UUrWKO g'");
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: No buffer left to unconsume
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(");
      characterReader0.consumeTo(')');
      assertEquals(1, characterReader0.pos());
      
      characterReader0.unconsume();
      boolean boolean0 = characterReader0.matches('O');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(");
      String string0 = characterReader0.consumeTo('\u0019');
      assertEquals("(", string0);
      
      char char0 = characterReader0.current();
      assertEquals(1, characterReader0.pos());
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      char[] charArray0 = new char[4];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"m5MR");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Must be true");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("wvZ/G#");
      boolean boolean0 = characterReader0.rangeEquals((-1), (-1), "wvZ/G#");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k8=");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.toString();
      assertEquals("k8=", string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.mark();
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
  }
}
