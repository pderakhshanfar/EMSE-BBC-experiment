/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:44:56 GMT 2020
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" qd$-<");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals(' ', char0);
      
      boolean boolean0 = characterReader0.matchesIgnoreCase(" qd$-<");
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean0);
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      assertEquals("q", string0);
      
      String string1 = characterReader0.consumeHexSequence();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, characterReader0.pos());
      assertEquals("d", string1);
      
      CharacterReader characterReader1 = new CharacterReader(stringReader0);
      assertNotNull(characterReader1);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertEquals(0, characterReader1.pos());
      
      boolean boolean1 = characterReader1.rangeEquals(1, 1, "d");
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, characterReader1.pos());
      assertFalse(boolean1);
      assertNotSame(characterReader1, characterReader0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[TaUCA0.c)");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals((-1733), (-1733), "[TaUCA0.c)");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("99");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zG9lJh|WL/3FaO{u");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("a!+o");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("m?4");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      charArray0[2] = 'm';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'm', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be null");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
      assertEquals("Object", string0);
      
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterReader0.pos());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("F,'/.b.eRz[b*dWj");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("F", string0);
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("F");
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.helper.Validate");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('A');
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("40~FjZjV");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      assertEquals("40", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("F,'/.b.eRz[b*dWj");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertEquals(17, characterReader0.pos());
      assertEquals("F,'/.b.eRz[b*dWj", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char char0 = characterReader0.consume();
      assertEquals(18, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      String string1 = characterReader0.consumeDigitSequence();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(18, characterReader0.pos());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f.9k");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("f", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F,'/.b.eRz[b*dWj");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("hSN80N");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      assertEquals("hSN80", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zG9lJh|WL/3FaO{u");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertEquals("zG9", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      assertEquals("Array", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      assertEquals("Array", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1247);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("F,'/.b.eRz[b*dWj");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("F", string0);
      
      String string1 = characterReader0.consumeTagName();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, characterReader0.pos());
      assertEquals(",'", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("76>e7");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      assertEquals("76", string0);
      
      char char0 = characterReader0.consume();
      assertEquals(3, characterReader0.pos());
      assertEquals('>', char0);
      
      String string1 = characterReader0.consumeHexSequence();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, characterReader0.pos());
      assertEquals("e7", string1);
      
      char char1 = characterReader0.consume();
      assertFalse(char1 == char0);
      assertEquals(6, characterReader0.pos());
      assertEquals('\uFFFF', char1);
      
      String string2 = characterReader0.consumeTagName();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(6, characterReader0.pos());
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9A]lj");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("9", string0);
      
      String string1 = characterReader0.consumeData();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, characterReader0.pos());
      assertEquals("A]lj", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("F,'/.b.eRz[b*dWj");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("F", string0);
      
      char[] charArray0 = new char[4];
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertEquals(17, characterReader0.pos());
      assertEquals(",'/.b.eRz[b*dWj", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[7] = 'a';
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1980);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
      assertEquals(3, characterReader0.pos());
      assertEquals("Arr", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'a', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{.Aksr");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("{.Aksr");
      assertEquals(6, characterReader0.pos());
      assertTrue(boolean0);
      
      char char0 = characterReader0.consume();
      assertEquals(7, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      String string0 = characterReader0.consumeToAnySorted((char[]) null);
      assertNotNull(string0);
      assertEquals(7, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("F,'/.b.eRz[b*dWj");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("F", string0);
      
      char[] charArray0 = new char[4];
      String string1 = characterReader0.consumeToAny(charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertEquals(17, characterReader0.pos());
      assertEquals(",'/.b.eRz[b*dWj", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals(30, characterReader0.pos());
      assertEquals("org.jsoup.UncheckedIOException", string0);
      
      char char0 = characterReader0.consume();
      assertEquals(31, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      char[] charArray0 = new char[4];
      String string1 = characterReader0.consumeToAny(charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertEquals(31, characterReader0.pos());
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1lM|0CA7GTRz1EVC[");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("1", string0);
      
      String string1 = characterReader0.consumeTo("1");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(12, characterReader0.pos());
      assertEquals("lM|0CA7GTRz", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("F,'/.b.eRz[b*dWj");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("F", string0);
      
      int int0 = characterReader0.nextIndexOf('.');
      assertEquals(1, characterReader0.pos());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      assertEquals("Mark invalid", string0);
      
      char char0 = characterReader0.consume();
      assertEquals(13, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      String string1 = characterReader0.consumeTo('A');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(12, characterReader0.pos());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(":k?D_oNA");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals(8, characterReader0.pos());
      assertEquals(":k?D_oNA", string0);
      
      characterReader0.unconsume();
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{.Aksr");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("{.Aksr");
      assertEquals(6, characterReader0.pos());
      assertTrue(boolean0);
      
      char char0 = characterReader0.consume();
      assertEquals(7, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      boolean boolean1 = characterReader0.matches('\uFFFF');
      assertFalse(boolean1 == boolean0);
      assertEquals(7, characterReader0.pos());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("SM ,((_Hp");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertEquals("SM ,((_Hp", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 0, 0, "");
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 1218, 1218, "");
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("String must not be empty");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals((-838), 0, "");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(":k?D_oNA");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals(8, characterReader0.pos());
      assertEquals(":k?D_oNA", string0);
      
      int int0 = characterReader0.pos();
      assertEquals(8, characterReader0.pos());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|H\"*#<");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 499);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("|H\"*#<");
      assertEquals(0, characterReader0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("s)O5(!X(rgW;@");
      assertEquals(0, characterReader0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('M');
      assertEquals(0, characterReader0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("7:>O");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals(0, characterReader0.pos());
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("m?4");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals(0, characterReader0.pos());
      assertEquals('m', char0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]xw5!55)mf(Em%fS]");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("766>7");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals('N', char0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals((char[]) null, 512, 512, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 1, 1, "8");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Must be false");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf(charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TVn4,J");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
      assertEquals("TVn4,J", string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TVn4,J");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
      assertEquals("TVn4,J", string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesLetter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TVn4,J");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
      assertEquals("TVn4,J", string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[6];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";Y-Mf^4<(qZ7PE?");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y;#D8U");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      char[] charArray0 = new char[8];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertEquals(6, characterReader0.pos());
      assertEquals("y;#D8U", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        characterReader0.matches("6<{;q}6i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8n;w?hFCc-+#1:c");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 7);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches('Q');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oey/R} Re|4j@-Zs");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo("String must not be empty");
      assertNotNull(string0);
      assertEquals(17, characterReader0.pos());
      assertEquals("oey/R} Re|4j@-Zs", string0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase("Mark invalid");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TVn4,J");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
      assertEquals("TVn4,J", string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsume("TVn4,J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("/h!2o%h");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.mark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PPpe#B");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(42);
      assertEquals(7L, long0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 42);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("q3m>9");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x6a^_");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 102);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(5, characterReader0.pos());
      assertEquals("x6a^_", string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TVn4,J");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
      assertEquals("TVn4,J", string0);
      
      stringReader0.close();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be null");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v0hQ:aui\"WtVO#!\"d");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals(17, characterReader0.pos());
      assertEquals("v0hQ:aui\"WtVO#!\"d", string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("v0hQ:aui\"WtVO#!\"d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be%nulp");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo('N');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 10);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterThenDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("za0rSHB*3)$2Qw@");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals(16, characterReader0.pos());
      assertEquals("za0rSHB*3)$2Qw@", string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<v");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[10];
      int int0 = stringReader0.read(charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'<', 'v', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, 3117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null, (-3830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("7:>O");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertEquals("7", string0);
      
      characterReader0.unconsume();
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertNotNull(string1);
      assertEquals(1, characterReader0.pos());
      assertEquals("7", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rv,3pe%\"7");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      assertEquals("Mark invalid", string0);
      
      boolean boolean0 = characterReader0.isEmpty();
      assertEquals(12, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" qd$-<");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.isEmpty();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" qd$-<");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals(1, 1, "d");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("/h!o%h");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("/h!o%h");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r~\"@9p2M[9I");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("r~\"@9p2M[9I");
      assertEquals(11, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("76>e7");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("e7");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D0BzZk*W#7aM&7+.");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(".ZO'71r");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      assertEquals("Mark invalid", string0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(12, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0a@~hZoWj\">'0q");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rv,3pe%\"7");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Zd+,");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" qd$-<");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be null");
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[2] = '[';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[");
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("N6p7}KQU%}^");
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      characterReader0.consumeData();
      char[] charArray0 = new char[4];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(12, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rv,3pe%\"7");
      boolean boolean0 = characterReader0.matchesIgnoreCase("rv,3pe%\"7");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      characterReader0.consumeData();
      characterReader0.consume();
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("");
      assertEquals(13, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be null");
      boolean boolean0 = characterReader0.matchesIgnoreCase("8J_9c!");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8n;w?NhFCc-+EM;:7");
      characterReader0.consumeHexSequence();
      boolean boolean0 = characterReader0.matches("8");
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#7[up=x|");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 31);
      boolean boolean0 = characterReader0.matches("No buffer left to unconsume");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8n;w?NhFCc-+EM;:7");
      boolean boolean0 = characterReader0.matches("8");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be null");
      boolean boolean0 = characterReader0.matches('Q');
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      boolean boolean0 = characterReader0.matches('N');
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("/h!o%h");
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      characterReader0.advance();
      characterReader0.consumeHexSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D0BzZk*W#7aM&7+.");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeHexSequence();
      characterReader0.consumeLetterSequence();
      characterReader0.consumeHexSequence();
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9A]lj");
      characterReader0.consumeHexSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{.Aksr");
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("otZh e9'p#");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zHUg\"s}es");
      char[] charArray0 = new char[7];
      stringReader0.read(charArray0);
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[:LsV;2#7)3cq<s1rC#");
      characterReader0.consumeTagName();
      assertEquals(13, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("otZh e9'p#");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTagName();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("k](<m9Y\"Sg>@@l2");
      characterReader0.consumeData();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("6&E\"c)O}bYZRZw");
      characterReader0.consumeData();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("/p!2o");
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.helper.Validate");
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      characterReader0.consumeToAny(charArray0);
      assertEquals(20, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1lM|0CA7GTRz1EVC[");
      characterReader0.consumeTo("1");
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0a@~hZoWj\">'0q");
      characterReader0.consumeTo("~Qs* R=eI{Zwnh}|8g");
      assertEquals(14, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      characterReader0.consumeTo('y');
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      boolean boolean0 = characterReader0.containsIgnoreCase("No buffer left to unconsume");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8n;w?N1Ftq-+EM;8:7");
      characterReader0.consumeDigitSequence();
      int int0 = characterReader0.nextIndexOf("8");
      assertEquals(1, characterReader0.pos());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("7:>O");
      boolean boolean0 = characterReader0.containsIgnoreCase("7:>O");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h-e`g0,`*GQ!b-,");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 4400);
      int int0 = characterReader0.nextIndexOf('h');
      assertEquals(0, characterReader0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#7[up=x|");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 31);
      characterReader0.consumeTo('j');
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTagName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("otZh e9'p#");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("HYy)'-1ejhmG0");
      characterReader0.mark();
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("/p!2o");
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: No buffer left to unconsume
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consume();
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x6a^_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 102);
      char[] charArray0 = new char[2];
      characterReader0.consumeData();
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(":k?D_oNA");
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("7>");
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals((-372), (-372), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x6a^_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 102);
      characterReader0.consumeToEnd();
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.toString();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9jT 8cH`W5Y");
      characterReader0.advance();
      characterReader0.unconsume();
      characterReader0.consumeDigitSequence();
      assertEquals(1, characterReader0.pos());
  }
}
