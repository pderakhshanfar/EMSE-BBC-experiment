/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:38:39 GMT 2020
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = CharacterReader.rangeEquals((char[]) null, 5, 5, ";A([ U8>RV[O*~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0^g<5ZDnxRj");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D4=l(ZzDg|/A");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo('e');
      assertEquals(12, characterReader0.pos());
      assertEquals("D4=l(ZzDg|/A", string0);
      assertNotNull(string0);
      
      characterReader0.unconsume();
      assertEquals(11, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(11, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.parser.CharacterReader");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[6];
      charArray0[2] = 'h';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals(18, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'h', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("org.jsoup.parser.C", string0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(18, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'h', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NQ");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[7];
      charArray0[3] = '^';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("snb0>+^U%1Ku|zr");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("S<G<ZgHquAGN|nW^");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y[L*k>");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTagName();
      assertEquals(5, characterReader0.pos());
      assertEquals("y[L*k", string0);
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("y[L*k>");
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1_4HQkl>N*GM.zhB");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsume("O9!&a6(!eC>wN");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[}-*'g5i2");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matches('.');
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9RkZ95H\"\"");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("9", string0);
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matches("=1>l LPy#?\"wJ$\"?c~l");
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";A([ U8>RV[O*~");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals(14, characterReader0.pos());
      assertEquals(";A([ U8>RV[O*~", string0);
      assertNotNull(string0);
      
      characterReader0.advance();
      assertEquals(15, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals(15, characterReader0.pos());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FJm[GJ~-oFfe9k_");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0rtTl1KKsZjNC|u4");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O9!&a6(!eC>wN");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals(2, characterReader0.pos());
      assertEquals("O9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z&!PpcGz|dqCC ");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals(4, characterReader0.pos());
      assertEquals("Mark", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("gZtb5[");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals(5, characterReader0.pos());
      assertEquals("gZtb5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";A([ U8>RV[O*~");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals(2, characterReader0.pos());
      assertEquals("A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zl");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals(2, characterReader0.pos());
      assertEquals("zl", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Zg7^5Yvv");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals(2, characterReader0.pos());
      assertEquals("Zg", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals(5, characterReader0.pos());
      assertEquals("Array", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("L");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[1];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(1, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("L", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      char char0 = characterReader0.consume();
      assertEquals(2, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      String string1 = characterReader0.consumeLetterSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, characterReader0.pos());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1_4HQkl>N*GM.zhB");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeTagName();
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, characterReader0.pos());
      assertEquals("_4HQkl", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      String string0 = characterReader0.consumeTagName();
      assertEquals(1, characterReader0.pos());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1_4HQkl>N*GM.zhB");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo("(>*BERk(tufN%w1cG");
      assertEquals(16, characterReader0.pos());
      assertEquals("1_4HQkl>N*GM.zhB", string0);
      assertNotNull(string0);
      
      characterReader0.advance();
      assertEquals(17, characterReader0.pos());
      
      String string1 = characterReader0.consumeData();
      assertFalse(string1.equals((Object)string0));
      assertEquals(17, characterReader0.pos());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("snb0>+^U%1Ku|zr");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[8];
      charArray0[3] = 's';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 's', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("L");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[1];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(1, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("L", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      char char0 = characterReader0.consume();
      assertEquals(2, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("", string1);
      assertEquals(1, charArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals(1, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.parser.CharacterReader");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 38);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.containsIgnoreCase("t5");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("R>=Kj/U ");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals(8, characterReader0.pos());
      assertEquals("R>=Kj/U ", string0);
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeTo("R>=Kj/U ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, characterReader0.pos());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      int int0 = characterReader0.nextIndexOf('#');
      assertEquals(1, characterReader0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(1, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals('\uFFFF', char0);
      
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals(1, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1_4HQkl>N*GM.zhB");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo("(>*BERk(tufN%w1cG");
      assertEquals(16, characterReader0.pos());
      assertEquals("1_4HQkl>N*GM.zhB", string0);
      assertNotNull(string0);
      
      characterReader0.advance();
      assertEquals(17, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals(17, characterReader0.pos());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@F4k>xI`aV");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(683L);
      assertEquals(10L, long0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1006);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.toString();
      assertEquals(0, characterReader0.pos());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 0, 0, "");
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+EY]CKM*^HaRKj,P3");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.rangeEquals(0, 0, "");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 16);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.rangeEquals(16, 16, "");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(1, characterReader0.pos());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      int int0 = characterReader0.nextIndexOf("org.jsoup.UncheckedIOException");
      assertEquals(0, characterReader0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("b", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.position());
      assertArrayEquals(new char[] {'\u0000', 'b', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer0);
      
      int int0 = characterReader0.nextIndexOf(charBuffer0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("b", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.position());
      assertArrayEquals(new char[] {'\u0000', 'b', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, int0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1_4HQkl>N*GM.zhB");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      int int0 = characterReader0.nextIndexOf("O9!&a6(!eC>wN");
      assertEquals(0, characterReader0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.parser.CharacterReader");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals(23, characterReader0.pos());
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("org.jsoup.parser.Charac", string0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      
      int int0 = characterReader0.nextIndexOf('t');
      assertEquals(23, characterReader0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.parser.CharacterReader");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      int int0 = characterReader0.nextIndexOf('h');
      assertEquals(0, characterReader0.pos());
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("O");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matches("O");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1_4HQkl>N*GM.zhB");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.current();
      assertEquals(0, characterReader0.pos());
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s{Of=a");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 10);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.current();
      assertEquals(0, characterReader0.pos());
      assertEquals('s', char0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("O");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals(1, characterReader0.pos());
      assertEquals("O", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals(0, characterReader0.pos());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo("No buffer left to unconsume");
      assertEquals(0, characterReader0.pos());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo("N*LqRF$");
      assertEquals(30, characterReader0.pos());
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeTo(')');
      assertFalse(string1.equals((Object)string0));
      assertEquals(30, characterReader0.pos());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("4/{tWNN");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals('N', char0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 116, 476, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, (-1), 13, "t%L)/U\"Q-U@`a");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Must be false");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf(charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(68, int0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf('p');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 873);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase("No buffer left to unconsume");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("wESn*ALXt");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesDigit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[4];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("R>=Kj/U ");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 5259);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches('b');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 512);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase(",)E--Qq@cVB[hv#o/U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("M be 8*a6|e");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z{C");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.mark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";A([ U8>RV[O*~");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals(14, characterReader0.pos());
      assertEquals(";A([ U8>RV[O*~", string0);
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.isEmpty();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";A([ U8>RV[O*~");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo(";A([ U8>RV[O*~");
      assertEquals(14, characterReader0.pos());
      assertEquals("A([ U8>RV[O*~", string0);
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.current();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("UFvgWX");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@F4k>xI`aV");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(683L);
      assertEquals(10L, long0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1006);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[}-*'g5i2");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"$tR#L2NVL%AZ:-~k");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals(17, characterReader0.pos());
      assertEquals("\"$tR#L2NVL%AZ:-~k", string0);
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("^(9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[}-*'g5i2");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 5259);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo('w');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1791);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo("No buffer left to unconsume");
      assertEquals(12, characterReader0.pos());
      assertEquals("Mark invalid", string0);
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTagName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{i60");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeData();
      assertEquals(4, characterReader0.pos());
      assertEquals("{i60", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterThenDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 26);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Must be false");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, 31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, (-1855));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("3x");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[7];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(2, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("x", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      
      characterReader0.unconsume();
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals(2, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("x", string1);
      assertEquals(7, charArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[8];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals(30, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.isEmpty();
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[Zg?Dc_X");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.isEmpty();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 1, 1, "_");
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("4G");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("4G");
      assertEquals(2, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9{@");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(" 91[%TtP7P\"+0{*o:");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("AN'3QMa=7AS#Ic");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals(14, characterReader0.pos());
      assertEquals("AN'3QMa=7AS#Ic", string0);
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(14, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[}-*'g5i2");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("~n,|cCp");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",<<KI(LXB[D");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("AN'3QMa=7AS#Ic");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals(14, characterReader0.pos());
      assertEquals("AN'3QMa=7AS#Ic", string0);
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(14, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zVbsSW] ");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0x");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0x");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(" 91%TtP7P\"+0{*o:");
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BjBmdkVo@*DV?*voCtY");
      boolean boolean0 = characterReader0.matchesIgnoreCase("[}-*'g5i2");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"$tR#L2NVL%AZ:-~k");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesIgnoreCase("\"$tR#L2NVL%AZ:-~k");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      boolean boolean0 = characterReader0.matches("R>=Kj/U ");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0x");
      boolean boolean0 = characterReader0.matchConsume("0x");
      assertEquals(2, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("3x");
      boolean boolean0 = characterReader0.matches('F');
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|jU");
      boolean boolean0 = characterReader0.matches('|');
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("AN'3QMa=7AS#Ic");
      characterReader0.consumeData();
      boolean boolean0 = characterReader0.matches('~');
      assertEquals(14, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0w YLi%W");
      characterReader0.consumeDigitSequence();
      characterReader0.consumeData();
      assertEquals(8, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#");
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals(0, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"$tR#L2NVL%AZ:-~k");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeData();
      characterReader0.consumeDigitSequence();
      assertEquals(17, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Must be false");
      char[] charArray0 = new char[6];
      charArray0[5] = 'f';
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeHexSequence();
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("A", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9,g+].j |+}z<f");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("9", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"$tR#L2NVL%AZ:-~k");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeData();
      characterReader0.consumeHexSequence();
      assertEquals(17, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("b0i'ZfIW2Q");
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{=e16_?p';*Z");
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals(0, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("X{1T{phX'mfK8");
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("X", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 4327);
      characterReader0.consumeLetterSequence();
      characterReader0.consumeTo("o");
      assertEquals(16, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("L");
      char[] charArray0 = new char[1];
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.consumeTagName();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",<<KI(LXB[D");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.consumeTagName();
      assertEquals(1, characterReader0.pos());
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("n\".0/.6l8Q^s%/hT");
      characterReader0.consumeTagName();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      characterReader0.consumeTagName();
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ml<");
      characterReader0.consumeData();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("E&H~-CM");
      String string0 = characterReader0.consumeData();
      assertEquals("E", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("?[},c");
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      boolean boolean0 = characterReader0.containsIgnoreCase("org.jsoup.UncheckedIOException");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[}-*'g5i2");
      boolean boolean0 = characterReader0.containsIgnoreCase("[}-*'g5i2");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("T");
      boolean boolean0 = characterReader0.containsIgnoreCase("T");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("EtrZ$=Eca");
      characterReader0.consumeTo('=');
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("_");
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("14HQBl>x*GM.hB");
      characterReader0.mark();
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#");
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: No buffer left to unconsume
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consume();
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[Zg?Dc_X");
      characterReader0.consume();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("R>=Kj/U ");
      characterReader0.consumeData();
      char char0 = characterReader0.current();
      assertEquals(8, characterReader0.pos());
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"$tR#L2NVL%AZ:-~k");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeData();
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(17, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("v_[l|##TCn!");
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals(1, 1, "J");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      String string0 = characterReader0.toString();
      assertEquals("No buffer left to unconsume", string0);
      assertEquals(0, characterReader0.pos());
  }
}
