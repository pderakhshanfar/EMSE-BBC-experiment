/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:37:39 GMT 2020
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-1803), (-1803), "h.3J@[$LW^cBq.F@9c");
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB0zw8wk3R");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("BB", string0);
      assertEquals(2, characterReader0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB0zw8wk3R");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("BB0", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ay.TWpfaN9G3rn");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z@}f");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("X-%");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[6];
      charArray0[2] = 'X';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'X', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h.3J@[$LW^cBq.F@9c");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.consume();
      assertEquals('h', char0);
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertArrayEquals(new char[] {'h'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("No buffer left to unconsume");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matches('');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BB0zw8wk3R");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("BB", string0);
      assertEquals(2, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeDigitSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h.3J@[$LW^cBq.F@9c");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(18, characterReader0.pos());
      assertNotNull(string0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(19, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(19, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f0ftZ8],r1`>eG\"C");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("f0f", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("apFO");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("a", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("A", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("X-%");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("X-%", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
      
      characterReader0.advance();
      assertEquals(4, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(4, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB0zw8wk3R");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("BB0", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals("zw8", string1);
      assertEquals(6, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z@}f");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("Z", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchConsume("Z@}f");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("Array", string0);
      assertEquals(5, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB0zw8wk3R");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("BB0", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeLetterSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals("zw", string1);
      assertEquals(5, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RZpY`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("RZpY", string0);
      assertEquals(4, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("Array", string0);
      assertEquals(5, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("-%20LYb_Rm");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo("LlxRS-j8[");
      assertEquals("-%20LYb_Rm", string0);
      assertEquals(10, characterReader0.pos());
      assertNotNull(string0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(11, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(11, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BB0zw8wk3R");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("BB", string0);
      assertEquals(2, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeTagName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("0zw8wk3R", string1);
      assertEquals(10, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X-%");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("X", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeData();
      assertFalse(string1.equals((Object)string0));
      assertEquals("-%", string1);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 'g');
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RacDSkz");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[8];
      charArray0[6] = 'z';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'z', '\u0000'}, charArray0);
      assertEquals("RacDSk", string0);
      assertEquals(8, charArray0.length);
      assertEquals(6, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RpY`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("RpY`");
      assertTrue(boolean0);
      assertEquals(5, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(6, characterReader0.pos());
      
      String string0 = characterReader0.consumeToAnySorted((char[]) null);
      assertEquals("", string0);
      assertEquals(6, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB0zw8wk3R");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("BB", string0);
      assertEquals(2, characterReader0.pos());
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      String string1 = characterReader0.consumeToAny(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("0zw8wk3R", string1);
      assertEquals(3, charArray0.length);
      assertEquals(10, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[1];
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 'g');
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB0zw8wk3R");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("BB", string0);
      assertEquals(2, characterReader0.pos());
      assertNotNull(string0);
      
      int int0 = characterReader0.nextIndexOf("0zw8wk3R");
      assertEquals(0, int0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("org", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
      
      int int0 = characterReader0.nextIndexOf('d');
      assertEquals(26, int0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("cW}^I$8`;f2;u=^ 7pT");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("cW}^I$8`;f2;u=^ 7pT", string0);
      assertEquals(19, characterReader0.pos());
      assertNotNull(string0);
      
      characterReader0.unconsume();
      assertEquals(18, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RpY`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("RpY`");
      assertTrue(boolean0);
      assertEquals(5, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(6, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertEquals(6, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h.3J@[$LW^cBq.F@9c");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(18, characterReader0.pos());
      assertNotNull(string0);
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(19, characterReader0.pos());
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(19, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("Array mus", string0);
      assertEquals(9, characterReader0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(9, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RpY`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("RpY`");
      assertTrue(boolean0);
      assertEquals(5, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(6, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("", string0);
      assertEquals(6, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B;zw8wk3");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("B;zw8wk3", string0);
      assertEquals(8, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(8, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 0, 0, "");
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MwmmV");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.rangeEquals((-1), 63, "MwmmV");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X61eL1^1");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("X61", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
      
      int int0 = characterReader0.pos();
      assertEquals(3, int0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h.3J@[$LW^cBq.F@9c");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.consume();
      assertEquals('h', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("h.3J@[$LW^cBq.F@9c");
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("org", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("org");
      assertFalse(boolean0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RacDSkz");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matches("RacDSkz");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RpY`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("RpY`");
      assertTrue(boolean0);
      assertEquals(5, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("", string0);
      assertEquals(5, characterReader0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B;zw8wk3");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("B;zw8wk3", string0);
      assertEquals(8, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeTo("I3Nx<M'1_d%qC.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(8, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("Mark invalid", string0);
      assertEquals(12, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeTo('\'');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(12, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char char0 = characterReader0.consume();
      assertEquals('0', char0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("X-%");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("X-%", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
      
      characterReader0.advance();
      assertEquals(4, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 102, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 1510, 13, "8U:=_]aV[`Vj6");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1510
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yOf|\":O2:\"_896z");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeTagName();
      assertEquals("yOf|\":O2:\"_896z", string0);
      assertEquals(17, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("Kzi_1yS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("cW}^I$8`;f2;u=^ 7pT");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf(charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeData();
      assertEquals("Mark invalid", string0);
      assertEquals(12, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf('C');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I4Ell-9sIXQn/,YFw");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo('W');
      assertEquals("I4Ell-9sIXQn/,YFw", string0);
      assertEquals(18, characterReader0.pos());
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesLetter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d[*t8i.");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('%');
      assertEquals("d[*t8i.", string0);
      assertEquals(7, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'*");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d[*t8i.");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('%');
      assertEquals("d[*t8i.", string0);
      assertEquals(7, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesDigit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 3376);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[8];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RpY`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTo('O');
      assertEquals("Mark invalid", string0);
      assertEquals(12, characterReader0.pos());
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f0ftZ8],r1`>eG\"C");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2083);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&Ma");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo(')');
      assertEquals("&Ma", string0);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.matches("sl0s](hB@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lOCJ0Vvr!*");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("Array must not contain any null objects", string0);
      assertEquals(39, characterReader0.pos());
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches('\\');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2063);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsume("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f0ftZ8],r1`>eG\"C");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2083);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I4Ell-9sIXQn/,YFw");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.mark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.isEmpty();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ic<l,V'>R'P{*");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsume("ic<l,V'>R'P{*");
      assertTrue(boolean0);
      assertEquals(13, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.current();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("Array must not contain any null objects", string0);
      assertEquals(39, characterReader0.pos());
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("Array must not contain any null objects");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RpY`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ODvBM4/vvq9Y0Ye");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 23);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".OyOJ_");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      stringReader0.close();
      String string0 = characterReader0.consumeTo("+*4&G_");
      assertEquals(".OyOJ_", string0);
      assertEquals(6, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RpY`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB0zw8wBa3");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 60);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[7];
      String string0 = characterReader0.consumeToEnd();
      assertEquals("BB0zw8wBa3", string0);
      assertEquals(10, characterReader0.pos());
      assertNotNull(string0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RpY`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E]3c+cpGa\"p");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2135);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeTagName();
      assertEquals("E]3c+cpGa\"p", string0);
      assertEquals(11, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("Lq1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MwmmV");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB0zw8wBa3");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 60);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[6];
      stringReader0.close();
      String string0 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("BB0zw8wBa3", string0);
      assertEquals(6, charArray0.length);
      assertEquals(10, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo('R');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")~atw'Nbs");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 37);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('_');
      assertEquals(")~atw'Nbs", string0);
      assertEquals(9, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTagName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I4Ell-9sIXQn/,YFw");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('j');
      assertEquals("I4Ell-9sIXQn/,YFw", string0);
      assertEquals(18, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterThenDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N$sj4O");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 32768);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('\\');
      assertEquals("N$sj4O", string0);
      assertEquals(6, characterReader0.pos());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ump jFR4<N1Xb~j0TK");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      stringReader0.close();
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("Ump jFR4<N1Xb~j0TK");
      assertTrue(boolean0);
      assertEquals(18, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!idL");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, 114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, (-3643));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C/");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".OyOJ_");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[2];
      StringReader stringReader0 = new StringReader("R");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 114);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("R", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      characterReader0.unconsume();
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("R", string1);
      assertEquals(2, charArray0.length);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("X-%");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.containsIgnoreCase("X-%");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'*");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.containsIgnoreCase("'*");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("I4Ell-9sIXQn/,YFw");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchConsume("~vDIG");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("96WC=");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("~]o!wtU");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("-%20LYb_Rm");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("String must not be empty");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertArrayEquals(new char[] {'S', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("I4Ell-9sIXQn/,YFw");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[5];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ic<l,V'>R'P{*");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[7];
      boolean boolean0 = characterReader0.matchConsume("ic<l,V'>R'P{*");
      assertTrue(boolean0);
      assertEquals(13, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertEquals(13, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MwmmV");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[7];
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'M', 'w', 'm', 'm', 'V', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, int0);
      assertEquals(7, charArray0.length);
      
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertArrayEquals(new char[] {'M', 'w', 'm', 'm', 'V', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RZpY`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeData();
      assertEquals("RZpY`", string0);
      assertEquals(5, characterReader0.pos());
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8U:=_]aV[`Vj6");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[5];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BB0zw8wk3R");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("BB0zw8wk3R");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h.3J@[$LW^cBq.F@9c");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(18, characterReader0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("h.3J@[$LW^cBq.F@9c");
      assertFalse(boolean0);
      assertEquals(18, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yOf|\":O2:\"_896z");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matches("Must be false");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MwmmV");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matches('M');
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      boolean boolean0 = characterReader0.matches('M');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RacDSkz");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[8];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("RacDSkz", string0);
      assertEquals(8, charArray0.length);
      assertEquals(7, characterReader0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = characterReader0.matches('X');
      assertFalse(boolean0);
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("H9VP&ArLDd)");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("H", string0);
      assertEquals(1, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeDigitSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals("9", string1);
      assertEquals(2, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5Fn/jms2&");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("5F", string0);
      assertEquals(2, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeLetterSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals("n", string1);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string1);
      
      String string2 = characterReader0.consumeDigitSequence();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(3, characterReader0.pos());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h.3J@[$LW^cBq.F@9c");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      char[] charArray0 = new char[2];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(18, characterReader0.pos());
      assertNotNull(string0);
      
      String string1 = characterReader0.consumeDigitSequence();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(18, characterReader0.pos());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d[*t8i.");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.consumeHexSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("d", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9/1o1~qkByV#KWl");
      characterReader0.consumeHexSequence();
      char[] charArray0 = new char[3];
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      characterReader0.matchConsume("org.jsoup.parser.CharacterReader");
      characterReader0.consumeHexSequence();
      assertEquals(32, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9");
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yOf|\":O2:\"_896z");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RpY`");
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB0zw8wk3R");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterSequence();
      char char0 = characterReader0.current();
      assertEquals(2, characterReader0.pos());
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("-%20LYb_Rm");
      characterReader0.consumeTo("LlxRS-j8[");
      characterReader0.consumeLetterSequence();
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5Fn/jms2&");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeHexSequence();
      characterReader0.consumeLetterSequence();
      characterReader0.consumeTagName();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f0ftZ8],r1`>eG\"C");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2083);
      characterReader0.consumeTagName();
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KjS(<");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTagName();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      characterReader0.consumeTagName();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z%n$x<4ex$'uw%");
      characterReader0.consumeData();
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&w7B[.4v/");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeData();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'y';
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      char[] charArray0 = new char[7];
      charArray0[1] = 'd';
      characterReader0.consumeToAny(charArray0);
      assertEquals(29, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BB0zw8wk3R");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[3];
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("String must not be empty");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 77);
      characterReader0.consumeTo("o");
      assertEquals(13, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTo('l');
      assertEquals(9, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.containsIgnoreCase("No");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("b>ee2eM$ fI3");
      int int0 = characterReader0.nextIndexOf('b');
      assertEquals(0, characterReader0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("-%20LYb_Rm");
      int int0 = characterReader0.nextIndexOf(':');
      assertEquals((-1), int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h.3J@[$LW^cBq.F@9c");
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("I4Ell-9sIXQn/,YFw");
      characterReader0.mark();
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("B89XA3Zs',jgt$S");
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: No buffer left to unconsume
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("String must not be empty");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 77);
      char char0 = characterReader0.current();
      assertEquals('S', char0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("-%20LYb_Rm");
      characterReader0.consumeTo("LlxRS-j8[");
      characterReader0.consume();
      characterReader0.nextIndexOf(':');
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".OyOJ_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.parser.CharacterReader");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
      characterReader0.consumeData();
      characterReader0.matchesDigit();
      assertEquals(32, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("-%20LYb_Rm");
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B;zw8wk3");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
      boolean boolean0 = characterReader0.rangeEquals(97, 0, "");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".OyOJ_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.toString();
      assertEquals(0, characterReader0.pos());
      assertEquals(".OyOJ_", string0);
  }
}
