/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:37:21 GMT 2020
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9y#;V\"vOb@mTe");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals(1, 1, "9");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("K$1IW/zvBro#CNX>");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("K$1IW/zvBro#CNX>");
      assertTrue(boolean0);
      assertEquals(16, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9y(#;VvOb@mTe");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0zgt1[X");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Z_}[.J;69+f\"^jm");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.parser.CharacterReader");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[3];
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'o', 'r', 'g'}, charArray0);
      
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertEquals(32, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals(31, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'o', 'r', 'g'}, charArray0);
      assertEquals(31, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8,1Tn$^#?aw ");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("698:mQoR~[<q7*<^O1");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qQxqN!:v?3-");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 71);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals("qQxqN!:v?3-", string0);
      assertEquals(11, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("qQxqN!:v?3-");
      assertFalse(boolean0);
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1^Ds-{/Re(2#uKtB'`");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches("Mark invalid");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals("No", string0);
      assertEquals(2, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("$E:K{FU5heB.8qIDY");
      assertFalse(boolean0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!;@");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 57);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('e');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("70uNPiW-0`0`q& ?H");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertNotNull(string0);
      assertEquals("70", string0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7O{Q&A![Sn");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals("7O{Q&A![Sn", string0);
      assertEquals(10, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(11, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("fn");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertNotNull(string0);
      assertEquals("f", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ax>(i#w\r");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertNotNull(string0);
      assertEquals("a", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Array must not contain any null objects");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertNotNull(string0);
      assertEquals("A", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0sBov");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertNotNull(string0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(31, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(31, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zo<?i>l!-Y-rGe");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals("zo", string0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals("Mark", string0);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Aqf09!2O");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals("Aqf09", string0);
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals("Array", string0);
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Z5**=7NchU'_q2y9");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals("Z", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 94);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1^Ds-{/Re(2#uKtB'`");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^Ds-{", string1);
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 94);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      String string0 = characterReader0.consumeToEnd();
      assertNotNull(string0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(31, characterReader0.pos());
      
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(31, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h6QX{1*[B_I(<BC");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals("h6QX{1*[B_I(", string0);
      assertEquals(12, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      String string1 = characterReader0.consumeToAny(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charArray0.length);
      assertEquals("<BC", string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.helper.Validate");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('o', char0);
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo("rg.jsoup.helper.Validate");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("org.jsoup.UncheckedIOException");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertNotNull(string0);
      assertEquals("org", string0);
      assertEquals(3, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo('s');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".j", string1);
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('V');
      assertNotNull(string0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(31, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('V');
      assertEquals((-1), int0);
      assertEquals(31, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7O{Q&A![Sn");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertNotNull(string0);
      assertEquals("7O{Q&A![Sn", string0);
      assertEquals(10, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(11, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('V');
      assertNotNull(string0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(31, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(31, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertNotNull(string0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      
      characterReader0.mark();
      assertEquals(30, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertNotNull(string0);
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-506), 0, "");
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 693, 693, "pXa;$#$Y*m/Wlt");
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals(2563, 0, "");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.helper.Validate");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('o', char0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(1, int0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qQxqN!:v?3-");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 71);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("qQxqN!:v?3-");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@io{e@fUKc(g)");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("io");
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7O{Q&A![SK");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertNotNull(string0);
      assertEquals("7", string0);
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("7");
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k$R{E6f");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('f');
      assertEquals(6, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9y(#;VvOb@mTe");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches("CJVM)`At`2*-TBonCz");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8,1Tn$^#?aw ");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('8', char0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h6QX{1*[B_I(<BC");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertEquals("h6QX{1*[B_I(<BC", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(15, characterReader0.pos());
      
      String string1 = characterReader0.consumeToEnd();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 32, 1230, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 1, 1, "8");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals(989, 989, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":y14w*J* Q");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals((-2319), 1, "M");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2319
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('V');
      assertNotNull(string0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k$R{E6f");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qQxqN!:v?3-");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 71);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf(charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">,Yrs%xRhP3% \"L");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeToEnd();
      assertNotNull(string0);
      assertEquals(">,Yrs%xRhP3% \"L", string0);
      assertEquals(15, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf('C');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesLetter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase("org.jsoup.helper.Validate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("mlKCpt{NKcn!Hf:8d");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('1');
      assertNotNull(string0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ZL)$Kg5+znBRc");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches("org.jsoup.helper.Validate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@io{e@fUKc(g)");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 954);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches('n');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@io{e@fUKc(g)");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals("No buffer left to unconsume", string0);
      assertEquals(27, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsume("No buffer left to unconsume");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@io{e@fUKc(g)");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffe->lft to unconsume");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.mark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">(");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('>', char0);
      assertEquals(1, characterReader0.pos());
      
      stringReader0.close();
      characterReader0.advance();
      assertEquals(2, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.isEmpty();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FUi-SQB(");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 3169);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nHn");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1457);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">f4");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1^Ds-{/Re(2#uKtB'`");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">(");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      char[] charArray0 = new char[1];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertEquals(">(", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(2, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("#56Quf79");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("fZ15hI@Y?^(z<l\"7");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 56);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo('!');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zrY");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertNotNull(string0);
      assertEquals("zrY", string0);
      assertEquals(3, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTagName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[k*kO");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      char[] charArray0 = new char[0];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertEquals("[k*kO", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(5, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffe->lft to unconsume");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeData();
      assertNotNull(string0);
      assertEquals("No buffe->lft to unconsume", string0);
      assertEquals(26, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      String string0 = characterReader0.consumeTo('V');
      assertNotNull(string0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1^Ds-{/Re(2#uKtB'`");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, (-738));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A/Ixpk");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertNotNull(string0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(30, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7O{Q&A![Sn");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("s_?A?]7mUq>CZx`k");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.rangeEquals(1, 1, "s");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      String string0 = characterReader0.consumeToEnd();
      assertNotNull(string0);
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertEquals(30, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals(29, characterReader0.pos());
      
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charArray0.length);
      assertEquals("n", string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(30, characterReader0.pos());
      
      characterReader0.unconsume();
      assertEquals(29, characterReader0.pos());
      
      String string2 = characterReader0.consumeLetterThenDigitSequence();
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("n", string2);
      assertEquals(30, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^>s!mkj}9+Yqb");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[6];
      charArray0[1] = '9';
      charArray0[2] = 'i';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertEquals("^>s!mkj}", string0);
      assertArrayEquals(new char[] {'\u0000', '9', 'i', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("9", string1);
      assertEquals(9, characterReader0.pos());
      
      String string2 = characterReader0.consumeToAnySorted(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(6, charArray0.length);
      assertEquals("+Yqb", string2);
      assertArrayEquals(new char[] {'\u0000', '9', 'i', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(13, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7O{Q&A![SK");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("7O{Q&A![SK");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("dPeS_cQP");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("dPeS_cQP");
      assertTrue(boolean0);
      assertEquals(8, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y<");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertEquals("y<", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^>s!mkj}9+Yqb");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z|{[EII");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertNotNull(string0);
      assertEquals("z", string0);
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zv,;3");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8_V7QY0$)?>h*I]T'a");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(56, int0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1^Ds-O/Rn(V#Kt'y");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertEquals("1^Ds-", string0);
      assertArrayEquals(new char[] {'O', '\u0000'}, charArray0);
      assertEquals(5, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'O', '\u0000'}, charArray0);
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FUi-SQB(");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 3169);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[7];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAnySorted((char[]) null);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8,1Tn$^#?aw ");
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7O{Q&A![Sn");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesIgnoreCase("bJH_ww");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FUi-SQB(");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 3169);
      boolean boolean0 = characterReader0.matchesIgnoreCase("FUi-SQB(");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9y(#;VvOb@mTe");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matches("9y(#;VvOb@mTe");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7O{Q&A![Sn");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matches('7');
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matches('3');
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1457);
      boolean boolean0 = characterReader0.matches(':');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9y(#;VvOb@mTe");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(".5JQuE5CO");
      characterReader0.consumeDigitSequence();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7O{Q&A![Sn");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeToEnd();
      characterReader0.consumeDigitSequence();
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FUi-SQB(");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 3169);
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("F", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9y(#;VvOb@mTe");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeHexSequence();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(".5JQuE5CO");
      characterReader0.consumeHexSequence();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^>s!mkj}9+Yqb");
      char[] charArray0 = new char[6];
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.consumeHexSequence();
      assertEquals(13, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@io{e@fUKc(g)");
      characterReader0.consume();
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("fZ15hI@Y?^(z<l\"7");
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.consumeData();
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y<");
      char[] charArray0 = new char[2];
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.consumeLetterSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("V,>AA_b|[!/2a{^[N=");
      characterReader0.consumeTagName();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h6QX{1*[B_I(<BC");
      characterReader0.consumeTagName();
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8,1Tn$^#?aw ");
      characterReader0.consumeTagName();
      characterReader0.mark();
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7O{Q&A![Sn");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeData();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^>s!mkj}9+Yqb");
      char[] charArray0 = new char[6];
      charArray0[1] = '9';
      charArray0[2] = 'i';
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.consumeLetterThenDigitSequence();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(9, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zrY");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[6] = 'z';
      characterReader0.consumeToAny(charArray0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8_V7QY0$)?>h*I]T'a");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[3] = ']';
      characterReader0.consumeToAny(charArray0);
      assertEquals(14, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consumeTo('+');
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.containsIgnoreCase("No buffer left to unconsume");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      characterReader0.consumeTo("n");
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y<");
      boolean boolean0 = characterReader0.containsIgnoreCase("y<");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8_V7QY0$)?>h*I]T'a");
      stringReader0.read();
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTo("8_V7QY0$)?>h*I]T'a");
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.current();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("G[.vPY?*{_kx2FaPm");
      int int0 = characterReader0.nextIndexOf('G');
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("dPeS_cQP");
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      characterReader0.mark();
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("yK:zA97Ot*SR");
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: No buffer left to unconsume
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      characterReader0.consume();
      char[] charArray0 = new char[7];
      characterReader0.consumeToAny(charArray0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9y(#;VvOb@mTe");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char char0 = characterReader0.consume();
      assertEquals(1, characterReader0.pos());
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      characterReader0.consumeToEnd();
      char char0 = characterReader0.current();
      assertEquals(30, characterReader0.pos());
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FUi-SQB(");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 3169);
      char char0 = characterReader0.current();
      assertEquals(0, characterReader0.pos());
      assertEquals('F', char0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must no contain any null objets");
      characterReader0.consumeData();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(37, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8_V7QY0$)?>h*I]T'a");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.toString();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("qark inva$d");
      characterReader0.advance();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean0);
  }
}
