/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:44:19 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KAz1,P6");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.rangeEquals(11, 7, "KAz1,P6");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("KWKV_X7S#)EM;=|.%o");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("KWKV_X7S#)EM;=|.%o");
      assertEquals(18, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kr5Z{klb-t\"KHD");
      boolean boolean0 = characterReader0.matchConsume("kr5Z{klb-t\"KHD");
      assertEquals(15, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0_SkZDoM(+Ag;3[=9");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("bzVBvzyHa");
      characterReader0.consumeHexSequence();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 32);
      characterReader0.advance();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Z[gAX.wu}FBGA");
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Az$6");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("_+k2m!");
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("fHD8@6_j\"L");
      char[] charArray0 = new char[8];
      charArray0[1] = 'q';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ytp!k1;*Qd(RI,mON");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("fDRR");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("<-fepq@pgFo?");
      boolean boolean0 = characterReader0.matchConsume("D*QvC8t(");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y8I4$p.Hq:mUNFxEWn,");
      boolean boolean0 = characterReader0.matches("y8I4$p.Hq:mUNFxEWn,");
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 32);
      boolean boolean0 = characterReader0.matches('L');
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0g6JY SK2l)[C2c");
      characterReader0.consumeDigitSequence();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("AbjHiV");
      characterReader0.consumeData();
      characterReader0.consume();
      characterReader0.consumeDigitSequence();
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aM#(&x*");
      characterReader0.consumeHexSequence();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0Rz");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KAz1,P6");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeToEnd();
      characterReader0.advance();
      characterReader0.consumeHexSequence();
      assertEquals(8, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("dy9~Ob");
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KAz1,P6");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Z");
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("AO0}1O");
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      characterReader0.consumeData();
      characterReader0.consume();
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(28, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeLetterSequence();
      assertEquals(32, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZfP/}@DD;0PA&R");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 90);
      characterReader0.consumeLetterSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KAz1,P6");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ytp!k1;*Qd(RI,mON");
      characterReader0.consumeTagName();
      characterReader0.consume();
      characterReader0.consumeLetterSequence();
      assertEquals(18, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ytp!k1;*Qd(RI,mON");
      characterReader0.consume();
      characterReader0.consumeTagName();
      assertEquals(17, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consume();
      characterReader0.consumeTagName();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9V&XuOWE5sV.v,x~jk");
      characterReader0.consumeHexSequence();
      characterReader0.consumeData();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("c8#sHh7O|OW|!&");
      characterReader0.consumeTo('P');
      characterReader0.consume();
      characterReader0.consumeData();
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4aiI|{)1+O?l0No@e=_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterThenDigitSequence();
      char[] charArray0 = new char[1];
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(19, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'Z';
      charArray0[3] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("&");
      stringReader0.read(charBuffer0);
      stringReader0.reset();
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KAz1,P6");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeToEnd();
      char[] charArray0 = new char[0];
      characterReader0.advance();
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(8, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KAz1,P6");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeToEnd();
      char[] charArray0 = new char[0];
      characterReader0.advance();
      characterReader0.consumeToAny(charArray0);
      assertEquals(8, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ytp!k1;*Qd(RI,mON");
      boolean boolean0 = characterReader0.containsIgnoreCase("ytp!k1;*Qd(RI,mON");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      characterReader0.consumeLetterThenDigitSequence();
      int int0 = characterReader0.nextIndexOf('R');
      assertEquals(3, characterReader0.pos());
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KAz1,P6");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeToEnd();
      characterReader0.advance();
      int int0 = characterReader0.nextIndexOf('j');
      assertEquals(8, characterReader0.pos());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@9u");
      char[] charArray0 = new char[4];
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.unconsume();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ytp!k1;*Qd(RI,mON");
      characterReader0.consumeTagName();
      characterReader0.consume();
      char char0 = characterReader0.current();
      assertEquals(18, characterReader0.pos());
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kr5Z{klb-t\"KHD");
      char[] charArray0 = new char[7];
      characterReader0.consumeTagName();
      characterReader0.consume();
      characterReader0.matchesAnySorted(charArray0);
      assertEquals(16, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consume();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("c8#sHh7O|OW|!&");
      characterReader0.consumeTo('P');
      characterReader0.consume();
      characterReader0.matchConsumeIgnoreCase("'5W\"8dR`%HT#Cq)");
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.toString();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 22, 0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 68, (-1732), "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KAz1,P6");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.rangeEquals(0, 0, "");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      characterReader0.consumeData();
      int int0 = characterReader0.pos();
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      int int0 = characterReader0.nextIndexOf("Mark invalid");
      assertEquals(0, characterReader0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("<-fepq@pgFo?");
      int int0 = characterReader0.nextIndexOf("-");
      assertEquals(0, characterReader0.pos());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=B*bt\"T0^4d7!M<");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      int int0 = characterReader0.nextIndexOf("=B*bt\"T0^4d7!M<");
      assertEquals((-1), int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@l~Wm&0tP}T|");
      int int0 = characterReader0.nextIndexOf('@');
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("c8#sHh7O|OW|!&");
      characterReader0.consume();
      char char0 = characterReader0.current();
      assertEquals(1, characterReader0.pos());
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      characterReader0.consumeData();
      characterReader0.consumeTo('J');
      assertEquals(27, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~}8");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2937);
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y8I4$p.Hq:mUNFxEWn,");
      characterReader0.consume();
      char char0 = characterReader0.consume();
      assertEquals(2, characterReader0.pos());
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"%XH");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTo("Qx_Dv");
      characterReader0.advance();
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 875, 24576, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, 1, 1, "8");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("D[");
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals((-1032), (-1032), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 32);
      // Undeclared exception!
      try { 
        characterReader0.rangeEquals((-1285), 32, "org.jsoup.parser.CharacterReader");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1285
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 12);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(">J2=)1sP>e:1:");
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Mark invalid", 0, 0);
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf(charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$T\"fj q\"gE=~");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      stringReader0.close();
      characterReader0.consumeToEnd();
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf('/');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")'1,");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2068);
      characterReader0.consumeTagName();
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesLetter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3X#enC+");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 24576);
      characterReader0.consumeLetterThenDigitSequence();
      stringReader0.close();
      characterReader0.consumeTo("3");
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase("y~@QjhvS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XaZOyo`%");
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*DiHhX$*u$ER.$c\"");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 62);
      characterReader0.consumeData();
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesDigit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[8];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(">J2=)1sP>e:1:");
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'xA(ac]K");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[5];
      characterReader0.consumeToAnySorted(charArray0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3X#enC+");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 24576);
      characterReader0.consumeLetterThenDigitSequence();
      stringReader0.close();
      characterReader0.consumeTo("3");
      // Undeclared exception!
      try { 
        characterReader0.matches("4EMmAzkeSry\">;Bbm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ytp!k1;*Qd(RI,mON");
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matches('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4aiI|{)1+O?l0No@e=_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[1];
      characterReader0.consumeToAnySorted(charArray0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase("|1]N%XaYZb*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4S]}?");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1409);
      characterReader0.consumeTo('K');
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.matchConsume("b8@X_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.mark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'xA(ac]K");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[5];
      characterReader0.consumeToAnySorted(charArray0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.isEmpty();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 737);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.current();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'xA(ac]K");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[5];
      characterReader0.consumeToAnySorted(charArray0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("'xA(ac]K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kr5Z{klb-t\"KHD");
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kr5Z{klb-t\"KHD");
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1115);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ytp!k1;*Qd(RI,mON");
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" olj=JRW9,qyo8^tMFP");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTo('v');
      char[] charArray0 = new char[2];
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-fepq@pgFo?");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3X#enC+");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 24576);
      stringReader0.close();
      characterReader0.consumeToEnd();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("3X#enC+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("No buffer left to unconsume");
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kr5Z{klb-t\"KHD");
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 123);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo('c');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consumeTagName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[3];
      stringReader0.close();
      characterReader0.consumeToAny(charArray0);
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterThenDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z@wkWW=uT");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 19);
      stringReader0.close();
      characterReader0.consumeData();
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3X#enC+");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 24576);
      stringReader0.close();
      characterReader0.consumeTo('~');
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Must be true");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      stringReader0.close();
      characterReader0.consumeData();
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")ysEhRLE#*-|2R3x");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeToEnd();
      stringReader0.close();
      // Undeclared exception!
      try { 
        characterReader0.consume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".~Ljc+o)S3%.");
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s;6+su8 +~ [y{");
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, (-1433));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null, 97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-fepq@pgFo?");
      stringReader0.close();
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XaZOyo`%");
      characterReader0.consumeToEnd();
      boolean boolean0 = characterReader0.isEmpty();
      assertEquals(8, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rX6#.&0*g5g!w");
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kr5Z{klb-t\"KHD");
      boolean boolean0 = characterReader0.rangeEquals(1, 30, "org.jsoup.UncheckedIOException");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("l`Ng/m7tr?q|");
      char[] charArray0 = new char[1];
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.consumeToAny(charArray0);
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("~}8");
      boolean boolean0 = characterReader0.containsIgnoreCase("~}8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9,#r3^f>v <Q2c'&Gk");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("c8#sHh7O|OW|!&");
      characterReader0.consumeHexSequence();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(2, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ytp!k1;*Qd(RI,mON");
      characterReader0.consumeTagName();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(17, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~}8");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9V&XuOWE5sV.v,x~jk");
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-fepq@pgFo?");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[2];
      charArray0[1] = '<';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KAz1,P6");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[7];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("<-fepq@pgFo?");
      char[] charArray0 = new char[7];
      charArray0[3] = 'F';
      characterReader0.consumeToAny(charArray0);
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(9, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char[] charArray0 = new char[1];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8t#sHh7O|OW|!&");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("Must be false");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@9u");
      boolean boolean0 = characterReader0.matchesIgnoreCase("@9u");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4aiI|{)1+O?l0No@e=_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterThenDigitSequence();
      boolean boolean0 = characterReader0.matches("4");
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4aiI|{)1+O?l0No@e=_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeLetterThenDigitSequence();
      boolean boolean0 = characterReader0.matchConsume("4aiI|{)1+O?l0No@e=_");
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("<-fepq@pgFo?");
      boolean boolean0 = characterReader0.matches('<');
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-fepq@pgFo?");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matches('p');
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ytp!k1;*Qd(RI,mON");
      characterReader0.consumeTagName();
      characterReader0.matches('(');
      assertEquals(17, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("c8#sHh7O|OW|!&");
      characterReader0.consumeLetterSequence();
      characterReader0.consumeDigitSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4aiI|{)1+O?l0No@e=_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[1];
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.consumeDigitSequence();
      assertEquals(19, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AFb6tAt:8}5:yn");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeHexSequence();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("f%PJA.Eac");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals(1, characterReader0.pos());
      assertEquals("f", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kr5Z{klb-t\"KHD");
      characterReader0.consumeData();
      characterReader0.consumeHexSequence();
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("L[]slz?a+([&3Z");
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("L", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(">J2=)1sP>e:1:");
      String string0 = characterReader0.consumeTagName();
      assertEquals("", string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("<-fepq@pgFo?");
      String string0 = characterReader0.consumeTagName();
      assertEquals("", string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E/g`=,fAd%");
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      String string0 = characterReader0.consumeTagName();
      assertEquals("", string0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTagName();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-fepq@pgFo?");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      String string0 = characterReader0.consumeData();
      assertEquals(0, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@9u");
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = ':';
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.consumeDigitSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("l`Ng/m7tr?q|");
      char[] charArray0 = new char[1];
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeToEnd();
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")'1,");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 2068);
      characterReader0.consumeTagName();
      characterReader0.consumeTo(")'1,");
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kr5Z{klb-t\"KHD");
      characterReader0.consumeTo('K');
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3X#enC+");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 24576);
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(1, characterReader0.pos());
      
      characterReader0.unconsume();
      String string0 = characterReader0.consumeTo("3X#enC+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.containsIgnoreCase("No buffer left to unconsume");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1{8*3td1O}>9RdO");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeHexSequence();
      characterReader0.consumeTo("1");
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("E/g`=,fAd%");
      boolean boolean0 = characterReader0.containsIgnoreCase("E");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9,#r3^f>v <Q2c'&Gk");
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y8I4$p.Hq:mUNFxEWn,");
      characterReader0.mark();
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: No buffer left to unconsume
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MNEt");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      characterReader0.consumeLetterSequence();
      characterReader0.unconsume();
      characterReader0.consumeTo('~');
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z@wkWW=uT");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 19);
      char char0 = characterReader0.current();
      assertEquals(0, characterReader0.pos());
      assertEquals('Z', char0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ytp!k1;*Qd(RI,mON");
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4aiI|{)1+O?l0No@e=_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[1];
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.matchesIgnoreCase("Mark invalid");
      assertEquals(19, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No buffer left to unconsume");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4aiI|{)1+O?l0No@e=_");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("l`Ng/m7tr?q|");
      String string0 = characterReader0.toString();
      assertEquals("l`Ng/m7tr?q|", string0);
      assertEquals(0, characterReader0.pos());
  }
}
