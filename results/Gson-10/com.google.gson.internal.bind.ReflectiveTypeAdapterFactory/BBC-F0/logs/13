* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.gson.internal.bind.ReflectiveTypeAdapterFactory
* Starting Client-0
* Connecting to master process on port 21242
* Analyzing classpath: 
  - subjects/buggy-versions/Gson-10/target/classes
* Finished analyzing classpath
* Generating tests for class com.google.gson.internal.bind.ReflectiveTypeAdapterFactory
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 411
* Using seed 666465347
* Starting evolution
* Initial Number of Goals in DynaMOSA = 123 / 411
* Search finished after 303s and 263 generations, 55942 statements, best individual has fitness: 157.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 72%
* Total number of goals: 114
* Number of covered goals: 82
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 59%
* Total number of goals: 64
* Number of covered goals: 38
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 64%
* Total number of goals: 149
* Number of covered goals: 95
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 17%
* Total number of goals: 6
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 57%
* Total number of goals: 7
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 55%
* Total number of goals: 64
* Number of covered goals: 35
* Generated 10 tests with total length 49
* Resulting test suite's coverage: 50% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 09:21:37.480 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_2_1605604897406/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory_2_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_2_1605604897406/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory_2_tmp__ESTest_scaffolding.java]]
[MASTER] 09:21:37.480 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Gson-10/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Gson-10/target/classes
[MASTER] 09:21:37.480 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Gson-10/target/classes
[MASTER] 09:21:37.487 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: com.google.gson.reflect.TypeToken<java.lang.Integer> cannot be converted to com.google.gson.reflect.TypeToken<com.google.gson.InstanceCreator<com.google.gson.InstanceCreator>>: 31
[MASTER] 09:21:37.488 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_2_1605604897406/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory_2_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 09:21:37 GMT 2020
4:  */
5: 
6: package com.google.gson.internal.bind;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.gson.FieldNamingStrategy;
11: import com.google.gson.Gson;
12: import com.google.gson.InstanceCreator;
13: import com.google.gson.TypeAdapter;
14: import com.google.gson.internal.ConstructorConstructor;
15: import com.google.gson.internal.Excluder;
16: import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
17: import com.google.gson.reflect.TypeToken;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class ReflectiveTypeAdapterFactory_2_tmp__ESTest extends ReflectiveTypeAdapterFactory_2_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Excluder excluder0 = new Excluder();
28:       ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, (FieldNamingStrategy) null, excluder0);
29:       Class<Integer> class0 = Integer.TYPE;
30:       TypeToken<Integer> typeToken0 = TypeToken.get(class0);
31:       TypeAdapter<InstanceCreator<InstanceCreator>> typeAdapter0 = reflectiveTypeAdapterFactory0.create((Gson) null, (TypeToken<InstanceCreator<InstanceCreator>>) typeToken0);
32:       assertNull(typeAdapter0);
33:   }
34: }
RegularFileObject[/tmp/EvoSuite_2_1605604897406/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory_2_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 09:21:37 GMT 2020
5:  */
6: 
7: package com.google.gson.internal.bind;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class ReflectiveTypeAdapterFactory_2_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ReflectiveTypeAdapterFactory_2_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
82:       "com.google.gson.reflect.TypeToken",
83:       "com.google.gson.internal.bind.TypeAdapters$23",
84:       "com.google.gson.internal.bind.TypeAdapters$24",
85:       "com.google.gson.internal.bind.TypeAdapters$25",
86:       "com.google.gson.internal.bind.TypeAdapters$26",
87:       "com.google.gson.internal.bind.TypeAdapters$20",
88:       "com.google.gson.TypeAdapter",
89:       "com.google.gson.internal.bind.JsonTreeWriter",
90:       "com.google.gson.internal.bind.TypeAdapters$21",
91:       "com.google.gson.internal.bind.TypeAdapters$22",
92:       "com.google.gson.internal.bind.TypeAdapters$27",
93:       "com.google.gson.FieldNamingStrategy",
94:       "com.google.gson.internal.bind.TypeAdapters$28",
95:       "com.google.gson.internal.bind.TypeAdapters$29",
96:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
97:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
98:       "com.google.gson.internal.bind.TimeTypeAdapter",
99:       "com.google.gson.ExclusionStrategy",
100:       "com.google.gson.internal.bind.TypeAdapters$34",
101:       "com.google.gson.internal.bind.TypeAdapters$35",
102:       "com.google.gson.internal.bind.TypeAdapters$30",
103:       "com.google.gson.internal.bind.TypeAdapters$32",
104:       "com.google.gson.internal.bind.TypeAdapters$33",
105:       "com.google.gson.JsonArray",
106:       "com.google.gson.LongSerializationPolicy",
107:       "com.google.gson.internal.bind.TypeAdapters$35$1",
108:       "com.google.gson.internal.Excluder",
109:       "com.google.gson.TypeAdapterFactory",
110:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
111:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
112:       "com.google.gson.stream.JsonReader$1",
113:       "com.google.gson.internal.$Gson$Types",
114:       "com.google.gson.stream.JsonReader",
115:       "com.google.gson.InstanceCreator",
116:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
117:       "com.google.gson.Gson$FutureTypeAdapter",
118:       "com.google.gson.stream.JsonWriter",
119:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
120:       "com.google.gson.internal.$Gson$Preconditions",
121:       "com.google.gson.internal.Streams",
122:       "com.google.gson.internal.bind.TypeAdapters$12",
123:       "com.google.gson.internal.bind.TypeAdapters$13",
124:       "com.google.gson.internal.bind.TypeAdapters$14",
125:       "com.google.gson.internal.bind.TypeAdapters$15",
126:       "com.google.gson.internal.bind.TypeAdapters$10",
127:       "com.google.gson.internal.Primitives",
128:       "com.google.gson.internal.bind.TypeAdapters$11",
129:       "com.google.gson.stream.MalformedJsonException",
130:       "com.google.gson.internal.bind.ArrayTypeAdapter",
131:       "com.google.gson.stream.JsonToken",
132:       "com.google.gson.internal.ConstructorConstructor$3",
133:       "com.google.gson.internal.bind.TypeAdapters$16",
134:       "com.google.gson.internal.ObjectConstructor",
135:       "com.google.gson.internal.bind.TypeAdapters$17",
136:       "com.google.gson.internal.bind.TypeAdapters$18",
137:       "com.google.gson.JsonNull",
138:       "com.google.gson.internal.bind.TypeAdapters$19",
139:       "com.google.gson.internal.bind.DateTypeAdapter$1",
140:       "com.google.gson.LongSerializationPolicy$1",
141:       "com.google.gson.LongSerializationPolicy$2",
142:       "com.google.gson.JsonObject",
143:       "com.google.gson.internal.bind.JsonTreeReader$1",
144:       "com.google.gson.TypeAdapter$1",
145:       "com.google.gson.Gson$6",
146:       "com.google.gson.internal.UnsafeAllocator$3",
147:       "com.google.gson.internal.UnsafeAllocator$4",
148:       "com.google.gson.internal.UnsafeAllocator$1",
149:       "com.google.gson.internal.UnsafeAllocator$2",
150:       "com.google.gson.Gson$2",
151:       "com.google.gson.Gson$3",
152:       "com.google.gson.internal.bind.ObjectTypeAdapter",
153:       "com.google.gson.Gson$4",
154:       "com.google.gson.Gson$5",
155:       "com.google.gson.internal.bind.DateTypeAdapter",
156:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
157:       "com.google.gson.Gson$1",
158:       "com.google.gson.internal.bind.TypeAdapters$26$1",
159:       "com.google.gson.Gson",
160:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
161:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
162:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
163:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
164:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
165:       "com.google.gson.annotations.SerializedName",
166:       "com.google.gson.internal.Excluder$1",
167:       "com.google.gson.internal.bind.TypeAdapters$2",
168:       "com.google.gson.internal.bind.JsonTreeReader",
169:       "com.google.gson.internal.bind.TypeAdapters$1",
170:       "com.google.gson.internal.bind.JsonTreeWriter$1",
171:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
172:       "com.google.gson.JsonIOException",
173:       "com.google.gson.internal.bind.TypeAdapters$8",
174:       "com.google.gson.internal.bind.TypeAdapters$7",
175:       "com.google.gson.internal.bind.TypeAdapters",
176:       "com.google.gson.internal.bind.TypeAdapters$9",
177:       "com.google.gson.internal.bind.TypeAdapters$4",
178:       "com.google.gson.internal.bind.TypeAdapters$3",
179:       "com.google.gson.internal.bind.TypeAdapters$6",
180:       "com.google.gson.internal.bind.TypeAdapters$5",
181:       "com.google.gson.internal.LazilyParsedNumber",
182:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
183:       "com.google.gson.JsonParseException",
184:       "com.google.gson.internal.ConstructorConstructor",
185:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
186:       "com.google.gson.JsonElement",
187:       "com.google.gson.FieldNamingPolicy",
188:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
189:       "com.google.gson.annotations.JsonAdapter",
190:       "com.google.gson.JsonPrimitive",
191:       "com.google.gson.internal.UnsafeAllocator",
192:       "com.google.gson.internal.Streams$AppendableWriter",
193:       "com.google.gson.internal.ConstructorConstructor$14",
194:       "com.google.gson.JsonSyntaxException",
195:       "com.google.gson.FieldNamingPolicy$4",
196:       "com.google.gson.FieldNamingPolicy$3",
197:       "com.google.gson.FieldNamingPolicy$5",
198:       "com.google.gson.internal.JsonReaderInternalAccess",
199:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
200:       "com.google.gson.FieldNamingPolicy$2",
201:       "com.google.gson.FieldNamingPolicy$1"
202:     );
203:   } 
204: 
205:   private static void resetClasses() {
206:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ReflectiveTypeAdapterFactory_2_tmp__ESTest_scaffolding.class.getClassLoader()); 
207: 
208:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
209:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
210:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
211:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1",
212:       "com.google.gson.TypeAdapter",
213:       "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter",
214:       "com.google.gson.internal.Primitives",
215:       "com.google.gson.internal.$Gson$Types",
216:       "com.google.gson.reflect.TypeToken",
217:       "com.google.gson.Gson$1",
218:       "com.google.gson.Gson",
219:       "com.google.gson.internal.Excluder",
220:       "com.google.gson.FieldNamingPolicy",
221:       "com.google.gson.LongSerializationPolicy",
222:       "com.google.gson.internal.ConstructorConstructor",
223:       "com.google.gson.internal.bind.TypeAdapters$5",
224:       "com.google.gson.internal.bind.TypeAdapters$32",
225:       "com.google.gson.internal.bind.TypeAdapters$6",
226:       "com.google.gson.internal.bind.TypeAdapters$7",
227:       "com.google.gson.internal.bind.TypeAdapters$8",
228:       "com.google.gson.internal.bind.TypeAdapters$33",
229:       "com.google.gson.internal.bind.TypeAdapters$9",
230:       "com.google.gson.internal.bind.TypeAdapters$10",
231:       "com.google.gson.internal.bind.TypeAdapters$11",
232:       "com.google.gson.internal.bind.TypeAdapters$1",
233:       "com.google.gson.TypeAdapter$1",
234:       "com.google.gson.internal.bind.TypeAdapters$2",
235:       "com.google.gson.internal.bind.TypeAdapters$3",
236:       "com.google.gson.internal.bind.TypeAdapters$12",
237:       "com.google.gson.internal.bind.TypeAdapters$13",
238:       "com.google.gson.internal.bind.TypeAdapters$14",
239:       "com.google.gson.internal.bind.TypeAdapters$15",
240:       "com.google.gson.internal.bind.TypeAdapters$16",
241:       "com.google.gson.internal.bind.TypeAdapters$17",
242:       "com.google.gson.internal.bind.TypeAdapters$18",
243:       "com.google.gson.internal.bind.TypeAdapters$19",
244:       "com.google.gson.internal.bind.TypeAdapters$20",
245:       "com.google.gson.internal.bind.TypeAdapters$21",
246:       "com.google.gson.internal.bind.TypeAdapters$22",
247:       "com.google.gson.internal.bind.TypeAdapters$23",
248:       "com.google.gson.internal.bind.TypeAdapters$24",
249:       "com.google.gson.internal.bind.TypeAdapters$35",
250:       "com.google.gson.internal.bind.TypeAdapters$25",
251:       "com.google.gson.internal.bind.TypeAdapters$4",
252:       "com.google.gson.internal.bind.TypeAdapters$26",
253:       "com.google.gson.internal.bind.TypeAdapters$27",
254:       "com.google.gson.internal.bind.TypeAdapters$34",
255:       "com.google.gson.internal.bind.TypeAdapters$28",
256:       "com.google.gson.internal.bind.TypeAdapters$29",
257:       "com.google.gson.internal.bind.TypeAdapters$30",
258:       "com.google.gson.internal.bind.TypeAdapters",
259:       "com.google.gson.internal.bind.ObjectTypeAdapter$1",
260:       "com.google.gson.internal.bind.ObjectTypeAdapter",
261:       "com.google.gson.Gson$2",
262:       "com.google.gson.Gson$3",
263:       "com.google.gson.Gson$5",
264:       "com.google.gson.Gson$6",
265:       "com.google.gson.internal.bind.DateTypeAdapter$1",
266:       "com.google.gson.internal.bind.DateTypeAdapter",
267:       "com.google.gson.internal.bind.TimeTypeAdapter$1",
268:       "com.google.gson.internal.bind.TimeTypeAdapter",
269:       "com.google.gson.internal.bind.SqlDateTypeAdapter$1",
270:       "com.google.gson.internal.bind.SqlDateTypeAdapter",
271:       "com.google.gson.internal.bind.ArrayTypeAdapter$1",
272:       "com.google.gson.internal.bind.ArrayTypeAdapter",
273:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
274:       "com.google.gson.internal.bind.MapTypeAdapterFactory",
275:       "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
276:       "com.google.gson.internal.JsonReaderInternalAccess",
277:       "com.google.gson.stream.JsonReader$1",
278:       "com.google.gson.stream.JsonReader",
279:       "com.google.gson.stream.MalformedJsonException",
280:       "com.google.gson.stream.JsonWriter",
281:       "com.google.gson.internal.$Gson$Preconditions",
282:       "com.google.gson.internal.Streams",
283:       "com.google.gson.Gson$FutureTypeAdapter",
284:       "com.google.gson.internal.Streams$AppendableWriter",
285:       "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite",
286:       "com.google.gson.JsonElement",
287:       "com.google.gson.JsonNull",
288:       "com.google.gson.stream.JsonToken",
289:       "com.google.gson.JsonParseException",
290:       "com.google.gson.JsonSyntaxException",
291:       "com.google.gson.internal.bind.JsonTreeWriter$1",
292:       "com.google.gson.JsonPrimitive",
293:       "com.google.gson.internal.bind.JsonTreeWriter",
294:       "com.google.gson.JsonObject",
295:       "com.google.gson.internal.LinkedTreeMap$1",
296:       "com.google.gson.internal.LinkedTreeMap",
297:       "com.google.gson.internal.LinkedTreeMap$Node",
298:       "com.google.gson.internal.bind.JsonTreeReader$1",
299:       "com.google.gson.internal.bind.JsonTreeReader",
300:       "com.google.gson.internal.ConstructorConstructor$14",
301:       "com.google.gson.internal.UnsafeAllocator",
302:       "com.google.gson.internal.UnsafeAllocator$1",
303:       "com.google.gson.JsonArray",
304:       "com.google.gson.internal.ConstructorConstructor$3",
305:       "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
306:       "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
307:       "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
308:       "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
309:       "com.google.gson.internal.ConstructorConstructor$8",
310:       "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter",
311:       "com.google.gson.internal.ConstructorConstructor$13",
312:       "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter",
313:       "com.google.gson.internal.LinkedTreeMap$EntrySet",
314:       "com.google.gson.internal.bind.TypeAdapters$35$1",
315:       "com.google.gson.internal.ConstructorConstructor$12",
316:       "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter",
317:       "com.google.gson.internal.Excluder$1",
318:       "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator",
319:       "com.google.gson.internal.LinkedTreeMap$EntrySet$1",
320:       "com.google.gson.internal.bind.ObjectTypeAdapter$2",
321:       "com.google.gson.JsonIOException"
322:     );
323:   }
324: }

[MASTER] 09:21:37.489 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Excluder excluder0 = new Excluder();
ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, (FieldNamingStrategy) null, excluder0);
Class<Integer> class0 = Integer.TYPE;
TypeToken<Integer> typeToken0 = TypeToken.get(class0);
TypeAdapter<InstanceCreator<InstanceCreator>> typeAdapter0 = reflectiveTypeAdapterFactory0.create((Gson) null, (TypeToken<InstanceCreator<InstanceCreator>>) typeToken0);
assertNull(typeAdapter0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 15
* Writing tests to file
* Writing JUnit test case 'ReflectiveTypeAdapterFactory_ESTest' to results/Gson-10/com.google.gson.internal.bind.ReflectiveTypeAdapterFactory/BBC-F0/tests/13
* Done!

* Computation finished
