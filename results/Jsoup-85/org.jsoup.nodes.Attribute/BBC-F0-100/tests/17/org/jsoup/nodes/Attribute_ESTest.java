/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 23:56:53 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("muted", "vQ,gW6Vv:");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("vQ,gW6Vv:", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("</1JoeC", "</1JoeC");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("</1JoeC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) mockPrintWriter0, document_OutputSettings0);
      assertEquals("</1JoeC", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("zx>T=olKD;=r0oo=GI", (String) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-(fr0zl");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("allowfullscreen");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("&X#w{vBo=%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = new Attribute("           ", (String) null);
      String string0 = attribute0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute("A^", (String) null);
      String string0 = attribute0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = new Attribute("tj Anq$lLzl", "ismap");
      String string0 = attribute0.getValue();
      assertEquals("ismap", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("dbta-", " ", attributes0);
      attribute0.getKey();
      assertEquals(" ", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("           ", (String) null);
      String string0 = attribute0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("[%s!=%s]", "inert", attributes0);
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("%3CP", "%3CP", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = new Attribute("zx>T=olKD;=r0oo=GI", (String) null);
      // Undeclared exception!
      try { 
        attribute0.setValue("'),)D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("dbta-", " ");
      Attribute attribute0 = new Attribute("dbta-", " ", attributes1);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("=\" \"");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("noresize", "noresize");
      attributes1.keys = null;
      Attribute attribute0 = new Attribute("Unexpected characters returned for ", "@b6Q.S gv<AA>*gWm-", attributes1);
      // Undeclared exception!
      try { 
        attribute0.setKey("1pgaBIH!d]j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(" ", (String) null, attributes0);
      // Undeclared exception!
      try { 
        attribute0.setKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Document$OutputSettings$Syntax", "{UVT`cowj><,[~");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      Attribute attribute0 = new Attribute("dbta-", "dbta-", attributes1);
      // Undeclared exception!
      try { 
        attribute0.setKey("dbta-");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "V^0DT_O");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("V^0DT_O", "9E7&*X~T++", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "zs9[vXx=U)Gi\\un";
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html(string0, string0, (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("(Fr0Zl=\"(Fr0Zl\"", "(Fr0Zl", (Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        Attribute.html("data-data-uP(-~xi0'YZIKS{", "data-data-uP(-~xi0'YZIKS{", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("QA3kI&^{Jc']|", "`f-rfax;a");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "QA3kI&^{Jc']|=\"`f-rfax;a\"");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = new Attribute("XC?2&}arG{HY~g", "XC?2&}arG{HY~g");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("]\"^.#>%O'qH#knuuH", "k1pW>#~mjC\u0006C");
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("$}|hf{Vaj|R.t:x]b{", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "seamless");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "T3tt|w", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "RsM$n'jibQ$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("br");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("/tgSQV=UE>", (String) null, (Appendable) mockPrintWriter0, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockFile mockFile0 = new MockFile("", "     ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Attribute.html("h]bmjg<$b44.90>G;", "     ", (Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals(25L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("xaug&l,g>0[qu < ,w", "xaug&l,g>0[qu < ,w");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("dWE!'", (String) null);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "nowrap");
      attribute0.hashCode();
      assertEquals("nowrap", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = new Attribute("dWE!'", (String) null);
      Attributes attributes0 = new Attributes();
      Attribute attribute1 = new Attribute("dWE!'", "dWE!'", attributes0);
      boolean boolean0 = attribute0.equals(attribute1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(attribute1.equals((Object)attribute0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute("dWE!'", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("t;", " t,=w+fi~nyc#g1<u");
      Attribute attribute1 = new Attribute("data-(Fr0Zl", "t;");
      boolean boolean0 = attribute1.equals(attribute0);
      assertFalse(boolean0);
      assertEquals(" t,=w+fi~nyc#g1<u", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "nowrap");
      Object object0 = new Object();
      boolean boolean0 = attribute0.equals(object0);
      assertFalse(boolean0);
      assertEquals("nowrap", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("t;", " t,=w+fi~nyc#g1<u");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
      assertEquals(" t,=w+fi~nyc#g1<u", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "nowrap");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("nowrap", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("sa^a-", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("}&", "z)");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
      assertEquals("z)", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "nowrap");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("nowrap", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("default", "default", document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("A%YP", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = Attribute.shouldCollapseAttribute("L/5(uY8c|Kj<nOev\"", "allowfullscreen", document_OutputSettings1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-(Fr0Zl", "t;");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
      assertEquals("t;", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(" ", (String) null, attributes0);
      String string0 = attribute0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("dbta-", " ");
      Attribute attribute0 = new Attribute("dbta-", " ", attributes1);
      attribute0.setValue("=\" \"");
      assertEquals("=\" \"", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("dbta-", " ", attributes0);
      attribute0.setValue("=\" \"");
      assertEquals("=\" \"", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("h]bmjg<$b44.90>G;", "rcxX=:7/56?V^]:U");
      attributes0.put(attribute0);
      assertEquals("h]bmjg<$b44.90>G;", attribute0.getKey());
      
      attribute0.setKey("rcxX=:7/56?V^]:U");
      assertEquals("rcxX=:7/56?V^]:U", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Unexpected characters returned for ", "@b6Q.S gv<AA>*gWm-", attributes0);
      assertEquals("Unexpected characters returned for", attribute0.getKey());
      
      attribute0.setKey("1pgaBIH!d]j");
      assertEquals("@b6Q.S gv<AA>*gWm-", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("xaug&l,g>0[qu < ,w", "xaug&l,g>0[qu < ,w");
      attribute0.setKey("data-data-2ebijtah/cmb");
      assertEquals("xaug&l,g>0[qu < ,w", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attribute attribute0 = new Attribute("3j#<g)", "3j#<g)");
      String string0 = attribute0.toString();
      assertEquals("3j#<g)=\"3j#<g)\"", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attribute attribute0 = new Attribute("3j#<g)", "3j#<g)");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("t;", " t,=w+fi~nyc#g1<u");
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("t;", attribute0.getKey());
      assertFalse(boolean0);
      assertEquals(" t,=w+fi~nyc#g1<u", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "nowrap");
      String string0 = attribute0.html();
      assertEquals("allowfullscreen=\"nowrap\"", string0);
  }
}
