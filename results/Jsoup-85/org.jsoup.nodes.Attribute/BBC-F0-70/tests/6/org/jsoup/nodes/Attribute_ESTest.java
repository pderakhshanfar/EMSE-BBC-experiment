/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 21:39:12 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("checked", "Xs^]8)LzPEt|xB85");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("Xs^]8)LzPEt|xB85", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("autofocus", "", document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("Lu", "seamless", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-a@k3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("allowfullscreen");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute(")n|5q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("  ", (String) null, attributes0);
      String string0 = attribute0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-ismap", (String) null);
      String string0 = attribute0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = new Attribute("FP5W*nTRdD'&xY0QZT", "FP5W*nTRdD'&xY0QZT");
      String string0 = attribute0.getValue();
      assertEquals("FP5W*nTRdD'&xY0QZT", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("selected", "");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = new Attribute("w", (String) null);
      String string0 = attribute0.getKey();
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("       ", "       ");
      String string0 = attribute0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = new Attribute("UTF8", "UTF8");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("+#TfGUN^HX@8=\"          \"", "", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("fallback", "fallback");
      // Undeclared exception!
      try { 
        attribute0.setValue("@V>PxGLBCDn^e>Qka8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("9Wjr'Hn^YHvBP]D#m", "b", attributes0);
      attributes0.put(attribute0);
      attributes0.keys = null;
      // Undeclared exception!
      try { 
        attribute0.setKey("b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute(".Mi!", "");
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("main", true);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      Attribute attribute0 = new Attribute("datb-", "datb-", attributes0);
      // Undeclared exception!
      try { 
        attribute0.setKey("datb-");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "^(3w");
      // Undeclared exception!
      try { 
        Attribute.html("^(3w", "          ", (Appendable) charBuffer0, (Document.OutputSettings) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("multiple", "multiple", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xlBbHg7dVmg4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        Attribute.html("org.jsoup.parser.HtmlTreeBuilder", "defer", (Appendable) mockPrintStream0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        Attribute.html("2Fto00qzJYg(&TIyxB", "+#TfGUN^HX@8=\"          \"", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = new Attribute("declare", "b @r$W>ak}cpFw");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "]9<ED");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("hVId ", "hVId ", attributes0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("%.(w!Ye", "ismap");
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute("&", "&");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        attribute0.html((Appendable) pipedWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("V'/^(>as0m", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "reversed", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "reversed");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e-7]KzQv_0;=\"\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("", "e-7]KzQv_0;=\"\"", (Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals(27L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("UTF8", "UTF8");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      attributes0.put("UTF8", false);
      attribute0.setValue("UTF-");
      assertEquals("UTF-", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xlBbHg7dVmg4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute attribute0 = Attribute.createFromEncoded("0r5r", "hXjqLA&*f&PG}--=1");
      attribute0.html((Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals(32L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute(":", (String) null);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("0r5r", "hXjqLA&*f&PG}--=1");
      attribute0.hashCode();
      assertEquals("hXjqLA&*f&PG}--=1", attribute0.getValue());
      assertEquals("0r5r", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = new Attribute("O", "O");
      Attribute attribute1 = new Attribute("O", (String) null);
      boolean boolean0 = attribute1.equals(attribute0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(attribute0.equals((Object)attribute1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("typemustmatch", "data-Xs^]8)LzPEt|xB85", attributes0);
      Attribute attribute1 = new Attribute(" T&", "typemustmatch", attributes0);
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("typemustmatch", attribute1.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("O", "Xs^]8)LzPEt|xB85");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
      assertEquals("Xs^]8)LzPEt|xB85", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("FP5W*nTRdD'&xY0QZT", "FP5W*nTRdD'&xY0QZT");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = new Attribute("O", "O");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("D%XbIC5!", "UT8");
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attribute0.equals(attributes0);
      assertFalse(boolean0);
      assertEquals("UT8", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("O", "Xs^]8)LzPEt|xB85");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
      assertEquals("Xs^]8)LzPEt|xB85", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "acronym");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("acronym", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("RH'Ykq");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("defer", "defer", (Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals(5L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("data-a@k3", "data-a@k3");
      String string0 = attributes1.html();
      assertEquals(" data-a@k3=\"data-a@k3\"", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("e-7]KzQv_0;", "", attributes0);
      String string0 = attribute0.toString();
      assertEquals("e-7]KzQv_0;=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attribute attribute0 = new Attribute("UTFh", "UTFh");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-;.C1Isv3}W2p|yNc-[=\";.C1Isv3}W2p|yNc-[\"", "D%XbIC5!", attributes0);
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
      assertEquals("D%XbIC5!", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("       ", (String) null, attributes0);
      String string0 = attribute0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("8", "8");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      String string0 = attribute0.setValue((String) null);
      assertNotNull(string0);
      
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = new Attribute("8", "8");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      attribute0.setKey("data-ismap");
      assertEquals("8", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("datb-", "datb-", attributes0);
      attribute0.setKey("datb-");
      assertEquals("datb-", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attribute attribute0 = new Attribute("FP5W*nTRdD'&xY0QZT", "FP5W*nTRdD'&xY0QZT");
      attribute0.setKey("Xs^]8)LzPEt|xB85");
      assertEquals("Xs^]8)LzPEt|xB85", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attribute attribute0 = new Attribute("Z O6FRtEmEUm<e]yx", (String) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attribute attribute0 = new Attribute("w", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attribute attribute0 = new Attribute("D%XbIC5!", "UT8");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
      assertEquals("D%XbIC5!", attribute0.getKey());
      assertEquals("UT8", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("/yD|Mc2<YM", "/yD|Mc2<YM");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Attribute attribute0 = new Attribute("D%XbIC5!", "UT8");
      String string0 = attribute0.html();
      assertEquals("D%XbIC5!=\"UT8\"", string0);
  }
}
