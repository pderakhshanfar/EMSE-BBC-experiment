/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 23:26:24 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "allowfullscreen");
      String string0 = attribute0.toString();
      assertEquals("allowfullscreen", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "allowfullscreen");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Document$QuirksMode", "org.jsoup.nodes.Document$QuirksMode", attributes0);
      StringWriter stringWriter0 = new StringWriter(1719);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("org.jsoup.nodes.Document$QuirksMode=\"org.jsoup.nodes.Document$QuirksMode\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("    ", (String) null);
      String string0 = attribute0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute attribute0 = new Attribute("#8v|l1c&|m}6+w", (String) null, attributes0);
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("<LIn[0gi<|X=\"#root\"", (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("w*#d3fM", "nowrap", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-5?i-|");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("allowfullscreen");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("nohref");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("    ", (String) null);
      String string0 = attribute0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("open", (String) null, attributes0);
      String string0 = attribute0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("[W/CFj\"", "\"");
      String string0 = attribute0.getValue();
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Document$QuirksMode", "org.jsoup.nodes.Document$QuirksMode", attributes0);
      String string0 = attribute0.setValue("");
      String string1 = attribute0.getValue();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "allowfullscreen");
      String string0 = attribute0.getKey();
      assertEquals("allowfullscreen", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("     ", "                    ");
      attribute0.getKey();
      assertEquals("                    ", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("x6[;grAGR\"j", "x6[;grAGR\"j");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("main", "org.j", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("}MeXh*Qiw](P?3W/V/", "org.jsoup.nodes.Document$QuirksMode");
      // Undeclared exception!
      try { 
        attribute0.setValue("C-~.QRDV& jC<34]9s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("hI", "hI");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      attributes1.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("]\"? +__8+#eYgF");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute(")}BK3bXa4kdaz~<", ")}BK3bXa4kdaz~<");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("]\"yNE^-ZOlQ<Y<p)%M<", true);
      attribute0.parent = attributes2;
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attribute0.setKey("f,-pXoUV@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("x6[;grAGR\"j", "x6[;grAGR\"j");
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("AfterDoctypeSystemIdcntifer", "u");
      Attribute attribute0 = new Attribute("u", "u");
      attributes2.put(attribute0);
      String[] stringArray0 = new String[1];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setKey("OvZrH;Wv$ B");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "data-data-fctrve/x}");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("data-data-fctrve/x}", "DoctypeName", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("nohref", "data-", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        Attribute.html("h^P#OzN=\"FbTf_JbJ_(eBo|\"", "h^P#OzN=\"FbTf_JbJ_(eBo|\"", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-org.jsoup.nodes.Document$QuirksMode", "data-org.jsoup.nodes.Document$QuirksMode", attributes0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "data-org.jsoup.nodes.Document$QuirksMode");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attribute attribute0 = new Attribute("1", "footer");
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("=*Ko&R 9", "o");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, "(I)|^gi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("tKZ=wc_a]K3", "i%");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("#8V|L1c&|M}6+W", (String) null, attributes0);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("x6[;grAGR\"j", "x6[;grAGR\"j");
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("lkTOsIhl.]cV", (String) null);
      Attribute attribute1 = new Attribute("lkTOsIhl.]cV", (String) null);
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Document$QuirksMode", "}{N/WprUoO&`k\"WJL&F");
      Attribute attribute1 = new Attribute("org.jsoup.nodes.Document$QuirksMode", (String) null);
      boolean boolean0 = attribute1.equals(attribute0);
      //  // Unstable assertion: assertTrue(attribute0.equals((Object)attribute1));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals("}{N/WprUoO&`k\"WJL&F", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = new Attribute("<LIn[0gi<|X ", "#root");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
      assertEquals("#root", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "data-");
      Attribute attribute1 = Attribute.createFromEncoded("2BPQru^S8Tt\"utKFR,", "#%s");
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("2BPQru^S8Tt\"utKFR,", attribute1.getKey());
      assertEquals("#%s", attribute1.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("<LIn[0gi<|X ", "#root");
      boolean boolean0 = attribute0.equals((Object) null);
      assertEquals("#root", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Document$QuirksMode", "}{N/WprUoO&`R{1WJL&F");
      boolean boolean0 = attribute0.equals(attribute0);
      assertEquals("}{N/WprUoO&`R{1WJL&F", attribute0.getValue());
      assertTrue(boolean0);
      assertEquals("org.jsoup.nodes.Document$QuirksMode", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Document$QuirksMode", "org.jsoup.nodes.Document$QuirksMode", attributes0);
      Object object0 = new Object();
      boolean boolean0 = attribute0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = new Attribute("%**rI'tdm7J=", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Document$QuirksMode", "org.jsoup.nodes.Document$QuirksMode", attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attribute attribute0 = new Attribute("multiple", "oxtE-J,8K`8vvT+x2");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
      assertEquals("oxtE-J,8K`8vvT+x2", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("required");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("default", "default", (Appendable) mockFileWriter0, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Attribute.html("t91", (String) null, (Appendable) charBuffer0, document_OutputSettings1);
      assertArrayEquals(new char[] {'t', '9', '1', '=', '\"', '\"', '\u0000'}, charArray0);
      assertEquals(6, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-5?i-|", "<lin[0gi<|x");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
      assertEquals("<lin[0gi<|x", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("2BPQru^S8Tt\"utKFR,", "#%s");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
      assertEquals("2BPQru^S8Tt\"utKFR,", attribute0.getKey());
      assertEquals("#%s", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = new Attribute("JEr{RU", (String) null);
      String string0 = attribute0.html();
      assertEquals("JEr{RU", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("body", "body");
      attributes0.put(attribute0);
      attribute0.setValue("v!{r-^ gce]@&n");
      assertEquals("v!{r-^ gce]@&n", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Document$QuirksMode", "org.jsoup.nodes.Document$QuirksMode", attributes0);
      attribute0.setValue("");
      String string0 = attribute0.toString();
      assertEquals("org.jsoup.nodes.Document$QuirksMode=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-data-charset", "data-", attributes0);
      assertEquals("data-data-charset", attribute0.getKey());
      
      attribute0.setKey("}");
      assertEquals("data-", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "data-");
      attribute0.setKey("autofocus");
      assertEquals("autofocus", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "data-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "data-");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("x6[;grAGR\"j", "x6[;grAGR\"j");
      attributes0.put(attribute0);
      attribute0.setKey("}");
  }
}
