/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 23:41:40 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("readonly", "readonly");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("7qeef0s", "7qeef0s", attributes0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) mockPrintWriter0, document_OutputSettings0);
      assertEquals("7qeef0s", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("               ", (String) null);
      String string0 = attribute0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("limitedQuirks", "PE3l^2_4WD;_m$k6", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
      assertEquals("PE3l^2_4WD;_m$k6", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("noresize", "noresize", document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(" l<vfo '", " l<vfo '");
      attributes0.put(attribute0);
      attribute0.setValue("");
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("Syn%tSk!\"j+=J4;k]\"", "Syn%tSk!\"j+=J4;k]\"");
      attribute0.setKey("data-+<");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("required");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("&nbsp;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "&ej\"p;");
      String string0 = attribute0.html();
      assertEquals("allowfullscreen=\"&amp;ej&quot;p;\"", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = new Attribute("1LyW J^26%=Nh[`", (String) null);
      String string0 = attribute0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("inert", "muted");
      String string0 = attribute0.getValue();
      assertEquals("muted", string0);
      assertEquals("inert", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = new Attribute("f~gr7", "");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("9", "9");
      String string0 = attribute0.getKey();
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = new Attribute("                    ", "default");
      attribute0.getKey();
      assertEquals("default", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("nYso$9Hqw", "nYso$9Hqw");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("data-&Q_Z5&>\u0007ufOs", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-+<", " <#?@qzJ??n0vpg");
      // Undeclared exception!
      try { 
        attribute0.setValue("k'^Du,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("QN`o%IQ", "$bB|r,l_jAnq^E2V0Xl");
      Attribute attribute0 = new Attribute("$bB|r,l_jAnq^E2V0Xl", "dH*t/", attributes1);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("data-l");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("data./", true);
      Attribute attribute0 = new Attribute("data./", "org.jsoup.select.Evaluator$AttributeWithValue", attributes1);
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attribute0.setKey("t15PMYdu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("9", "9", attributes0);
      // Undeclared exception!
      try { 
        attribute0.setKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(" l<vfo '", true);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      Attribute attribute0 = new Attribute("9p74O", " l<vfo '", attributes1);
      // Undeclared exception!
      try { 
        attribute0.setKey("9p74O");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Syn%tSk!\"j+=J4;k]\"");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("Syn%tSk!\"j+=J4;k]\"", (String) null, (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("X7M+{h+1se,To5n:b", "Le", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        Attribute.html((String) null, "data-", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute("d<}nhpWn!92k", "X~O?5n']oU8|Y");
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "d<}nhpWn!92k=\"X~O?5n']oU8|Y\"", 17, 17);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer1, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("R*+ghmLi;)n`Q[Sj", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      StringWriter stringWriter0 = new StringWriter(90);
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) stringWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("7qeef0s", "7qeef0s", attributes0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, "~hu~wXO\u0007]N_S+|9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("data-declare", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("\"0KR1l", (String) null, (Appendable) mockFileWriter0, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("M)m'", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("M)m'", "M)m'", (Appendable) mockFileWriter0, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute("d<}nhpWn!92k", "X~O?5n']oU8|Y");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "d<}nhpWn!92k=\"X~O?5n']oU8|Y\"", 17, 17);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("CdataSection", (String) null, attributes0);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("CdataSection", (String) null, attributes0);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("4]aNH#vV2]<F)kiCY|9", "nohref", attributes0);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
      assertEquals("nohref", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(")*+ghmLi;)n`Q[Sj", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Attribute attribute1 = Attribute.createFromEncoded("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "nohref");
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", attribute0.getValue());
      assertFalse(boolean0);
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", attribute1.getKey());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = new Attribute("d<}nhpWn!92k", "X~O?5n']oU8|Y");
      boolean boolean0 = attribute0.equals("d<}nhpWn!92k");
      assertEquals("X~O?5n']oU8|Y", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("org.jsoup.uncheckedioexception", "9");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("9", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("]Id:3{XG{\"OR`*0iCi", "]Id:3{XG{\"OR`*0iCi");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("CdataSection", (String) null, attributes0);
      Attribute attribute1 = new Attribute("CdataSection", "CdataSection");
      boolean boolean0 = attribute0.equals(attribute1);
      //  // Unstable assertion: assertTrue(attribute1.equals((Object)attribute0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attribute attribute0 = new Attribute("~QU!KU?08+P?A/);[rM", "");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = new Attribute("hWz)\"2%<3F\"M@%C]1,", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "&ej\"p;");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("&ej\"p;", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("jP", "");
      String string0 = attributes0.toString();
      assertEquals(" jP=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = Attribute.shouldCollapseAttribute("e1ql#vkjClMP*Rm'C=k", "BogusComment", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-US-ASCII");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("               ", (String) null);
      String string0 = attribute0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("9", true);
      Attribute attribute0 = new Attribute("9", "4]aNH#vV2]<F)kiCY|9", attributes0);
      String string0 = attribute0.setValue("4]aNH#vV2]<F)kiCY|9");
      assertEquals("4]aNH#vV2]<F)kiCY|9", attribute0.getValue());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("CdataSection", (String) null, attributes0);
      String string0 = attribute0.setValue("Tsi3K9uYTAnBS*");
      assertEquals("", string0);
      
      attribute0.hashCode();
      assertEquals("Tsi3K9uYTAnBS*", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attribute attribute0 = new Attribute("+<", "k'^Du,");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      attribute0.setKey("+<");
      assertEquals("k'^Du,", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("CdataSection", (String) null, attributes0);
      attribute0.setKey("CdataSection");
      assertNull(attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("R*+ghmLi;)n`Q[Sj", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", attribute0.getValue());
      assertFalse(boolean0);
      assertEquals("R*+ghmLi;)n`Q[Sj", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "allowfullscreen");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attribute attribute0 = new Attribute("d<}nhpWn!92k", "X~O?5n']oU8|Y");
      String string0 = attribute0.toString();
      assertEquals("d<}nhpWn!92k=\"X~O?5n']oU8|Y\"", string0);
  }
}
