/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:29:41 GMT 2021
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberSerializer_ESTest extends NumberSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      NumberSerializer numberSerializer0 = NumberSerializer.instance;
      Float float0 = new Float(0.0F);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U#t.GP8oW],jcK^", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1));
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), objectMapper0, byteArrayBuilder0, byteArray0, (byte)0, false);
      // Undeclared exception!
      numberSerializer0.serialize((Number) float0, (JsonGenerator) uTF8JsonGenerator0, serializerProvider0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Double> class0 = Double.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectReader0, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        numberSerializer0.serialize((Number) 3, (JsonGenerator) uTF8JsonGenerator0, serializerProvider0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Long> class0 = Long.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      // Undeclared exception!
      try { 
        numberSerializer0.createContextual((SerializerProvider) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Double> class0 = Double.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      // Undeclared exception!
      try { 
        numberSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(numberSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class1 = Short.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, arrayType0);
      assertFalse(arrayType0.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = numberSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberSerializer numberSerializer0 = NumberSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      JsonNode jsonNode0 = numberSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) referenceType0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Double> class0 = Double.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Short short0 = new Short((short)10);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 50);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2198), false);
      // Undeclared exception!
      try { 
        numberSerializer0.serialize((Number) short0, (JsonGenerator) uTF8JsonGenerator0, serializerProvider0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2198
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4855), objectReader0, byteArrayOutputStream0, byteArray0, 2456, true);
      // Undeclared exception!
      try { 
        numberSerializer0.serialize((Number) (byte)1, (JsonGenerator) uTF8JsonGenerator0, serializerProvider0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Long> class0 = Long.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      Double double0 = new Double((-1741.610478869));
      // Undeclared exception!
      try { 
        numberSerializer0.serialize((Number) double0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberSerializer numberSerializer0 = NumberSerializer.instance;
      Long long0 = new Long(1L);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializer0.serialize((Number) long0, (JsonGenerator) jsonGeneratorDelegate0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(1, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(1, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberSerializer numberSerializer0 = NumberSerializer.instance;
      BigInteger bigInteger0 = BigInteger.ZERO;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 536);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) bufferedOutputStream0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializer0.serialize((Number) bigInteger0, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(1, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Float> class0 = Float.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      BigDecimal bigDecimal0 = new BigDecimal(767);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 669, objectMapper0, pipedOutputStream0, byteArray0, 1, false);
      try { 
        numberSerializer0.serialize((Number) bigDecimal0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, typeFactory0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        numberSerializer0.serialize((Number) null, (JsonGenerator) writerBasedJsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Double> class0 = Double.class;
      NumberSerializer numberSerializer0 = new NumberSerializer(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<?> jsonSerializer0 = numberSerializer0.createContextual(serializerProvider0, (BeanProperty) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }
}
