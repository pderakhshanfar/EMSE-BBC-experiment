/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:50:52 GMT 2021
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializers;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberSerializers_ESTest extends NumberSerializers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      Integer integer0 = new Integer(15);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, numberSerializers_IntegerSerializer0, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FloatNode floatNode0 = new FloatNode(0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1191), objectReader0, byteArrayBuilder0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      numberSerializers_IntegerSerializer0.serialize(integer0, uTF8JsonGenerator0, serializerProvider0);
      assertFalse(numberSerializers_IntegerSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Double double0 = new Double((-4772.0));
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      File file0 = MockFile.createTempFile("JSON", "com.fasterxml.jackson.databind.deser.std.NumberDeserializers$NumberDeserializer");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator(file0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      numberSerializers_DoubleSerializer0.serialize(double0, writerBasedJsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFile mockFile0 = new MockFile("aeqoAhBe-$*.'[g&x");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      try { 
        objectMapper0.writeValue(jsonGenerator0, (Object) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loop has been executed more times than the allowed 10000 (through reference chain: org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"path\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      numberSerializers_IntegerSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(numberSerializers_IntegerSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Float> class0 = Float.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      numberSerializers_DoubleSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
      assertTrue(resolvedRecursiveType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = new NumberSerializers.ShortSerializer();
      Short short0 = new Short((short)816);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_ShortSerializer0.serialize(short0, writerBasedJsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Double double0 = new Double(3656.0798135958);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-757), stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-1279), (byte)118, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_DoubleSerializer0.serializeWithType(double0, jsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
      assertEquals(31, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
      Long long0 = new Long((-1L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Short> class0 = Short.TYPE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_IntLikeSerializer0.serialize(long0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<JsonSerializer> class0 = JsonSerializer.class;
      NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
      Long long0 = new Long((-4090L));
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_LongSerializer0.serialize(long0, jsonGenerator0, defaultSerializerProvider_Impl0);
      assertFalse(jsonGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = NumberSerializers.FloatSerializer.instance;
      Float float0 = new Float(0.0F);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null, jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      numberSerializers_FloatSerializer0.serialize(float0, jsonGenerator0, serializerProvider0);
      assertFalse(numberSerializers_FloatSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
      assertFalse(numberSerializers_FloatSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      Integer integer0 = new Integer(1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, pipedOutputStream0, byteArray0, 1, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_IntegerSerializer0.serializeWithType(integer0, jsonGeneratorDelegate0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberSerializers numberSerializers0 = new NumberSerializers();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      Class<Object> class1 = Object.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = numberSerializers_IntegerSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class1, true);
      assertEquals(1, jsonNode0.size());
  }
}
