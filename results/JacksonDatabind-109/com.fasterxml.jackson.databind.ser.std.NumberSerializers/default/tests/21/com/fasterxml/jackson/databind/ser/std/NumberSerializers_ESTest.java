/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:16:44 GMT 2020
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializers;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.DataOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberSerializers_ESTest extends NumberSerializers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      Integer integer0 = new Integer((-1303));
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E\"6&NNO");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_IntegerSerializer0.serialize(integer0, filteringGeneratorDelegate0, defaultSerializerProvider_Impl0);
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<DOMSerializer> class0 = DOMSerializer.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Double double0 = new Double((-868.025411441351));
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((Writer) pipedWriter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_DoubleSerializer0.serialize(double0, writerBasedJsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonNode jsonNode0 = numberSerializers_LongSerializer0.getSchema(serializerProvider0, (Type) class0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<MissingNode> class0 = MissingNode.class;
      NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
      Long long0 = new Long((-943L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "z>58VF=,Kcd&3", false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("z>58VF=,Kcd&3", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 65534, objectReader0, mockFileWriter0);
      numberSerializers_LongSerializer0.serialize(long0, writerBasedJsonGenerator0, (SerializerProvider) null);
      assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<PropertyName> class0 = PropertyName.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      Integer integer0 = new Integer(1);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2772);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "JSON");
      numberSerializers_IntegerSerializer0.serializeWithType(integer0, jsonGenerator0, defaultSerializerProvider_Impl0, asExistingPropertyTypeSerializer0);
      assertFalse(jsonGenerator0.isClosed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
      Float float0 = new Float((-1.0));
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_FloatSerializer0.serialize(float0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(numberSerializers_DoubleSerializer0, beanProperty_Bogus0);
      assertSame(numberSerializers_DoubleSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = typeFactory0.constructMapType(class1, javaType0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[1] = (JavaType) mapType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, javaTypeArray0, javaTypeArray0[1]);
      numberSerializers_IntegerSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, collectionType0);
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      numberSerializers_DoubleSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(numberSerializers_DoubleSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = new NumberSerializers.ShortSerializer();
      Short short0 = new Short((short)1242);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_ShortSerializer0.serialize(short0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<DOMSerializer> class0 = DOMSerializer.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Double double0 = new Double((-868.025411441351));
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) pipedWriter0);
      numberSerializers_DoubleSerializer0.serializeWithType(double0, jsonGenerator0, (SerializerProvider) null, (TypeSerializer) null);
      assertFalse(numberSerializers_DoubleSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
      assertFalse(numberSerializers_IntLikeSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = NumberSerializers.IntLikeSerializer.instance;
      Float float0 = new Float(0.0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      numberSerializers_IntLikeSerializer0.serialize(float0, jsonGenerator0, (SerializerProvider) null);
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberSerializers numberSerializers0 = new NumberSerializers();
      Class<Integer> class0 = Integer.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      // Undeclared exception!
      try { 
        numberSerializers_IntegerSerializer0.serializeWithType(numberSerializers0, (JsonGenerator) null, (SerializerProvider) null, (TypeSerializer) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.NumberSerializers cannot be cast to java.lang.Integer
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer", e);
      }
  }
}
