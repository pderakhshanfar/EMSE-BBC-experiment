/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 00:47:10 GMT 2021
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializers;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberSerializers_ESTest extends NumberSerializers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      // Undeclared exception!
      try { 
        numberSerializers_IntegerSerializer0.serialize(numberSerializers_DoubleSerializer0, (JsonGenerator) null, (SerializerProvider) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer cannot be cast to java.lang.Integer
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
      Object object0 = new Object();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, numberSerializers_FloatSerializer0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("3hVOBcjElb_G;B14+h");
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        numberSerializers_FloatSerializer0.serialize(object0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Float
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, byteArrayBuilder0);
      Class<Long> class0 = Long.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Double double0 = new Double(3);
      numberSerializers_DoubleSerializer0.serialize(double0, uTF8JsonGenerator0, (SerializerProvider) null);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Short> class0 = Short.class;
      NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
      JsonNode jsonNode0 = numberSerializers_IntLikeSerializer0.getSchema((SerializerProvider) null, (Type) class0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(7468);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, byteArrayBuilder0);
      NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
      Float float0 = new Float((float) 1);
      numberSerializers_IntLikeSerializer0.serialize(float0, uTF8JsonGenerator0, (SerializerProvider) null);
      assertFalse(numberSerializers_IntLikeSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base((SerializerProvider) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Integer> class1 = Integer.TYPE;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      numberSerializers_IntegerSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, mapType0);
      assertFalse(mapType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = new NumberSerializers.ShortSerializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, (OutputStream) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      numberSerializers_ShortSerializer0.serialize(short0, uTF8JsonGenerator0, serializerProvider0);
      assertFalse(numberSerializers_ShortSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<BeanSerializer> class0 = BeanSerializer.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Double double0 = new Double(0.0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_DoubleSerializer0.serializeWithType(double0, jsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
      assertFalse(numberSerializers_DoubleSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
      Long long0 = Long.valueOf((long) 0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_LongSerializer0.serialize(long0, jsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(1, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Float float0 = new Float((-1603.2955F));
      byte[] byteArray0 = objectMapper0.writeValueAsBytes(float0);
      assertArrayEquals(new byte[] {(byte)45, (byte)49, (byte)54, (byte)48, (byte)51, (byte)46, (byte)50, (byte)57, (byte)53, (byte)53}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base((SerializerProvider) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Integer> class1 = Integer.TYPE;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      numberSerializers_FloatSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, mapType0);
      assertFalse(mapType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<JavaType> class0 = JavaType.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      Integer integer0 = new Integer((byte) (-57));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      NamedType namedType0 = new NamedType(class0, "K3");
      IOContext iOContext0 = new IOContext(bufferRecycler0, namedType0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(bufferRecycler0.CHAR_TOKEN_BUFFER);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, byteArrayOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "K3");
      numberSerializers_IntegerSerializer0.serializeWithType(integer0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0, asExistingPropertyTypeSerializer0);
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberSerializers numberSerializers0 = new NumberSerializers();
  }
}
