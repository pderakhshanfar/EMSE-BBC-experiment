/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 22:24:27 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.ImmutableMultiset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.LinkedHashMultimap;
import com.google.common.collect.TreeMultimap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AngularPass;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckSuspiciousCode;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.FunctionNames;
import com.google.javascript.jscomp.FunctionToBlockMutator;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeMinimizeConditions;
import com.google.javascript.jscomp.PhaseOptimizer;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.RecordFunctionInformation;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.Node;
import java.io.FilterOutputStream;
import java.io.PrintStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.Stack;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionInjector_ESTest extends FunctionInjector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("LvfP)mpevP=b+R)");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "LvfP)mpevP=b+R)", 5, 5);
      Compiler compiler1 = new Compiler(printStream0);
      Supplier<String> supplier0 = compiler1.getUniqueNameIdSupplier();
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, checkSuspiciousCode0);
      Node node0 = compiler1.parseTestCode("LvfP)mpevP=b+R)");
      Node node1 = new Node(node0.SYNTHETIC_BLOCK_PROP, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      HashSet<String> hashSet0 = new HashSet<String>();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.CanInlineResult functionInjector_CanInlineResult0 = FunctionInjector.CanInlineResult.NO;
      functionInjector0.maybePrepareCall(node0);
      boolean boolean1 = false;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal1, node0, node0, hashSet0, functionInjector_InliningMode0, boolean1, boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Node node0 = compiler0.parseTestCode("Os$Mv");
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      HashSet<String> hashSet0 = new HashSet<String>();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, hashSet0, functionInjector_InliningMode0, false, false);
      functionInjector0.maybePrepareCall(node0);
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, (Set<String>) null, functionInjector_InliningMode0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      String string0 = "6s$Fv";
      Node node0 = compiler0.parseTestCode("6s$Fv");
      Node node1 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 478;
      Node node2 = Node.newString(int0, string0);
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      Set<String> set0 = gatherRawExports0.getExportedVariableNames();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node2, set0, functionInjector_InliningMode0, boolean0, boolean0);
      functionInjector0.maybePrepareCall(node0);
      MemoizedScopeCreator memoizedScopeCreator0 = compiler0.getTypedScopeCreator();
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, gatherRawExports0, memoizedScopeCreator0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      boolean boolean1 = false;
      boolean boolean2 = true;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal1, node1, node0, set0, functionInjector_InliningMode1, boolean1, boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Node node0 = compiler0.parseTestCode("6s$Fv");
      Node node1 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      HashSet<String> hashSet0 = new HashSet<String>();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      boolean boolean1 = true;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, hashSet0, functionInjector_InliningMode0, boolean1, boolean0);
      functionInjector0.maybePrepareCall(node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      String string0 = "6s$Fv";
      Node node0 = compiler0.parseTestCode("%[RX=u>");
      Node node1 = new Node(node0.FLAG_NO_THROWS, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.newString(node0.COLUMN_BITS, string0);
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      Set<String> set0 = gatherRawExports0.getExportedVariableNames();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      boolean boolean1 = false;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node1, set0, functionInjector_InliningMode0, boolean0, boolean1);
      boolean boolean2 = false;
      boolean boolean3 = false;
      FunctionInjector functionInjector1 = new FunctionInjector(compiler0, supplier0, boolean0, boolean2, boolean3);
      String string1 = "";
      functionInjector1.doesFunctionMeetMinimumRequirements(string1, node1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      Node node0 = null;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      JSModule jSModule0 = new JSModule("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
      Stack<FunctionInjector.Reference> stack0 = new Stack<FunctionInjector.Reference>();
      stack0.addElement(functionInjector_Reference0);
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      JSModule jSModule1 = new JSModule((String) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule1, (Node) null, stack0, set0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      String string0 = "6s$Fv";
      Node node0 = Node.newString("6s$Fv", (-1320), 20);
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = Node.newString((-1566), "");
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      Set<String> set0 = gatherRawExports0.getExportedVariableNames();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, gatherRawExports0, syntacticScopeCreator0);
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal1, node0, node2, set0, functionInjector_InliningMode0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      String string0 = "d-`zPw8u";
      Node node0 = compiler0.parseTestCode("d-`zPw8u");
      int int0 = (-2160);
      Node node1 = new Node(int0, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = true;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, boolean0, boolean0, boolean1);
      functionInjector0.maybePrepareCall(node0);
      FunctionInjector.CanInlineResult.values();
      functionInjector0.maybePrepareCall(node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Node node0 = Node.newString("6s$Fv", 1994, (-508));
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = Node.newString(506, "6s$Fv");
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      Set<String> set0 = gatherRawExports0.getExportedVariableNames();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node2, set0, functionInjector_InliningMode0, false, false);
      functionInjector0.setKnownConstants(set0);
      assertFalse(set0.contains("6s$Fv"));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      String string0 = "6s$Fv";
      Node node0 = Node.newString("6s$Fv", 1994, (-508));
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.newString("6s$Fv", 1, 143);
      Node node2 = Node.newString(57, "6s$Fv");
      node1.addChildToFront(node2);
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
      peepholeMinimizeConditions0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Set<String> set0 = null;
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      String string0 = "6s$Fv";
      Node node0 = Node.newString(52, "6s$Fv");
      Node node1 = new Node(52, node0, node0, node0, node0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      boolean boolean0 = true;
      ScopeCreator scopeCreator0 = null;
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      String string0 = "6s$Fv";
      Node node0 = Node.newString("6s$Fv", 1994, (-508));
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      node1.getBooleanProp(1);
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      peepholeMinimizeConditions0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, false);
      Set<String> set0 = null;
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Node node0 = Node.newString(52, "6]Wxw>xa<.  bf~QT");
      Node node1 = new Node(37, node0, node0, node0, node0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, (Set<String>) null, functionInjector_InliningMode1, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Node node0 = Node.newString(20, "6s$Fv");
      Node node1 = new Node(16, node0, node0, node0, node0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, true);
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, (Set<String>) null, functionInjector_InliningMode0, true, true);
      // Undeclared exception!
      try { 
        functionInjector0.doesFunctionMeetMinimumRequirements("6s$Fv", node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Node node0 = Node.newString("6s$Fv", 52, 52);
      Node node1 = new Node(52, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      FunctionInjector functionInjector1 = new FunctionInjector(compiler0, supplier0, false, false, true);
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      Node node2 = peepholeMinimizeConditions0.optimizeSubtree(node0);
      // Undeclared exception!
      functionInjector0.maybePrepareCall(node2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Set<String> set0 = null;
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Node node0 = Node.newString("6s$Fv", 52, 52);
      Node node1 = new Node(52, node0, node0, node0, node0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, (Set<String>) null, functionInjector_InliningMode0, true, false);
      Node node2 = Node.newNumber(2.147483648E9);
      // Undeclared exception!
      try { 
        functionInjector0.doesFunctionMeetMinimumRequirements("KfS*CQ4=81ji,", node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Set<String> set0 = null;
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Node node0 = Node.newString("6s$Fv", 52, 52);
      Node node1 = new Node(52, node0, node0, node0, node0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, (Set<String>) null, functionInjector_InliningMode0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Set<String> set0 = null;
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Node node0 = Node.newString("6s$Fv", 52, 52);
      Node node1 = new Node(52, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, (Set<String>) null, functionInjector_InliningMode0, false, false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Set<String> set0 = null;
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Node node0 = Node.newString("6s$Fv", 52, 52);
      Node node1 = new Node(52, node0, node0, node0, node0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, (Set<String>) null, functionInjector_InliningMode0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externsRoot;
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMultimap<String, Object> treeMultimap0 = TreeMultimap.create((Comparator<? super String>) comparator0, (Comparator<? super Object>) comparator0);
      NavigableSet<String> navigableSet0 = treeMultimap0.keySet();
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      LinkedHashSet<FunctionInjector.Reference> linkedHashSet0 = new LinkedHashSet<FunctionInjector.Reference>();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      linkedHashSet0.add(functionInjector_Reference0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, false);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, navigableSet0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externsRoot;
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      ImmutableBiMap<FunctionInjector.Reference, String> immutableBiMap0 = ImmutableBiMap.of(functionInjector_Reference0, "^");
      ImmutableSet<String> immutableSet0 = immutableBiMap0.values();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, immutableSet0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externsRoot;
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      compiler0.setPhaseOptimizer((PhaseOptimizer) null);
      String string0 = "";
      Node node1 = Node.newNumber((double) 8, 4, 88);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.stripTypes;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, (Node) null, node1, set0, functionInjector_InliningMode0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Node node0 = new Node(7, 160, (-1255));
      Node node1 = new Node(7, node0, node0, node0);
      JSModule jSModule0 = new JSModule("nKs2ZG>$Z");
      FunctionInjector.CanInlineResult.values();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node1, jSModule0, functionInjector_InliningMode0);
      ImmutableBiMap<FunctionInjector.Reference, String> immutableBiMap0 = ImmutableBiMap.of(functionInjector_Reference0, "nKs2ZG>$Z");
      ImmutableSet<String> immutableSet0 = immutableBiMap0.values();
      functionInjector0.setKnownConstants(immutableSet0);
      // Undeclared exception!
      try { 
        functionInjector0.setKnownConstants((Set<String>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      SyntheticAst syntheticAst0 = new SyntheticAst("AST should be normalized");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference(node0, node0);
      nameReferenceGraph_Reference0.getModule();
      LinkedHashSet<FunctionInjector.Reference> linkedHashSet0 = new LinkedHashSet<FunctionInjector.Reference>();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(nameReferenceGraph_Reference0.site, (JSModule) null, functionInjector_InliningMode0);
      linkedHashSet0.add(functionInjector_Reference0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, node0, linkedHashSet0, (Set<String>) null, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Node node0 = Node.newString("");
      FunctionInjector functionInjector1 = new FunctionInjector(compiler0, supplier0, false, false, false);
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference(node0, node0);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(nameReferenceGraph_Reference0.site, (JSModule) null, functionInjector_InliningMode0);
      CodingConvention.SubclassType codingConvention_SubclassType0 = CodingConvention.SubclassType.INHERITS;
      ImmutableListMultimap<FunctionInjector.Reference, CodingConvention.SubclassType> immutableListMultimap0 = ImmutableListMultimap.of(functionInjector_Reference0, codingConvention_SubclassType0);
      ImmutableMultiset<FunctionInjector.Reference> immutableMultiset0 = immutableListMultimap0.keys();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      functionInjector0.inliningLowersCost((JSModule) null, nameReferenceGraph_Reference0.parent, immutableMultiset0, (Set<String>) null, true, false);
      functionInjector1.setKnownConstants((Set<String>) null);
      assertFalse(functionInjector1.equals((Object)functionInjector0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externAndJsRoot;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, true);
      PriorityQueue<FunctionInjector.Reference> priorityQueue0 = new PriorityQueue<FunctionInjector.Reference>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMultimap<String, Object> treeMultimap0 = TreeMultimap.create((Comparator<? super String>) comparator0, (Comparator<? super Object>) comparator0);
      NavigableSet<String> navigableSet0 = treeMultimap0.keySet();
      nameReferenceGraph_Reference0.getModule();
      LinkedHashSet<FunctionInjector.Reference> linkedHashSet0 = new LinkedHashSet<FunctionInjector.Reference>();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      linkedHashSet0.add(functionInjector_Reference0);
      functionInjector0.inliningLowersCost((JSModule) null, (Node) null, linkedHashSet0, navigableSet0, true, true);
      FunctionInjector.CanInlineResult.values();
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externsRoot;
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      LinkedHashSet<FunctionInjector.Reference> linkedHashSet0 = new LinkedHashSet<FunctionInjector.Reference>();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      linkedHashSet0.add(functionInjector_Reference0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, false);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      Set<String> set0 = inlineSimpleMethods0.nonMethodProperties;
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, linkedHashSet0, set0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externAndJsRoot;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, true);
      PriorityQueue<FunctionInjector.Reference> priorityQueue0 = new PriorityQueue<FunctionInjector.Reference>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMultimap<String, Object> treeMultimap0 = TreeMultimap.create((Comparator<? super String>) comparator0, (Comparator<? super Object>) comparator0);
      NavigableSet<String> navigableSet0 = treeMultimap0.keySet();
      nameReferenceGraph_Reference0.getModule();
      LinkedHashSet<FunctionInjector.Reference> linkedHashSet0 = new LinkedHashSet<FunctionInjector.Reference>();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      linkedHashSet0.add(functionInjector_Reference0);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, linkedHashSet0, navigableSet0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, false, true);
      int int0 = (-3);
      LinkedHashMultimap<FunctionInjector.Reference, String> linkedHashMultimap0 = LinkedHashMultimap.create();
      JSModule jSModule0 = new JSModule("j0Ul[");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      Set<String> set0 = linkedHashMultimap0.replaceValues(functionInjector_Reference0, list0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, (Node) null, (Node) null, set0, functionInjector_InliningMode1, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      Node node0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SINGLELINE");
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      JSModule jSModule0 = new JSModule("Bsr]!6");
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
      Stack<FunctionInjector.Reference> stack0 = new Stack<FunctionInjector.Reference>();
      stack0.addElement(functionInjector_Reference0);
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, stack0, set0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.jsRoot;
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      String string0 = "CodedInputStream encountered an embedded string or message which claimed to have negative size.";
      ImmutableBiMap.of(functionInjector_Reference0, "CodedInputStream encountered an embedded string or message which claimed to have negative size.");
      JSModule jSModule0 = new JSModule("CodedInputStream encountered an embedded string or message which claimed to have negative size.");
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode1);
      ImmutableList<JSModule> immutableList0 = ImmutableList.of();
      JSModule.sortJsModules(immutableList0);
      Stack<FunctionInjector.Reference> stack0 = new Stack<FunctionInjector.Reference>();
      stack0.addElement(functionInjector_Reference0);
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      MockPrintStream mockPrintStream0 = new MockPrintStream("CodedInputStream encountered an embedded string or message which claimed to have negative size.");
      Compiler compiler1 = new Compiler(mockPrintStream0);
      Supplier<String> supplier0 = compiler1.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler1, supplier0, false, false, false);
      functionInjector0.inliningLowersCost(jSModule0, (Node) null, stack0, set0, true, false);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, stack0, set0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.jsRoot;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler1 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, false);
      PriorityQueue<FunctionInjector.Reference> priorityQueue0 = new PriorityQueue<FunctionInjector.Reference>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMultimap<String, Object> treeMultimap0 = TreeMultimap.create((Comparator<? super String>) comparator0, (Comparator<? super Object>) comparator0);
      NavigableSet<String> navigableSet0 = treeMultimap0.keySet();
      functionInjector0.inliningLowersCost((JSModule) null, (Node) null, priorityQueue0, navigableSet0, true, false);
      FunctionInjector.CanInlineResult[] functionInjector_CanInlineResultArray0 = FunctionInjector.CanInlineResult.values();
      assertEquals(3, functionInjector_CanInlineResultArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externsRoot;
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.FunctionInjector$Reference");
      ImmutableList<JSModule> immutableList0 = ImmutableList.of(jSModule0);
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(immutableList0);
      jSModuleGraph0.getRootModule();
      JSModule jSModule1 = jSModuleGraph0.getDeepestCommonDependencyInclusive((Collection<JSModule>) immutableList0);
      HashSet<FunctionInjector.Reference> hashSet0 = new HashSet<FunctionInjector.Reference>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.stripTypePrefixes;
      functionInjector0.inliningLowersCost(jSModule1, (Node) null, hashSet0, set0, false, false);
      FunctionInjector.CanInlineResult.values();
      // Undeclared exception!
      try { 
        FunctionInjector.CanInlineResult.valueOf("m_uR7BDRWh+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.FunctionInjector.CanInlineResult.m_uR7BDRWh+
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      functionInjector0.setKnownConstants((Set<String>) null);
      AngularPass angularPass0 = new AngularPass(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, angularPass0);
      Node node0 = null;
      JSModule jSModule0 = new JSModule("$inject");
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, (Collection<? extends FunctionInjector.Reference>) null, (Set<String>) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.jsRoot;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, true);
      PriorityQueue<FunctionInjector.Reference> priorityQueue0 = new PriorityQueue<FunctionInjector.Reference>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMultimap<String, Object> treeMultimap0 = TreeMultimap.create((Comparator<? super String>) comparator0, (Comparator<? super Object>) comparator0);
      NavigableSet<String> navigableSet0 = treeMultimap0.keySet();
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, (Collection<? extends FunctionInjector.Reference>) null, navigableSet0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.jsRoot;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler1 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler1, supplier0, true, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable((Node) null);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
      Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, (Node) null, (Node) null, set0, functionInjector_InliningMode1, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FunctionInjector.CanInlineResult.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = true;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      SyntheticAst syntheticAst0 = new SyntheticAst("EVV");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      JSModule jSModule0 = null;
      node0.cloneNode();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      ImmutableBiMap<FunctionInjector.Reference, String> immutableBiMap0 = ImmutableBiMap.of(functionInjector_Reference0, "EVV");
      ImmutableSet<String> immutableSet0 = immutableBiMap0.values();
      functionInjector0.setKnownConstants(immutableSet0);
      String string0 = "P";
      node0.addSuppression("P");
      // Undeclared exception!
      try { 
        functionInjector0.doesFunctionMeetMinimumRequirements("", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      SourceFile sourceFile0 = SourceFile.fromCode("Unknown statement", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      functionInjector0.setKnownConstants((Set<String>) null);
      compiler0.hasScopeChanged(node0);
      // Undeclared exception!
      try { 
        functionInjector0.setKnownConstants((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, false, true);
      Node node0 = new Node((-3), (-3), (-3));
      String string0 = "U";
      ControlFlowAnalysis controlFlowAnalysis0 = null;
      ControlFlowAnalysis.computeFollowNode(node0, (ControlFlowAnalysis) null);
      // Undeclared exception!
      try { 
        functionInjector0.isDirectCallNodeReplacementPossible(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.google.javascript.jscomp.FunctionInjector$InliningMode", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler1, functionToBlockMutator_LabelNameSupplier0, true, true, true);
      Node node0 = compiler0.externsRoot;
      // Undeclared exception!
      try { 
        functionInjector0.isDirectCallNodeReplacementPossible((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, false, true);
      Node node0 = new Node((-3), (-3), (-3));
      ControlFlowAnalysis controlFlowAnalysis0 = null;
      ControlFlowAnalysis.computeFollowNode(node0, (ControlFlowAnalysis) null);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try { 
        functionInjector0.inline(node0, "U", (Node) null, functionInjector_InliningMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("SIMPLE_ASSIGNMENT");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "SIMPLE_ASSIGNMENT";
      objectArray0[1] = (Object) "SIMPLE_ASSIGNMENT";
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "u'&y@r.hO2E9*!y/", objectArray0);
      Compiler compiler0 = new Compiler(printStream0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, false);
      Node node0 = Node.newNumber((-1505.70845951533));
      // Undeclared exception!
      try { 
        functionInjector0.doesFunctionMeetMinimumRequirements("SIMPLE_ASSIGNMENT", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, true);
      String string0 = "";
      Node node0 = null;
      // Undeclared exception!
      try { 
        functionInjector0.doesFunctionMeetMinimumRequirements("", (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, false, false);
      FunctionNames functionNames0 = new FunctionNames(compiler0);
      RecordFunctionInformation recordFunctionInformation0 = new RecordFunctionInformation(compiler0, functionNames0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, recordFunctionInformation0);
      int int0 = 0;
      Node[] nodeArray0 = new Node[3];
      String string0 = "\"J{$F43o";
      // Undeclared exception!
      try { 
        compiler0.newExternInput("\"J{$F43o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FunctionInjector.CanInlineResult.values();
      AbstractCompiler abstractCompiler0 = null;
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier((Supplier<String>) null);
      boolean boolean0 = true;
      FunctionInjector functionInjector0 = null;
      try {
        functionInjector0 = new FunctionInjector((AbstractCompiler) null, functionToBlockMutator_LabelNameSupplier0, false, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Node node0 = Node.newString("RP");
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }
}
