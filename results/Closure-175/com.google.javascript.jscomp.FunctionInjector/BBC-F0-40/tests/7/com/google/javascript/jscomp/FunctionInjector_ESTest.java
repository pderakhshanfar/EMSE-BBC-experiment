/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 22:14:06 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.UnmodifiableListIterator;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ExpandJqueryAliases;
import com.google.javascript.jscomp.FindExportableNodes;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.FunctionToBlockMutator;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeMinimizeConditions;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.PrintStream;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.ListIterator;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionInjector_ESTest extends FunctionInjector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Node node0 = compiler0.parseTestCode("// Input %num%");
      Node node1 = new Node(39, node0, node0, node0, node0);
      node1.isLocalResultCall();
      Node node2 = new Node(54, node1, node1, node1, node1);
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected AST structure.
         //
         verifyException("com.google.javascript.jscomp.ExpressionDecomposer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, true);
      Node node0 = compiler0.externsRoot;
      Node node1 = Node.newString("com.google.javascript.jscomp.FunctionInjector$3");
      Node node2 = Node.newNumber((double) 36);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
      try { 
        functionInjector0.inline(node1, "com.google.javascript.jscomp.FunctionInjector$3", node2, functionInjector_InliningMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionArgumentInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      Node node0 = compiler0.externsRoot;
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      Node node1 = Node.newString("com.google.javascript.jscomp.FunctionInjector$3");
      // Undeclared exception!
      try { 
        functionInjector0.inline((Node) null, "", node1, functionInjector_InliningMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "c");
      JSModule jSModule0 = new JSModule("c");
      JSModule jSModule1 = new JSModule("c");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "c");
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node1, (JSModule) null, (FunctionInjector.InliningMode) null);
      node1.copyInformationFrom(node0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
      CompilerOptions compilerOptions0 = compiler0.options;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      functionInjector0.inliningLowersCost(jSModule1, node0, immutableList0, compilerOptions0.stripTypes, true, false);
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      FunctionInjector functionInjector1 = new FunctionInjector(compiler0, supplier0, true, false, false);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(2323, (-1318), 7);
      Node node1 = new Node(7, node0, node0, 2, (-3887));
      // Undeclared exception!
      try { 
        functionInjector0.inline(node1, (String) null, node0, functionInjector_InliningMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, true);
      Node node0 = compiler0.externsRoot;
      String string0 = "!`";
      Node node1 = compiler0.parseTestCode(string0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      functionInjector0.inline(node1, string0, node0, functionInjector_InliningMode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0, false);
      jSTypeRegistry0.createNamedType("@", "=gN6koAl\"p-'?sT#f6", 4144, 4144);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, compilerOptions0.stripNameSuffixes, functionInjector_InliningMode0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "KhY/kAhtOD6Ga8F_S");
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      Node node1 = AbstractPeepholeOptimization.validateResult(node0);
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node1, compilerOptions0.stripTypePrefixes, functionInjector_InliningMode0, false, true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      Node node0 = compiler0.externAndJsRoot;
      AbstractPeepholeOptimization.validateResult((Node) null);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
      try { 
        functionInjector0.inline((Node) null, (String) null, (Node) null, functionInjector_InliningMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, true);
      int int0 = 130;
      Node[] nodeArray0 = new Node[2];
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      tightenTypes0.getTopScope();
      TightenTypes.ConcreteScope tightenTypes_ConcreteScope0 = tightenTypes0.new ConcreteScope((TightenTypes.ConcreteScope) null);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "D\"&DklH!bW&.FzT";
      Node node0 = compiler0.externAndJsRoot;
      AbstractPeepholeOptimization.validateResult((Node) null);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try { 
        functionInjector0.inline((Node) null, (String) null, (Node) null, functionInjector_InliningMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration");
      Node node0 = new Node(47, 4095, (-102));
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.VariableReferenceCheck$ReferenceCheckingBehavior");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      Stack<FunctionInjector.Reference> stack0 = new Stack<FunctionInjector.Reference>();
      JSModule jSModule1 = new JSModule("");
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node0, jSModule1, functionInjector_InliningMode1);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference1);
      Compiler compiler1 = new Compiler();
      CompilerOptions compilerOptions0 = compiler1.newCompilerOptions();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler1, supplier0, true, true, false);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, node0, immutableList0, compilerOptions0.aliasableStrings, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      String string0 = "!`mP|s";
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      peepholeSimplifyRegExp0.isEcmaScript5OrGreater();
      Node node1 = Node.newString("jf >d@!ze");
      Node node2 = new Node(26, node0, node0, node1, node1);
      peepholeSimplifyRegExp0.optimizeSubtree(node0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      Compiler compiler1 = new Compiler();
      ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
      CompilerOptions compilerOptions1 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions1);
      cleanupPasses0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, expandJqueryAliases0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node2, compilerOptions0.stripTypePrefixes, functionInjector_InliningMode0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newString("!`mP|s");
      Node node1 = new Node((-2428), node0, node0, node0, node0);
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node2, node1, compilerOptions0.aliasableStrings, functionInjector_InliningMode0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.FunctionInjector$InliningMode");
      Node node1 = new Node(57, 43, (-1285));
      JSModule jSModule0 = new JSModule("'.,;#F#!S2y[K");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node1, jSModule0, functionInjector_InliningMode0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      jSModule0.clearAsts();
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode1);
      ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
      Stack<FunctionInjector.Reference> stack0 = new Stack<FunctionInjector.Reference>();
      ListIterator<FunctionInjector.Reference> listIterator0 = stack0.listIterator();
      ImmutableList.copyOf((Iterator<? extends FunctionInjector.Reference>) listIterator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, false);
      ControlFlowAnalysis controlFlowAnalysis1 = new ControlFlowAnalysis(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis1);
      FunctionInjector.InliningMode functionInjector_InliningMode2 = FunctionInjector.InliningMode.BLOCK;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node1, compilerOptions0.stripTypePrefixes, functionInjector_InliningMode2, true, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      functionToBlockMutator_LabelNameSupplier0.get();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSCompiler_inline_label_0");
      Node node1 = new Node(3721, 16, 16);
      JSModule jSModule0 = new JSModule("NO");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node1, jSModule0, functionInjector_InliningMode1);
      ImmutableList.of(functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference0, functionInjector_Reference0);
      Stack<FunctionInjector.Reference> stack0 = new Stack<FunctionInjector.Reference>();
      ListIterator<FunctionInjector.Reference> listIterator0 = stack0.listIterator();
      ImmutableList.copyOf((Iterator<? extends FunctionInjector.Reference>) listIterator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      FunctionInjector.InliningMode functionInjector_InliningMode2 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, compilerOptions0.stripTypePrefixes, functionInjector_InliningMode2, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration");
      Node node1 = new Node(47, 4095, (-102));
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.VariableReferenceCheck$ReferenceCheckingBehavior");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node1, jSModule0, functionInjector_InliningMode0);
      ImmutableList.of(functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference1);
      Stack<FunctionInjector.Reference> stack0 = new Stack<FunctionInjector.Reference>();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, true);
      stack0.add(functionInjector_Reference0);
      PriorityQueue<FunctionInjector.Reference> priorityQueue0 = new PriorityQueue<FunctionInjector.Reference>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = functionInjector0.inliningLowersCost((JSModule) null, node1, stack0, linkedHashSet0, true, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      functionToBlockMutator_LabelNameSupplier0.get();
      Compiler compiler1 = new Compiler();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, true, false);
      functionInjector0.setKnownConstants((Set<String>) null);
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.VariableReferenceCheck$ReferenceCheckingBehavior");
      Node node0 = Node.newString(161, "msg.change.setter.with.configurable.false");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, node0, immutableList0, (Set<String>) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      functionToBlockMutator_LabelNameSupplier0.get();
      Compiler compiler1 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "com.google.javascript.jscomp.VariableReferenceCheck$ReferenceCheckingBehavior");
      Node node1 = new Node(27, node0, node0, node0, 0, 40);
      JSModule jSModule0 = new JSModule("+?J\"gw#?");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, true);
      functionInjector0.setKnownConstants(compilerOptions0.stripNameSuffixes);
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier1 = new FunctionToBlockMutator.LabelNameSupplier(functionToBlockMutator_LabelNameSupplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier1, true, false, false);
      functionInjector0.setKnownConstants((Set<String>) null);
      Node node0 = null;
      JSModule jSModule0 = new JSModule("msg.change.setter.with.configurable.false");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, linkedHashSet0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$MatchDeclaration");
      Node node1 = new Node(47, 4095, (-102));
      Node node2 = new Node((-301), node0, node0, node1, 761, 50);
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.VariableReferenceCheck$ReferenceCheckingBehavior");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.InliningMode functionInjector_InliningMode2 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node1, jSModule0, functionInjector_InliningMode2);
      FunctionInjector.InliningMode functionInjector_InliningMode3 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference2 = new FunctionInjector.Reference(node2, jSModule0, functionInjector_InliningMode3);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference2, functionInjector_Reference0, functionInjector_Reference2, functionInjector_Reference2, functionInjector_Reference2);
      FunctionInjector.Reference functionInjector_Reference3 = new FunctionInjector.Reference(node2, jSModule0, functionInjector_InliningMode1);
      ImmutableList.of(functionInjector_Reference2, functionInjector_Reference3, functionInjector_Reference3, functionInjector_Reference3);
      immutableList0.listIterator();
      Stack<FunctionInjector.Reference> stack0 = new Stack<FunctionInjector.Reference>();
      ListIterator<FunctionInjector.Reference> listIterator0 = stack0.listIterator();
      ImmutableList.copyOf((Iterator<? extends FunctionInjector.Reference>) listIterator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      FunctionInjector.InliningMode functionInjector_InliningMode4 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node2, node0, compilerOptions0.stripTypes, functionInjector_InliningMode4, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getJsRoot();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, true);
      FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0, false);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      cleanupPasses0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, (ScopeCreator) null);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, (Node) null, (Node) null, compilerOptions0.stripNamePrefixes, functionInjector_InliningMode0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Supplier<String> supplier0 = compiler1.getUniqueNameIdSupplier();
      Node node0 = compiler1.jsRoot;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      JSModule jSModule0 = new JSModule("+U P");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode1);
      FunctionInjector.InliningMode functionInjector_InliningMode2 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode2);
      FunctionInjector.Reference functionInjector_Reference2 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference2, functionInjector_Reference1, functionInjector_Reference2, functionInjector_Reference0, functionInjector_Reference1);
      ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference2, functionInjector_Reference2);
      UnmodifiableListIterator<FunctionInjector.Reference> unmodifiableListIterator0 = immutableList0.listIterator();
      ImmutableList<FunctionInjector.Reference> immutableList1 = ImmutableList.copyOf((Iterator<? extends FunctionInjector.Reference>) unmodifiableListIterator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler1, supplier0, false, false, false);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList1, compilerOptions0.stripNameSuffixes, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      functionToBlockMutator_LabelNameSupplier0.get();
      Compiler compiler1 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "");
      Node node1 = new Node(16, node0, node0, node0, 36, (-1912));
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.VariableReferenceCheck$ReferenceCheckingBehavior");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node1, jSModule0, functionInjector_InliningMode1);
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode1);
      FunctionInjector.Reference functionInjector_Reference2 = new FunctionInjector.Reference(node1, jSModule0, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference2, functionInjector_Reference2, functionInjector_Reference2, functionInjector_Reference2, functionInjector_Reference2);
      FunctionInjector.Reference functionInjector_Reference3 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode1);
      ImmutableList.of(functionInjector_Reference2, functionInjector_Reference2, functionInjector_Reference3, functionInjector_Reference0);
      UnmodifiableListIterator<FunctionInjector.Reference> unmodifiableListIterator0 = immutableList0.listIterator();
      ImmutableList<FunctionInjector.Reference> immutableList1 = ImmutableList.copyOf((Iterator<? extends FunctionInjector.Reference>) unmodifiableListIterator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler1, functionToBlockMutator_LabelNameSupplier0, true, false, false);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, node1, immutableList1, compilerOptions0.aliasableStrings, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      functionToBlockMutator_LabelNameSupplier0.get();
      Compiler compiler1 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "com.google.javascript.jscomp.VariableReferenceCheck$ReferenceCheckingBehavior");
      Node node1 = new Node(27, node0, node0, node0, 0, 40);
      JSModule jSModule0 = new JSModule("+?J\"gw#?");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node1, jSModule0, functionInjector_InliningMode1);
      ImmutableList.of(functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference0);
      UnmodifiableListIterator<FunctionInjector.Reference> unmodifiableListIterator0 = immutableList0.listIterator();
      ImmutableList.copyOf((Iterator<? extends FunctionInjector.Reference>) unmodifiableListIterator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, node0, immutableList0, (Set<String>) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      functionToBlockMutator_LabelNameSupplier0.get();
      Compiler compiler1 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "com.google.javascript.jscomp.VariableReferenceCheck$ReferenceCheckingBehavior");
      Node node1 = new Node(15, node0, node0, node0, 0, 40);
      JSModule jSModule0 = new JSModule("+?J\"gw#?");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node1, jSModule0, functionInjector_InliningMode1);
      ImmutableList.of(functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference0);
      UnmodifiableListIterator<FunctionInjector.Reference> unmodifiableListIterator0 = immutableList0.listIterator();
      ImmutableList.copyOf((Iterator<? extends FunctionInjector.Reference>) unmodifiableListIterator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, node1, immutableList0, compilerOptions0.stripNamePrefixes, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, false);
      functionInjector0.setKnownConstants((Set<String>) null);
      FunctionInjector.CanInlineResult.values();
      // Undeclared exception!
      try { 
        functionInjector0.setKnownConstants((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, false);
      functionToBlockMutator_LabelNameSupplier0.get();
      Compiler compiler1 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      Node node0 = compiler1.jsRoot;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      Stack<FunctionInjector.Reference> stack0 = new Stack<FunctionInjector.Reference>();
      ListIterator<FunctionInjector.Reference> listIterator0 = stack0.listIterator();
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.copyOf((Iterator<? extends FunctionInjector.Reference>) listIterator0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      boolean boolean0 = functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, true);
      Node node0 = Node.newString((-420), "tS.B7vbS*$x9lmIMOt");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
      try { 
        functionInjector0.inline(node0, "tS.B7vbS*$x9lmIMOt", node0, functionInjector_InliningMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      functionInjector0.setKnownConstants((Set<String>) null);
      FunctionInjector.CanInlineResult.values();
      String string0 = ">T]U`,";
      Node node0 = new Node((-2194), 1564, 1564);
      Node node1 = new Node((-2194), node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        functionInjector0.doesFunctionMeetMinimumRequirements(">T]U`,", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      functionInjector0.setKnownConstants((Set<String>) null);
      FunctionInjector.CanInlineResult.values();
      String string0 = ">T]U`,";
      int int0 = (-2194);
      Node node0 = new Node((-2194), 1564, 1564);
      Node node1 = new Node((-2194), node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node((-2194), node1, node0, node1, node0, 4095, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      FunctionInjector.InliningMode.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = true;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      Node node0 = new Node(0);
      // Undeclared exception!
      try { 
        functionInjector0.isDirectCallNodeReplacementPossible(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, false);
      Node node0 = Node.newNumber((-1733.0));
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = null;
      try {
        functionInjector0 = new FunctionInjector((AbstractCompiler) null, functionToBlockMutator_LabelNameSupplier0, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1765);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "wB1gel&a5Mj";
      objectArray0[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "wB1gel&a5Mj";
      objectArray0[4] = (Object) "wB1gel&a5Mj";
      objectArray0[5] = (Object) "wB1gel&a5Mj";
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) filterOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf("wB1gel&a5Mj", objectArray0);
      Compiler compiler0 = new Compiler(printStream0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, true);
      // Undeclared exception!
      try { 
        functionInjector0.isDirectCallNodeReplacementPossible((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, false, true);
      // Undeclared exception!
      try { 
        ImmutableBiMap.of("Q>aYEKse", "Q}9%uYp|x<48", "Q}9%uYp|x<48", "com.google.javascript.jscomp.SymbolTable$ThisRefCollector", "com.google.javascript.jscomp.SymbolTable$ThisRefCollector", "com.google.javascript.jscomp.SymbolTable$ThisRefCollector", "com.google.javascript.jscomp.SymbolTable$ThisRefCollector", "Q}9%uYp|x<48", "SIMPLE_CALL", "Q>aYEKse");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same value: com.google.javascript.jscomp.SymbolTable$ThisRefCollector=com.google.javascript.jscomp.SymbolTable$ThisRefCollector and Q}9%uYp|x<48=com.google.javascript.jscomp.SymbolTable$ThisRefCollector
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      Node node0 = compiler0.jsRoot;
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler1.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler1, functionToBlockMutator_LabelNameSupplier0, true, false, false);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
