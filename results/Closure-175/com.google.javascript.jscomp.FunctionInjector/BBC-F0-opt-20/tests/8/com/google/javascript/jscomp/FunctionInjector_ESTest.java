/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 09:19:15 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.LinkedListMultimap;
import com.google.common.io.CharSource;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckSuspiciousCode;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.FunctionToBlockMutator;
import com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeMinimizeConditions;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.jscomp.WhitelistWarningsGuard;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionInjector_ESTest extends FunctionInjector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      Node node0 = compiler0.externAndJsRoot;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSModule jSModule0 = new JSModule("z|p-B$Z4nWg[CJ#1O");
      JSModule jSModule1 = new JSModule("");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule1, functionInjector_InliningMode0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode1);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference1);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule1, (Node) null, immutableList0, linkedHashSet0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = Node.newNumber((-1593.57167734463));
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      node0.addChildToBack(node0);
      Logger.getAnonymousLogger();
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      Node node1 = Node.newString("");
      node0.addChildToBack(node1);
      Logger logger0 = Tracer.logger;
      logger0.setUseParentHandlers(false);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      // Undeclared exception!
      functionInjector0.maybePrepareCall(node1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = Node.newNumber((-1593.57167734463));
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      Node node1 = new Node(30, node0, node0, node0, node0);
      node0.addChildToBack(node1);
      Logger.getAnonymousLogger();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      Compiler compiler1 = new Compiler();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      GatherSideEffectSubexpressionsCallback.GetReplacementSideEffectSubexpressions gatherSideEffectSubexpressionsCallback_GetReplacementSideEffectSubexpressions0 = new GatherSideEffectSubexpressionsCallback.GetReplacementSideEffectSubexpressions(compiler1, linkedList0);
      GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, gatherSideEffectSubexpressionsCallback_GetReplacementSideEffectSubexpressions0);
      CompilerOptions compilerOptions0 = compiler1.newCompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      compiler0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0, (ScopeCreator) null);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node1, compilerOptions0.stripTypePrefixes, functionInjector_InliningMode0, false, false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":%Tlm)2@");
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      functionInjector0.setKnownConstants(linkedHashSet0);
      // Undeclared exception!
      try { 
        functionInjector0.setKnownConstants(linkedHashSet0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newNumber((-1593.57167734463));
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
      Node node1 = peepholeMinimizeConditions0.optimizeSubtree(node0);
      node0.addChildToBack(node1);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Compiler compiler1 = new Compiler();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      GatherSideEffectSubexpressionsCallback.GetReplacementSideEffectSubexpressions gatherSideEffectSubexpressionsCallback_GetReplacementSideEffectSubexpressions0 = new GatherSideEffectSubexpressionsCallback.GetReplacementSideEffectSubexpressions(compiler1, linkedList0);
      GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, gatherSideEffectSubexpressionsCallback_GetReplacementSideEffectSubexpressions0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(cleanupPasses0);
      passConfig_PassConfigDelegate0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0, (ScopeCreator) null);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node1, compilerOptions0.stripNameSuffixes, functionInjector_InliningMode0, true, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      boolean boolean0 = true;
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      Node node1 = peepholeMinimizeConditions0.optimizeSubtree(node0);
      node0.addChildToBack(node1);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      String string0 = "U1a5z*";
      compiler0.parseTestCode(string0);
      boolean boolean1 = true;
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, boolean0, boolean0, boolean1);
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      Set<String> set0 = node1.getDirectives();
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, set0, functionInjector_InliningMode0, boolean1, boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node.newNumber((-1591.85554));
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      Node node0 = compiler0.externAndJsRoot;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSModule jSModule0 = new JSModule((String) null);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "SIMPLE_ASSIGNMENT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: copyright=NOT_IMPLEMENTED and copyright=LICENSE
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      Node node0 = compiler0.parseTestCode("ASSIGN_BITOR");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node0, node0, linkedHashSet0, functionInjector_InliningMode0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = Node.newNumber((-1592.0));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, false);
      NodeTraversal nodeTraversal0 = null;
      String string0 = "DIRECT";
      Node node1 = compiler0.parseSyntheticCode("DIRECT", "DIRECT");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      boolean boolean0 = false;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, linkedHashSet0, functionInjector_InliningMode0, boolean0, boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      NodeTraversal nodeTraversal0 = null;
      String string0 = "ASSIGN_BITOR";
      Node node0 = compiler0.parseSyntheticCode("ASSIGN_BITOR", "ASSIGN_BITOR");
      String string1 = "com.google.javascript.jscomp.FunctionInjector$1";
      Node node1 = compiler0.parseSyntheticCode(string0, string1);
      String string2 = "";
      node1.setSourceFileForTesting(string2);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      boolean boolean0 = true;
      boolean boolean1 = false;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, linkedHashSet0, functionInjector_InliningMode0, boolean0, boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      NodeTraversal nodeTraversal0 = null;
      String string0 = "ASSIGN_BITOR";
      Node node0 = compiler0.parseSyntheticCode("ASSIGN_BITOR", "ASSIGN_BITOR");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      boolean boolean0 = false;
      boolean boolean1 = true;
      int int0 = 8;
      Node node1 = new Node(node0.NO_SIDE_EFFECTS, node0, node0, node0, node0, int0, node0.IS_NAMESPACE);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      Set<String> set0 = compilerOptions0.cssRenamingWhitelist;
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      boolean boolean2 = false;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node1, set0, functionInjector_InliningMode1, boolean2, compilerOptions0.smartNameRemoval);
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, linkedHashSet0, functionInjector_InliningMode0, boolean0, boolean1);
      functionInjector0.setKnownConstants(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "|");
      processCommonJSModules0.getModule();
      Node node0 = compiler0.externAndJsRoot;
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.copyOf((Iterable<? extends FunctionInjector.Reference>) linkedList0);
      functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, false, false);
      Compiler compiler1 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(cleanupPasses0);
      passConfig_PassConfigDelegate0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, (NodeTraversal.Callback) null, (ScopeCreator) null);
      Node node1 = compiler0.parseSyntheticCode("UNSUPPORTED", "UNSUPPORTED");
      Node node2 = nodeTraversal0.getCurrentNode();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      boolean boolean0 = false;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node2, compilerOptions0.aliasableStrings, functionInjector_InliningMode0, compilerOptions0.labelRenaming, boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      NodeTraversal nodeTraversal0 = null;
      String string0 = "ASSIGN_BITOR";
      Node node0 = compiler0.parseSyntheticCode("ASSIGN_BITOR", "ASSIGN_BITOR");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      boolean boolean0 = false;
      boolean boolean1 = true;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, linkedHashSet0, functionInjector_InliningMode0, boolean0, boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node.newNumber((-1592.0));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, false);
      NodeTraversal nodeTraversal0 = null;
      Node node0 = compiler0.parseSyntheticCode("DIRECT", "DIRECT");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      boolean boolean0 = false;
      boolean boolean1 = false;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, linkedHashSet0, functionInjector_InliningMode0, boolean0, boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = false;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      NodeTraversal nodeTraversal0 = null;
      Node node0 = compiler0.parseSyntheticCode(".gi_5/^pt~bJ", "DIRECT");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      boolean boolean1 = true;
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, linkedHashSet0, functionInjector_InliningMode0, boolean1, boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      Set<String> set0 = null;
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      boolean boolean0 = true;
      String string0 = null;
      compiler0.addToDebugLog((String) null);
      boolean boolean1 = false;
      boolean boolean2 = true;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, boolean0, boolean1, boolean2);
      functionInjector0.setKnownConstants(set0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      functionInjector0.setKnownConstants(set0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      Logger logger0 = Tracer.logger;
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "");
      ProcessCommonJSModules processCommonJSModules1 = new ProcessCommonJSModules(compiler0, "", false);
      JSModule jSModule0 = new JSModule("");
      Node node1 = compiler0.externAndJsRoot;
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
      CharSource[] charSourceArray0 = new CharSource[3];
      CharSource charSource0 = CharSource.empty();
      charSourceArray0[0] = charSource0;
      CharSource charSource1 = CharSource.empty();
      charSourceArray0[1] = charSource1;
      ImmutableList.of(jSModule0, jSModule0);
      CharSource charSource2 = CharSource.wrap("");
      charSourceArray0[2] = charSource2;
      CharSource charSource3 = CharSource.concat(charSourceArray0);
      Set<String> set0 = WhitelistWarningsGuard.loadWhitelistedJsWarnings(charSource3);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule0, node0, immutableList0, set0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      Node node1 = peepholeMinimizeConditions0.optimizeSubtree(node0);
      node0.addChildToBack(node1);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      // Undeclared exception!
      functionInjector0.maybePrepareCall(node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.stripTypePrefixes;
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = new Node(48, node1, node1, node1, node0, 1, 30);
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node0, node2, set0, functionInjector_InliningMode0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "strictModuleDepCheck");
      processCommonJSModules0.getModule();
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      System.setCurrentTimeMillis(47);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      linkedList0.add(functionInjector_Reference0);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, node0, linkedList0, (Set<String>) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      System.setCurrentTimeMillis(15);
      JSModule jSModule0 = new JSModule("");
      List<JSModule> list0 = jSModule0.getDependencies();
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(list0);
      JSModule jSModule1 = jSModuleGraph0.getDeepestCommonDependencyInclusive(jSModule0, jSModule0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule1, functionInjector_InliningMode0);
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      linkedList0.add(functionInjector_Reference0);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "");
      processCommonJSModules0.guessCJSModuleName("");
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, false);
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost(jSModule1, node0, linkedList0, (Set<String>) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "#GflFEoH>");
      processCommonJSModules0.getModule();
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      System.setCurrentTimeMillis(1L);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      linkedList0.add(functionInjector_Reference0);
      processCommonJSModules0.guessCJSModuleName("");
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, true);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node1 = compiler_IntermediateState0.externsRoot;
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, linkedList0, (Set<String>) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "strictModuleDepCheck");
      processCommonJSModules0.getModule();
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      System.setCurrentTimeMillis(0L);
      ControlFlowAnalysis.computeFollowNode(node0);
      JSModule jSModule0 = new JSModule("^e-[tHX{^&3");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, node0, immutableList0, set0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "strictModuleDepCheck");
      processCommonJSModules0.getModule();
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      System.setCurrentTimeMillis(47);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      linkedList0.add(functionInjector_Reference0);
      processCommonJSModules0.guessCJSModuleName("");
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, node0, linkedList0, (Set<String>) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "strictModuleDepCheck");
      processCommonJSModules0.getModule();
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      System.setCurrentTimeMillis(47);
      processCommonJSModules0.guessCJSModuleName("");
      functionInjector0.inliningLowersCost((JSModule) null, node0, linkedList0, (Set<String>) null, true, true);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      Node node1 = new Node(29, node0, node0, node0, node0);
      node0.srcrefTree(node1);
      Set<String> set0 = inlineSimpleMethods0.nonMethodProperties;
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "strictModuleDepCheck");
      processCommonJSModules0.getModule();
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      linkedList0.clear();
      System.setCurrentTimeMillis(47);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      linkedList0.add(functionInjector_Reference0);
      Object[] objectArray0 = new Object[0];
      linkedList0.toArray(objectArray0);
      Set<String> set0 = null;
      functionInjector0.inliningLowersCost((JSModule) null, node0, linkedList0, (Set<String>) null, true, true);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
      ImmutableList<FunctionInjector.Reference> immutableList1 = immutableList0.asList();
      // Undeclared exception!
      try { 
        functionInjector0.inliningLowersCost((JSModule) null, node0, immutableList1, (Set<String>) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      String string0 = "strictModuleDepCheck";
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "strictModuleDepCheck");
      processCommonJSModules0.getModule();
      LinkedList<FunctionInjector.Reference> linkedList0 = new LinkedList<FunctionInjector.Reference>();
      System.setCurrentTimeMillis(47);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      linkedList0.add(functionInjector_Reference0);
      Object[] objectArray0 = new Object[0];
      linkedList0.toArray(objectArray0);
      functionInjector0.inliningLowersCost((JSModule) null, node0, linkedList0, (Set<String>) null, true, true);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      Set<String> set0 = inlineSimpleMethods0.nonMethodProperties;
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      String string0 = "-L*";
      SyntheticAst syntheticAst0 = new SyntheticAst("-L*");
      boolean boolean0 = true;
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, true);
      compilerInput0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode1);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier((Supplier<String>) null);
      boolean boolean1 = true;
      boolean boolean2 = true;
      Level level0 = Level.CONFIG;
      String string1 = "com.google.javascript.jscomp.ReplaceIdGenerators$GatherGenerators";
      Compiler compiler1 = new Compiler((PrintStream) null);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler1, functionToBlockMutator_LabelNameSupplier0, true, true, false);
      // Undeclared exception!
      try { 
        functionInjector0.isDirectCallNodeReplacementPossible(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(verboseMessageFormatter0, logger0);
      compiler0.getUniqueNameIdSupplier();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      Node node0 = null;
      // Undeclared exception!
      try { 
        functionInjector0.isDirectCallNodeReplacementPossible((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier1 = new FunctionToBlockMutator.LabelNameSupplier(functionToBlockMutator_LabelNameSupplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      Node node0 = null;
      Iterator<CharSource> iterator0 = (Iterator<CharSource>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        functionInjector0.isDirectCallNodeReplacementPossible((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      SyntheticAst syntheticAst0 = new SyntheticAst("-L*");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, true);
      compilerInput0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0, (ScopeCreator) null);
      CharSource.empty();
      FunctionInjector functionInjector1 = new FunctionInjector(compiler0, supplier0, true, true, false);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      functionInjector1.setKnownConstants(treeSet0);
      // Undeclared exception!
      try { 
        functionInjector1.doesFunctionMeetMinimumRequirements("eval", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      SyntheticAst syntheticAst0 = new SyntheticAst("-L*");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, true);
      compilerInput0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode1);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier((Supplier<String>) null);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, true);
      // Undeclared exception!
      try { 
        functionInjector0.inline(node0, "-L*", node0, functionInjector_InliningMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      SyntheticAst syntheticAst0 = new SyntheticAst("-L*");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, true);
      compilerInput0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, false);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0, (ScopeCreator) null);
      CharSource charSource0 = CharSource.empty();
      Set<String> set0 = WhitelistWarningsGuard.loadWhitelistedJsWarnings(charSource0);
      LinkedListMultimap<String, FunctionInjector.Reference> linkedListMultimap0 = LinkedListMultimap.create(2);
      List<FunctionInjector.Reference> list0 = linkedListMultimap0.removeAll(syntheticAst0);
      functionInjector0.inliningLowersCost((JSModule) null, node0, list0, set0, true, false);
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, set0, functionInjector_InliningMode0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      SyntheticAst syntheticAst0 = new SyntheticAst("-L*");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, true);
      compilerInput0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0, (ScopeCreator) null);
      CharSource charSource0 = CharSource.empty();
      WhitelistWarningsGuard.loadWhitelistedJsWarnings(charSource0);
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      SyntheticAst syntheticAst0 = new SyntheticAst("-L*");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, true);
      compilerInput0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0, (ScopeCreator) null);
      CharSource charSource0 = CharSource.empty();
      Set<String> set0 = WhitelistWarningsGuard.loadWhitelistedJsWarnings(charSource0);
      // Undeclared exception!
      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, set0, functionInjector_InliningMode0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
      int int0 = 0;
      peepholeMinimizeConditions0.isEcmaScript5OrGreater();
      Node node0 = new Node(0, (-416), 0);
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      // Undeclared exception!
      try { 
        functionInjector0.maybePrepareCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = Node.newNumber((-1591.8555435112758));
      SyntheticAst syntheticAst0 = new SyntheticAst("-L*");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, true);
      compilerInput0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode1);
      assertFalse(functionInjector_Reference1.equals((Object)functionInjector_Reference0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = null;
      try {
        functionInjector0 = new FunctionInjector((AbstractCompiler) null, supplier0, false, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, true, true);
      String string0 = null;
      boolean boolean3 = false;
      boolean boolean4 = false;
      boolean boolean5 = true;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      VariableMap variableMap0 = new VariableMap(hashMap0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = '|';
      charArray0[2] = '-';
      charArray0[3] = 'l';
      charArray0[4] = '|';
      charArray0[5] = 's';
      char char0 = ',';
      charArray0[6] = ',';
      charArray0[7] = '}';
      charArray0[8] = 'J';
      String string1 = "R]AYr2Ck^;V";
      // Undeclared exception!
      try { 
        Charset.forName("R]AYr2Ck^;V");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // R]AYr2Ck^;V
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(verboseMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = compiler1.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler1, functionToBlockMutator_LabelNameSupplier0, false, false, false);
      // Undeclared exception!
      try { 
        functionInjector0.doesFunctionMeetMinimumRequirements("YES", (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("OBJECTLIT");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Compiler compiler1 = new Compiler();
      Supplier<String> supplier0 = compiler1.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      // Undeclared exception!
      try { 
        compiler0.loadLibraryCode("OBJECTLIT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, false);
      // Undeclared exception!
      try { 
        compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSModuleGraph", e);
      }
  }
}
