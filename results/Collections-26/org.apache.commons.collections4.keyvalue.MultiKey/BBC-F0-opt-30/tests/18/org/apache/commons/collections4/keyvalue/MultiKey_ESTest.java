/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:36:30 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("diN}9!W:z@^1aG", "diN}9!W:z@^1aG", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[diN}9!W:z@^1aG, diN}9!W:z@^1aG, , ]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey0.hashCode();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey1.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      String[] stringArray0 = new String[3];
      multiKey0.toString();
      stringArray0[0] = "";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("");
      multiKey1.size();
      multiKey1.equals(multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey1.equals("MultiKey[, The array of keys must not be null, ]");
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(4);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, stringArray0[4], object0);
      multiKey1.toString();
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      boolean boolean0 = multiKey2.equals(stringArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-4930));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, integer0, (Object) null);
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey1.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[null, null, -4930, null]]", string0);
      
      int int1 = multiKey1.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1890);
      Integer integer1 = new Integer(1890);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null");
      String string0 = multiKey0.getKey(0);
      assertEquals("", string0);
      
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "4of#q9]{[(I-WS 2";
      stringArray0[2] = "nHMm:Yu176q";
      stringArray0[3] = "";
      stringArray0[4] = "k3>[Tiy+e\"kC4>h?I";
      stringArray0[5] = "F57`9Z";
      stringArray0[6] = "l0)f_zO2NVx";
      stringArray0[7] = "Rn";
      stringArray0[8] = "y\"0";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2202));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2202
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2329));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0);
      Integer integer1 = new Integer((-2329));
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, object0, multiKey0, integer1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey2, multiKey2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey3.toString();
      multiKey1.size();
      multiKey3.hashCode();
      multiKey1.size();
      multiKey0.toString();
      multiKey1.getKeys();
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[null, null, -2329]", "W", "MultiKey[MultiKey[null, null, -2329], null]", "F,");
      // Undeclared exception!
      try { 
        multiKey4.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
