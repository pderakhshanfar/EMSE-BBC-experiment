/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:51:21 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey0, object0, (Object) null, "");
      Object object1 = multiKey3.getKey(0);
      assertNull(object1);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, (Object) null);
      boolean boolean0 = multiKey2.equals(multiKey0);
      MultiKey<String> multiKey5 = new MultiKey<String>("", (String) null, (String) null, "");
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[, null, null, ]", string0);
      
      boolean boolean1 = multiKey4.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-401));
      Integer integer1 = new Integer((-401));
      Integer integer2 = new Integer((-401));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer2, "D");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey0, multiKey0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[]", string0);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey3.equals(object0);
      assertFalse(boolean0);
      
      multiKey3.size();
      multiKey1.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "<65D.z{5iV5(", (String) null, "");
      String string0 = multiKey3.getKey(0);
      assertNull(string0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("<65D.z{5iV5(", multiKey3, multiKey3, multiKey1);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey0, multiKey0, multiKey2, multiKey4);
      multiKey6.toString();
      String string1 = multiKey3.toString();
      assertEquals("MultiKey[null, <65D.z{5iV5(, null, ]", string1);
      
      boolean boolean0 = multiKey3.equals("MultiKey[null, <65D.z{5iV5(, null, ]");
      Object object3 = new Object();
      MultiKey<Object> multiKey7 = new MultiKey<Object>(objectArray0, false);
      boolean boolean1 = multiKey4.equals(multiKey7);
      assertFalse(boolean1 == boolean0);
      assertFalse(multiKey4.equals((Object)multiKey0));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.size();
      multiKey1.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(861);
      integerArray0[0] = integer0;
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey2.equals(multiKey1);
      multiKey2.equals("");
      multiKey1.hashCode();
      multiKey0.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1555));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1555
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "$", "$");
      multiKey1.equals(multiKey0);
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "<65D.z{5iV5(", (String) null, "");
      multiKey3.getKey(0);
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, integer0, object2);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey2, multiKey5, multiKey2, multiKey4);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey7.getKey(811);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 811
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-260));
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("Pg?*l04'f2XCbG", integer0, integer0, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("$tO1JW_-", "Pg?*l04'f2XCbG");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      Integer integer2 = new Integer(663);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer2, integer1);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-260));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -260
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, object0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MhvOheq{";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "LA q`SaM4dYBPFyGKY";
      stringArray0[4] = "";
      stringArray0[5] = "1m^9l";
      stringArray0[6] = "uew$_[047'>N.";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer1, (Integer) null, (Integer) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer2 = multiKey1.getKey(2);
      assertEquals(2, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1785);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1785
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("?HuJb#(}+8k#G5%e{4=", "", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[?HuJb#(}+8k#G5%e{4=, , , ]", string0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2104);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2104);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1287));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey1.equals("MultiKey[?HuJb#(}+8k#G5%e{4=, , , ]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(2125);
      Integer integer1 = new Integer(2125);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      multiKey1.getKeys();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.hashCode();
  }
}
