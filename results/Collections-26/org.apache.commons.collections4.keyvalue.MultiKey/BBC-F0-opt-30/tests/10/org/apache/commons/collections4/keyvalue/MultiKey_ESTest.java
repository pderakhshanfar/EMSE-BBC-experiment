/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:59 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("?RuA}1z5,", "?RuA}1z5,", "?RuA}1z5,", "?RuA}1z5,");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[?RuA}1z5,, ?RuA}1z5,, ?RuA}1z5,, ?RuA}1z5,]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "s(@2*6K1YsswA";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, (MultiKey<String>) null, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, (String) null, (String) null, "");
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1409));
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer0, integer3, integer4);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) integer3;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey3.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1409));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1409
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, null, null]", string0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0[1], "MultiKey[null, null, null]");
      Object object1 = multiKey2.getKey(0);
      assertNull(object1);
      
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "kX9 pM5JKpg7)-|", "", "", "");
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, "kX9 pM5JKpg7)-|", integer0);
      multiKey0.equals(multiKey1);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Bi0ZZ:";
      stringArray0[2] = "nOT;w%S}Stu";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "yVS 9";
      stringArray0[6] = "";
      stringArray0[7] = "L";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2032));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, object0, integer0, integer0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "X:JYW'wJ<k*";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "`<k5";
      stringArray0[4] = "XteF[M>yd.";
      stringArray0[5] = "\tNR}q$<u";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      Integer[] integerArray0 = new Integer[7];
      Integer integer1 = new Integer((-2032));
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(";rCX7t[!iX>q", ";rCX7t[!iX>q", ";rCX7t[!iX>q", object0);
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(";rCX7t[!iX>q", object0, integer0, multiKey0, (Object) null);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey0);
      multiKey2.getKeys();
      MultiKey<String> multiKey3 = new MultiKey<String>(";rCX7t[!iX>q", ";rCX7t[!iX>q", (String) null);
      multiKey3.size();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer2, integer1);
      boolean boolean0 = multiKey4.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1019));
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1019));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1019
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
