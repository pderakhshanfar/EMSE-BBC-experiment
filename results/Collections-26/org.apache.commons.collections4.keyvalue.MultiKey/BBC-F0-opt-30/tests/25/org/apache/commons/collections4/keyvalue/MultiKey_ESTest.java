/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:41:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "", (Object) null, object0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey0, multiKey1);
      Object object1 = multiKey2.getKey(0);
      boolean boolean0 = multiKey0.equals(object1);
      assertFalse(multiKey1.equals((Object)multiKey0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = (Integer) int0;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 10);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(10);
      Integer integer2 = new Integer(10);
      assertEquals(10, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("=T:I", "=T:I");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.size();
      multiKey0.toString();
      multiKey0.getKey(0);
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(1145);
      Integer integer3 = new Integer(3);
      Integer integer4 = new Integer(1145);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer2, integer3, integer4, (Integer) null);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, 1145, 3, 1145, null]", string0);
      
      Object object0 = new Object();
      Integer integer5 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, integer5, integer1);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~By!mH eE'xvw6FUC\"+";
      stringArray0[1] = "/nF/~0\"q^-!?Xl:-W";
      stringArray0[2] = "tL";
      stringArray0[3] = "2kPw=";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey2 = new MultiKey<String>("^K6cX5dM@", "Jt24;4}(", "?}-2i", "org.apache.commons.collections4.keyvalue.MultiKey", (String) null);
      Object object0 = multiKey2.getKey(0);
      assertEquals("^K6cX5dM@", object0);
      
      boolean boolean0 = multiKey1.equals("^K6cX5dM@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "CazQF2p9pr,v)?wT[t/";
      stringArray0[2] = "WT%Y?t<SXr), ^";
      stringArray0[3] = "";
      stringArray0[4] = "]Z0(~x vIwNI9<";
      stringArray0[5] = "o^Lu";
      stringArray0[6] = "";
      stringArray0[7] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[8] = "\"A,>tO#D9~Alk?JL^s";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer((-1744));
      Integer integer1 = new Integer((-1744));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "", object0);
      multiKey2.getKeys();
      multiKey1.hashCode();
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1744));
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer3, integer0, integer4, integer0);
      multiKey3.hashCode();
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(763);
      Integer integer1 = new Integer((-83));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[763, -83]", "dq,", (String) null, (String) null);
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer2 = new Integer((-1));
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, "dq,", integer0, object0, integer2);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-83));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -83
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "=F5:9Gmk?D$}K\"o5pQ", "}!O#P%:vQ3'klQLOl", "");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "MultiKey";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-3818));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-466));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(5);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-513));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-513));
      integerArray0[8] = integer8;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(347);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 347
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = " pZMHND";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "D]L}^DTjYSC";
      stringArray0[4] = "7V1-rA7F\"";
      stringArray0[5] = "MultiKey";
      stringArray0[6] = "The array of keys must not be null";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(8, multiKey0.size());
  }
}
