/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:45 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":gsdB&7I}MW-!)>C", ":gsdB&7I}MW-!)>C", "Uwz)");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, ":gsdB&7I}MW-!)>C");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(1);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer((-1024));
      Integer integer1 = new Integer((-480));
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey0.getKeys();
      String[] stringArray2 = multiKey0.getKeys();
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The arrayof keys mus not b null", "The arrayof keys mus not b null", "The arrayof keys mus not b null");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")@#Ec7{";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      multiKey0.getKey(0);
      multiKey0.hashCode();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      multiKey0.toString();
      Integer integer1 = new Integer((-936));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-871));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(818);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.equals(")@#Ec7{");
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("7-!u^y1 *8", "7-!u^y1 *8", "7-!u^y1 *8");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("7-!u^y1 *8");
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1616));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, integer0, (Object) null);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, object0, object1);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey0);
      multiKey2.toString();
      multiKey2.equals(multiKey0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[MultiKey[null, null, -1616, null], java.lang.Object@2c5bb831, java.lang.Object@2c5bb831, java.lang.Object@19b2f800]");
      multiKeyArray0[0] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey4.getKeys();
      Integer integer1 = new Integer((-2474));
      Integer integer2 = new Integer((-2474));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer1, integer2, integer0);
      // Undeclared exception!
      try { 
        multiKey5.getKey(1465);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1465
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>("}xe,,reJ$d9\"", "\"Voqb`\"-B", "", "29H.0\u0005b", ":7D{");
      String string0 = multiKey0.getKey(0);
      assertEquals("}xe,,reJ$d9\"", string0);
      
      objectArray0[2] = (Object) "}xe,,reJ$d9\"";
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object2, "29H.0\u0005b", (Object) null);
      Object object3 = multiKey1.getKey(0);
      objectArray0[3] = object3;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey2.getKey(0);
      objectArray0[4] = (Object) null;
      Object object4 = new Object();
      objectArray0[5] = object4;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      Object object5 = multiKey3.getKey(0);
      assertNotSame(object5, object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("The array of keys must not be null", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean0);
      
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[The array of keys must not be null, The array of keys must not be null]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("_:&1", "", (String) null, "", "");
      multiKey1.toString();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-512));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -512
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      int int1 = (-1);
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-638));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1593);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer4, integer2);
      multiKeyArray0[1] = multiKey1;
      Integer integer6 = new Integer(1593);
      Integer integer7 = new Integer(3258);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer6, integer7, integer1);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0[4], integerArray0[4]);
      multiKeyArray0[3] = multiKey3;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) int1, (Integer) null);
      multiKeyArray0[4] = multiKey4;
      Integer integer8 = new Integer((int) integerArray0[5]);
      Integer integer9 = new Integer((-3792));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer8, integer9);
      multiKeyArray0[5] = multiKey5;
      Integer integer10 = new Integer(3);
      Integer integer11 = new Integer(3258);
      Integer integer12 = new Integer(1593);
      Integer integer13 = new Integer(int0);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer10, integer7, integer11, integer12, integer13);
      multiKeyArray0[6] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      boolean boolean0 = multiKey7.equals(integer6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "MultiKey[null, null]");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("ZCEil", "MultiKey[null, null]");
      multiKeyArray0[1] = multiKey2;
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", ",", (String) null);
      multiKeyArray0[2] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = multiKey4.size();
      assertEquals(3, int0);
  }
}
