/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:28:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey0, multiKey1);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(8);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-379));
      integerArray0[2] = integer2;
      int int0 = 1;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      int int1 = 0;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.size();
      boolean boolean0 = multiKey0.equals(int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "OsT<CO>TEZ=4");
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.equals("OsT<CO>TEZ=4");
      Object object0 = multiKey0.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 0, 1, 0, 1, 0]", string0);
      
      multiKey0.getKey(int0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, "'::=v&\"", integer4, int0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer0);
      multiKey0.equals(integer2);
      MultiKey<String> multiKey1 = new MultiKey<String>("jNZj!%%ud7OO", (String) null, "jNZj!%%ud7OO", "jNZj!%%ud7OO");
      multiKey1.size();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jNZj!%%ud7OO";
      stringArray0[1] = "jNZj!%%ud7OO";
      stringArray0[2] = "jNZj!%%ud7OO";
      stringArray0[3] = "jNZj!%%ud7OO";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "jNZj!%%ud7OO";
      stringArray0[7] = "jNZj!%%ud7OO";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("jNZj!%%ud7OO", multiKey1, multiKey2, "jNZj!%%ud7OO");
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, "?N5", "2zT2@:SD", integer0, integer3);
      multiKey4.getKey(2);
      boolean boolean0 = multiKey3.equals("2zT2@:SD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "", "MultiKey");
      multiKey0.equals("");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = null;
      boolean boolean0 = true;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      assertEquals(0, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      int int0 = 1;
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer0);
      multiKeyArray0[1] = multiKey1;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[2] = multiKey2;
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer((-2490));
      Integer integer4 = new Integer((-1));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) int0, integer2, integer3, (Integer) int0, integer4);
      multiKeyArray0[3] = multiKey3;
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      assertEquals(4, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "3dE|I\"mtRcIQ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "";
      multiKey0.toString();
      objectArray0[2] = (Object) "3dE|I\"mtRcIQ";
      multiKey0.toString();
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "3dE|I\"mtRcIQ";
      objectArray0[5] = (Object) "3dE|I\"mtRcIQ";
      objectArray0[6] = (Object) "";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("cdM,A3wi7l*T1e", "cdM,A3wi7l*T1e", "cdM,A3wi7l*T1e");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[cdM,A3wi7l*T1e, cdM,A3wi7l*T1e, cdM,A3wi7l*T1e]", string0);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(5);
      integerArray0[2] = integer2;
      int int1 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1416);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1576));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int1);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int2 = multiKey1.hashCode();
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
