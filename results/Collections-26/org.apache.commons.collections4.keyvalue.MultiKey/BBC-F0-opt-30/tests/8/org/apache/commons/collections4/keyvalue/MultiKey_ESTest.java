/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:35 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("GC2 #1SB", "yF4@7i@=kK!]El", "yF4@7i@=kK!]El", "The array of keys must not be null", "yF4@7i@=kK!]El");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "The array of keys must not be null", "The array of keys must not be null", "GC2 #1SB", (Object) null);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      Object object1 = multiKey2.getKey(3);
      boolean boolean0 = multiKey1.equals(object1);
      assertTrue(boolean0);
      
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1479);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      Object object0 = multiKey0.getKey(0);
      Integer integer3 = new Integer(1);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer3, object1);
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray1, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      int int0 = (-731);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-731));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -731
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "");
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.equals((Object) null);
      multiKey0.toString();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-261));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -261
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("'2u!", "'2u!", "'2u!", "'2u!", "V3u%Fnc");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "'2u!", "V3u%Fnc");
      multiKey1.equals(multiKey0);
      multiKey1.toString();
      Integer integer0 = new Integer((-1409));
      int int0 = 0;
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = new Integer((-1409));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, integer2);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey0.size();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      int int1 = 2;
      multiKey0.getKey(2);
      multiKey1.equals("'2u!");
      multiKey0.hashCode();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-747));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -747
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Zs|l0Tf_',!(.";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "1wS&TTw?<_G9+PN", "TC=(.P07]f'", "6Ua", "");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "'q", "'q", "'q", "");
      assertEquals(5, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(565);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer1);
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[4, 4, 565, 565, 4]";
      stringArray0[1] = "MultiKey[4, 4, 565, 565, 4]";
      stringArray0[2] = "MultiKey[4, 4, 565, 565, 4]";
      stringArray0[3] = "MultiKey[4, 4, 565, 565, 4]";
      stringArray0[4] = "MultiKey[4, 4, 565, 565, 4]";
      stringArray0[5] = "MultiKey[4, 4, 565, 565, 4]";
      stringArray0[6] = "MultiKey[4, 4, 565, 565, 4]";
      stringArray0[7] = "";
      stringArray0[8] = "MultiKey[4, 4, 565, 565, 4]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[4, 4, 565, 565, 4], MultiKey[4, 4, 565, 565, 4], MultiKey[4, 4, 565, 565, 4], MultiKey[4, 4, 565, 565, 4], MultiKey[4, 4, 565, 565, 4], MultiKey[4, 4, 565, 565, 4], MultiKey[4, 4, 565, 565, 4], , MultiKey[4, 4, 565, 565, 4]]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("odrYgJYBDw;}oTFHZ", object0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[odrYgJYBDw;}oTFHZ, java.lang.Object@2d7a11e5]", "YcO$A)ZLI,", "YcO$A)ZLI,");
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      int int0 = (-1972);
      multiKey2.toString();
      Integer integer0 = new Integer((-1972));
      multiKey2.equals(integer0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1972
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-617));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -617
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[, ]";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey[, ]";
      stringArray0[4] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[, ], , , MultiKey[, ], ]", string0);
      
      multiKey0.hashCode();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer2, integer2);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3);
      boolean boolean0 = multiKey4.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cc1m&";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Pn%i|jj7T`Xltb~A4";
      stringArray0[5] = "k0^s0wO2T?}VqiTvZ";
      stringArray0[6] = "";
      stringArray0[7] = "gTs}g*%^|]='v]";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("\"r90# ", "\"r90# ", "\"r90# ");
      multiKey0.equals((Object) null);
      int int0 = multiKey0.size();
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("\"r90# ", "MultiKey[3, 3, 3, 3]");
      multiKey2.equals((Object) null);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }
}
