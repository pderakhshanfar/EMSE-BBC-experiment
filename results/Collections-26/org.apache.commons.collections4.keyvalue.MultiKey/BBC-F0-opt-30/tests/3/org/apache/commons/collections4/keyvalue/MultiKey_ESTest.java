/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:43 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Y", "Y", "Y", "Y", "Y");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Y";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      boolean boolean0 = multiKey0.equals(objectArray0[2]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(718);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, "MultiKey[0, 718]");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.toString();
      Object[] objectArray0 = multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey1.equals(integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "MultiKey[0, 718]", "MultiKey[0, 718]");
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, , MultiKey[0, 718], MultiKey[0, 718]], MultiKey[, , MultiKey[0, 718], MultiKey[0, 718]], MultiKey[, , MultiKey[0, 718], MultiKey[0, 718]], MultiKey[, , MultiKey[0, 718], MultiKey[0, 718]], MultiKey[, , MultiKey[0, 718], MultiKey[0, 718]]]", string0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      boolean boolean1 = multiKey1.equals(multiKey4);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , ]", string0);
      
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1861));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "g}Rk");
      multiKey1.hashCode();
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer((-1861));
      Integer integer4 = new Integer((-1861));
      Integer integer5 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer4, integer1, integer5);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, -1861, 0, 1]", string0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "g}Rk";
      stringArray0[1] = "g}Rk";
      stringArray0[2] = "MultiKey[0, -1861, 0, 1]";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "MultiKey[0, -1861, 0, 1]";
      stringArray0[5] = "";
      stringArray0[6] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[7] = "MultiKey[0, -1861, 0, 1]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1861));
      int int0 = 0;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "g}Rk");
      multiKey1.hashCode();
      int int1 = 2;
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer((-1861));
      Integer integer4 = new Integer((-1861));
      Integer integer5 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer4, integer1, integer5);
      multiKey2.toString();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      Integer integer6 = new Integer(int1);
      integerArray0[4] = integer6;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = multiKey3.getKey(int1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, integer2, integer3, multiKey2, object0);
      multiKey4.getKey(int0);
      int int2 = multiKey3.size();
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      Integer integer0 = new Integer(7);
      multiKey0.equals(integer0);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      Object object0 = new Object();
      multiKey1.equals(object0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer2);
      Object object1 = multiKey2.getKey(0);
      multiKey1.equals(object1);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-211));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", "", "", "");
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-211));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -211
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "XAz9'c", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[The array of keys must not be null, XAz9'c, The array of keys must not be null]", string0);
      
      int int0 = multiKey0.size();
      String string1 = multiKey0.getKey(0);
      assertEquals("The array of keys must not be null", string1);
      
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(963);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("ii}/4x]*nO gl", (String) null, "'9/");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.getKeys();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "MxB5";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("n?dGI", "%3U*yIP7Lp07z", (String) null, "n?dGI");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      int int0 = 1351;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1351);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1351
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-4021);
      Integer integer0 = new Integer((-4021));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4021));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4021
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer((-3847));
      Integer integer1 = new Integer((-3745));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      int int0 = multiKey1.size();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, ]";
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
      
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, ], MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, ]]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1238
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
