/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:40 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("1", "1", "1", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "", "");
      multiKey1.hashCode();
      int int0 = (-241);
      Integer integer0 = new Integer((-241));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("X_Yj", "");
      multiKey1.toString();
      multiKeyArray0[1] = multiKey1;
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.equals(multiKey0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1973));
      Integer integer2 = new Integer(1188);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, integer1, integer0, integer2);
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("m>o*", "2vxQUT'142mjO|J,i");
      multiKey0.toString();
      multiKey0.equals("m>o*");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("Oj96rfdmV", "Oj96rfdmV", "Oj96rfdmV");
      multiKey0.toString();
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("Oj96rfdmV", "Oj96rfdmV", "MultiKey[Oj96rfdmV, Oj96rfdmV, Oj96rfdmV]");
      multiKey1.toString();
      multiKey1.toString();
      int int1 = multiKey1.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      multiKey0.getKeys();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey0.equals("MultiKey[Oj96rfdmV, Oj96rfdmV, MultiKey[Oj96rfdmV, Oj96rfdmV, Oj96rfdmV]]");
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string0 = multiKey2.toString();
      //  // Unstable assertion: assertEquals("MultiKey[4, 3, 4]", string0);
      
      int int2 = multiKey0.hashCode();
      //  // Unstable assertion: assertFalse(int2 == int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) "MultiKey[4, 3, 4]";
      objectArray0[2] = (Object) "MultiKey[Oj96rfdmV, Oj96rfdmV, Oj96rfdmV]";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "MultiKey[4, 3, 4]";
      Object object0 = new Object();
      objectArray0[5] = object0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      Object object1 = multiKey3.getKey(3);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[4, 3, 4]", object1);
      boolean boolean1 = multiKey0.equals(multiKey4);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1536);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[1536, 1536, 1536]";
      stringArray0[1] = "MultiKey[1536, 1536, 1536]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray1 = multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.size();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, (MultiKey<String>) null);
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray1, false);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(stringArray1);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, integer1, multiKey4);
      Object object0 = multiKey5.getKey(1);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object) null, "MultiKey[1536, 1536, 1536]", object0, multiKey2);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[null, MultiKey[1536, 1536, 1536], 1, MultiKey[MultiKey[MultiKey[1536, 1536, 1536], MultiKey[1536, 1536, 1536]], MultiKey[MultiKey[1536, 1536, 1536], MultiKey[1536, 1536, 1536]], MultiKey[MultiKey[1536, 1536, 1536], MultiKey[1536, 1536, 1536]], MultiKey[MultiKey[1536, 1536, 1536], MultiKey[1536, 1536, 1536]], null]]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = null;
      int int1 = (-2669);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2669));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2669
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "1i}{A,ln*";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "1i}{A,ln*", "");
      Object object0 = multiKey1.getKey(0);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1176));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1176
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1215);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      String string0 = "";
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.getKeys();
      multiKey2.equals("");
      // Undeclared exception!
      try { 
        multiKey2.getKey(1215);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1215
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "", "");
      multiKey1.hashCode();
      Integer integer0 = new Integer((-241));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-241, -241, -241]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey0 = new MultiKey<String>("sMw]G", "sMw]G", "", "", "CF/|2-K &.");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("sMw]G", "sMw]G", "sMw]G");
      multiKeyArray0[1] = multiKey1;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CF/|2-K &.";
      stringArray0[1] = "CF/|2-K &.";
      stringArray0[2] = "sMw]G";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("TBUijD9IfIV", "TBUijD9IfIV", "sMw]G", (String) null);
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKeyArray0[5] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[sMw]G, sMw]G, , , CF/|2-K &.], MultiKey[sMw]G, sMw]G, sMw]G], MultiKey[CF/|2-K &., CF/|2-K &., sMw]G], MultiKey[, ], MultiKey[TBUijD9IfIV, TBUijD9IfIV, sMw]G, null], MultiKey[CF/|2-K &., CF/|2-K &., sMw]G]]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3400));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3400
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "WX_$($WHwv/:Otp_Q";
      MultiKey<String> multiKey0 = new MultiKey<String>("WX_$($WHwv/:Otp_Q", "WX_$($WHwv/:Otp_Q");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "WX_$($WHwv/:Otp_Q");
      multiKey1.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
