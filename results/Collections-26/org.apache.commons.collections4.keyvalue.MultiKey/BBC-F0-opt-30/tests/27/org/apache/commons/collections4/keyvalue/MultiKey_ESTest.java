/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:49:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      int int0 = 0;
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, object0, multiKey0);
      Object object1 = multiKey2.getKey(0);
      Integer integer0 = new Integer((-2096));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object1, integer0, multiKey0);
      multiKeyArray0[1] = multiKey3;
      String[] stringArray0 = null;
      MultiKey<String> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "De+ej0$#";
      stringArray0[1] = ".V},";
      stringArray0[2] = "%";
      stringArray0[3] = "(|=";
      stringArray0[4] = "";
      stringArray0[5] = "4GtR";
      stringArray0[6] = "nRBhN94q^`5";
      stringArray0[7] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      int int0 = multiKey2.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, integer0, object0);
      Object[] objectArray0 = new Object[6];
      multiKey0.getKey(0);
      objectArray0[0] = null;
      multiKey0.getKey(0);
      objectArray0[1] = null;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) integer0;
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("yE^)<vdM`fG{", "p*Ibs=hrvz55,46", "yE^)<vdM`fG{", "The array of keys must not be null", "{1Ry@z\"H4zN");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "{1Ry@z\"H4zN";
      objectArray0[1] = (Object) "The array of keys must not be null";
      objectArray0[2] = (Object) "p*Ibs=hrvz55,46";
      objectArray0[3] = (Object) "The array of keys must not be null";
      objectArray0[4] = (Object) "yE^)<vdM`fG{";
      objectArray0[5] = (Object) "p*Ibs=hrvz55,46";
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "yE^)<vdM`fG{";
      objectArray0[8] = (Object) "The array of keys must not be null";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "p*Ibs=hrvz55,46", "uhEu:&SaE'~\"X)");
      Object object0 = multiKey2.getKey(0);
      assertEquals("org.apache.commons.collections4.keyvalue.MultiKey", object0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "{1Ry@z\"H4zN", "");
      multiKey3.getKey(0);
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      Object object1 = multiKey4.getKey(int0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey0, object1);
      Object object2 = multiKey5.getKey(0);
      Object object3 = multiKey4.getKey(int0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey1, "org.apache.commons.collections4.keyvalue.MultiKey", integer0, object2, object3);
      boolean boolean0 = multiKey6.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "nAU*dM~";
      stringArray0[2] = "J]~i@j['vS;R8";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.equals("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey0;
      multiKey1.toString();
      objectArray0[3] = (Object) integer0;
      multiKey0.toString();
      objectArray0[4] = (Object) integer0;
      multiKey0.toString();
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.equals("");
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer0);
      multiKey0.toString();
      multiKey0.getKey(3);
      Object[] objectArray0 = new Object[1];
      multiKey0.toString();
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 0, 0, 0]]", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[0, 0, 0, 0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      boolean boolean0 = multiKey2.equals("MultiKey[0, 0, 0, 0, 0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey1.getKeys();
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[]", (String) null, "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2418));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2418
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
