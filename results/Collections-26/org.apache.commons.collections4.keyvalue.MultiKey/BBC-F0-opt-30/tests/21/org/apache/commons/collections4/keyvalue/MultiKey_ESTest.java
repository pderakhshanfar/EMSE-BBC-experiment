/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:30:26 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "<", (String) null, (String) null);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(".)9>", ".)9>", "", ".)9>", "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-1245));
      Integer integer1 = new Integer(1047);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer1);
      Integer integer2 = multiKey1.getKey(0);
      assertNotNull(integer2);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[.)9>, .)9>, , .)9>, ]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(43);
      Integer integer1 = new Integer(471);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.toString();
      Integer integer2 = new Integer(471);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[43, 471, 471]";
      stringArray0[1] = "MultiKey[43, 471, 471]";
      stringArray0[2] = "MultiKey[43, 471, 471]";
      stringArray0[3] = "MultiKey[43, 471, 471]";
      stringArray0[5] = "MultiKey[43, 471, 471]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.equals(multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[43, 471, 471], MultiKey[43, 471, 471], MultiKey[43, 471, 471], MultiKey[43, 471, 471], null, MultiKey[43, 471, 471]]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("~`TL?'h", "~`TL?'h", "a");
      multiKey1.toString();
      multiKey1.size();
      multiKey0.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.equals((Object) null);
      multiKey1.toString();
      multiKey1.equals("a");
      // Undeclared exception!
      try { 
        multiKey1.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(43);
      Integer integer1 = new Integer(471);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("L]", "Yu00QIL1", "dpX%(!2)AOo{aS8T", "tf87");
      multiKey1.equals("dpX%(!2)AOo{aS8T");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("L]", (Object) null, multiKey0, "Yu00QIL1");
      Object object0 = multiKey2.getKey(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = null;
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("2(wk$@)F", "2(wk$@)F", multiKey0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals((Object) null);
      Integer integer1 = new Integer(1);
      multiKey0.equals(integer1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "2(wk$@)F";
      stringArray0[1] = "MultiKey[2(wk$@)F, 2(wk$@)F, MultiKey[1, null, 1, 1]]";
      stringArray0[2] = "2(wk$@)F";
      multiKey1.toString();
      stringArray0[3] = "2(wk$@)F";
      stringArray0[4] = "MultiKey[2(wk$@)F, 2(wk$@)F, MultiKey[1, null, 1, 1]]";
      stringArray0[5] = "2(wk$@)F";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.toString();
      String string1 = multiKey2.getKey(1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
      
      multiKey1.hashCode();
      boolean boolean1 = multiKey1.equals(multiKey0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("PCM+/x.MeaW]K/EI_", "PCM+/x.MeaW]K/EI_", "MultiKey", "MultiKey");
      Integer integer0 = new Integer((-1703));
      Integer integer1 = new Integer((-1703));
      Integer integer2 = new Integer((-1703));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, multiKey0);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      MultiKey<String> multiKey3 = new MultiKey<String>("PCM+/x.MeaW]K/EI_", "mYO}>_", "MultiKey[MultiKey[-1703, -1703, -1703, -1703, -1703], -1703, MultiKey[PCM+/x.MeaW]K/EI_, PCM+/x.MeaW]K/EI_, MultiKey, MultiKey]]");
      multiKey2.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-4197));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4197
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, (MultiKey<String>) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "63{:9Sd#qi)Hu\"<:Vkg", (String) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[MultiKey[, ], MultiKey[, ], MultiKey[, ], null]", multiKey2);
      multiKey3.toString();
      Object object0 = new Object();
      multiKey0.toString();
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[, ]", multiKey3, "MultiKey[, ]", (Object) null, object0);
      multiKey4.getKeys();
      multiKey4.getKeys();
      multiKey4.hashCode();
      multiKey0.hashCode();
      multiKey2.size();
      multiKey1.equals("MultiKey[, ]");
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(6543);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3292);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(6543);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-43));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -43
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1452));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1452
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
