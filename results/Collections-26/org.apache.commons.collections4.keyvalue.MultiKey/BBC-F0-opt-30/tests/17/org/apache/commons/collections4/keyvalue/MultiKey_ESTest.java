/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:33:49 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("2n|=|3{gdKqU&&G", "2n|=|3{gdKqU&&G");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      multiKey0.equals(integer0);
      multiKey0.getKey(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[null, null, null]";
      stringArray0[1] = "MultiKey[null, null, null]";
      stringArray0[2] = "MultiKey[null, null, null]";
      stringArray0[3] = "MultiKey[null, null, null]";
      stringArray0[4] = "=Hc}1k2zRFgo=";
      stringArray0[5] = "MultiKey[null, null, null]";
      stringArray0[6] = "MultiKey[null, null, null]";
      stringArray0[7] = "5)V5L*BgbTqp>1n@m";
      stringArray0[8] = "MultiKey[null, null, null]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-701));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -701
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-5032));
      Integer integer1 = new Integer((-5032));
      Integer integer2 = new Integer((-5032));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer0, integer1, integer2);
      multiKey0.size();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("kQu;m%5G", (String) null);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[kQu;m%5G, null]", string0);
      
      int int0 = multiKey0.size();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "MultiKey[kQu;m%5G, null]";
      objectArray0[2] = (Object) "MultiKey[kQu;m%5G, null]";
      objectArray0[3] = (Object) "kQu;m%5G";
      objectArray0[4] = (Object) "kQu;m%5G";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "MultiKey[kQu;m%5G, null]";
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>(",DMD;?2*#!", ",DMD;?2*#!");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, object0, object1, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      int int0 = (-1236);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1236));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1236
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.hashCode();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "lBK";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "N[x\"6XZ\"UF@4_b7'Qpr";
      stringArray0[5] = "f)lefFNBIi;--:";
      stringArray0[6] = "`}O&?D-_|/Sa;-Z2`^";
      stringArray0[7] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[8] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey1.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = null;
      Object object1 = null;
      Integer integer0 = new Integer(271);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(271);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 271
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!0FkKc^CSE";
      stringArray0[1] = "XalN[";
      multiKey0.toString();
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      multiKey0.toString();
      stringArray0[4] = "y)fUnNr";
      stringArray0[5] = "_Hm4S#j=";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKey(0);
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey0.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[!0FkKc^CSE, XalN[, , org.apache.commons.collections4.keyvalue.MultiKey, y)fUnNr, _Hm4S#j=]", string0);
      
      multiKey0.equals(multiKey2);
      String string1 = multiKey1.getKey(2);
      assertEquals("", string1);
      
      boolean boolean0 = multiKey0.equals("y)fUnNr");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "!0FkKc^CSE";
      objectArray0[1] = (Object) multiKey2;
      objectArray0[2] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[3] = (Object) "!0FkKc^CSE";
      objectArray0[4] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[5] = (Object) "!0FkKc^CSE";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      boolean boolean1 = multiKey0.equals(multiKey3);
      assertFalse(boolean1);
  }
}
