/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:05 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(1);
      assertNull(object0);
      
      boolean boolean0 = multiKey0.equals(objectArray0[2]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("#!P2p", "#!P2p");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("#!P2p", "#!P2p");
      multiKey1.equals(multiKey0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2565);
      integerArray0[0] = integer0;
      int int0 = 14;
      Integer integer1 = new Integer(14);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("#!Pp", "#!Pp", (String) null, (String) null);
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer3, integer1);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(1162);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer4, integer2, integer5);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "AT<n2Iim;Actq ";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("AT<n2Iim;Actq ", "AT<n2Iim;Actq ", "AT<n2Iim;Actq ", "AT<n2Iim;Actq ");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(1);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.hashCode();
      String[] stringArray0 = new String[9];
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<MultiKey<Integer>> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")t^", ")t^", (String) null, "hA%<So,ezw!l>e~", "");
      multiKey0.toString();
      String string0 = multiKey0.getKey(2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(967);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.toString();
      multiKey0.toString();
      int int0 = multiKey1.size();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "w", "");
      multiKey2.equals((Object) null);
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey2.toString();
      int int1 = multiKey1.hashCode();
      assertTrue(int1 == int0);
      
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, w, ]", string0);
      
      multiKey0.equals("MultiKey[, w, ]");
      multiKey0.hashCode();
      multiKey2.getKeys();
      multiKey2.getKeys();
      boolean boolean0 = multiKey1.equals("MultiKey[967, 967, 967]");
      assertFalse(boolean0);
      
      int int2 = multiKey2.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      Integer integer1 = new Integer(1253);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer2, integer0, integer3, integer0);
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      int int3 = multiKey4.hashCode();
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.equals(multiKey1);
      multiKey0.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      Integer integer0 = new Integer((-1137));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[java.lang.Object@662f088e]";
      stringArray0[1] = "MultiKey[java.lang.Object@662f088e]";
      stringArray0[2] = "iknE'c-";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey[java.lang.Object@662f088e]";
      stringArray0[5] = "MultiKey[java.lang.Object@662f088e]";
      stringArray0[6] = "MultiKey[java.lang.Object@662f088e]";
      stringArray0[7] = "MultiKey[java.lang.Object@662f088e]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals("MultiKey[java.lang.Object@662f088e]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1628);
      Integer integer0 = new Integer((-1628));
      Integer integer1 = new Integer((-1628));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      Integer integer2 = new Integer((-1628));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer0, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, multiKey0);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey3);
      multiKey3.toString();
      multiKey1.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey4.getKey(945);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 945
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(1970);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "");
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, multiKey1);
      multiKey2.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKey3.toString();
      multiKey3.equals("");
      multiKey0.size();
      multiKey2.equals("MultiKey[1970, ]");
      multiKey0.toString();
      multiKey2.hashCode();
      multiKey2.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer1);
      multiKeyArray0[0] = multiKey4;
      Integer integer2 = new Integer((-215));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer1, integer2, integer1, integer0);
      multiKeyArray0[1] = multiKey5;
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(1970);
      Integer integer5 = new Integer(3293);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer1, integer3, integer0, integer4, integer5);
      multiKeyArray0[2] = multiKey6;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer4;
      integerArray0[2] = integer3;
      integerArray0[3] = integer4;
      integerArray0[4] = integer2;
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[3] = multiKey7;
      Integer integer6 = new Integer((-2068));
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integerArray0[4], integer6, integer3);
      multiKeyArray0[4] = multiKey8;
      Integer integer7 = new Integer((int) integerArray0[0]);
      Integer integer8 = new Integer(3);
      MultiKey<Integer> multiKey9 = new MultiKey<Integer>(integer6, integer7, integer1, integer8);
      multiKeyArray0[5] = multiKey9;
      Integer integer9 = new Integer(3293);
      Integer integer10 = new Integer((-821));
      MultiKey<Integer> multiKey10 = new MultiKey<Integer>(integer9, (Integer) int0, integer0, integerArray0[4], integer10);
      multiKeyArray0[6] = multiKey10;
      Integer integer11 = new Integer(0);
      MultiKey<Integer> multiKey11 = new MultiKey<Integer>(integer11, integerArray0[4]);
      multiKeyArray0[7] = multiKey11;
      MultiKey<MultiKey<Integer>> multiKey12 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      int int1 = multiKey12.size();
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "LP.zBS9+*?G37");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      Integer integer0 = new Integer(201);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, (Integer) null);
      multiKeyArray0[1] = multiKey3;
      Integer integer1 = new Integer(201);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKeyArray0[2] = multiKey4;
      Integer integer2 = new Integer(201);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>((Integer) null, integer2, integer0);
      multiKeyArray0[3] = multiKey5;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[4] = multiKey6;
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer((int) integerArray0[0]);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer3, integer1, integer4);
      multiKeyArray0[5] = multiKey7;
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer(201);
      Integer integer8 = new Integer(1162);
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integer5, integer6, integer7, integer8, integer0);
      multiKeyArray0[6] = multiKey8;
      Integer integer9 = new Integer(1162);
      Integer integer10 = new Integer((int) integerArray0[0]);
      MultiKey<Integer> multiKey9 = new MultiKey<Integer>(integer7, integer7, integer9, integer10);
      multiKeyArray0[7] = multiKey9;
      MultiKey<MultiKey<Integer>> multiKey10 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      int int0 = multiKey10.size();
      assertEquals(8, int0);
  }
}
