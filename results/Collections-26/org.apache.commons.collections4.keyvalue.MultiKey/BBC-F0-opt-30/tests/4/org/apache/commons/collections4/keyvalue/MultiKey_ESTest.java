/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:47:50 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("v", "v", "v", "v", "v");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("v", object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("v", multiKey1, multiKey1);
      boolean boolean0 = multiKey2.equals("v");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey1, multiKey1);
      Object object1 = multiKey3.getKey(3);
      boolean boolean1 = multiKey1.equals(object1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "|ScM", "", "|ScM");
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2151);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("nsU+MmRJi+f1@eZ,", "nsU+MmRJi+f1@eZ,", "nsU+MmRJi+f1@eZ,", "nsU+MmRJi+f1@eZ,", "M`");
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "#ZkYxOla'trkI", "$f@!V/y(??LtBI.85", "UJDPAzi?Q", "`c|:^vUJx6");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "UJDPAzi?Q", "`c|:^vUJx6");
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = true;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "MultiKey[]", "MultiKey[]", "MultiKey[]");
      multiKey0.toString();
      multiKey1.toString();
      int int0 = (-1);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>("s", "");
      String string0 = multiKey0.getKey(0);
      assertEquals("s", string0);
      
      objectArray0[0] = (Object) "s";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1, "", (Object) null, "");
      Object object2 = multiKey1.getKey(0);
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      MultiKey<String> multiKey4 = new MultiKey<String>("-6oj/jGB_W~dr(2:7", "", "s", "");
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("_A%+Vc ]OP", "_A%+Vc ]OP", "I'G4o-");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      Object object0 = multiKey1.getKey(0);
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "_A%+Vc ]OP");
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.hashCode();
      boolean boolean0 = multiKey2.equals("MultiKey[MultiKey[_A%+Vc ]OP, _A%+Vc ]OP, I'G4o-], _A%+Vc ]OP]");
      assertFalse(boolean0);
      
      int int0 = multiKey2.size();
      multiKey0.size();
      multiKey0.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[_A%+Vc ]OP, _A%+Vc ]OP, I'G4o-], MultiKey[_A%+Vc ]OP, _A%+Vc ]OP, I'G4o-], MultiKey[_A%+Vc ]OP, _A%+Vc ]OP, I'G4o-], MultiKey[_A%+Vc ]OP, _A%+Vc ]OP, I'G4o-]]", string0);
      
      multiKey2.getKeys();
      multiKey2.getKey(0);
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "", (String) null, (String) null);
      multiKey0.toString();
      Integer integer0 = new Integer((-194));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-194));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer0);
      multiKey1.toString();
      Integer integer3 = new Integer(0);
      multiKey1.equals(integer3);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer3;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      multiKey0.getKey(0);
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) "MultiKey[null, null, , null, null]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey2.getKeys();
      assertEquals(8, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[null, 1]";
      stringArray0[1] = "MultiKey[null, 1]";
      stringArray0[2] = "MultiKey[null, 1]";
      stringArray0[3] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      int int0 = multiKey2.size();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey0, multiKey0);
      multiKey3.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      multiKeyArray0[6] = multiKey2;
      multiKeyArray0[7] = multiKey2;
      multiKeyArray0[8] = multiKey2;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey4.size();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(9);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer0, integer2, (Integer) null, integer1);
      int int1 = multiKey5.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "QZ.4");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";UCV,";
      stringArray0[1] = "$V{^E";
      stringArray0[2] = "g_:9+=&";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("8WE{ D7y[k}DaG", "MultiKey", (String) null);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "0k{tiRI!cG{");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("O.^eQtpgJ", "g_:9+=&", "0k{tiRI!cG{", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "$V{^E", "$V{^E");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("g+zW", "g_:9+=&", "", "[");
      multiKeyArray0[5] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey6.getKey(2549);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2549
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Integer integer0 = new Integer((-3630));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3630));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3630
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", (String) null, "", "");
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(273);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(273);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, (Object) null, (Object) null);
      multiKey2.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2984));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2984
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",piDObk&TO}m&w5?u";
      stringArray0[2] = "i>m!a'J(S";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = "6";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      int int0 = (-111);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-111));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -111
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
