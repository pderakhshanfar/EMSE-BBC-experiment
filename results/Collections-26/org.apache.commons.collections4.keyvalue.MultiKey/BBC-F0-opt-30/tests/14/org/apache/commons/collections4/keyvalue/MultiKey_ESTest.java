/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:24:54 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-151));
      Integer integer1 = new Integer(1881);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      boolean boolean1 = multiKey1.equals(multiKey1);
      multiKey1.size();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      boolean boolean2 = multiKey2.equals(multiKey3);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-151));
      Integer integer1 = new Integer(1881);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, object1, object1);
      Integer integer2 = new Integer(1);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Object object2 = new Object();
      Integer integer3 = new Integer(2814);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "", object2, integer3, integer2);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "N*ZC _9odZQ@[qs", "", (String) null);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integerArray0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(object2, multiKey4, multiKey5, multiKey1, integer1);
      multiKey0.hashCode();
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey8 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey7);
      MultiKey<Integer> multiKey9 = multiKey8.getKey(1);
      Integer integer4 = new Integer((-670));
      boolean boolean0 = multiKey9.equals("5;gV");
      assertFalse(boolean0);
      assertSame(multiKey1, multiKey9);
      
      multiKey5.getKeys();
      assertFalse(multiKey5.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-4102));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      String[] stringArray0 = new String[2];
      multiKey0.toString();
      multiKey0.toString();
      stringArray0[0] = "";
      stringArray0[1] = "";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      boolean boolean1 = multiKey2.equals(multiKey0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey0.getKey(0);
      objectArray0[2] = (Object) null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "%h)*$QT";
      stringArray0[2] = "Ey8c;j!G,c,K}";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "H", "H", "");
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(object0);
      multiKey0.hashCode();
      multiKey0.equals("MultiKey[java.lang.Object@65b106b2, java.lang.Object@65b106b2]");
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "[EgEkY8PgQU^eL'4Y");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[EgEkY8PgQU^eL'4Y";
      stringArray0[1] = "[EgEkY8PgQU^eL'4Y";
      stringArray0[2] = "MultiKey[java.lang.Object@65b106b2, java.lang.Object@65b106b2]";
      stringArray0[3] = "MultiKey[java.lang.Object@65b106b2, java.lang.Object@65b106b2]";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "[EgEkY8PgQU^eL'4Y";
      stringArray0[6] = "MultiKey[java.lang.Object@65b106b2, java.lang.Object@65b106b2]";
      stringArray0[7] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey2);
      multiKey3.hashCode();
      boolean boolean0 = multiKey2.equals("The array of keys must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1983);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[1983, 1983, 1983, 1983], MultiKey[1983, 1983, 1983, 1983], MultiKey[1983, 1983, 1983, 1983]]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("y0RA?lIW-Y", "y0RA?lIW-Y", "y0RA?lIW-Y", "org.apache.commons.collections4.keyvalue.MultiKey");
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey0.hashCode();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2089);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1030;
      Integer integer0 = new Integer(1030);
      MultiKey<String> multiKey0 = new MultiKey<String>("%TbI mLI|j%U1yLPU<\"", "%TbI mLI|j%U1yLPU<\"", "%TbI mLI|j%U1yLPU<\"", (String) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1030);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1030
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-2486));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer2, integer0, integer1, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }
}
