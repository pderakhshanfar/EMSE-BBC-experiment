/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:38 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      Integer integer0 = new Integer(400);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, (Object) null, integer0, (Object) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null, null]", string0);
      
      Object object0 = multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("(5XE>5+>#4'`l", "(5XE>5+>#4'`l", "(5XE>5+>#4'`l", "(5XE>5+>#4'`l", "(5XE>5+>#4'`l");
      MultiKey<String> multiKey1 = new MultiKey<String>("NhbP=?=d~B", "", "(5XE>5+>#4'`l", "(5XE>5+>#4'`l", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey0, multiKey0, multiKey1, (Object) null);
      multiKey2.getKey(4);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, MultiKey[(5XE>5+>#4'`l, (5XE>5+>#4'`l, (5XE>5+>#4'`l, (5XE>5+>#4'`l, (5XE>5+>#4'`l], MultiKey[(5XE>5+>#4'`l, (5XE>5+>#4'`l, (5XE>5+>#4'`l, (5XE>5+>#4'`l, (5XE>5+>#4'`l], MultiKey[NhbP=?=d~B, , (5XE>5+>#4'`l, (5XE>5+>#4'`l, ], null]", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(1091);
      Integer integer1 = new Integer((-1350));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.getKey(0);
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey1.getKey(0);
      multiKey1.equals("Sen\"%&");
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals("MultiKey[, ]");
      multiKey1.toString();
      Integer integer0 = new Integer((-520));
      Integer integer1 = new Integer((-319));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey2.toString();
      int int0 = multiKey0.size();
      multiKey0.equals("MultiKey[java.lang.Object@16b10142, java.lang.Object@16b10142]");
      multiKey1.hashCode();
      multiKey0.getKeys();
      int int1 = multiKey1.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey1, multiKey1);
      multiKey0.equals(multiKey2);
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.toString();
      multiKey3.getKey(0);
      multiKey3.equals((Object) null);
      multiKey1.size();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey3.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "MultiKey[]", "", "");
      multiKeyArray0[0] = multiKey4;
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey3;
      multiKeyArray0[4] = multiKey3;
      multiKeyArray0[5] = multiKey3;
      multiKeyArray0[6] = multiKey3;
      multiKeyArray0[7] = multiKey3;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey5.getKey(653);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 653
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("Pm Yb#RUE)Z|", "", "t|F@}}7Y!m:_", "s(d");
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = (-3885);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-3885));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3885
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer((-954));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[null, -954]";
      stringArray0[1] = "MultiKey[null, -954]";
      stringArray0[2] = "MultiKey[null, -954]";
      stringArray0[3] = "MultiKey[null, -954]";
      stringArray0[4] = "MultiKey[null, -954]";
      stringArray0[5] = "MultiKey[null, -954]";
      stringArray0[6] = "MultiKey[null, -954]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      multiKey2.equals(object0);
      Integer integer1 = new Integer((-954));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer0);
      multiKey3.toString();
      multiKey0.toString();
      multiKey3.equals("MultiKey[null, -954]");
      multiKey0.size();
      multiKey0.hashCode();
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey0.equals("MultiKey[null, -954]");
      multiKey3.hashCode();
      // Undeclared exception!
      try { 
        multiKey3.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = true;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
