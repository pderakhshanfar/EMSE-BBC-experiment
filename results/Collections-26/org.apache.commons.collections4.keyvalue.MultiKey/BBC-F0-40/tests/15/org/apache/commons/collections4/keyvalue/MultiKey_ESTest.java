/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:51:59 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("1CnZ>l$5'@o{P", "1CnZ>l$5'@o{P", "1CnZ>l$5'@o{P", "1CnZ>l$5'@o{P");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P], MultiKey[1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P], MultiKey[1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P], MultiKey[1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P], MultiKey[1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P, 1CnZ>l$5'@o{P]]", string0);
      
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-981));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.equals((Object) null);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      int int0 = (-122);
      Integer integer0 = new Integer((-122));
      int int1 = (-3801);
      Integer integer1 = new Integer((-3801));
      int int2 = 1963;
      Integer integer2 = new Integer(1963);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, integer1, integer2);
      int int3 = 1;
      multiKey0.getKey(1);
      int int4 = 0;
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer3, integer1);
      int int5 = 528;
      // Undeclared exception!
      try { 
        multiKey1.getKey(528);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 528
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"vRNZH/", "^ojGIw+", ",ppaH>Q", "^ojGIw+");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      Integer integer0 = new Integer((-5759));
      Integer integer1 = new Integer((-5759));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals("\"vRNZH/");
      multiKey1.equals(multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("^ojGIw+", "");
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "4K<{E7:oZW{BU";
      stringArray0[1] = "";
      stringArray0[2] = "cJ<>7";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.getKey(0);
      multiKey3.toString();
      int int1 = 947;
      // Undeclared exception!
      try { 
        multiKey1.getKey(947);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 947
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(446);
      Integer integer1 = new Integer(47);
      Integer integer2 = new Integer(47);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, (Object) null, integer2);
      multiKey0.size();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "`,VY]>4WZU";
      stringArray0[1] = ";JG;9e>;CRa)I$=";
      stringArray0[2] = ",J0jE(gK,h?'c";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer4, integer3, integer4);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, 0, 0]", string0);
      
      multiKey1.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      boolean boolean0 = multiKey3.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer(1434);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", integer0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(1);
      objectArray0[0] = (Object) multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(503);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(503);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 503
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
