/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:54:12 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      Object[] objectArray0 = multiKey1.getKeys();
      assertNotSame(stringArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[null, MultiKey[1, 1, 1]]", "MultiKey[null, MultiKey[1, 1, 1]]", "MultiKey[null, MultiKey[1, 1, 1]]", "MultiKey[null, MultiKey[1, 1, 1]]", "MultiKey[null, MultiKey[1, 1, 1]]");
      multiKey2.getKey(1);
      boolean boolean0 = multiKey1.equals("MultiKey[null, MultiKey[1, 1, 1]]");
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Integer> multiKey4 = multiKey3.getKey(1);
      multiKey2.toString();
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(420);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer3, (Integer) null, integer0);
      Object object0 = new Object();
      Integer integer4 = new Integer(1712);
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey[null, MultiKey[1, 1, 1]]", "gXF,`/3", "MultiKey[null, MultiKey[1, 1, 1]]", "MultiKey[1, 1, 1]");
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[null, MultiKey[1, 1, 1]], gXF,`/3, MultiKey[null, MultiKey[1, 1, 1]], MultiKey[1, 1, 1]]", string0);
      
      boolean boolean1 = multiKey4.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object object0 = multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>(".b(5QT3`U`$t", ".b(5QT3`U`$t", (String) null, "", "}M");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer0, ".b(5QT3`U`$t");
      multiKey2.getKey(0);
      Integer integer1 = new Integer(0);
      Object[] objectArray1 = null;
      boolean boolean0 = true;
      MultiKey<Object> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.hashCode();
      multiKey2.hashCode();
      multiKey2.size();
      multiKey0.getKeys();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[]", string0);
      
      int int0 = multiKey3.size();
      multiKey3.equals("");
      Integer integer0 = new Integer(0);
      boolean boolean1 = multiKey4.equals(integer0);
      assertFalse(boolean1);
      
      int int1 = multiKey3.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "YR";
      stringArray0[2] = "";
      stringArray0[3] = "k1zm7Cd#T=3o'Vpe";
      stringArray0[4] = "_&$fvCNu";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, "_&$fvCNu");
      multiKey1.toString();
      multiKey0.size();
      multiKey1.toString();
      multiKey1.hashCode();
      boolean boolean0 = multiKey1.equals("YR");
      assertFalse(boolean0);
      
      multiKey0.hashCode();
      multiKey1.size();
      multiKey1.toString();
      multiKey0.getKey(0);
      String string0 = multiKey0.getKey(0);
      assertEquals("", string0);
      
      multiKey1.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "The array of keys must not be null", "k1zm7Cd#T=3o'Vpe", "+.YF;tlkZ");
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      String string1 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, YR, , k1zm7Cd#T=3o'Vpe, _&$fvCNu], MultiKey[, YR, , k1zm7Cd#T=3o'Vpe, _&$fvCNu], MultiKey[, The array of keys must not be null, k1zm7Cd#T=3o'Vpe, +.YF;tlkZ]]", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = "B'b,\\]&hC%2r";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 4;
      multiKey0.getKey(4);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("#RZf", (Object) null, "#RZf", "B'b,]&hC%2r", (Object) null);
      int int1 = 572;
      // Undeclared exception!
      try { 
        multiKey1.getKey(572);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 572
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("St#?R-HTS", "", "St#?R-HTS", "?w", "The array of keys must not be null");
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "St#?R-HTS";
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, multiKey0, "The array of keys must not be null");
      Object object2 = multiKey1.getKey(0);
      objectArray0[2] = object2;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      Object object3 = multiKey2.getKey(0);
      assertFalse(object3.equals((Object)object2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "vM)myr~CLy|J_<,$M'A";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("vM)myr~CLy|J_<,$M'A", "vM)myr~CLy|J_<,$M'A");
      MultiKey<Object> multiKey1 = null;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, (MultiKey<Object>) null, (MultiKey<Object>) null);
      int int0 = (-2379);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2379));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2379
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-2213));
      Integer integer1 = new Integer((-1440));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, (Integer) null);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      assertEquals(2, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "");
      multiKey0.toString();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("I%fAQ(~", "I%fAQ(~");
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2212));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1502);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.equals(multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[, ]", "K;Ap]XX%y+CB<", "", "K;Ap]XX%y+CB<", "C5KZft9wD9C]5p*HX");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}?up~";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("}?up~");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[}?up~, ]", string0);
      
      multiKey0.hashCode();
      boolean boolean0 = multiKey0.equals("}?up~");
      assertFalse(boolean0);
  }
}
