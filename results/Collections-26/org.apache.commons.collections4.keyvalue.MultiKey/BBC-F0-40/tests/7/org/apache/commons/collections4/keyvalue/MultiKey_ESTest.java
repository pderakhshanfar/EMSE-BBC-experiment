/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:43:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("cd(wTdyF#fdRn", "cd(wTdyF#fdRn", "cd(wTdyF#fdRn", "cd(wTdyF#fdRn", "cd(wTdyF#fdRn");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "cd(wTdyF#fdRn";
      objectArray0[2] = (Object) "cd(wTdyF#fdRn";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "cd(wTdyF#fdRn";
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.size();
      Integer integer0 = new Integer((-1883));
      boolean boolean0 = multiKey0.equals(objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      int int0 = multiKey0.size();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "@x", (String) null, "", "");
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals("");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[]", "", (Object) null);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey4.toString();
      multiKey3.getKeys();
      multiKey4.toString();
      multiKey0.hashCode();
      multiKey4.toString();
      multiKey2.toString();
      int int1 = multiKey4.hashCode();
      assertTrue(int1 == int0);
      
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, @x, null, , ]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-477));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.hashCode();
      multiKey1.size();
      multiKey0.size();
      multiKey1.getKey(int0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      int int0 = multiKey0.size();
      multiKey0.equals("MultiKey[0, 0, 0]");
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[0, 0, 0]", "MultiKey[0, 0, 0]", (String) null, "");
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals("MultiKey[0, 0, 0]");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0, object1);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.toString();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.hashCode();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, MultiKey[0, 0, 0], MultiKey[0, 0, 0], null, ]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.equals(int0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[0, 0, 0]", "MultiKey[0, 0, 0]");
      int int1 = multiKey2.size();
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-4486));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7,54D.%&";
      stringArray0[1] = "";
      stringArray0[2] = "0Q ]4pP|.e[T";
      stringArray0[3] = ",ESGO)";
      stringArray0[4] = "";
      stringArray0[5] = "'rAm$XtEt`abbM%c";
      stringArray0[6] = "^$gC9hV3Gj";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey1.equals(multiKey2);
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1424));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1424
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-1474);
      Integer integer0 = new Integer((-1474));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integerArray0[0]);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-4259));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4259
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "", "j-w^imCS^D,I%PY1Iwx", "EWd]w}'}");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null, "");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "";
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) "";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2612
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
