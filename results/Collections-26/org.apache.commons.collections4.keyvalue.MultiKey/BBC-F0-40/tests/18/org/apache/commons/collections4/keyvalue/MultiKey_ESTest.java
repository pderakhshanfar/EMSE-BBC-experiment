/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commns.collections4.keyvale.MultiKey";
      stringArray0[1] = "org.apache.commns.collections4.keyvale.MultiKey";
      stringArray0[2] = "org.apache.commns.collections4.keyvale.MultiKey";
      stringArray0[3] = "MsO&Fn";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commns.collections4.keyvale.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.size();
      multiKey0.equals(multiKey2);
      multiKey1.size();
      multiKey2.getKeys();
      multiKey0.size();
      multiKey1.getKeys();
      multiKey1.size();
      Object object0 = new Object();
      multiKey1.equals(object0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "x$~A4sxq]OAAn\"g5";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0[2], "", stringArray0[2], "");
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("The array of keys must not be null", object0, (Object) null);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer1, integer2, integer0);
      assertEquals(4, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MjpTI]7vG";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("p47lzLY9=OP_4h},", "p47lzLY9=OP_4h},");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "p47lzLY9=OP_4h},");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey2.equals(multiKey1);
      multiKey2.getKey(int0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2353);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 2353]", string0);
      
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(2353);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer3, integer4, integerArray0[1]);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, multiKey1, integer3, "MultiKey[0, 2353]");
      multiKeyArray0[1] = multiKey3;
      Integer integer5 = new Integer(2353);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer4, integer5, multiKey1, multiKey1, "MultiKey[0, 2353]");
      multiKeyArray0[2] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integerArray0);
      multiKeyArray0[3] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      Object object0 = multiKey6.getKey(0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(object0, "MultiKey[0, 2353]");
      int int1 = multiKey7.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      Object object0 = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, multiKey0);
      multiKeyArray0[1] = multiKey1;
      String string0 = "?eI;AKA\\kf9y<f\"3P";
      String string1 = "";
      MultiKey<String> multiKey2 = new MultiKey<String>("?eI;AKAkf9y<f\"3P", "?eI;AKAkf9y<f\"3P", "?eI;AKAkf9y<f\"3P", "");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      int int1 = 358;
      Integer integer1 = new Integer(358);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, integer0);
      int int2 = 1255;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1255
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-193));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKey0.toString();
      Integer integer4 = new Integer((-855));
      multiKey0.equals(integer4);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
      multiKey1.equals(integer4);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "", "MultiKey[-1, -1, -1, -193, 0]", "");
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey2.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-855));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -855
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-4109);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-4109));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4109
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1277));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1277));
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer4 = multiKey0.getKey(3);
      assertEquals((-1277), (int)integer4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "DbW'9-C+)(uBT$2Y_]";
      stringArray0[2] = "";
      stringArray0[3] = "V_+";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }
}
