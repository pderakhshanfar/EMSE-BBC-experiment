/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:53:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      Integer integer2 = new Integer(5343);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer2, object0, multiKey1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey3.hashCode();
      multiKey0.size();
      multiKey0.size();
      multiKey3.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[], MultiKey[]]", string0);
      
      multiKey4.size();
      multiKey3.toString();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "YveZ");
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      Object object0 = multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
      
      multiKey0.size();
      Integer integer2 = multiKey1.getKey(2);
      Integer integer3 = new Integer(2);
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "", "", "", (String) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer3, multiKey2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YveZ";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      multiKey4.getKey(2);
      Integer integer4 = new Integer(2);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer2, integer0, integer4, integer2);
      Object object1 = multiKey5.getKey(2);
      assertEquals(2, object1);
      
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer1, multiKey3, (Object) null, object1, object0);
      multiKey6.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1950));
      MultiKey<String> multiKey0 = new MultiKey<String>("2/", "2/", "e#u( R!*");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer((-1950));
      Integer integer3 = new Integer(1736);
      Integer integer4 = new Integer(2);
      Integer integer5 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer5, integer0, integer1, integer4, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer6 = new Integer((-1950));
      multiKey1.equals(integer6);
      Integer integer7 = new Integer((-2467));
      Integer integer8 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer8, integer0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey3.getKeys();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray1, true);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey5, multiKey5);
      // Undeclared exception!
      try { 
        multiKey6.getKey(2024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2024
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(1720);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, integer0);
      multiKey0.toString();
      multiKey1.size();
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "(", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey3, multiKey3);
      multiKey4.getKeys();
      Integer integer3 = new Integer(1);
      String string0 = "";
      MultiKey<String> multiKey5 = new MultiKey<String>("5[9_,\"QwK9", "^iDY?SgXhcvfWup", "", "");
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKey5, multiKey0, multiKey5);
      multiKey6.getKey(1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey7.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer1 = new Integer(5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer0);
      Integer integer2 = new Integer(2326);
      multiKey1.toString();
      multiKey1.equals(integer2);
      String[] stringArray0 = new String[1];
      multiKey1.toString();
      stringArray0[0] = "MultiKey[5]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.size();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey4.toString();
      // Undeclared exception!
      try { 
        multiKey4.getKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      Integer integer2 = new Integer(5343);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer2, object0, multiKey1);
      String string0 = multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey3.hashCode();
      multiKey0.size();
      multiKey0.size();
      multiKey3.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey4.size();
      String string1 = multiKey3.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Cs n.MUxts", "Cs n.MUxts");
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, "Cs n.MUxts");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[Cs n.MUxts, Cs n.MUxts], 5, Cs n.MUxts]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(3366);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3366
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = ",%LC -pbzKv";
      stringArray0[0] = ",%LC -pbzKv";
      String string1 = "U}^\\nr*mhYRW>AF";
      stringArray0[1] = "U}^\nr*mhYRW>AF";
      String string2 = "";
      stringArray0[2] = "";
      String string3 = "PTjO8.q(pet\"Ji>=`";
      stringArray0[3] = "PTjO8.q(pet\"Ji>=`";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "SoO/9JC";
      String string4 = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>("U}^\nr*mhYRW>AF", "Cb+?!,!", "", "", "2s1T'k@=#THjN511O");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-707));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -707
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
