/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:45:04 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", ";K)ex)J", "", "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = ";K)ex)J";
      stringArray0[3] = ";K)ex)J";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey0.equals(multiKey1);
      Object[] objectArray0 = multiKey1.getKeys();
      assertNotSame(stringArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "ajWam3b";
      MultiKey<String> multiKey0 = new MultiKey<String>("ajWam3b", "ajWam3b", "ajWam3b", "ajWam3b", "ajWam3b");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = multiKey0.getKey(1);
      assertNull(integer2);
      
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      multiKey1.hashCode();
      int int1 = multiKey1.hashCode();
      assertTrue(int1 == int0);
      
      multiKey1.size();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[1, null, 1]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "={e@s,";
      stringArray0[5] = "MultiKey[1, null, 1]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[1, null, 1], MultiKey[], MultiKey[], MultiKey[], ={e@s,, MultiKey[1, null, 1]]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "MultiKey", "MultiKey");
      Integer integer0 = new Integer((-2215));
      Integer integer1 = new Integer((-3118));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer0, integer1);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object0, "");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-2215, null, -2215, -3118]", string0);
      
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(314);
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer1, integer3);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey2.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", (String) null, (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      int int0 = 0;
      multiKey0.getKey(0);
      int int1 = (-2052);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2052));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2052
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", (Object) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", "");
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[null, , ], MultiKey[null, , ]]", string0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(14);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-180));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      Integer integer4 = multiKey3.getKey(0);
      assertEquals(0, (int)integer4);
      
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.getKeys();
      Integer integer0 = new Integer((-3967));
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey1, "Dp;Q)|]cr;(M_-Mv");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-3967, MultiKey[-3967, -3967, -3967, -3967, -3967, -3967, -3967], Dp;Q)|]cr;(M_-Mv]", string0);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "k", "");
      Integer integer0 = new Integer((-3138));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, multiKey0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, k, ], -3138, MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, k, ]], MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, k, ], -3138, MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, k, ]], MultiKey[], MultiKey[]]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("@:URCBx}JF7K", "E*K.Ry6+]i", "RH&{N1Vwj|Q?,L");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[@:URCBx}JF7K, E*K.Ry6+]i, RH&{N1Vwj|Q?,L]", string0);
      
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("E*K.Ry6+]i", "E*K.Ry6+]i", object0, "RH&{N1Vwj|Q?,L", object0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiKey2.equals(integer0);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey1.equals(multiKey2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String> multiKey0 = new MultiKey<String>("~i:1=8nQCV`2@?[M", "~i:1=8nQCV`2@?[M");
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "~i:1=8nQCV`2@?[M";
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer4 = multiKey1.getKey(int0);
      objectArray0[1] = (Object) integer4;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Integer integer5 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer5, multiKey1, multiKey1, multiKey1, multiKey0);
      MultiKey<String> multiKey3 = new MultiKey<String>("~i:1=8nQCV`2@?[M", "|+6n!\"eA2VGY/", "/Jj57m>,JH3aU");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(int0, multiKey2, int0, multiKey3);
      // Undeclared exception!
      try { 
        multiKey4.getKey(654);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 654
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      int int1 = (-20);
      Integer integer1 = new Integer((-20));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      int int2 = 1;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int2);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -20
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, 0]", "MultiKey[0, 0]");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1764
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
