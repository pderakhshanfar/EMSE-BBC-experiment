/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:50:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1269);
      Integer integer1 = new Integer(1269);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer1);
      multiKey0.equals(integer0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey1 = new MultiKey<String>("4pD|Q{c`)y", "The array of keys must not be null", "mkHG4LP)J;:FD0OdQh8", "%wu9~5t", (String) null);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("%wu9~5t", (String) null, "4pD|Q{c`)y");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("%wu9~5t", "mkHG4LP)J;:FD0OdQh8");
      multiKeyArray0[2] = multiKey3;
      multiKey1.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>((String) null, "mkHG4LP)J;:FD0OdQh8", "", "EiQ^90?F5");
      multiKeyArray0[3] = multiKey4;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "%wu9~5t";
      MultiKey<String> multiKey5 = new MultiKey<String>("%wu9~5t", "EiQ^90?F5", "", (String) null, "4pD|Q{c`)y");
      multiKey0.toString();
      multiKey4.equals(multiKey4);
      // Undeclared exception!
      try { 
        multiKey3.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("zuGo", "zuGo", "", "");
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "MultiKey";
      stringArray0[4] = "5Ib*-u";
      stringArray0[5] = "MultiKey";
      stringArray0[6] = "MultiKey";
      stringArray0[7] = "MultiKey";
      stringArray0[8] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", "MultiKey");
      multiKey1.toString();
      Integer integer0 = new Integer(1);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer(1);
      multiKey0.toString();
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[MultiKey, MultiKey, MultiKey, MultiKey, 5Ib*-u, MultiKey, MultiKey, MultiKey, MultiKey]", string0);
      
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      multiKey2.size();
      multiKey2.equals((Object) null);
      multiKey1.size();
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer2, (Integer) null);
      multiKey3.getKey(2);
      boolean boolean1 = multiKey0.equals((Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer((-527));
      Integer integer1 = new Integer((-3803));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("N p8P:][@}t_0", "N p8P:][@}t_0", "N p8P:][@}t_0");
      multiKey0.toString();
      multiKey1.size();
      multiKey0.size();
      Object[] objectArray0 = new Object[7];
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) "N p8P:][@}t_0";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey1;
      objectArray0[5] = (Object) "MultiKey[-527, -3803, -3803, -527]";
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey3.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey(2387);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2387
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("DtFlcW;vm,XY ,!", "DtFlcW;vm,XY ,!", "DtFlcW;vm,XY ,!", multiKey0);
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[5];
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(268);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals(multiKey1);
      multiKey1.getKeys();
      Object object0 = new Object();
      multiKey0.equals(object0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1429));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1429
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object1);
      MultiKey<String> multiKey2 = new MultiKey<String>(">6`sL{6P>p='M9'quaQ", (String) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey0.equals((Object) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("P~.w>V-@GZTm0", "79hs-:\"#?}Fy*m", "P~.w>V-@GZTm0", (String) null, "KCf5X%sCYTT+");
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "", "<VvB:-i66", "<VvB:-i66");
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("79hs-:\"#?}Fy*m", "KCf5X%sCYTT+", multiKey1, (Object) null);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[79hs-:\"#?}Fy*m, KCf5X%sCYTT+, MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, , , <VvB:-i66, <VvB:-i66], null]", string0);
      
      multiKey2.size();
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey1.equals("P~.w>V-@GZTm0");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer((-167));
      Integer integer1 = new Integer((-167));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String string0 = "";
      String string1 = "!vW0g*Q)e+'fE";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "!vW0g*Q)e+'fE", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1919));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1919
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer4);
      Object object0 = multiKey0.getKey(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer4, integer1, integer1);
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object1);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[1, 0], MultiKey[1, 0], MultiKey[1, 0], MultiKey[1, 0]]", string0);
      
      multiKey1.toString();
      multiKey3.getKeys();
      boolean boolean0 = multiKey2.equals("ZNL^?lOHq.~|.zL");
      assertFalse(boolean0);
      
      multiKey3.hashCode();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[0, 0, 0]";
      stringArray0[1] = "MultiKey[1, 0]";
      stringArray0[2] = "MultiKey[MultiKey[1, 0], MultiKey[1, 0], MultiKey[1, 0], MultiKey[1, 0]]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      String string1 = multiKey4.getKey(1);
      assertEquals("MultiKey[1, 0]", string1);
  }
}
