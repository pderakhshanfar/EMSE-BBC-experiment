/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:51:21 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", (String) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey1.getKeys();
      multiKey0.equals(multiKey0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(24);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(24);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(24);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.equals((Object) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(208);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null);
      multiKey1.getKey(1);
      Integer integer1 = new Integer(208);
      Object object0 = new Object();
      Integer integer2 = new Integer(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, integer0, integer1, object0, integer2);
      assertEquals(5, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "&[ZC5`X&", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.size();
      int int0 = 416;
      // Undeclared exception!
      try { 
        multiKey1.getKey(416);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 416
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "");
      Integer[] integerArray0 = new Integer[1];
      multiKey0.toString();
      int int0 = 271;
      Integer integer0 = new Integer(271);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.equals(integerArray0[0]);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.toString();
      multiKey1.size();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey0.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKey2.toString();
      Integer integer1 = new Integer(2843);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, integer1, multiKey2);
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey5.getKeys();
      multiKey0.size();
      multiKey4.equals(multiKey5);
      // Undeclared exception!
      try { 
        multiKey2.getKey(271);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 271
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(509);
      Integer integer1 = new Integer(509);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "", "DN>`E,toDhL2Z/_tJ~", "wHE~ajzJl?Eh");
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.equals("wHE~ajzJl?Eh");
      // Undeclared exception!
      try { 
        multiKey0.getKey(509);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 509
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKeys();
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      //  // Unstable assertion: assertEquals("MultiKey[0, 0]", string0);
      
      int int1 = multiKey0.size();
      int int2 = multiKey2.hashCode();
      //  // Unstable assertion: assertTrue(int2 == int1);
      
      multiKey1.hashCode();
      int int3 = multiKey0.hashCode();
      //  // Unstable assertion: assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "~(|";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      assertEquals(2, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null", "br6NQ}T");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "");
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(157);
      Integer integer1 = new Integer((-428));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer2 = new Integer(3);
      multiKey0.toString();
      Integer integer3 = new Integer((-764));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer3);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer1, object1, multiKey1, multiKey0);
      multiKey2.size();
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey3.size();
      // Undeclared exception!
      try { 
        multiKey3.getKey(157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 157
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
