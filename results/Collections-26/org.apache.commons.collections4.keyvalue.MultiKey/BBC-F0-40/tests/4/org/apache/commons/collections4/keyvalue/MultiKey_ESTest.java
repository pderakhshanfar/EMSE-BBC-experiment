/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:52 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("%q_ULH>(l", "%q_ULH>(l", "Qhe array of keys must not be null", "Qhe array of keys must not be null", "Qhe array of keys must not be null");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("alu:Cu[qFhADv]M", (String) null, (String) null, (String) null);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer((-3385));
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-2126));
      Integer integer3 = new Integer(1699);
      Integer integer4 = new Integer((-3385));
      Integer integer5 = new Integer(1663);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.getKeys();
      Integer integer6 = new Integer((-1));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer6, integer6);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, multiKey2, object1);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4, multiKey4, multiKey4, multiKey4);
      // Undeclared exception!
      try { 
        multiKey5.getKey(2277);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2277
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1115);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("^]>k]/vE;meXs(PHt", integer0);
      Integer integer1 = new Integer(1115);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      Integer integer2 = new Integer(5);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer1, integer2);
      Integer integer3 = new Integer(1115);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, integer0, integer1, multiKey1, integer3);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey0, multiKey0);
      Object object0 = multiKey4.getKey(2);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "V;";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "V;");
      multiKey1.equals("");
      multiKey0.getKeys();
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(3258);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, V;]", string0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", integer0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, "", (Object) null, object0, multiKey3);
      multiKeyArray0[2] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey5.toString();
      Object object1 = new Object();
      boolean boolean0 = multiKey5.equals(object1);
      assertFalse(boolean0);
      
      multiKey3.hashCode();
      multiKey0.getKeys();
      multiKey1.hashCode();
      assertFalse(multiKey1.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "Dg7Rgp@\r/^|u{5w|");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey1.getKey(0);
      Integer integer0 = new Integer(2424);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer0, integer1);
      Integer integer2 = multiKey2.getKey(0);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-119));
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      Integer integer0 = new Integer(1850);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[, , , ]", "MultiKey[, , , ]", integer0, "MultiKey[, , , ]", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-485);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-485));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -485
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[0, 0, null, 0]", multiKey0, "MultiKey[null, null]");
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[0, 0, null, 0]", multiKey1, multiKey3);
      multiKey4.toString();
      multiKey3.toString();
      multiKey4.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey2.equals(multiKey4);
      multiKey3.size();
      multiKey0.toString();
      multiKey4.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[0, 0, null, 0]", "ykw_iBu39jF(Dd");
      // Undeclared exception!
      try { 
        multiKey5.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("9M]v<yB|~4VRD&p0bA", "9M]v<yB|~4VRD&p0bA", "9M]v<yB|~4VRD&p0bA");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1826));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1826
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 2046;
      // Undeclared exception!
      try { 
        multiKey0.getKey(2046);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2046
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1, object0, object1);
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3704));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1421));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-183));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1348));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3704));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3704
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
