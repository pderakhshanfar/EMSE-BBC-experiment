/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:44:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("jd\"", "", (String) null);
      multiKey0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[jd\", , null]";
      multiKey0.toString();
      stringArray0[2] = "MultiKey[jd\", , null]";
      stringArray0[0] = null;
      stringArray0[4] = null;
      multiKey0.equals(multiKey0);
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey1.getKeys();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null);
      Integer integer0 = multiKey0.getKey(1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("WAdxG14", "WAdxG14", "WAdxG14", "WAdxG14", "WAdxG14");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("WAdxG14", multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, (MultiKey<Object>) null, multiKey2);
      multiKey0.toString();
      multiKey3.toString();
      MultiKey<Object> multiKey5 = multiKey4.getKey(0);
      multiKey5.toString();
      multiKey0.toString();
      multiKey2.size();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(3097);
      Integer integer3 = new Integer(6);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer1, integer1, integer3);
      int int0 = multiKey6.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-2148));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2148));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1322);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1322);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("jd\"", "", (String) null);
      multiKey0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[jd\", , null]";
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[jd\", , null]", string0);
      
      stringArray0[2] = "MultiKey[jd\", , null]";
      stringArray0[0] = null;
      stringArray0[4] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      multiKey1.size();
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("W&\"'`_AZ}<", "W&\"'`_AZ}<", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      Object object0 = multiKey1.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[W&\"'`_AZ}<, W&\"'`_AZ}<, , ]", multiKey0, object0, object1, multiKey0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "MultiKey[W&\"'`_AZ}<, W&\"'`_AZ}<, , ]", (Object) null, (Object) null);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKey2.toString();
      multiKey2.toString();
      Integer integer3 = multiKey0.getKey(int0);
      Integer integer4 = new Integer(int0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer4, integer0);
      multiKey3.equals("MultiKey[MultiKey[0, 0, 0], MultiKey[0, 0, 0], MultiKey[0, 0, 0]]");
      Integer[] integerArray1 = new Integer[9];
      integerArray1[0] = integer2;
      Integer integer5 = new Integer(int0);
      integerArray1[1] = integer5;
      integerArray1[2] = integer3;
      integerArray1[3] = integer4;
      integerArray1[4] = integer0;
      integerArray1[5] = integer0;
      integerArray1[6] = integer1;
      Integer integer6 = new Integer(int0);
      integerArray1[7] = integer6;
      integerArray1[8] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray1);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-2633));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2633
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object3 = multiKey0.getKey(2);
      Integer integer0 = new Integer(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object3, object0, integer0, object0);
      multiKey1.toString();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[1];
      multiKey1.toString();
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.getKeys();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "MultiKey[java.lang.Object@3d64eb59, java.lang.Object@794a22e9, 2, java.lang.Object@794a22e9]", "MultiKey");
      multiKey0.toString();
      multiKey3.size();
      multiKey3.toString();
      multiKey1.hashCode();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey1.equals(":dkeBh57a6S5v");
      multiKey2.getKey(0);
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2679));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2679
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer((-2));
      Integer integer1 = new Integer((-2));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      Integer integer2 = multiKey0.getKey(1);
      objectArray0[0] = (Object) integer2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      Object object1 = multiKey0.getKey(0);
      objectArray0[1] = object1;
      String string0 = multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("H-7", "", "MultiKey[java.lang.Object@167f84, java.lang.Object@167f84, java.lang.Object@167f84, java.lang.Object@167f84]");
      multiKey2.toString();
      String string1 = multiKey1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-641));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey");
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-641]", "MultiKey", "", "MultiKey");
      // Undeclared exception!
      try { 
        multiKey2.getKey(821);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 821
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "2'Qr/OC5r";
      stringArray0[6] = "The array of keys must not be null";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, , , , org.apache.commons.collections4.keyvalue.MultiKey, 2'Qr/OC5r, The array of keys must not be null, , ]", string0);
      
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[7];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3164));
      integerArray0[3] = integer3;
      int int1 = 3;
      Integer integer4 = new Integer(3);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2423));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey2.equals(int1);
      assertFalse(boolean0);
  }
}
