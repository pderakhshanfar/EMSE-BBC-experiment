/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae]", "MultiKey[java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae]", object1);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae]", "MultiKey[java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae]", "MultiKey[java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae]");
      Integer integer0 = new Integer(4);
      multiKey2.equals(multiKey2);
      Integer integer1 = new Integer(8);
      Integer integer2 = new Integer(8);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer2, integer1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) "MultiKey[MultiKey[java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae], MultiKey[java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae, java.lang.Object@6d7050ae], java.lang.Object@4e5d4e63]";
      Object object2 = new Object();
      objectArray0[2] = object2;
      // Undeclared exception!
      try { 
        multiKey1.getKey(1018);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1018
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("^>DA-uRJAP.g1FF", "^>DA-uRJAP.g1FF");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("^>DA-uRJAP.g1FF", "^>DA-uRJAP.g1FF");
      multiKey0.equals(multiKey1);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[^>DA-uRJAP.g1FF, ^>DA-uRJAP.g1FF]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "..,LrjOaZ@ LDsxu#)(", "..,LrjOaZ@ LDsxu#)(");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "..,LrjOaZ@ LDsxu#)(", "..,LrjOaZ@ LDsxu#)(", "", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "MultiKey", multiKey1);
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      multiKey4.toString();
      multiKey2.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey4.getKeys();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, true);
      boolean boolean0 = multiKey2.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2268));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(144);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[4]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2609);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer6, object0, integerArray0[4], integer4);
      multiKey1.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey2.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey1;
      Object object1 = new Object();
      Integer integer8 = new Integer((int) integerArray0[2]);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[-2268, java.lang.Object@3eb51896, -2268, -2268]", integer0, object1, object0, integer8);
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int1 = multiKey4.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1938);
      integerArray0[2] = integer2;
      int int1 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Object object0 = multiKey0.getKey(0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) int0;
      objectArray0[1] = (Object) int1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer0, multiKey1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Q?B";
      stringArray0[1] = "Gc";
      stringArray0[2] = "'t2\"v@$r.J1*/;,2It";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey1;
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[3] = multiKey4;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int2 = multiKey5.hashCode();
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = null;
      integerArray0[3] = null;
      integerArray0[4] = null;
      integerArray0[5] = null;
      integerArray0[6] = null;
      integerArray0[7] = null;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2435));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2435
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(4011);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, integer0, (Object) null);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      Integer integer1 = new Integer(4011);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer((-4069));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer0, integer2, integer1);
      multiKeyArray0[1] = multiKey2;
      Integer integer3 = new Integer((-4069));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, integer2, integer3);
      multiKeyArray0[2] = multiKey3;
      Integer integer4 = new Integer((-4069));
      Integer integer5 = new Integer((-4069));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, (Integer) null, integer4, (Integer) null, integer5);
      multiKeyArray0[3] = multiKey4;
      Integer integer6 = new Integer(4321);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer3, integer6, integer3, integer2, integer1);
      multiKeyArray0[4] = multiKey5;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[5] = multiKey6;
      Integer integer7 = new Integer((-4069));
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer7, integer1);
      multiKeyArray0[6] = multiKey7;
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[7] = multiKey8;
      MultiKey<MultiKey<Integer>> multiKey9 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      String string0 = multiKey9.toString();
      assertEquals("MultiKey[MultiKey[4011, 4011, 4011, 4011, 4011], MultiKey[4011, -4069, 4011, -4069, 4011], MultiKey[null, 4011, -4069, -4069], MultiKey[-4069, null, -4069, null, -4069], MultiKey[-4069, 4321, -4069, -4069, 4011], MultiKey[4011], MultiKey[-4069, 4011], MultiKey[4011]]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "R|4N");
      int int0 = multiKey1.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", (String) null);
      // Undeclared exception!
      try { 
        multiKey1.getKey(5339);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5339
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, null]", string0);
      
      Integer integer1 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1210;
      Integer integer0 = new Integer(1210);
      Integer integer1 = new Integer(1210);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      int int1 = 1136;
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1136);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1136
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0, object0, integer0);
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", (String) null, "");
      multiKey2.getKey(0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey3.size();
      assertEquals(9, int0);
  }
}
