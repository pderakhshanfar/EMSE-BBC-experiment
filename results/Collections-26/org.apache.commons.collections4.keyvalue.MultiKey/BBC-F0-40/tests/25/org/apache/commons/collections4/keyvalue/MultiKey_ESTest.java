/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:53:24 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[, , ], MultiKey[, , ], MultiKey[, , ], MultiKey[, , ], MultiKey[, , ], MultiKey[, , ], MultiKey[, , ]]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("V&R\"z(\"4p]", "V&R\"z(\"4p]", "", "=lc}", "=lc}");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "V&R\"z(\"4p]";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "V&R\"z(\"4p]";
      objectArray0[3] = (Object) "V&R\"z(\"4p]";
      objectArray0[4] = (Object) "V&R\"z(\"4p]";
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey1.equals(multiKey2);
      boolean boolean0 = multiKey2.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-1537));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", (String) null, "", "Ia40$u}8<?E+m 4wD7");
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DPsa;{1a)#";
      stringArray0[1] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[, null, , Ia40$u}8<?E+m 4wD7]", "MultiKey[, null, , Ia40$u}8<?E+m 4wD7]", "~X8r:!C", "The array of keys must not be null");
      multiKey3.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey1, multiKey3, multiKey3, multiKey1, multiKey2);
      Integer integer1 = new Integer((-1537));
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer1, (Object) null);
      multiKey5.getKey(1);
      multiKey0.toString();
      int int0 = multiKey0.size();
      multiKey0.equals(multiKey2);
      multiKey0.hashCode();
      multiKey5.size();
      multiKey1.hashCode();
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer(1);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer3, integer1, integer4, integer4);
      int int1 = multiKey6.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray1, true);
      multiKey1.size();
      multiKey0.toString();
      int int0 = 4;
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[null, null]", "", "MultiKey[null, null]", "");
      multiKey1.size();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.getKey(2);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Integer> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "`.");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "`.";
      stringArray0[2] = "`.";
      stringArray0[3] = "";
      stringArray0[4] = "";
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("`.", (Object) null);
      multiKey3.getKey(1);
      multiKey3.toString();
      int int0 = multiKey3.size();
      multiKey3.equals("");
      multiKey3.hashCode();
      multiKey3.size();
      multiKey0.hashCode();
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, (Integer) null);
      int int1 = multiKey4.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = false;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "", (String) null);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2052));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2287);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey2.equals("mWr");
      multiKey2.getKeys();
      int int1 = multiKey2.size();
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey0 = new MultiKey<String>("r", "", "d(I\"wYz^)\"`)`", "");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iIZzg]%W/&lt%~j`w";
      stringArray0[1] = "";
      stringArray0[2] = "d(I\"wYz^)\"`)`";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("r", "r");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "d(I\"wYz^)\"`)`", "r");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "r", "");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("d(I\"wYz^)\"`)`", "r", "", "", "iIZzg]%W/&lt%~j`w");
      multiKeyArray0[6] = multiKey6;
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      assertEquals(7, multiKey7.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "so+ipP}\"R", "");
      multiKey1.toString();
      multiKey1.getKeys();
      int int0 = 2937;
      // Undeclared exception!
      try { 
        multiKey1.getKey(2937);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2937
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
