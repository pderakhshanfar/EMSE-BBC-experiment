/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:42 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "");
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "gX\"Q5(5KA");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[, ], gX\"Q5(5KA]", string0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer1);
      boolean boolean0 = multiKey3.equals(integer2);
      multiKey1.hashCode();
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "MultiKey[MultiKey[, ], gX\"Q5(5KA]", "");
      MultiKey<String> multiKey5 = new MultiKey<String>("", "]/12X=7/~^ES:p");
      MultiKey<Object> multiKey6 = new MultiKey<Object>("MultiKey[MultiKey[, ], gX\"Q5(5KA]", multiKey1);
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey6, multiKey2);
      Object object0 = multiKey7.getKey(0);
      MultiKey<String> multiKey8 = new MultiKey<String>("", "QTibYaQ3", "");
      boolean boolean1 = multiKey2.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("*", "*");
      multiKey0.equals("*");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0]", "The array of keys must not be null", "MultiKey[0]", "MultiKey[0]");
      multiKey1.size();
      multiKey0.size();
      multiKey1.toString();
      multiKey1.equals(integer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "MultiKey[0]";
      multiKey0.toString();
      multiKey1.toString();
      objectArray0[1] = (Object) "The array of keys must not be null";
      multiKey1.toString();
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) int0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey0.equals(multiKey2);
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey1.toString();
      Object[] objectArray1 = multiKey2.getKeys();
      assertEquals(4, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-881));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.hashCode();
      String string0 = "";
      Integer integer1 = new Integer((-881));
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "", (String) null, "");
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, object1);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-530));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      multiKey0.toString();
      stringArray0[1] = "";
      stringArray0[2] = "R|-";
      stringArray0[3] = "fH+";
      multiKey0.toString();
      stringArray0[4] = "I5gvXZ5kMLn;Th~+";
      stringArray0[5] = ")32qn[tyD|(";
      stringArray0[6] = "r_Jw6_33mx:'0}}E";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      int int0 = 1;
      multiKey1.getKey(1);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "R|-");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals("r_Jw6_33mx:'0}}E");
      multiKey2.size();
      multiKey1.toString();
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey(728);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 728
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = " g,]k\"8q/w!{D}u";
      stringArray0[3] = "Y+Bt$}Z5";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = ",6";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer(0);
      String string0 = null;
      MultiKey<String> multiKey1 = new MultiKey<String>("n#JqGx*c{ Xd?:$4", "%lb'GA{[^])a)i)&HFi", "%lb'GA{[^])a)i)&HFi", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "@}aGln 94K>!%,t.9R";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "@}aGln 94K>!%,t.9R", "@}aGln 94K>!%,t.9R", "Tx<\"6q2", "");
      multiKey0.toString();
      Integer integer0 = new Integer(1601);
      Integer integer1 = new Integer(1601);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer1);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1601);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1601
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Integer[] integerArray0 = new Integer[2];
      int int0 = 3;
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Vma(";
      stringArray0[4] = "(|#t>`)epY_vgNv/";
      stringArray0[5] = "t{.(yTfP'K";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(6, multiKey0.size());
  }
}
