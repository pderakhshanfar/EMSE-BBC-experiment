/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "x>uIvTa#(D*");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("k@L,", (String) null, "5aZ-Z,;14k");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey1, multiKey0);
      multiKey2.equals(multiKey0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer0, integer3, integer3, integer2);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey3;
      Integer integer4 = new Integer(5);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer4, integer1, integer2);
      multiKey3.equals(multiKey3);
      multiKey3.toString();
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3, multiKey4, multiKey4);
      multiKey5.toString();
      multiKey5.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("C6kV>m2wcI@H7", "C6kV>m2wcI@H7", object0, "C6kV>m2wcI@H7");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey0.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-470));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-470));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1672));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1672));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2105);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey0.equals(multiKey1);
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer(355);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer6, integer7);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey2, multiKey2);
      multiKey3.toString();
      assertFalse(multiKey0.equals((Object)multiKey2));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C6kV>m2wcI@H7";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[C6kV>m2wcI@H7]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Object object1 = new Object();
      Integer integer1 = new Integer(0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0, (Object) null, (Object) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, multiKey0, integer1, (Object) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer1, (Object) null, multiKey1, multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      Integer integer2 = new Integer(0);
      boolean boolean0 = multiKey4.equals(integer2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "hH<LQ|Uw6k\"+n", "hH<LQ|Uw6k\"+n", ">>ar?kYW~&@3Xx8\"n");
      multiKey0.toString();
      Integer integer0 = new Integer(1386);
      multiKey0.equals(integer0);
      boolean boolean0 = true;
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "??%[# m";
      stringArray0[2] = "";
      stringArray0[3] = "g>dfC[n u?Z";
      stringArray0[4] = "4_H}pr\"xRVnd";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer1);
      multiKey2.hashCode();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("4_H}pr\"xRVnd", "g>dfC[n u?Z");
      int int0 = multiKey3.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "vMH6=ab~0@<X";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "vMH6=ab~0@<X", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "x>uIvTa#(D*");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("k@L,", (String) null, "5aZ-Z,;14k");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey1, multiKey0);
      multiKey2.equals(multiKey0);
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0);
      boolean boolean0 = multiKey3.equals(multiKey0);
      assertFalse(boolean0);
      
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3, multiKey3, multiKey3);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 0], MultiKey[0, 0, 0], MultiKey[0, 0, 0], MultiKey[0, 0, 0]]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1261;
      Integer integer0 = new Integer(1261);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "$$0-B+vaZ@C<c#4%";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "~B";
      stringArray0[8] = "r^J`/sV<";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("~B", "~B", (Object) null);
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1105));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-51));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(751);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-342));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey(250);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 250
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey1.toString();
      int int0 = (-109);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-109));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -109
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
