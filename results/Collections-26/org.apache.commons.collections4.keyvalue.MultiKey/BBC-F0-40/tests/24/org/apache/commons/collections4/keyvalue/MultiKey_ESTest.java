/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:40 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "W BZKW");
      Object object1 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, "W BZKW", multiKey0, "W BZKW");
      Object object2 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("W BZKW", object0, object2);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey1, multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.equals(multiKey0);
      Object object3 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, multiKey0, multiKey0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey2, multiKey1, integer1, integer1, "MultiKey");
      multiKey4.toString();
      multiKey2.equals(integer0);
      MultiKey<Integer> multiKey6 = null;
      try {
        multiKey6 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, integer1, integer2);
      multiKey0.toString();
      multiKey0.getKey(1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("W:Eq50bk7#*adi/pX", "W:Eq50bk7#*adi/pX", "W:Eq50bk7#*adi/pX");
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer2);
      multiKey2.toString();
      Object[] objectArray0 = multiKey2.getKeys();
      multiKey0.equals("");
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      multiKey2.equals(multiKey3);
      int int1 = multiKey1.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.hashCode();
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey1.getKeys();
      multiKey1.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1915));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1915
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2071);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, object0, multiKey0, object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, object0, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey1.size();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      multiKey3.equals("MultiKey[]");
      multiKey0.hashCode();
      multiKey0.getKeys();
      Integer integer2 = new Integer(0);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer2);
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "3";
      stringArray0[3] = "";
      String string0 = "y7>-hE>u5F,";
      stringArray0[4] = "y7>-hE>u5F,";
      stringArray0[5] = "k`<a56uH!mN#',";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-144));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1769);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      int int1 = multiKey0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("pF[g0mLV", "pF[g0mLV", "pF[g0mLV", "pF[g0mLV", "pF[g0mLV");
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      multiKey0.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[0, 0, 0, 0, -144, 0, 1769, -1, 0]", "MultiKey[0, 0, 0, 0, -144, 0, 1769, -1, 0]", integer1, integer3);
      int int2 = multiKey2.hashCode();
      //  // Unstable assertion: assertTrue(int2 == int0);
      
      String string0 = multiKey2.toString();
      //  // Unstable assertion: assertEquals("MultiKey[MultiKey[0, 0, 0, 0, -144, 0, 1769, -1, 0], MultiKey[0, 0, 0, 0, -144, 0, 1769, -1, 0], 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object1 = new Object();
      multiKey1.equals(object1);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      String string0 = multiKey0.toString();
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      multiKey2.getKeys();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[java.lang.Object@b9b461b, java.lang.Object@6d15d256]";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[java.lang.Object@b9b461b, java.lang.Object@6d15d256]";
      stringArray0[3] = "MultiKey[java.lang.Object@b9b461b, java.lang.Object@6d15d256]";
      stringArray0[4] = "MultiKey[java.lang.Object@b9b461b, java.lang.Object@6d15d256]";
      stringArray0[5] = "MultiKey[java.lang.Object@b9b461b, java.lang.Object@6d15d256]";
      stringArray0[6] = "MultiKey[java.lang.Object@b9b461b, java.lang.Object@6d15d256]";
      stringArray0[7] = "MultiKey[java.lang.Object@b9b461b, java.lang.Object@6d15d256]";
      stringArray0[8] = "tQRS@'RX.+";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.hashCode();
      multiKey3.hashCode();
      String string1 = multiKey1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "0M.!(5tcnR~";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", (String) null, "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "X[t}Ih`-i#em", "0M.!(5tcnR~", "0M.!(5tcnR~");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>((String) null, "", (String) null, "");
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[7] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>(stringArray0);
      multiKeyArray0[8] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      assertEquals(9, multiKey9.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "WBZKW");
      Object object1 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, (Object) null, multiKey0, (Object) null);
      Object object2 = multiKey1.getKey(0);
      assertNotNull(object2);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>("WBZKW", object0, object2);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey1, multiKey0, multiKey0);
      multiKey0.equals((Object) null);
      Object object3 = new Object();
      boolean boolean0 = multiKey2.equals(object3);
      assertFalse(boolean0);
  }
}
