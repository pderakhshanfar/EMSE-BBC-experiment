/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:53 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-1001));
      Integer integer1 = new Integer((-1001));
      Integer integer2 = new Integer((-1001));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer0);
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      Object[] objectArray2 = multiKey1.getKeys();
      assertFalse(objectArray2.equals((Object)objectArray1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.size();
      multiKey0.equals(multiKey0);
      Integer integer0 = new Integer(1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      assertEquals(2, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-634));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray1);
      multiKey1.size();
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.getKey(int0);
      multiKey1.getKey(0);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.size();
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1, multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[0, 1, 0, 0, 0], MultiKey[0, 1, 0, 0, 0]]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = null;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-704));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-704));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -704
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "*^v+M");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "*^v+M";
      multiKey1.toString();
      multiKey1.toString();
      objectArray0[3] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      Object object0 = multiKey2.getKey(0);
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey0, multiKey1, object0, (Object) null);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[null, MultiKey[null, null], MultiKey[null, *^v+M], MultiKey[null, *^v+M], null]", string0);
      
      multiKey3.hashCode();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      boolean boolean0 = multiKey5.equals(objectArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("?dV]@sp", " =v7AmD", "^E~PtZ'~# 7Q1IiY", (String) null, "C,_%()V");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey1.toString();
      multiKey0.equals((Object) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[?dV]@sp,  =v7AmD, ^E~PtZ'~# 7Q1IiY, null, C,_%()V]", "MultiKey[null, 0]", "^E~PtZ'~# 7Q1IiY", "C,_%()V", (Object) null);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(87);
      Integer integer1 = new Integer(87);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.equals(integer0);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(4134);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1070);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1));
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(8, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "3qdPi(7)kz[hP";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("3qdPi(7)kz[hP", "3qdPi(7)kz[hP", "3qdPi(7)kz[hP", "3qdPi(7)kz[hP", "3qdPi(7)kz[hP");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 408;
      // Undeclared exception!
      try { 
        multiKey0.getKey(408);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 408
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
