/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:39:56 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      multiKey0.toString();
      multiKey0.equals(multiKey0);
      Integer integer0 = new Integer(19);
      Integer integer1 = new Integer(19);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      Integer integer2 = multiKey1.getKey(0);
      assertTrue(integer2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object1, object1, object1);
      Integer[] integerArray0 = new Integer[4];
      int int0 = 25;
      Integer integer0 = new Integer(25);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[25, -1, 25, 1]", string0);
      
      multiKey1.equals(multiKey2);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0, integer1);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = null;
      Integer integer2 = new Integer((-1829));
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      Object object0 = new Object();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey3.getKey(0);
      boolean boolean0 = multiKey2.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      Integer integer0 = new Integer((-887));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      Integer integer1 = new Integer((-887));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1);
      multiKeyArray0[1] = multiKey1;
      Integer integer2 = new Integer((-887));
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((-887));
      Integer integer5 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer5, integer3, (Integer) null);
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer(86);
      Integer integer8 = new Integer(8);
      Integer integer9 = new Integer(396);
      Integer integer10 = new Integer(0);
      Integer integer11 = new Integer((-675));
      String string0 = multiKey0.toString();
      assertTrue(multiKey0.equals((Object)multiKey1));
      assertEquals("MultiKey[-887, -887]", string0);
      
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer8, integer9, integer10, integer6, integer11);
      Integer[] integerArray0 = new Integer[15];
      integerArray0[0] = integer5;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      Object object0 = new Object();
      boolean boolean0 = multiKey5.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey0.size();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|'h|)qtB!-_e4";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "aabi!8j";
      stringArray0[4] = "";
      stringArray0[5] = "1Z:E/Lu4!xgUy";
      stringArray0[6] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int1 = multiKey1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "c5";
      stringArray0[1] = "";
      stringArray0[2] = "CcDSe.|s{' JQAxo3";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "6Ex]'pea";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(6, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L.!^9K(FK";
      stringArray0[1] = "";
      stringArray0[2] = "g=gD";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, multiKey0);
      multiKey1.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer((-1077));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1077));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-1077, -1, -1077]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[3];
      multiKey0.toString();
      objectArray0[0] = (Object) "MultiKey[, , , ]";
      objectArray0[1] = (Object) "MultiKey[, , , ]";
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-264);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-264));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -264
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = ";FM@Y^UtWqc](v^P=_I";
      stringArray0[3] = "Gh80;~S";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey0.getKey(0);
      assertEquals("org.apache.commons.collections4.keyvalue.MultiKey", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer((-3515));
      Integer integer1 = new Integer(221);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(221);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 221
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("B:%O#e8Eo>P8m'N*c", "B:%O#e8Eo>P8m'N*c", "", "", "B:%O#e8Eo>P8m'N*c");
      Integer integer0 = new Integer((-1249));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      int int0 = multiKey1.size();
      int int1 = multiKey0.size();
      assertFalse(int1 == int0);
  }
}
