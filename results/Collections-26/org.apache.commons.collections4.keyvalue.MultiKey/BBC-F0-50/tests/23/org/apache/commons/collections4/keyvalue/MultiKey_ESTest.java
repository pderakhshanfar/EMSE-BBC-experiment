/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:40:57 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("hEUrQQ;{*", "hEUrQQ;{*", "hEUrQQ;{*", "hEUrQQ;{*");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("{)FqcC9M\"", "{)FqcC9M\"", "{)FqcC9M\"");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, "{)FqcC9M\"", object2, object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "{)FqcC9M\"");
      multiKey2.getKey(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object1, multiKey1, multiKey0, "{)FqcC9M\"");
      Object object3 = multiKey3.getKey(1);
      boolean boolean0 = multiKey1.equals(object3);
      assertTrue(boolean0);
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "3:RK)<mV-_bq:", (Object) null, (Object) null);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey1;
      Object object0 = new Object();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, object0, multiKey1, integer0);
      multiKeyArray0[2] = multiKey2;
      Integer integer1 = new Integer(3);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, multiKey2, (Object) null);
      multiKeyArray0[3] = multiKey3;
      Integer integer2 = new Integer(505);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer2, (Object) null, "3:RK)<mV-_bq:");
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey5.equals(multiKey1);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      Integer integer3 = new Integer(9);
      integerArray0[1] = integer3;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer1;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey6.getKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f";
      stringArray0[1] = "f";
      stringArray0[2] = "f";
      stringArray0[3] = "f";
      stringArray0[4] = "f";
      stringArray0[5] = "f";
      stringArray0[2] = "f";
      stringArray0[7] = "f";
      stringArray0[8] = "f";
      MultiKey<String> multiKey1 = new MultiKey<String>("f", "f", "f", "f", "f");
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.hashCode();
      multiKey1.equals("MultiKey[f, f, f, f, f]");
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1491));
      Integer integer1 = new Integer((-1491));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CUA{0KyDF>V*.wnV";
      stringArray0[1] = "CUA{0KyDF>V*.wnV";
      stringArray0[2] = "";
      stringArray0[3] = "SdOh'PzGb\"TOB";
      stringArray0[4] = "HEoAFH*<-\"QaO";
      stringArray0[5] = "1#";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = (-1832);
      Integer integer0 = new Integer((-1832));
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, integer0, object0, object2);
      String string0 = "3.@8(G6-9+";
      MultiKey<String> multiKey1 = new MultiKey<String>("3.@8(G6-9+", "3.@8(G6-9+", "3.@8(G6-9+");
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<String> multiKey0 = new MultiKey<String>("7BDj?&5", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, multiKey0);
      multiKey1.getKey(1);
      objectArray0[0] = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      String string1 = "y`J-8 DP;!U";
      String string2 = "&*#J,4RFl']nms1w";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "y`J-8 DP;!U", "&*#J,4RFl']nms1w");
      Integer[] integerArray0 = null;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "MultiKey");
      multiKey0.equals("MultiKey");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "MultiKey";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "MultiKey";
      objectArray0[3] = (Object) "MultiKey";
      objectArray0[4] = (Object) "MultiKey";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "MultiKey";
      objectArray0[7] = (Object) "MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.equals(multiKey1);
      multiKey1.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer(1334);
      Integer integer1 = new Integer(1334);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, integer1);
      multiKeyArray0[0] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, integer0);
      multiKeyArray0[1] = multiKey3;
      Integer integer2 = new Integer(1334);
      Integer integer3 = new Integer(1512);
      Integer integer4 = new Integer(1334);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, integer3, integer4, (Integer) null);
      multiKeyArray0[2] = multiKey4;
      Integer integer5 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer5, integer5);
      multiKeyArray0[3] = multiKey5;
      Integer integer6 = new Integer(0);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>((Integer) null, integer6);
      multiKeyArray0[4] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      int int0 = multiKey7.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "", (Object) null, "");
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1748));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey1.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey3.getKeys();
      assertEquals(7, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      Object object0 = multiKey3.getKey(0);
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, multiKey2, object1, integer0, object0);
      multiKeyArray0[2] = multiKey4;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "The array of keys must not be null";
      String string0 = "0m+`DI<MW";
      stringArray0[3] = "0m+`DI<MW";
      stringArray0[4] = "#";
      stringArray0[5] = "t!h)Ut7W_D9E-y";
      stringArray0[6] = "F[uS'f5|P";
      stringArray0[7] = "4NCp1CUV\"K7.";
      String string1 = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKey5, (MultiKey<String>) null, (MultiKey<String>) null);
      // Undeclared exception!
      try { 
        multiKey6.getKey((-1101));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1101
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1010));
      Integer integer1 = new Integer((-1010));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = new Integer((-1010));
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String string0 = "";
      MultiKey<String> multiKey2 = new MultiKey<String>("om8c$8p/o{a#D", "", "MultiKey[null, -1010]", "");
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1010));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1010
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      int int0 = multiKey0.size();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(474);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1655));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(5);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$9BbL3]?s\"1,4J~";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "eMg4?ipB8oaLOk[:@";
      stringArray0[3] = "3(>ZkF#ar&";
      stringArray0[4] = "Wj'F*y";
      stringArray0[5] = "y~0H} !cs_{+7";
      stringArray0[6] = "';)_]#K";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      assertEquals(7, multiKey0.size());
  }
}
