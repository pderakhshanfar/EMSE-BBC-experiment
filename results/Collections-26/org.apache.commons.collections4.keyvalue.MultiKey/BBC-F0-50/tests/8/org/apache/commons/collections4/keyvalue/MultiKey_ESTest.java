/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:22:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "Wj}w&g#hU_bs-l=l", "");
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("Gt`8=!/E#Z$i4aqXcu", "", "", "e", object1);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Object object2 = new Object();
      Integer integer2 = new Integer(3426);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      multiKey2.size();
      multiKey1.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("-7Xb\"wv7wCc~", object2, integer2, integer2, (Object) null);
      Object object3 = multiKey3.getKey(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object3, "", object3, multiKey3);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey4);
      Object object4 = multiKey5.getKey(1);
      boolean boolean0 = multiKey4.equals(object4);
      assertTrue(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, Wj}w&g#hU_bs-l=l, ]", string0);
      
      MultiKey<String> multiKey6 = new MultiKey<String>("[5T+{rni]$<A<rv_9J", "");
      assertFalse(multiKey6.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.hashCode();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.getKeys();
      multiKey1.getKeys();
      multiKey1.equals("MultiKey[MultiKey[], MultiKey[]]");
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[MultiKey[], MultiKey[]]";
      stringArray0[1] = "MultiKey[MultiKey[], MultiKey[]]";
      stringArray0[2] = "MultiKey[MultiKey[], MultiKey[]]";
      stringArray0[3] = "MultiKey[MultiKey[], MultiKey[]]";
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey3);
      multiKey0.toString();
      multiKey4.toString();
      multiKey4.getKeys();
      int int0 = multiKey0.size();
      multiKey0.hashCode();
      multiKey3.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey5.toString();
      multiKey3.equals(multiKey5);
      multiKey5.toString();
      boolean boolean0 = multiKey3.equals("MultiKey[MultiKey[MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]]], MultiKey[MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]]], MultiKey[MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]]], MultiKey[MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]], MultiKey[MultiKey[], MultiKey[]]]]");
      assertFalse(boolean0);
      
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey5.getKey(0);
      assertFalse(multiKey5.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, integer0);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      multiKey0.getKey(0);
      objectArray0[1] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      multiKey1.getKey(0);
      objectArray0[2] = (Object) null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = null;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray1, false);
      // Undeclared exception!
      try { 
        multiKey3.getKey(1188);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1188
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("yzWBLl", "yzWBLl", "", "yzWBLl");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[yzWBLl, yzWBLl, , yzWBLl]", "MultiKey[yzWBLl, yzWBLl, , yzWBLl]");
      multiKey1.getKey(0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.hashCode();
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(6216);
      int int0 = 1;
      Integer integer1 = new Integer(1);
      Integer integer2 = null;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, (Integer) null, (Integer) null);
      MultiKey<String>[] multiKeyArray0 = null;
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", (String) null);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, "", "", object0);
      multiKey2.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String> multiKey4 = multiKey3.getKey(4);
      assertSame(multiKey4, multiKey0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = null;
      String string0 = "-G$]+P:m_mb('i";
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "-G$]+P:m_mb('i");
      Object object1 = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, (Object) null, multiKey0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2202));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2202
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "2*b=h-Df_bhZ/WkI$s";
      String string1 = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("2*b=h-Df_bhZ/WkI$s", "2*b=h-Df_bhZ/WkI$s", "HRBmS?[9:%9JT", "HRBmS?[9:%9JT", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "The array of keys must not be null");
      assertEquals(4, multiKey0.size());
  }
}
