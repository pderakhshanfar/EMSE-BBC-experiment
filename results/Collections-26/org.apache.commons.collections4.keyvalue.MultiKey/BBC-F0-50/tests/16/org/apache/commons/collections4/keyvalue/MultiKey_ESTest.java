/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:23:11 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey0 = new MultiKey<String>("a+^?<D[2O", "a+^?<D[2O", "0", "0");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1, multiKey1);
      Object object3 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "Cp", object3, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[], Cp, MultiKey[], MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]]", string0);
      
      multiKey1.size();
      boolean boolean0 = multiKey3.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "!g23Nj+R";
      stringArray0[2] = "The array of keys must not be null";
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.getKey(5);
      Integer integer2 = new Integer(9);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1, (Object) null, integer2, object1);
      String string0 = multiKey1.toString();
      String string1 = multiKey1.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "a=(v;./)#j]-0cvq!:x";
      stringArray0[2] = "0fU}dVKj0W47";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, a=(v;./)#j]-0cvq!:x, 0fU}dVKj0W47]", string0);
      
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey1.equals(multiKey2);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("_g", "_g", "", "Wd16?HZ<kp[#_,u{<", "Wd16?HZ<kp[#_,u{<");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Wd16?HZ<kp[#_,u{<";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "Wd16?HZ<kp[#_,u{<";
      objectArray0[4] = (Object) "_g";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[_g, _g, , Wd16?HZ<kp[#_,u{<, Wd16?HZ<kp[#_,u{<]", string0);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey1.equals(objectArray0[1]);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("l.Q1j4_aRR[.j)K~A", "qXvBfS7", "qXvBfS7", "qXvBfS7", "l.Q1j4_aRR[.j)K~A");
      multiKey0.size();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("l.Q1j4_aRR[.j)K~A", "l.Q1j4_aRR[.j)K~A");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey2.equals("l.Q1j4_aRR[.j)K~A");
      assertFalse(boolean0);
      
      multiKey1.toString();
      multiKey1.getKey(0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[l.Q1j4_aRR[.j)K~A, qXvBfS7, qXvBfS7, qXvBfS7, l.Q1j4_aRR[.j)K~A]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      String string0 = "";
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.getKey(int0);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      Integer integer0 = new Integer((-737));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", integer0);
      multiKey0.toString();
      boolean boolean0 = true;
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", (String) null, "org.apache.commons.collections4.keyvalue.MultiKey", (String) null, (String) null);
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[3] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, object0, (Object) null);
      MultiKey multiKey4 = (MultiKey)multiKey3.getKey(1);
      assertEquals(5, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, multiKey0, multiKey1, multiKey2);
      multiKeyArray0[1] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, multiKey0, multiKey0, multiKey3, (Object) null);
      multiKeyArray0[2] = multiKey4;
      Integer integer0 = new Integer((-2324));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1, integer2);
      Object object0 = multiKey5.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(object0, object1);
      multiKeyArray0[3] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[4] = multiKey7;
      Integer integer3 = new Integer(0);
      Object object2 = new Object();
      MultiKey<Object> multiKey8 = new MultiKey<Object>(integer3, (Object) null, integer3, object2);
      // Undeclared exception!
      try { 
        multiKey8.getKey((-2324));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2324
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1108);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1108);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1108);
      integerArray0[2] = integer2;
      int int0 = (-1);
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(4482);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2714);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(766);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-3372));
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey0.size();
      assertEquals(1, int0);
  }
}
