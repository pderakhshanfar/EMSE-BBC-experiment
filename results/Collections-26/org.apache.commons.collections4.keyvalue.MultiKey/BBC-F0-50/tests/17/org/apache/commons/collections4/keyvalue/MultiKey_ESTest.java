/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:12 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("U2T?$~$F)~", "U2T?$~$F)~");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[U2T?$~$F)~, U2T?$~$F)~]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "GkMVS=I");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[0] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
      Integer integer0 = new Integer(1704);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(6);
      Integer integer3 = new Integer(3235);
      Integer integer4 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer3, integer4, integer1);
      multiKey2.toString();
      Integer integer5 = new Integer(1240);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, integer5);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, multiKey1, stringArray0[1]);
      multiKey4.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey3.equals(integer0);
      boolean boolean1 = multiKey3.equals("MultiKey[MultiKey[1704, 3235, 3, 3], 1240]");
      assertFalse(boolean1);
      
      MultiKey<String> multiKey5 = new MultiKey<String>("", "MultiKey[1704, 3235, 3, 3]", "", "");
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, multiKey5);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[1704, 3235, 3, 3], 1240]", string0);
      
      MultiKey<Object> multiKey7 = new MultiKey<Object>(stringArray0);
      boolean boolean2 = multiKey1.equals(multiKey7);
      assertFalse(multiKey7.equals((Object)multiKey4));
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey2 = new MultiKey<String>("z<E", "z<E");
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("z<E", "MultiKey[]", "MultiKey[]");
      multiKey3.hashCode();
      Integer integer0 = new Integer((-3));
      Integer integer1 = new Integer((-796));
      Integer integer2 = new Integer((-3));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey4.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", "MultiKey[z<E, z<E]");
      multiKey5.toString();
      multiKey5.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[-3, -796, -3, -3]", string0);
      
      boolean boolean0 = multiKey5.equals(integer1);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey5.equals(multiKey3);
      assertFalse(boolean1);
      
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object[]) stringArray0, false);
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object) null, multiKey6, multiKey1, "MultiKey[z<E, z<E]");
      int int0 = multiKey7.size();
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
      
      multiKey0.getKeys();
      multiKey6.size();
      assertFalse(multiKey6.equals((Object)multiKey7));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey2 = new MultiKey<String>("z<E", "z<E");
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("z<E", "n6O", "n6O");
      multiKey3.hashCode();
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer((-796));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey4.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", "MultiKey[z<E, z<E]");
      multiKey5.toString();
      multiKey5.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[6, -796, 0, 6]", string0);
      
      boolean boolean0 = multiKey5.equals(integer1);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey5.equals(multiKey3);
      assertFalse(boolean1);
      
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object[]) stringArray0, false);
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object) null, multiKey6, multiKey1, "n6O");
      int int0 = multiKey7.size();
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
      
      multiKey0.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", (Object) null, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null, (Object) null);
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("/(Ukj+J00kJ", "", "", ") DS#", ") DS#");
      multiKey2.size();
      Integer integer0 = new Integer((-995));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey3.getKey(0);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.getKey(0);
      multiKey1.equals("MultiKey[, , null, ]");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(976);
      Integer integer1 = new Integer(976);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.equals(integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "=Co#[D*A.8n");
      multiKey1.equals("=Co#[D*A.8n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "MultiKey[976, 976]";
      objectArray0[1] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.size();
      Object[] objectArray1 = multiKey2.getKeys();
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = null;
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.equals(multiKey1);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1120);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey3.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("cA~R.Irm6=re(l9X", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "cA~R.Irm6=re(l9X", multiKey0);
      multiKey1.getKeys();
      MultiKey multiKey2 = (MultiKey)multiKey1.getKey(0);
      assertEquals(2, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("ue@NjKop%S9|_+sX)|/", "ue@NjKop%S9|_+sX)|/", "ue@NjKop%S9|_+sX)|/");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", "ue@NjKop%S9|_+sX)|/");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -280
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-827));
      Integer integer1 = new Integer((-229));
      Integer integer2 = new Integer(4086);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer2, integer0);
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-827, -229, 4086]", "|uc", "MultiKey[-827, -229, 4086]", "");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[-827, -229, 4086], |uc, MultiKey[-827, -229, 4086], ]", string0);
      
      multiKey2.hashCode();
      multiKey1.hashCode();
      boolean boolean0 = multiKey1.equals("MultiKey[-827, -229, 4086]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1927);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1927);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1675));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(5499);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1624);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1675));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[6]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((int) integerArray0[7]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1675
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      Object object1 = multiKey0.getKey(1);
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      assertEquals(3, multiKey1.size());
  }
}
