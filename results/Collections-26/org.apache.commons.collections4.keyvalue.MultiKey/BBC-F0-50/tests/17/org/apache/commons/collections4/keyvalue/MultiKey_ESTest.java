/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:40:05 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Integer integer0 = new Integer((-1329));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, object2, integer0, object0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey1.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(562);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      multiKey0.getKey(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, integer0, multiKey0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Integer integer0 = new Integer(1);
      boolean boolean0 = multiKey0.equals(integer0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      Object object2 = multiKey1.getKey(1);
      boolean boolean1 = multiKey0.equals(object2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("vm~p3ytubxNpq", "vm~p3ytubxNpq");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.size();
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "The array of keys must not be null", "org.apache.commons.collections4.keyvalue.MultiKey", "The array of keys must not be null", "\"$Nd7a$_");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", object0, multiKey0, multiKey1);
      MultiKey<String> multiKey3 = new MultiKey<String>("|8!&SWN", "", "org.apache.commons.collections4.keyvalue.MultiKey", "|8!&SWN", "org.apache.commons.collections4.keyvalue.MultiKey");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@: 'm|NKo!k2;RGv[m";
      stringArray0[1] = "|8!&SWN";
      stringArray0[2] = "\"$Nd7a$_";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, true);
      multiKey4.equals(multiKey5);
      assertFalse(multiKey5.equals((Object)multiKey0));
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(976);
      Integer integer1 = new Integer(976);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.equals(integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "=Co#[D*A.8n");
      multiKey1.equals("=Co#[D*A.8n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "MultiKey[976, 976]";
      objectArray0[1] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.size();
      Object[] objectArray1 = multiKey2.getKeys();
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = null;
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.equals(multiKey1);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1120);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey3.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("cA~R.Irm6=re(l9X", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "cA~R.Irm6=re(l9X", multiKey0);
      multiKey1.getKeys();
      MultiKey multiKey2 = (MultiKey)multiKey1.getKey(0);
      assertEquals(2, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("ue@NjKop%S9|_+sX)|/", "ue@NjKop%S9|_+sX)|/", "ue@NjKop%S9|_+sX)|/");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", "ue@NjKop%S9|_+sX)|/");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -280
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-827));
      Integer integer1 = new Integer((-229));
      Integer integer2 = new Integer(4086);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer2, integer0);
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-827, -229, 4086]", "|uc", "MultiKey[-827, -229, 4086]", "");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[-827, -229, 4086], |uc, MultiKey[-827, -229, 4086], ]", string0);
      
      multiKey2.hashCode();
      multiKey1.hashCode();
      boolean boolean0 = multiKey1.equals("MultiKey[-827, -229, 4086]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1927);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1927);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1675));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(5499);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1624);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1675));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[6]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((int) integerArray0[7]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1675
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      Object object1 = multiKey0.getKey(1);
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }
}
