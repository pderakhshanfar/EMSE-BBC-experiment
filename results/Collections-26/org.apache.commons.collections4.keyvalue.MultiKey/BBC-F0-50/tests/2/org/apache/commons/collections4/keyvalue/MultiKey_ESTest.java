/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:21:56 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "W&>*u";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "j)0li=/IuI";
      stringArray0[5] = "}tgh%H^L&Ji)@A";
      stringArray0[6] = "";
      stringArray0[7] = ",";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey2.toString();
      Integer integer0 = multiKey2.getKey(0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      multiKey0.equals(multiKey0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", (String) null, "\" KyJ=$-F");
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.size();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKey2.equals(multiKey3);
      Integer integer3 = new Integer(1037);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer3, integer2);
      boolean boolean0 = multiKey0.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", (String) null);
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.size();
      Integer integer0 = new Integer(2);
      int int0 = 5;
      Integer integer1 = new Integer(5);
      multiKey0.toString();
      Integer integer2 = new Integer(1322);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer2);
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("Lv_tmEH\"u&'OKZ", "org.apache.commons.collections4.keyvalue.MultiKey", "z<M+]9yzd!H", "oUJ7927 |[");
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, null]", "org.apache.commons.collections4.keyvalue.MultiKey");
      int int1 = 132;
      // Undeclared exception!
      try { 
        multiKey3.getKey(132);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 132
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object3 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object3, multiKey0);
      assertEquals(2, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      int int0 = 1;
      multiKey1.getKey(1);
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      boolean boolean0 = multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.toString();
      Integer integer2 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      assertEquals(1, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2219);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("(Yp+>ATpX?Oh", "(Yp+>ATpX?Oh", "(Yp+>ATpX?Oh", "(Yp+>ATpX?Oh");
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey1;
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(2219);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2219
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(640);
      Integer integer1 = new Integer((-346));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "I-(r'7,lM\"5F`(pls", "The array of keys must not be null", "", "-U0~2L;nv;");
      String string0 = multiKey1.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      String string1 = multiKey2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "W&>*u";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "j)0li=/IuI";
      stringArray0[5] = "}tgh%H^L&Ji)@A";
      stringArray0[6] = "";
      stringArray0[7] = ",";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "", "", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("The array of keys must not be null", "}\"u0K4^9vMS]Liv(@{K", "", "", "j)0li=/IuI");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>(",", "j)0li=/IuI", "The array of keys must not be null", "j)0li=/IuI");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", (String) null, "");
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("5@9z5Y$/TbOiB.80", "", "ism0Zuf1Nq2'vJ/L5,&", "", "");
      multiKeyArray0[7] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>((String) null, "");
      multiKeyArray0[8] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey9.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("R/", "R/", "", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "vInjOi,waox7m-e,d", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "//#cu", "");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("+-fq=G7T", "+-fq=G7T", "R/");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "//#cu", "E0&s^iOF-{GroeIG/", "The array of keys must not be null");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey", "R/", "PG9$ET;VR");
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", "JbL4:k", "", "69iddooq/");
      multiKeyArray0[7] = multiKey7;
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey8.getKey(4943);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4943
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
