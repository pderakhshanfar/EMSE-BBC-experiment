/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:41:15 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "vLNEfsJ";
      objectArray0[1] = (Object) "vLNEfsJ";
      objectArray0[2] = (Object) "vLNEfsJ";
      Object object0 = new Object();
      objectArray0[4] = (Object) "vLNEfsJ";
      objectArray0[5] = (Object) "vLNEfsJ";
      objectArray0[6] = (Object) "vLNEfsJ";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKeys();
      multiKey0.toString();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(3732);
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer(3732);
      Integer integer5 = new Integer(3732);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer4, (Integer) null, integer5);
      Integer integer6 = new Integer(3732);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer6, integer2, integer2);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey1, object1, (Object) null, "qz0uPKl=YS");
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer5, multiKey5);
      multiKey3.equals("vLNEfsJ");
      MultiKey<String> multiKey7 = new MultiKey<String>("vLNEfsJ", (String) null, "", (String) null);
      String string0 = multiKey7.getKey(3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      String string1 = "1T5gJCLB6";
      String string2 = "?JU7+_eJA}J~k";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "1T5gJCLB6", "?JU7+_eJA}J~k");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKey0.equals(multiKey0);
      MultiKey<Object>[] multiKeyArray1 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      Object object0 = null;
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("?JU7+_eJA}J~k", multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      int int0 = (-5522);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-5522));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5522
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      Object[] objectArray0 = multiKey1.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[]", multiKey4);
      boolean boolean0 = multiKey3.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.size();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("|H~0h", "|H~0h");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.size();
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      Integer integer0 = new Integer((-1763));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, "The array of keys must not be null", integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.getKeys();
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      String string0 = null;
      MultiKey<String> multiKey1 = new MultiKey<String>("t2AwP'[", "t2AwP'[", (String) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, integer0, (Object) null, multiKey1);
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, ":E%", "@' g_ay},9;[L");
      multiKey0.toString();
      Integer integer0 = new Integer(457);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer0);
      multiKey1.toString();
      multiKey1.getKey(3);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, :E%, @' g_ay},9;[L]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("-", "+/1]");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("@' g_ay},9;[L", multiKey2, multiKey0);
      multiKey3.size();
      multiKey3.getKeys();
      multiKey3.size();
      boolean boolean0 = multiKey2.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-6026));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey0.equals((Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKey1.toString();
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey2.toString();
      multiKey1.getKeys();
      int int0 = multiKey1.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-4387));
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      String string0 = null;
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "MultiKey");
      // Undeclared exception!
      try { 
        multiKey2.getKey((int) integerArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4387
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey(208);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 208
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object object1 = multiKey1.getKey(3);
      assertEquals("", object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("TgP", "");
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.toString();
      int int0 = (-702);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-702));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -702
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
