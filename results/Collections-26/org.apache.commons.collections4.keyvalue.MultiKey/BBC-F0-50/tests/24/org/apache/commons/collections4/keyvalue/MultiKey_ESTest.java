/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:26:22 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      Integer integer0 = new Integer((-362));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer0);
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0, "", multiKey0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[null, -362, , MultiKey[-362, null, -362]]", "MultiKey[null, -362, , MultiKey[-362, null, -362]]", (String) null, (String) null);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("KfExyQWfy[3k", "KfExyQWfy[3k", "The array of keys must not be null");
      multiKey0.hashCode();
      Integer integer0 = new Integer(2448);
      Integer integer1 = new Integer(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, "KfExyQWfy[3k", "KfExyQWfy[3k", integer1);
      boolean boolean0 = multiKey1.equals("The array of keys must not be null");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey1;
      boolean boolean1 = multiKey1.equals(multiKey1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "!mR @X{v(QyaHgP9a";
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer1, integer2);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, 0, null, 0, 0]", "MultiKey[0, 0, null, 0, 0]", "MultiKey[0, 0, null, 0, 0]", "");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[0, 0, null, 0, 0], MultiKey[0, 0, null, 0, 0], MultiKey[0, 0, null, 0, 0], ]", string0);
      
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      multiKey1.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "l[+C)/lmjZ!<-";
      stringArray0[2] = "MultiKey[MultiKey[0, 0, null, 0, 0], MultiKey[0, 0, null, 0, 0], MultiKey[0, 0, null, 0, 0], ]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[]";
      multiKey0.toString();
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey2.toString();
      multiKey2.getKey(0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey3.getKeys();
      int int0 = multiKey0.size();
      boolean boolean0 = multiKey2.equals("MultiKey[]");
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[], MultiKey[]]", string0);
      
      multiKey1.size();
      int int1 = multiKey3.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2461));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1403));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1507);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1795));
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<String> multiKey3 = multiKey2.getKey(0);
      multiKey0.equals("");
      multiKey0.getKeys();
      Integer integer0 = new Integer(3);
      boolean boolean0 = multiKey3.equals(integer0);
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , , ]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      multiKeyArray0[0] = multiKey1;
      String[] stringArray0 = new String[5];
      String string1 = "";
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      boolean boolean0 = true;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "");
      multiKeyArray0[1] = multiKey3;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-574));
      Integer integer2 = new Integer(3992);
      Integer integer3 = new Integer(1046);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer2);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-574));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -574
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[4] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[7] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[8] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(4);
      boolean boolean0 = multiKey0.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "E-H$j=DErC", "The array of keys must not be null");
      String string0 = "0!l%,[FN'ec";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "0!l%,[FN'ec");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-111));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -111
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }
}
