/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:40:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("P]%NVpt1^Pk=Bbsd", "nBT[yOOd?Sv|Fjym@", "nBT[yOOd?Sv|Fjym@");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
      
      String string0 = multiKey1.getKey(0);
      assertEquals("P]%NVpt1^Pk=Bbsd", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("P]%NVpt1^Pk=Bbsd", (String) null, "P]%NVpt1^Pk=Bbsd");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<String> multiKey3 = new MultiKey<String>("P]%NVpt1^Pk=Bbsd", (String) null, "P]%NVpt1^Pk=Bbsd");
      multiKey1.equals(multiKey3);
      Object object0 = new Object();
      MultiKey<String> multiKey4 = new MultiKey<String>("P]%NVpt1^Pk=Bbsd", (String) null, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-235));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey1.getKeys();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0, "");
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null, multiKey1, object0);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKey3.getKey(3);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, "}MW$0", "", multiKey0);
      multiKeyArray0[2] = multiKey4;
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey2, integer0);
      multiKeyArray0[3] = multiKey5;
      Object object1 = new Object();
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(object1, (Object) null, multiKey0, integer1, multiKey0);
      multiKeyArray0[4] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey2, multiKey5, "");
      multiKeyArray0[5] = multiKey7;
      MultiKey<MultiKey<Object>> multiKey8 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      boolean boolean0 = multiKey8.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(1);
      objectArray0[0] = null;
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", ")|6!mT|.I.wd:\"G.&hG", "org.apache.commons.collections4.keyvalue.MultiKey");
      int int0 = (-1038);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1038));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1038
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      multiKey1.hashCode();
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      boolean boolean0 = multiKey2.equals("MultiKey[, ]");
      assertFalse(boolean0);
      
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey3.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, ], ]", string0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, (Object) null, "MultiKey[, ]");
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4, multiKey1, multiKey1, multiKey0);
      multiKey5.size();
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "");
      String string1 = "*Kj2.";
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "*Kj2.", "", object0, (Object) null);
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, integer0, "");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      multiKey0.toString();
      Object object0 = multiKey0.getKey(0);
      Integer integer2 = new Integer(0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer0, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 0]", string0);
      
      Object object1 = multiKey1.getKey(0);
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "MultiKey[0, 0, 0, 0, 0]";
      objectArray0[1] = (Object) "MultiKey[0, 0, 0, 0, 0]";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "MultiKey[0, 0, 0]";
      objectArray0[4] = (Object) "MultiKey[0, 0, 0, 0, 0]";
      objectArray0[5] = (Object) "MultiKey[0, 0, 0]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0[1], object1);
      Object object2 = multiKey4.getKey(0);
      assertEquals("MultiKey[0, 0, 0, 0, 0]", object2);
      
      boolean boolean0 = multiKey3.equals("MultiKey[0, 0, 0, 0, 0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "Pviy^yu6r", object0, "Pviy^yu6r");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Q";
      stringArray0[1] = "";
      stringArray0[2] = "fil:>";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "fil:>", "Q");
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "G'Rzew4(]usK3Hu,", "fil:>", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey2);
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
      assertTrue(multiKey4.equals((Object)multiKey0));
  }
}
