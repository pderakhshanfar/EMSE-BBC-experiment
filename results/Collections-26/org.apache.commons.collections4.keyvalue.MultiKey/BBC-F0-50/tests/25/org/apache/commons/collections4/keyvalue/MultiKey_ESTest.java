/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:26 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Z`S\u0004>p'", "Z`S\u0004>p'", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[Z`S\u0004>p', Z`S\u0004>p', ]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "MultiKey[Z`S\u0004>p', Z`S\u0004>p', ]", multiKey0, (Object) null, "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "");
      multiKey2.size();
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("g", "g", "g");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("g", "g", "g");
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("aeN{GHV<.ZtE(t", "aeN{GHV<.ZtE(t", "aeN{GHV<.ZtE(t");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("aeN{GHV<.ZtE(t", "aeN{GHV<.ZtE(t", (String) null, (String) null);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "aeN{GHV<.ZtE(t";
      objectArray0[4] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(4);
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("aeN{GHV<.ZtE(t", objectArray0[4], object2, object2);
      int int0 = (-1169);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1169));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1169
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-44));
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object3, integer0);
      multiKey1.toString();
      multiKey1.toString();
      Object object5 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object5, object4, object4, object2);
      multiKey2.toString();
      Object object6 = multiKey2.getKey(0);
      assertSame(object6, object5);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKey3.hashCode();
      Object object7 = new Object();
      boolean boolean0 = multiKey0.equals(object7);
      assertFalse(boolean0);
      
      multiKey0.size();
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer0);
      boolean boolean1 = multiKey3.equals(multiKey4);
      assertFalse(boolean1);
      
      multiKey1.toString();
      multiKey4.hashCode();
      multiKey4.getKey(0);
      multiKey0.hashCode();
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MultiKey");
      multiKey0.toString();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2783));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1703));
      integerArray0[1] = integer1;
      multiKey0.toString();
      Integer integer2 = new Integer(880);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, MultiKey]", string0);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-568));
      integerArray0[4] = integer4;
      int int0 = 0;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      Integer integer6 = new Integer((-1703));
      multiKey0.equals(integer6);
      Integer integer7 = multiKey1.getKey(0);
      assertEquals((-2783), (int)integer7);
      
      boolean boolean0 = multiKey1.equals(int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "+1'am>Uv:";
      stringArray0[3] = "C$y+&_0U]_*\"wq";
      stringArray0[4] = "";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = " SHe+";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.getKey(1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(685);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0, object1, object1, object2);
      Integer integer1 = new Integer(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "=7o4L", "=7o4L");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer1, multiKey1, integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer0, multiKey2, "org.apache.commons.collections4.keyvalue.MultiKey", object1);
      multiKey1.hashCode();
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer2, integer1);
      int int0 = multiKey4.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "The array of keys must not be null";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "[Gd}kg@4I?";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = "The array of keys must not be null";
      stringArray0[7] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-92));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -92
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1825);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(844);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      int int0 = (-1);
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[0] = multiKey0;
      Integer integer4 = new Integer((-2007));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer4, integerArray0[0], integerArray0[0], integerArray0[2], integer1);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[3] = multiKey3;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0[2], integer4, (Integer) int0, (Integer) null, integer3);
      multiKeyArray0[4] = multiKey4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[5] = multiKey5;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[6] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      assertEquals(7, multiKey7.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey(88);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 88
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "Dy}!EqR83^{";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "nmkn8XA]!>g";
      stringArray0[4] = "";
      stringArray0[5] = "~@(^";
      stringArray0[6] = "*h+!:8Kou2";
      stringArray0[7] = "L_;";
      stringArray0[8] = "vW0.zO/&";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer((-1546));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = new Integer((-1546));
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, integer2, integer3, "vW0.zO/&");
      assertEquals(5, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("aeN{GHV<.ZtE(t", "aeN{GHV<.ZtE(t", (String) null, (String) null);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, "aeN{GHV<.ZtE(t", object0);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(4, objectArray0.length);
  }
}
