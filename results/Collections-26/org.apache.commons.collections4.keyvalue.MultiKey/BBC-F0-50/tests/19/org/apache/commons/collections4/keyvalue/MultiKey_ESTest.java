/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:06 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-149));
      Integer integer1 = new Integer(368);
      Integer integer2 = new Integer((-398));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKeys();
      String[] stringArray0 = new String[1];
      multiKey0.toString();
      stringArray0[0] = "xWT@mf^PcU~pz1!VkA";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey0.equals(multiKey0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-149));
      Integer integer2 = new Integer(368);
      Integer integer3 = new Integer((-398));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer3);
      multiKey0.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.getKeys();
      String[] stringArray0 = new String[1];
      multiKey1.toString();
      stringArray0[0] = "xWT@mf^PcU~pz1!VkA";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.hashCode();
      multiKey0.equals("MultiKey[xWT@mf^PcU~pz1!VkA]");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey1.equals(multiKey3);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.getKeys();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "&]'Pw*}9!+ h3u", "&]'Pw*}9!+ h3u", (String) null);
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
      
      objectArray0[1] = (Object) null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-149));
      Integer integer2 = new Integer(387);
      Integer integer3 = new Integer((-398));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer3);
      multiKey0.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.getKeys();
      String[] stringArray0 = new String[1];
      multiKey1.toString();
      stringArray0[0] = "xWT@mf^PcU~pz1!VkA";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.hashCode();
      multiKey0.equals("MultiKey[xWT@mf^PcU~pz1!VkA]");
      multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      Integer integer4 = new Integer(387);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer4, integer0);
      multiKeyArray0[4] = multiKey3;
      multiKeyArray0[5] = multiKey0;
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer((-1947));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer5, integer1, integer6);
      multiKeyArray0[6] = multiKey4;
      multiKeyArray0[7] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      int int0 = multiKey5.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "y(A|]- >\"$;", "");
      int int0 = multiKey0.size();
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0);
      int int1 = multiKey1.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "xl<xVvwJ";
      stringArray0[2] = "";
      stringArray0[3] = "Kq$2#JpL)T";
      stringArray0[4] = "Z'~OwYk6Sj1x:kB_[";
      stringArray0[5] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, xl<xVvwJ, , Kq$2#JpL)T, Z'~OwYk6Sj1x:kB_[, org.apache.commons.collections4.keyvalue.MultiKey]", string0);
      
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey0.getKeys();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "xl<xVvwJ";
      objectArray0[2] = (Object) "Z'~OwYk6Sj1x:kB_[";
      objectArray0[3] = (Object) "Z'~OwYk6Sj1x:kB_[";
      objectArray0[4] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[5] = (Object) "Kq$2#JpL)T";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey2);
      Integer integer0 = new Integer(2901);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, objectArray0[3]);
      boolean boolean1 = multiKey3.equals(multiKey4);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("@Q>63K@T}>8", "MultiKey[0, 0]", "MultiKey[0, 0]", "MultiKey[0, 0]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "MultiKey[0, 0]";
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) "@Q>63K@T}>8";
      objectArray0[3] = (Object) "MultiKey[0, 0]";
      objectArray0[4] = (Object) "@Q>63K@T}>8";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[0, 0]", objectArray0[0]);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey2, "MultiKey[@Q>63K@T}>8, MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0]]", multiKey4);
      multiKey5.toString();
      multiKey5.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = null;
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-602));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -602
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
