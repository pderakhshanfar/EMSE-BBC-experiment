/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(".*0CA8;T6FKIGa&M", ".*0CA8;T6FKIGa&M", ".*0CA8;T6FKIGa&M");
      boolean boolean0 = multiKey0.equals(".*0CA8;T6FKIGa&M");
      MultiKey<String> multiKey1 = new MultiKey<String>("", ".*0CA8;T6FKIGa&M");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object0 = multiKey2.getKey(1);
      boolean boolean1 = multiKey1.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(".*0CA8;46F#G@&h", "The array of keys must not be null", "");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1444);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey0, multiKey1, "", "");
      multiKey2.getKeys();
      Integer integer1 = new Integer(1444);
      multiKey1.equals(integer1);
      multiKey1.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey3.size();
      int int0 = multiKey0.size();
      MultiKey<String> multiKey4 = new MultiKey<String>("=Gl#b[xp8", "w)81PURX23z", "MultiKey", (String) null);
      Object object1 = new Object();
      boolean boolean0 = multiKey4.equals(object1);
      assertFalse(boolean0);
      
      int int1 = multiKey2.hashCode();
      assertTrue(int1 == int0);
      
      multiKey1.size();
      boolean boolean1 = multiKey1.equals(multiKey2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-270));
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "(+f", integer0, "]7+SaZfB", integer1);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKeys();
      multiKey1.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[null, (+f, -270, ]7+SaZfB, 0]";
      stringArray0[1] = "";
      stringArray0[2] = "g]j";
      stringArray0[3] = "(+f";
      stringArray0[4] = "(+f";
      stringArray0[5] = "MultiKey[null, (+f, -270, ]7+SaZfB, 0]";
      stringArray0[6] = "MultiKey[null, (+f, -270, ]7+SaZfB, 0]";
      stringArray0[7] = "JsZ";
      stringArray0[8] = "(+f";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey2.getKeys();
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) integer2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) multiKey0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, integer0, "", integer1, (Object) null);
      Object object2 = multiKey1.getKey(0);
      objectArray0[5] = object2;
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer2, multiKey2, (Object) null, integer3);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "");
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "KAG0)h5v";
      stringArray0[3] = "7:eX";
      stringArray0[4] = "";
      stringArray0[5] = "5d3y";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.getKey(0);
      Object object0 = new Object();
      String string0 = multiKey0.toString();
      multiKey2.equals(object0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey3.getKeys();
      multiKey0.equals(object0);
      String string1 = multiKey0.getKey(0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, (Object) null);
      multiKeyArray0[0] = multiKey1;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7Fu";
      stringArray0[1] = "";
      stringArray0[2] = "_Pu9`g@2L(&";
      stringArray0[3] = "a8 Bu";
      boolean boolean0 = false;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "%|=pE;H");
      multiKeyArray0[1] = multiKey3;
      String string0 = "";
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, integer0, integer1, integer0);
      multiKey4.getKey(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("%|=pE;H", "", multiKey3, (Object) null, integer0);
      multiKeyArray0[2] = multiKey5;
      Integer integer2 = new Integer(0);
      MultiKey<String> multiKey6 = new MultiKey<String>("", "%|=pE;H");
      // Undeclared exception!
      try { 
        multiKey6.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2835);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(2835);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, (Integer) null);
      Object object0 = new Object();
      Object object1 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, integer1, "", integer2);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals((Object) null);
      multiKey1.toString();
      multiKey0.equals(object0);
      multiKey1.hashCode();
      multiKey1.getKeys();
      multiKey1.equals("");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, (MultiKey<Object>) null);
      multiKey1.toString();
      multiKey2.size();
      multiKey0.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey", (String) null, "", "!'9hxlG&h");
      multiKey3.equals("MultiKey[java.lang.Object@2848c9cb, java.lang.Object@7cce3212, 2835, , 0]");
      multiKey1.hashCode();
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer(1077);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      int int0 = (-225);
      Integer integer2 = new Integer((-225));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "r6tKQZCk;*}L=o", "", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", (String) null, "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null, integer0);
      multiKey3.toString();
      multiKey3.equals("");
      multiKey0.hashCode();
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1429);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(1429);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1429
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
