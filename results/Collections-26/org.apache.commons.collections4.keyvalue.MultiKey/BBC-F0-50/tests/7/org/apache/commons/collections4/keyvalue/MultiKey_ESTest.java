/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:22:41 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      Object object0 = new Object();
      Integer integer0 = new Integer(6);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0, integer0, "The array of keys must not be null");
      Integer integer1 = new Integer(3);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0, object0, integer1, multiKey1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey1;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, multiKey1, multiKey2, multiKey0, multiKey3);
      Object object1 = multiKey4.getKey(3);
      boolean boolean0 = multiKey0.equals(object1);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[The array of keys must not be null, The array of keys must not be null]", string0);
      
      boolean boolean1 = multiKey3.equals(multiKey4);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1698);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, (Object) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "");
      boolean boolean0 = multiKey1.equals(integer0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, ]", string0);
      
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1698);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      boolean boolean1 = multiKey3.equals(multiKey2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "s/c1Lx9I@G)D?YoI^", "s/c1Lx9I@G)D?YoI^");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      Integer integer0 = new Integer((-1366));
      Integer integer1 = new Integer(2918);
      Integer integer2 = new Integer((-1366));
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey1.size();
      multiKey1.getKeys();
      multiKey0.equals(multiKey3);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.hashCode();
      String[] stringArray1 = multiKey0.getKeys();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "MultiKey[]", integer0, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer3, integer2);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKeys();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, 0, 0]", string0);
      
      multiKey2.hashCode();
      boolean boolean0 = multiKey2.equals("MultiKey[0, MultiKey[], 0, null]");
      assertFalse(boolean0);
      
      multiKey0.size();
      multiKey2.hashCode();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-607));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, integer0);
      multiKey0.getKey(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.size();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0, multiKey1);
      multiKey3.hashCode();
      Integer[] integerArray0 = new Integer[5];
      Integer integer2 = new Integer(1);
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer integer3 = new Integer(118);
      integerArray0[3] = integer3;
      integerArray0[4] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("\"K;8binl+<I8h?v3S@", "MultiKey[, , , , ]", "\"K;8binl+<I8h?v3S@", "", "");
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[], MultiKey[]]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1698);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, (Object) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "");
      multiKey1.equals(integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1698);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, integer0, integer1, integer2);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[0, 1698, 1698, 0, 1698], MultiKey[0, 1698, 1698, 0, 1698], MultiKey[0, 1698, 1698, 0, 1698], MultiKey[0, 1698, 1698, 0, 1698]]", string0);
      
      boolean boolean0 = multiKey3.equals(integer1);
      assertFalse(boolean0);
      
      int int0 = multiKey1.size();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", integer0, integer1);
      multiKey0.toString();
      Integer integer2 = new Integer(0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, 0, 0]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object0, multiKey0, integer2);
      multiKey1.size();
      Integer integer3 = new Integer(5);
      Integer integer4 = new Integer(901);
      Integer integer5 = new Integer(663);
      Integer integer6 = new Integer(901);
      Integer integer7 = new Integer(663);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer4, integer5, integer6, integer7);
      Integer integer8 = new Integer(901);
      boolean boolean0 = multiKey2.equals(integer8);
      assertFalse(boolean0);
      
      Integer integer9 = new Integer(1005);
      Integer integer10 = new Integer(1);
      Integer integer11 = new Integer(901);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer8, integer9, integer10, integer3, integer11);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey3, multiKey3);
      Object object1 = multiKey4.getKey(0);
      boolean boolean1 = multiKey1.equals(object1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) multiKey0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) multiKey0;
      Object object2 = new Object();
      objectArray0[7] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "* r=+E!m W@", "* r=+E!m W@", "The array of keys must not be null", "* r=+E!m W@");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1331));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "aq.T\\\"<I],";
      MultiKey<String> multiKey1 = new MultiKey<String>("aq.T\"<I],", "aq.T\"<I],", "aq.T\"<I],", (String) null);
      multiKey1.toString();
      Integer integer2 = new Integer(0);
      multiKey1.equals(integer2);
      Integer integer3 = new Integer((-1331));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer3, integer1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(2475);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2475
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("N_I4I%B5z>#}\u0000jVN", "N_I4I%B5z>#}\u0000jVN", "HzvgZ+m^6>c", "");
      int int0 = 413;
      // Undeclared exception!
      try { 
        multiKey0.getKey(413);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 413
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = "(-+zj_*\"T";
      int int0 = 3;
      Integer integer0 = new Integer(3);
      int int1 = 598;
      Integer integer1 = new Integer(598);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
