/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:21:56 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("wtP$j", "wtP$j", "", "", "j");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(6);
      Integer integer2 = new Integer(6);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey2.equals(integer0);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[1, 6, 6, 6, 1]", "MultiKey[MultiKey[1, 6, 6, 6, 1], MultiKey[1, 6, 6, 6, 1]]");
      Integer integer4 = new Integer(6);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer4, "MultiKey[]", "MultiKey[MultiKey[1, 6, 6, 6, 1], MultiKey[1, 6, 6, 6, 1]]");
      multiKey3.toString();
      multiKey4.toString();
      multiKey3.equals(multiKey4);
      multiKey0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[1, 6, 6, 6, 1]", string0);
      
      Object object2 = new Object();
      Object object3 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object0, object1, object2, "MultiKey[1, 6, 6, 6, 1]", object3);
      multiKey5.toString();
      boolean boolean1 = multiKey2.equals(multiKey5);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-331));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(499);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-306));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      boolean boolean0 = multiKey1.equals(integerArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("FA0C4)\"\"<+&A{$M$IAl", "FA0C4)\"\"<+&A{$M$IAl");
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "FA0C4)\"\"<+&A{$M$IAl");
      multiKey0.toString();
      Object object1 = new Object();
      multiKey1.equals(object1);
      multiKey0.equals("FA0C4)\"\"<+&A{$M$IAl");
      String string0 = multiKey0.getKey(0);
      assertEquals("FA0C4)\"\"<+&A{$M$IAl", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1034));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("t<{c", "1~#yAk1", "1~#yAk1");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) integer2;
      objectArray0[4] = (Object) "t<{c";
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) "MultiKey[t<{c, 1~#yAk1, 1~#yAk1]";
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) integer0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey2.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "U1=AdEwuW5epC.";
      String string1 = "7#!_V_/Ux";
      MultiKey<String> multiKey0 = new MultiKey<String>("U1=AdEwuW5epC.", "7#!_V_/Ux", "7#!_V_/Ux", "7#!_V_/Ux");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1611));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1611));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1611
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer(1931);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, integer0);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey1.getKey(0);
      objectArray0[2] = (Object) null;
      multiKey1.getKey(0);
      objectArray0[3] = (Object) null;
      multiKey0.getKey(0);
      objectArray0[4] = null;
      Object object1 = new Object();
      objectArray0[5] = object1;
      MultiKey<String> multiKey2 = new MultiKey<String>("R\"WJo", "dA_8mwvYco[5-!nd", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey2.getKey(0);
      objectArray0[6] = (Object) "R\"WJo";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      Integer integer1 = new Integer(0);
      Object object2 = new Object();
      MultiKey<String> multiKey4 = new MultiKey<String>((String) null, "Ow]t2%MyF", (String) null, "T@ZM~1fWsH");
      Object object3 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer1, object2, multiKey4, object3, (Object) null);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey5, multiKey3);
      Object object4 = multiKey6.getKey(0);
      boolean boolean0 = multiKey3.equals(object4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-3204));
      Integer integer1 = new Integer((-688));
      Integer integer2 = new Integer(1063);
      Integer integer3 = new Integer(908);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "8\"Euo";
      stringArray0[2] = "bTnh~2Vyg,}W";
      stringArray0[3] = "]7AhS\"g<'<UQ7x";
      stringArray0[4] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(3653);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3653
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
