/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:21:53 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "By+Pb,1Kg+6S9g`";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("By+Pb,1Kg+6S9g`", "By+Pb,1Kg+6S9g`");
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.size();
      Integer integer0 = new Integer(2916);
      Integer integer1 = new Integer(2916);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<Object>[] multiKeyArray1 = multiKey3.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1408));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int0 = multiKey1.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "8DeNJS39~ d!##laK7");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(1);
      Integer integer0 = new Integer(2247);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, integer0, object0);
      multiKey2.size();
      multiKey2.equals((Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey3.hashCode();
      Object object1 = new Object();
      multiKey0.equals(object1);
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      int int1 = 1;
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "D)[MU", "");
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      Object object1 = multiKey2.getKey(0);
      Integer integer1 = new Integer(0);
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object1, integer1, integer1);
      multiKey3.size();
      multiKey3.getKey(0);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey3.hashCode();
      multiKey1.getKeys();
      multiKey0.hashCode();
      multiKey1.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[, , D)[MU, ]", integer1, "MultiKey[, , D)[MU, ]", object1);
      Object object2 = multiKey4.getKey(3);
      multiKey3.toString();
      multiKey1.equals(object2);
      multiKey3.hashCode();
      // Undeclared exception!
      try { 
        multiKey4.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      Integer integer2 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, objectArray0[0], objectArray0[0], (Object) null);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey1, multiKey1, multiKey1, multiKey1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[1], 1, 1, null], MultiKey[1], MultiKey[1], MultiKey[1], MultiKey[1]]", string0);
      
      boolean boolean0 = multiKey3.equals(multiKey1);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[MultiKey[MultiKey[1], 1, 1, null], MultiKey[1], MultiKey[1], MultiKey[1], MultiKey[1]]", "MultiKey[MultiKey[MultiKey[1], 1, 1, null], MultiKey[1], MultiKey[1], MultiKey[1], MultiKey[1]]", "MultiKey[MultiKey[1], 1, 1, null]", "#@aOq=a\"yS^#f:zH@", "MultiKey[MultiKey[MultiKey[1], 1, 1, null], MultiKey[1], MultiKey[1], MultiKey[1], MultiKey[1]]");
      multiKey4.size();
      MultiKey<String> multiKey5 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[MultiKey[MultiKey[1], 1, 1, null], MultiKey[1], MultiKey[1], MultiKey[1], MultiKey[1]]", "MultiKey[MultiKey[1], 1, 1, null]", "MultiKey[MultiKey[1], 1, 1, null]", "MultiKey[MultiKey[1], 1, 1, null]");
      MultiKey<String> multiKey6 = new MultiKey<String>("?&L9(K_v6", "#@aOq=a\"yS^#f:zH@", "i<0KXN%^UJ\"", "org.apache.commons.collections4.keyvalue.MultiKey");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "T";
      stringArray0[2] = "FsJV";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "#@aOq=a\"yS^#f:zH@";
      stringArray0[5] = "#@aOq=a\"yS^#f:zH@";
      stringArray0[6] = "MultiKey[MultiKey[1], 1, 1, null]";
      stringArray0[7] = "?&L9(K_v6";
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKey5, multiKey6, multiKey7);
      multiKey8.hashCode();
      assertFalse(multiKey7.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "=I+1n)58C#nw:";
      stringArray0[4] = "VN.Q4r";
      stringArray0[5] = "}0ALdM";
      stringArray0[6] = "q>B2BB*hYjZa+'Y1Ds+";
      stringArray0[7] = "?{8Xe|F";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", "");
      multiKey1.toString();
      multiKey1.size();
      multiKey1.getKeys();
      Integer integer0 = new Integer((-2846));
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer((-6));
      Integer integer3 = new Integer(76);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer3);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[-2846, 3, -6, -2846, 76], MultiKey[-2846, 3, -6, -2846, 76], MultiKey[-2846, 3, -6, -2846, 76], MultiKey[-2846, 3, -6, -2846, 76]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "org.apache.commons.collections4.keyvalue.MultiKey");
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[1] = null;
      multiKey0.toString();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null, object1, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.getKey(0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1625);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1625
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("}Pu[KtMc", "}Pu[KtMc", "", "}Pu[KtMc");
      multiKey0.equals((Object) null);
      Integer integer0 = new Integer(2745);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.size();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0, multiKey1, integer0, object1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("|", "|", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      int int0 = 1797;
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1797);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1797
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(2985);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-719));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -719
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, (Object) null, object1);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = 0;
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1971));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3560);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, -1, 0, -1971, 3560, -1, 0, 0]", string0);
      
      boolean boolean0 = multiKey2.equals(integer8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("sm2*", "sm2*", "sm2*", "sm2*", "sm2*");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[sm2*, sm2*, sm2*, sm2*, sm2*]", string0);
  }
}
