/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:39:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "o;C\"eTN.w/u-(q", "", "");
      String[] stringArray0 = new String[0];
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(4928);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2839);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-844));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(735);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(5);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2309);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(5);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer integer9 = new Integer((int) integerArray0[1]);
      boolean boolean0 = multiKey1.equals(integer9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[0];
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      multiKey1.size();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "QS-uVxn?S1B,&ycK>Z5";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey2, multiKey0);
      multiKey3.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(753);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      Integer integer1 = new Integer(753);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1, (Object) null);
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[753, 753]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("mkV DcT%+H", "mkV DcT%+H", "_&qVA\"kVylv[Y}");
      multiKey2.getKey(0);
      multiKey2.size();
      multiKey1.getKey(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(3);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer2, integer3, integer4);
      multiKey3.getKey(0);
      multiKey0.size();
      multiKey1.getKeys();
      boolean boolean0 = multiKey2.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 2182;
      Integer integer0 = new Integer(2182);
      Integer integer1 = new Integer(2182);
      Integer integer2 = new Integer(2182);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "fHw n", "", " WK-O.Cro;hxzv]", " WK-O.Cro;hxzv]");
      multiKey1.equals(multiKey2);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
      try { 
        multiKey3.getKey(2182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2182
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      multiKey0.toString();
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, integer0, (Object) null);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals(integer0);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = multiKey0.getKey(1);
      assertNull(string0);
      
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey0.size();
      Integer integer1 = new Integer(3964);
      Integer integer2 = new Integer((-2677));
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer3, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey1.size();
      String string1 = multiKey1.toString();
      assertEquals("MultiKey[1, 1, 1, null]", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "+c0t=)5_O@";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Ptni(]K~ :mV{9&F";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(7, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "46_", "46_");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(1);
      objectArray0[1] = (Object) multiKey2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      Object object1 = multiKey3.getKey(1);
      objectArray0[3] = object1;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, integer0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(1504);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1504
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(844);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-528));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(1);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[844, 844, 844, 844, 2, 844, 1, -528, 1]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("'", ",]Zl?84)'|%3Tv");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<String> multiKey0 = new MultiKey<String>("%d.MamH)B<pPXwf1*t$", "", "", ".ijAhn");
      int int0 = 248;
      // Undeclared exception!
      try { 
        multiKey0.getKey(248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 248
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "h#I", "h#I");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-3172));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, (Integer) null);
      Integer integer2 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer2);
      assertFalse(boolean0);
  }
}
