/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:37:55 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("AZ{^uDT}zF~", "", "", "");
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("AZ{^uDT}zF~", "", "AZ{^uDT}zF~", "", "");
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals("");
      Object[] objectArray0 = multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("J9i8,rZ^P?%IV!]~w~", "", "", "xt^!#@%D", "AZ{^uDT}zF~");
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-114));
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer2, integer3);
      multiKey3.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[AZ{^uDT}zF~, , AZ{^uDT}zF~, , ], MultiKey[AZ{^uDT}zF~, , AZ{^uDT}zF~, , ]]", string0);
      
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[2, 2, 0]", "", "", multiKey4);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0, true);
      Object object1 = multiKey6.getKey(0);
      assertEquals("AZ{^uDT}zF~", object1);
      
      Object object2 = new Object();
      multiKey2.equals(object2);
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3);
      Object object3 = multiKey7.getKey(0);
      boolean boolean1 = multiKey3.equals(object3);
      assertFalse(boolean1 == boolean0);
      
      multiKey6.getKeys();
      assertFalse(multiKey6.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
      
      multiKey0.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, ".v\"paB", ".v\"paB");
      multiKey0.toString();
      multiKey0.equals((Object) null);
      String string0 = multiKey0.getKey(2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "";
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", "", "The array of keys must not be null");
      multiKey1.hashCode();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("3#*W", "3#*W", (String) null);
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[4];
      int int0 = 3;
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      multiKey0.size();
      boolean boolean0 = multiKey1.equals("MultiKey[, MultiKey]");
      assertFalse(boolean0);
      
      multiKey0.hashCode();
      multiKey1.toString();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      multiKey1.toString();
      multiKey2.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, MultiKey]", string0);
      
      multiKey2.size();
      multiKey0.getKeys();
      String string1 = multiKey0.getKey(0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.size();
      Integer integer1 = new Integer(3);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer0);
      multiKey2.toString();
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2210));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2210
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("dR\".EFm", "2hZPm2fA`", "q");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "2hZPm2fA`";
      objectArray0[2] = (Object) "q";
      objectArray0[3] = (Object) "dR\".EFm";
      multiKey0.toString();
      objectArray0[4] = (Object) "dR\".EFm";
      objectArray0[5] = (Object) "dR\".EFm";
      objectArray0[6] = (Object) "dR\".EFm";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey1.size();
      multiKey1.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", (String) null);
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-375));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -375
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
