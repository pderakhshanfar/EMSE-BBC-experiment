/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:41 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", "");
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-579));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -579
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"GbH.dCrZ8TJ:rb2";
      stringArray0[1] = "\"GbH.dCrZ8TJ:rb2";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("\"GbH.dCrZ8TJ:rb2", "LVWO|LN%c*2T");
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object0 = multiKey2.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(multiKey0.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("xIdnT! tuS[ji:", "xIdnT! tuS[ji:", "xIdnT! tuS[ji:");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, multiKey1, object0);
      assertTrue(multiKey2.equals((Object)multiKey1));
      
      multiKeyArray0[2] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, multiKey1, multiKey1);
      multiKeyArray0[3] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>("VJBoq", "xIdnT! tuS[ji:", "rO_62,s}Kp");
      multiKeyArray0[4] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[5] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey1, multiKey0);
      multiKeyArray0[6] = multiKey7;
      MultiKey<MultiKey<Object>> multiKey8 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey8.equals(multiKey1);
      Integer integer0 = new Integer(2);
      MultiKey<String> multiKey9 = new MultiKey<String>("rO_62,s}Kp", "xIdnT! tuS[ji:");
      assertFalse(multiKey9.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(23);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer(3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, multiKey0, integer3);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey2;
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, integer1, multiKey2);
      multiKeyArray0[2] = multiKey3;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) integer2;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      multiKeyArray0[3] = multiKey4;
      Integer integer4 = new Integer((-1));
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer(850);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer5, integer5, integer4, integer6);
      multiKey0.getKey(2);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, true);
      multiKey6.getKeys();
      // Undeclared exception!
      try { 
        multiKey6.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer(3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, multiKey0, integer3);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey2;
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, integer1, multiKey2);
      multiKeyArray0[2] = multiKey3;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) integer2;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      multiKeyArray0[3] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, multiKey1, objectArray0[3]);
      multiKeyArray0[4] = multiKey5;
      Object object1 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(object1, multiKey4, integer2, multiKey3, "");
      multiKeyArray0[5] = multiKey6;
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      boolean boolean0 = multiKey7.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.equals("MultiKey[null, null, null]");
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "MultiKey[null, null, null]", "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[null, null, null]";
      stringArray0[1] = "";
      stringArray0[2] = "";
      multiKey2.toString();
      stringArray0[3] = "MultiKey[null, null, null]";
      multiKey2.toString();
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.getKey(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, "", "");
      // Undeclared exception!
      try { 
        multiKey4.getKey(679);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 679
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2652;
      Integer integer0 = new Integer(2652);
      Integer integer1 = new Integer(2652);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Object object0 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null);
      multiKey1.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cc-|kwe!p%;";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.getKeys();
      Object object1 = new Object();
      multiKey1.equals(object1);
      multiKey0.equals(multiKey1);
      multiKey2.getKeys();
      int int0 = multiKey0.size();
      int int1 = multiKey1.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      Object object0 = null;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.getKey(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer0 = new Integer((-1062));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[3] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      assertEquals(4, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "Jt";
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = (-3768);
      Integer integer0 = new Integer((-3768));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3768));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3768
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")Dp>M?lgy~$b@M#6*$", ")Dp>M?lgy~$b@M#6*$", ")Dp>M?lgy~$b@M#6*$", ")Dp>M?lgy~$b@M#6*$", ")Dp>M?lgy~$b@M#6*$");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0);
      multiKey2.toString();
      multiKey2.equals(multiKey0);
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e8CgVLxW;0)p\"G~";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Te.j1+4";
      stringArray0[4] = "X<(3>;x";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(1355);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }
}
