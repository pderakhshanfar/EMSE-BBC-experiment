/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:42 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey0;
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null]", string0);
      
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      boolean boolean0 = multiKey2.equals((Object) null);
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer0, integer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, (Object) null);
      // Undeclared exception!
      try { 
        multiKey2.getKey(3293);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3293
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      multiKey0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lXnN";
      stringArray0[1] = "br1R&=_=W-$v~,{!";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Vhh0]hj.e2NJFU(#o";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey2.equals(multiKey3);
      multiKey0.getKeys();
      multiKey3.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "The array of keys must not be null", "C8U*rH#`VaGmGR?-G");
      multiKeyArray0[0] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKeyArray0[1] = multiKey5;
      multiKeyArray0[2] = multiKey3;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      int int0 = multiKey6.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "{<KXQ:^>$Y";
      stringArray0[0] = "{<KXQ:^>$Y";
      stringArray0[1] = "";
      stringArray0[2] = "plzF!o?91t";
      String string1 = "z";
      stringArray0[3] = "z";
      stringArray0[4] = "tiG:}G^GkJre =<?Z";
      stringArray0[5] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-699));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -699
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "+SLbi+h";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey1.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      Integer integer0 = new Integer(3395);
      multiKey0.equals(integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, , , ], MultiKey[, , , ]]", string0);
      
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-2899));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "sW(c{>", "sW(c{>", (String) null);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("VTDtR6", "}7eY@|,+6 LLXS65gT");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("sW(c{>", multiKey2, "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", multiKey0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey3.hashCode();
      multiKey0.hashCode();
      multiKey1.equals("}7eY@|,+6 LLXS65gT");
      multiKey1.size();
      multiKey0.size();
      multiKey3.size();
      multiKey3.size();
      Integer integer1 = multiKey0.getKey(0);
      assertEquals((-2899), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "P^t,SJ-d+UCc";
      stringArray0[2] = "f0(Q=|}I Rt`?A9:{";
      stringArray0[3] = "t\"<RS";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, P^t,SJ-d+UCc, f0(Q=|}I Rt`?A9:{, t\"<RS]", string0);
      
      multiKey0.size();
      multiKey0.equals("f0(Q=|}I Rt`?A9:{");
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      boolean boolean0 = multiKey1.equals("t\"<RS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("X|94C{cQL#F$G5", "", "", "");
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, integer0, object1);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer integer2 = multiKey2.getKey(0);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, integer1, integer2);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer2, object0);
      assertEquals(3, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer((-1));
      int int0 = 303;
      Integer integer1 = new Integer(303);
      Integer integer2 = new Integer(303);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey1.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[-1, 303, 303, -1]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[-1, 303, 303, -1]";
      stringArray0[5] = "";
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
