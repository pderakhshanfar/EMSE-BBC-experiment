/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:25:47 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("_", "_");
      Integer integer0 = new Integer((-1036));
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("_", integer0, multiKey1, objectArray0[2], multiKey2);
      multiKey1.toString();
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[_, -1036, MultiKey[-1036, MultiKey[_, _], -1036, -1036], -1036, MultiKey[-1036, MultiKey[_, _], -1036, -1036]]", string0);
      assertFalse(multiKey3.equals((Object)multiKey1));
      
      boolean boolean0 = multiKey0.equals(objectArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dW_+a`U[NV,;eEFv";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "#uxnD~+v;";
      stringArray0[4] = "";
      stringArray0[5] = "9K*VI'[a@V5";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(843);
      Integer integer1 = new Integer(843);
      Integer integer2 = new Integer(843);
      Integer integer3 = new Integer(843);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey0.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey0.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer1);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "|W0/#=gY%!T", "", "", "");
      MultiKey<String> multiKey5 = new MultiKey<String>("7", (String) null, (String) null, "");
      multiKey5.toString();
      Integer integer2 = new Integer((-1));
      multiKey5.equals("MultiKey[7, null, null, ]");
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey0.size();
      Integer integer3 = new Integer(0);
      boolean boolean0 = multiKey2.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("F8?IX9xBvwUBV", "F8?IX9xBvwUBV", "F8?IX9xBvwUBV");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKeys();
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "Mk@K", "");
      Integer integer0 = new Integer((-1405));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, (Integer) null);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.equals(multiKey1);
      String string0 = "";
      int int0 = 0;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.getKeys();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "", "ELlw3", "+18e61PLy6_dNrAD/-U", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.getKeys();
      int int0 = 3127;
      // Undeclared exception!
      try { 
        multiKey2.getKey(3127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3127
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "yyx*CbN_~GVNBF@Olo";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "N'7i";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer0);
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "N'7i", "yyx*CbN_~GVNBF@Olo", "yyx*CbN_~GVNBF@Olo");
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", (Object) null, object0, (Object) null, object0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(1272);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1272
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, (Object) null, object0, (Object) null);
      assertEquals(5, multiKey0.size());
  }
}
