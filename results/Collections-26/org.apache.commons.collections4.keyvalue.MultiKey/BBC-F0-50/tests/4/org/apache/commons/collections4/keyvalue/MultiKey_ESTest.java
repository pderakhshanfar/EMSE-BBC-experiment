/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:22:47 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[5] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[5] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String string0 = "The array of keys must not be null";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[]", "The array of keys must not be null", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1718;
      Integer integer0 = new Integer(1718);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[]", "");
      multiKey2.toString();
      multiKey2.equals("MultiKey[]");
      multiKey2.equals((Object) null);
      multiKey2.hashCode();
      multiKey1.hashCode();
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1718);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1718
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("/<l}t{s#H'", "*OlGZ", (String) null, "{{}ZL*}Q=N");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, "/<l}t{s#H'", object0);
      multiKey1.getKey(0);
      objectArray0[0] = null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "/<l}t{s#H'";
      objectArray0[4] = (Object) "/<l}t{s#H'";
      multiKey1.getKey(0);
      objectArray0[5] = null;
      Object object1 = new Object();
      objectArray0[6] = object1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      Object object2 = multiKey2.getKey(0);
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("YeQc/H[t[}IIJ", "tZTA.v1#%}XK P2.[`0");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, object0, multiKey0, multiKey1);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[YeQc/H[t[}IIJ, tZTA.v1#%}XK P2.[`0]]", string0);
      
      multiKey2.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey0.equals("MultiKey[MultiKey[YeQc/H[t[}IIJ, tZTA.v1#%}XK P2.[`0]]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) integer0;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0[4], ":ymg6=v2U");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-138));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -138
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "", "", "", object0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[MultiKey[0, , , , java.lang.Object@6e9ba6f], MultiKey[0, , , , java.lang.Object@6e9ba6f], MultiKey[0, , , , java.lang.Object@6e9ba6f]]";
      multiKey1.toString();
      stringArray0[1] = "";
      multiKey1.toString();
      stringArray0[2] = "MultiKey[MultiKey[0, , , , java.lang.Object@6e9ba6f], MultiKey[0, , , , java.lang.Object@6e9ba6f], MultiKey[0, , , , java.lang.Object@6e9ba6f]]";
      stringArray0[3] = "MultiKey[MultiKey[0, , , , java.lang.Object@6e9ba6f], MultiKey[0, , , , java.lang.Object@6e9ba6f], MultiKey[0, , , , java.lang.Object@6e9ba6f]]";
      stringArray0[4] = "MultiKey[MultiKey[0, , , , java.lang.Object@6e9ba6f], MultiKey[0, , , , java.lang.Object@6e9ba6f], MultiKey[0, , , , java.lang.Object@6e9ba6f]]";
      stringArray0[5] = "jK[`F?{;U}";
      stringArray0[6] = ",\"cB-";
      stringArray0[7] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.hashCode();
      multiKey2.equals(multiKey1);
      multiKey0.toString();
      multiKey0.equals(",\"cB-");
      multiKey1.size();
      multiKey2.getKeys();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3, multiKey3);
      multiKey4.size();
      Object object1 = multiKey0.getKey(3);
      multiKey2.hashCode();
      String string0 = multiKey2.getKey(3);
      assertFalse(string0.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String string0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      int int0 = 2754;
      // Undeclared exception!
      try { 
        multiKey0.getKey(2754);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2754
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, object1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      int int0 = multiKey1.size();
      assertEquals(3, int0);
  }
}
