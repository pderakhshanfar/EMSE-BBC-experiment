/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:21:57 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "D7C,C2%YEAroY|jpU[");
      multiKey0.equals(multiKey0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "D7C,C2%YEAroY|jpU[", (Object) null, (Object) null, "D7C,C2%YEAroY|jpU[");
      assertEquals(5, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("H6+Q~_o~ h;9GppM`", "D9;g+P\"q0'k4y", "H6+Q~_o~ h;9GppM`", "H6+Q~_o~ h;9GppM`");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "D9;g+P\"q0'k4y";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "D9;g+P\"q0'k4y";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("7c?V-(C~-$T]Get<");
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer((-215));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer1);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "ip8XE*|w%GdDahzG|");
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKey3.hashCode();
      Integer integer3 = new Integer(2);
      Object[] objectArray0 = multiKey3.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey0.toString();
      multiKey0.equals("7c?V-(C~-$T]Get<");
      int int0 = 2;
      Integer integer0 = new Integer(2);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.equals(multiKey1);
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer1 = new Integer(2174);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) int0, (Integer) int0);
      MultiKey<String> multiKey4 = new MultiKey<String>("7c?V-(C~-$T]Get<", "", "MultiKey[2, 2, 2]");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(int0, "MultiKey[2, 2, 2]");
      assertEquals(2, multiKey5.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("H6+Q~_o~ h;9GppM`", "");
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "tx", (Object) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.getKeys();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      MultiKey<Integer> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(477);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-86));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      Object object2 = multiKey0.getKey(0);
      assertEquals(0, object2);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object1, object2, object2);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.hashCode();
      assertTrue(integer2.equals((Object)object2));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<String> multiKey0 = new MultiKey<String>("H5uVqh7?Bw", "H5uVqh7?Bw", "H5uVqh7?Bw", "", "v!6kE+,Ck");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, multiKey1, object0);
      multiKey0.toString();
      multiKey2.toString();
      Object object1 = multiKey2.getKey(0);
      objectArray0[0] = object1;
      Object object2 = new Object();
      objectArray0[1] = object2;
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      Integer integer0 = new Integer(0);
      multiKey1.equals(integer0);
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, object3);
      Object object4 = multiKey0.getKey(0);
      objectArray0[3] = object4;
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", (String) null, (String) null, "org.apache.commons.collections4.keyvalue.MultiKey", "pX{wp$JXr89bi=sD");
      multiKey1.getKey(0);
      objectArray0[4] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      Object object5 = multiKey0.getKey(0);
      objectArray0[5] = object5;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      int int0 = (-598);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-598));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -598
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "]f'+3m&!Fr D\"1uW&";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey1.equals("MultiKey[, ]f'+3m&!Fr D\"1uW&, , , ]");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-5261));
      Integer integer1 = new Integer((-5261));
      Integer integer2 = new Integer((-5261));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-5261, -5261, -5261]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>("f\"]?Ln!L0", "f\"]?Ln!L0", "f\"]?Ln!L0", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "f\"]?Ln!L0", multiKey0, object0, "");
      multiKey1.getKey(1);
      objectArray0[0] = (Object) "f\"]?Ln!L0";
      multiKey0.getKey(1);
      objectArray0[1] = (Object) "f\"]?Ln!L0";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey2.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }
}
