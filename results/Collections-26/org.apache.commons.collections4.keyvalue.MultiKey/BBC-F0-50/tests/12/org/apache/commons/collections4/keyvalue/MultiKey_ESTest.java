/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:27:22 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", "", multiKey0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey1, multiKey0, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, , , MultiKey[, ]], MultiKey[, , , MultiKey[, ]], MultiKey[, ], MultiKey[, ]]", string0);
      
      Object object0 = multiKey3.getKey(1);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[5, 5]", string0);
      
      boolean boolean0 = multiKey0.equals("8iL%DS");
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("8iL%DS", "MultiKey[5, 5]", "l7uq=(&@fP'");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[5, 5]";
      stringArray0[1] = "8iL%DS";
      stringArray0[3] = "MultiKey[5, 5]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      multiKey2.equals(multiKey3);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[]", "MultiKey[]");
      multiKey1.getKeys();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      boolean boolean0 = false;
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1449);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2692);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1449);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2054);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey(1449);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1449
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null, multiKey0);
      multiKeyArray0[1] = multiKey2;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, "", multiKey0, integer1, integer2);
      multiKey3.getKey(1);
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", multiKey1, object0);
      multiKeyArray0[2] = multiKey4;
      Integer integer3 = new Integer(198);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey0, integer3, "");
      Object object1 = multiKey5.getKey(1);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object) null, object1);
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(integer1, multiKey0, multiKey6, integer4);
      multiKeyArray0[3] = multiKey7;
      MultiKey<MultiKey<Object>> multiKey8 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      int int0 = multiKey8.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) "MultiKey[-1, -1, -1, 0, -1]";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object0 = new Object();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer1, integer2, object0, "MultiKey[-1, -1, -1, 0, -1]");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[-1, -1, -1, 0, -1]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.toString();
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[-1, -1, -1, 0, -1]]", string0);
      
      multiKey1.getKeys();
      multiKey3.getKeys();
      Object object1 = multiKey1.getKey(0);
      assertEquals((-1), object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "O.#1D\"&.:<");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.size();
      multiKey0.equals(multiKey1);
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[MultiKey[, , null, O.#1D\"&.:<], MultiKey[, , null, O.#1D\"&.:<], MultiKey[, , null, O.#1D\"&.:<]]", "", "", integer0);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.equals(integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1110
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "Sn;r&`abSD64SQ(!#v1";
      stringArray0[2] = "1\"";
      stringArray0[3] = "";
      stringArray0[4] = "~Zy";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "7i43=>TM;Ek.";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "", multiKey0, "1\"");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, , MultiKey[, Sn;r&`abSD64SQ(!#v1, 1\", , ~Zy, , , 7i43=>TM;Ek., ], 1\"]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.equals("8iL%DS");
      MultiKey<String> multiKey1 = new MultiKey<String>("8iL%DS", (String) null, (String) null);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(3572);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "r)b/-JR ";
      MultiKey<String> multiKey0 = new MultiKey<String>("r)b/-JR ", "", "", ")0{q!");
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>(")0{q!", ")0{q!", "U5>p8,'n{~UY63U7$", "");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
