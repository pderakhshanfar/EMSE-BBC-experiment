/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:38:03 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, "");
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(218);
      Integer integer4 = new Integer(218);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer4, integer3);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1358);
      int int0 = 0;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, objectArray0[1]);
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, (Integer) null, (Integer) null, integer1);
      multiKey2.getKey(3);
      multiKey1.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[null, null]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1358);
      MultiKey<String> multiKey0 = new MultiKey<String>("ix* J?''zb&yJbO", "ix* J?''zb&yJbO", "ix* J?''zb&yJbO", "The array of keys must not be null");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey0.equals(multiKey0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1358);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1358
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", object0, object0, "org.apache.commons.collections4.keyvalue.MultiKey", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(721);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, integer0, integer0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[721, 721, 721, 721, MultiKey[java.lang.Object@e8082b4, 721, 721]]";
      stringArray0[1] = "MultiKey[721, 721, 721, 721, MultiKey[java.lang.Object@e8082b4, 721, 721]]";
      stringArray0[2] = "MultiKey[721, 721, 721, 721, MultiKey[java.lang.Object@e8082b4, 721, 721]]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.toString();
      multiKey3.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, false);
      boolean boolean0 = multiKey4.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey0 = new MultiKey<String>("?I2h/", "DFuU|DIi", "DFuU|DIi", "?I2h/", "DFuU|DIi");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("b+.)AQ#Q8ary,p'", "", "The array of keys must not be null", (String) null, "");
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      int int0 = 1;
      MultiKey<String> multiKey4 = multiKey3.getKey(1);
      objectArray0[2] = (Object) multiKey4;
      multiKey1.getKey(1);
      objectArray0[3] = (Object) "";
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer1 = new Integer(1);
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, false);
      Integer integer2 = new Integer(int0);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer2, integer3, (Integer) int0);
      MultiKey<MultiKey<Integer>> multiKey8 = new MultiKey<MultiKey<Integer>>(multiKey5, multiKey5, multiKey5, multiKey6, multiKey7);
      MultiKey<Integer> multiKey9 = multiKey8.getKey(1);
      objectArray0[4] = (Object) multiKey9;
      MultiKey<Object> multiKey10 = new MultiKey<Object>(objectArray0, false);
      assertEquals(5, multiKey10.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1462));
      integerArray0[0] = integer0;
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1462));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      integerArray0[5] = integer5;
      int int1 = 0;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int1);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      int int2 = multiKey0.size();
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(2087);
      Integer integer1 = new Integer(3370);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[2087, 2087, 2087, 3370]", string0);
      
      multiKey0.equals(integer0);
      multiKey0.hashCode();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[2087, 2087, 2087, 3370]";
      stringArray0[1] = "<k5y4pK";
      stringArray0[2] = "MultiKey[2087, 2087, 2087, 3370]";
      stringArray0[3] = "MultiKey[2087, 2087, 2087, 3370]";
      stringArray0[4] = "MultiKey[2087, 2087, 2087, 3370]";
      stringArray0[5] = "MultiKey[2087, 2087, 2087, 3370]";
      stringArray0[6] = "MultiKey[2087, 2087, 2087, 3370]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("#SPkfnS\"?N;", "#SPkfnS\"?N;", "#SPkfnS\"?N;");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      multiKey0.equals(object0);
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "(nV_znGh+%vH%D", "MultiKey", "b`Fo");
      Integer integer0 = new Integer((-1727));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "b`Fo";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "(nV_znGh+%vH%D";
      stringArray0[4] = "b`Fo";
      stringArray0[5] = "(nV_znGh+%vH%D";
      stringArray0[6] = "";
      stringArray0[7] = "(nV_znGh+%vH%D";
      stringArray0[8] = "MultiKey";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, multiKey1, integer0, multiKey2);
      assertEquals(4, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1142);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1142);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0[0], "MultiKey[MultiKey[1142, 1142], MultiKey[1142, 1142], MultiKey[1142, 1142], MultiKey[1142, 1142], MultiKey[1142, 1142]]");
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1586));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1586
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3021));
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((int) integerArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3021
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
