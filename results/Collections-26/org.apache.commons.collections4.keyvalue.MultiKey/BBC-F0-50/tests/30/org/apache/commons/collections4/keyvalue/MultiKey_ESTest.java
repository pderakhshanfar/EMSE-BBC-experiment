/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:55 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-657));
      Integer integer1 = new Integer((-657));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer2 = new Integer((-9));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer2, integer3, integer3, (Integer) null);
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey0, multiKey0, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey0.toString();
      multiKey3.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[MultiKey[-9, -9, 0, 0, null], MultiKey[-657, -657], MultiKey[-657, -657], MultiKey[-9, -9, 0, 0, null], MultiKey[-9, -9, 0, 0, null]]", "", "");
      multiKey4.toString();
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[-9, -9, 0, 0, null], MultiKey[-657, -657], MultiKey[-657, -657], MultiKey[-9, -9, 0, 0, null], MultiKey[-9, -9, 0, 0, null]], , ]", string0);
      
      multiKey4.hashCode();
      Object object1 = new Object();
      Integer integer4 = new Integer((-657));
      Object object2 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[-9, -9, 0, 0, null]", integer2, "MultiKey[-657, -657]");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0);
      assertFalse(multiKey6.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      multiKey0.getKeys();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 0]", string0);
      
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      Integer integer4 = new Integer(0);
      boolean boolean0 = multiKey1.equals(integer4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKey(1);
      objectArray0[1] = null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = multiKey0.getKey(1);
      assertNull(object4);
      
      objectArray0[5] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.hashCode();
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("t", "f", "", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "t";
      objectArray0[1] = (Object) "t";
      objectArray0[2] = (Object) "t";
      objectArray0[3] = (Object) "f";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "f";
      objectArray0[7] = (Object) "f";
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(objectArray0[5]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-909));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1, integer1);
      multiKey1.toString();
      multiKey2.hashCode();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, object1, object1);
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[null, null, java.lang.Object@3c588c74, java.lang.Object@59824b1c, java.lang.Object@59824b1c]";
      stringArray0[1] = "MultiKey[null, null, java.lang.Object@3c588c74, java.lang.Object@59824b1c, java.lang.Object@59824b1c]";
      boolean boolean0 = true;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey2.getKey(0);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2852));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2852
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2079));
      Integer integer1 = new Integer((-2079));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.hashCode();
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey2.size();
      Object[] objectArray0 = new Object[7];
      Integer integer2 = new Integer((-64));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer2, integer0, integer2);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -646
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(4177);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 79
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "ksAH#*2.fiq+-RS8M7";
      stringArray0[2] = "<^";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "'oc";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer((-276));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, "");
      multiKey2.equals("ksAH#*2.fiq+-RS8M7");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<String> multiKey3 = new MultiKey<String>("!V?8BoGK}WhKq%", "", "ksAH#*2.fiq+-RS8M7");
      multiKeyArray0[4] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(342);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(342);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(342);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey0.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
