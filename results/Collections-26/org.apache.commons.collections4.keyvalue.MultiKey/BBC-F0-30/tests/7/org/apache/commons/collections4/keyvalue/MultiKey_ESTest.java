/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:43 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.size();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3022));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-337));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, multiKey2);
      MultiKey<Integer> multiKey4 = multiKey3.getKey(2);
      assertNull(multiKey4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.size();
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1418);
      Integer integer1 = new Integer(1418);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      Object[] objectArray0 = new Object[3];
      multiKey0.toString();
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer2);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.equals(multiKey0);
      boolean boolean0 = multiKey0.equals(objectArray0[2]);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[1418, 1418, 0]", "MultiKey[1418, 1418, 0]", "SMr*%DuHY<h6]pZQo'");
      multiKey2.toString();
      boolean boolean1 = multiKey1.equals(multiKey2);
      assertFalse(boolean1);
      
      Integer integer3 = new Integer(0);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[0, 0]", "cqk", "MultiKey[1418, 1418, 0]", "");
      multiKey3.getKey(0);
      Object object0 = new Object();
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer3, "MultiKey[0, 0]", object0);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey1, multiKey4, multiKey4, multiKey4);
      multiKey5.getKeys();
      multiKey5.getKeys();
      multiKey3.getKey(0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[1418, 1418, 0], MultiKey[1418, 1418, 0], SMr*%DuHY<h6]pZQo']", string0);
      
      Integer integer4 = new Integer(1418);
      boolean boolean2 = multiKey4.equals(integer4);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1418);
      Integer integer1 = new Integer(1418);
      Integer integer2 = new Integer(1418);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer0);
      Object[] objectArray0 = new Object[3];
      multiKey0.toString();
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer2);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.equals(multiKey0);
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey1.toString();
      String string0 = "SMr*%HY<h6]pZQo'";
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[1418, 1418]", "MultiKey[1418, 1418]", "SMr*%HY<h6]pZQo'");
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      Integer integer3 = new Integer(0);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[1418, 1418]", "cqk", "MultiKey[1418, 1418]", "MultiKey[1418, 1418]");
      // Undeclared exception!
      try { 
        multiKey3.getKey(1418);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1418
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("ZD$bg;.Qw~oI GWm5{", "f)c?IF*=Q2W6**$", "MultiKey[]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "cp{x;as(e2";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "6", "");
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      Object[] objectArray0 = new Object[2];
      multiKey0.toString();
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 0], 0]", string0);
      
      multiKey1.getKey(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[MultiKey[0, 0, 0], 0]";
      stringArray0[1] = "MultiKey[0, 0, 0]";
      stringArray0[2] = "MultiKey[MultiKey[0, 0, 0], 0]";
      stringArray0[3] = "MultiKey[MultiKey[0, 0, 0], 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0[0], "MultiKey[MultiKey[0, 0, 0], 0]", "MultiKey[0, 0, 0]", "MultiKey[MultiKey[0, 0, 0], 0]");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey3);
      boolean boolean0 = multiKey4.equals(objectArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("FI\"7lu;r#:", "FI\"7lu;r#:", "", "", "");
      multiKey0.toString();
      multiKey0.size();
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("T7+4hC", "T7+4hC");
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("T7+4hC", "T7+4hC", object0, "T7+4hC", "T7+4hC");
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      Integer[] integerArray0 = new Integer[7];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      int int1 = (-1);
      Integer integer6 = new Integer((-1));
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[0] = multiKey0;
      Integer integer7 = new Integer(3);
      Integer integer8 = new Integer(int1);
      Integer integer9 = new Integer(int0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer7, (Integer) int0, integer8, integer9);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[2] = multiKey2;
      Integer integer10 = new Integer(int0);
      Integer integer11 = new Integer((-1770));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) int1, integer10, integer11);
      multiKeyArray0[3] = multiKey3;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      Object object0 = new Object();
      boolean boolean0 = multiKey5.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "`<WLAE;Gklw0bb:");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      Object object0 = multiKey1.getKey(0);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = multiKey1.getKey(0);
      objectArray0[2] = object2;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey2.getKeys();
      assertEquals(3, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("}T2>r8r.DYL)jyy", (String) null, "Tz)D l,o", "");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(1163);
      Integer integer1 = new Integer(1163);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = multiKey0.getKey(1);
      objectArray0[0] = (Object) integer2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "}r E]4:");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , }r E]4:]", string0);
      
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.size();
      multiKey0.getKey(1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      Object object2 = new Object();
      boolean boolean0 = multiKey3.equals(object2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "Tv%E@", "1{rd}b|qPfv3G.-f=");
      int int0 = 318;
      // Undeclared exception!
      try { 
        multiKey0.getKey(318);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 318
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
