/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:49:18 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(10);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey2.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      boolean boolean0 = multiKey0.equals(multiKey0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , , , ]", string0);
      
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      boolean boolean1 = multiKey2.equals("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey0.equals(multiKey1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2);
      boolean boolean0 = multiKey3.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("@CecBk?~A@~(", "@CecBk?~A@~(", "@CecBk?~A@~(");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", ">", ">", "");
      MultiKey<String> multiKey1 = new MultiKey<String>(";Yq@t~", ";Yq@t~", "", "][>]eEk{g");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey0, multiKey1);
      multiKey1.toString();
      int int0 = 3;
      MultiKey<String> multiKey3 = multiKey2.getKey(3);
      multiKey3.toString();
      multiKey2.getKeys();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(1169);
      Integer integer2 = new Integer(0);
      multiKey1.toString();
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer2, (Integer) null, integer2);
      multiKey4.toString();
      multiKey4.hashCode();
      multiKey4.toString();
      multiKey2.getKey(3);
      int int1 = new Integer(3);
      multiKey4.hashCode();
      Integer[] integerArray0 = new Integer[10];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = null;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      multiKey5.getKey(int0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object) null, "MultiKey[3, 1169, 0, null, 0]", "MultiKey[;Yq@t~, ;Yq@t~, , ][>]eEk{g]");
      Object object0 = multiKey6.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'%";
      stringArray0[1] = "The array of keys must not be null";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      Integer integer2 = new Integer((-508));
      Object object0 = new Object();
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer3, "The array of keys must not be null", "The array of keys must not be null", "");
      Object object1 = multiKey2.getKey(0);
      Object object2 = new Object();
      Integer integer4 = new Integer(2);
      multiKey2.toString();
      Integer integer5 = new Integer((-2614));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer4, integer5, "");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, object2, multiKey3, object0);
      boolean boolean1 = multiKey1.equals(multiKey4);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", ">", ">", "");
      MultiKey<String> multiKey1 = new MultiKey<String>(";Yq@t~", ";Yq@t~", "", "][>]eEk{g");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey0, multiKey1);
      multiKey1.toString();
      int int0 = 3;
      MultiKey<String> multiKey3 = multiKey2.getKey(3);
      multiKey3.toString();
      multiKey2.getKeys();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(1169);
      Integer integer2 = new Integer(0);
      multiKey1.toString();
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer2, (Integer) null, integer2);
      multiKey4.hashCode();
      multiKey4.toString();
      multiKey2.getKey(3);
      multiKey4.hashCode();
      multiKey4.hashCode();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = null;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey5.getKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("V v=.", "XtE?o<6l!XOotL[", "V v=.", "V v=.");
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, (Integer) null, (Integer) null);
      multiKey1.hashCode();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[7];
      multiKey1.toString();
      multiKey1.toString();
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      multiKey1.toString();
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) multiKey1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "V v=.";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.equals("B\"!KK|m,tA,Esy#M`");
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey0.getKey(0);
      multiKey2.size();
      multiKey2.size();
      multiKey2.equals("MultiKey[null, MultiKey[V v=., XtE?o<6l!XOotL[, V v=., V v=.], MultiKey[V v=., XtE?o<6l!XOotL[, V v=., V v=.], null, MultiKey[0, 0, null, null, null], java.lang.Object@65c77ee7, V v=.]");
      // Undeclared exception!
      try { 
        multiKey2.getKey(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-364));
      Integer integer1 = new Integer((-364));
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", integer0, integer1);
      multiKey1.size();
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(842);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 842
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(570);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 570
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Zp+=.z;(Y", "Zp+=.z;(Y", "R>V-|Rs|Dm3B", "R>V-|Rs|Dm3B", "o\"a");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("o\"a", "3e+Z(!Un_GHCL?");
      int int0 = 5;
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object object0 = null;
      Integer integer1 = new Integer((-1));
      Object object1 = new Object();
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", (String) null);
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, multiKey1, object2);
      Object object3 = multiKey2.getKey(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, object3, (Object) null, object1);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
