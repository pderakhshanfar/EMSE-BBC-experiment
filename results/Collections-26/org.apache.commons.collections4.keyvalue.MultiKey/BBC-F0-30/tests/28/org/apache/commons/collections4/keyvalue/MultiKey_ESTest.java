/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:53:56 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" d{'gh%^3", " d{'gh%^3", " d{'gh%^3", " d{'gh%^3");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = " d{'gh%^3";
      stringArray0[3] = " d{'gh%^3";
      stringArray0[4] = " d{'gh%^3";
      stringArray0[5] = " d{'gh%^3";
      stringArray0[6] = " d{'gh%^3";
      stringArray0[7] = " d{'gh%^3";
      stringArray0[8] = " d{'gh%^3";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "", "", "", "The array of keys must not be null");
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "d9Abx14T[$Uj3Z_:";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "u+oUB&";
      stringArray0[1] = "#`R;%~`Z(^ZnU";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String string0 = multiKey0.getKey(0);
      assertEquals("u+oUB&", string0);
      
      Integer integer0 = new Integer(1570);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, integer1, "");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.getKeys();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      String string1 = multiKey3.toString();
      assertEquals("MultiKey[0, 1570, 0]", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "TA";
      stringArray0[4] = "TA";
      stringArray0[5] = "TA";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, stringArray0[1], "TA", (String) null);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, stringArray0[1], "TA");
      assertEquals(3, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(844);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(844);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-5140));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(844);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, (String) null, (String) null, "}eX6", "8g|gbA01&bn&E");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-674));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey1.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer((-1342));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1342));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1342
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "P", "");
      Integer integer0 = new Integer(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, integer0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[1] = multiKey2;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "P";
      stringArray0[3] = "P";
      stringArray0[4] = "UQ/yQLbYdG6[l";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.getKey(2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, "P", multiKey2);
      multiKeyArray0[2] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      assertEquals(3, multiKey5.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      int int0 = (-312);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-312));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -312
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "_+SW";
      stringArray0[1] = "-HU}h]v&emX/@_`8^Lq";
      stringArray0[2] = "Y{=[F%LhKMSCD^rO5f";
      stringArray0[3] = "9m1T8Q";
      stringArray0[4] = "";
      stringArray0[5] = "V";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey2.toString();
      multiKey2.size();
      Object object0 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>("9m1T8Q", "");
      MultiKey<Object> multiKey4 = new MultiKey<Object>("-HU}h]v&emX/@_`8^Lq", object0, multiKey3, "");
      int int0 = multiKey4.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "MultiKey", "MultiKey", "");
      multiKey0.toString();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{UP`vfxj[8H+p?";
      stringArray0[1] = "SjtAM*.D!=D3%9!-uP";
      stringArray0[2] = "";
      stringArray0[3] = "t<4";
      stringArray0[4] = "bDZ";
      stringArray0[5] = "ZZK?IXbiU]^+D?:*";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, "", "");
      assertEquals(4, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ". Xv8N]4i``cz:J";
      stringArray0[1] = "49*u 1A3~tzS!CO{Ke";
      String string0 = "GH\\EI;*e Qiu";
      stringArray0[2] = "GHEI;*e Qiu";
      stringArray0[3] = "U=(ccx cx";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKeyArray0[0] = multiKey2;
      String string1 = "";
      MultiKey<String> multiKey3 = new MultiKey<String>("", "~B");
      MultiKey<Object> multiKey4 = new MultiKey<Object>("49*u 1A3~tzS!CO{Ke", multiKey3);
      multiKeyArray0[1] = multiKey4;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) "GHEI;*e Qiu";
      objectArray0[2] = (Object) "U=(ccx cx";
      objectArray0[3] = (Object) multiKey3;
      objectArray0[4] = (Object) "MultiKey[. Xv8N]4i``cz:J, 49*u 1A3~tzS!CO{Ke, GHEI;*e Qiu, U=(ccx cx]";
      objectArray0[5] = (Object) "~B";
      objectArray0[6] = (Object) multiKey4;
      objectArray0[7] = (Object) "49*u 1A3~tzS!CO{Ke";
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey5.getKey(1251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1251
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
