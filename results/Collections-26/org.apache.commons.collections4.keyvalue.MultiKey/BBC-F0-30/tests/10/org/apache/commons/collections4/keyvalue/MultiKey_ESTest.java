/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:46:31 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1976);
      Integer integer1 = new Integer(2);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey0 = new MultiKey<String>("qq@b?N+J2%us9!", "qq@b?N+J2%us9!", "qq@b?N+J2%us9!", "qq@b?N+J2%us9!");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "AXSSvs!S";
      stringArray0[1] = "qq@b?N+J2%us9!";
      stringArray0[2] = "qq@b?N+J2%us9!";
      stringArray0[3] = "qq@b?N+J2%us9!";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("AXSSvs!S", "", "", "qq@b?N+J2%us9!", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Integer integer2 = new Integer(2);
      boolean boolean0 = multiKey3.equals(integer2);
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      multiKeyArray0[8] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKey1.equals(multiKey2);
      multiKey2.getKeys();
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.getKey(0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey1.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(3420);
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "*dDt8Y?j}Q%1^i|%w";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, object0, multiKey1);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, *dDt8Y?j}Q%1^i|%w]", string0);
      
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey0;
      Integer integer2 = new Integer(4);
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer2, "MultiKey[3420, 4]", object2);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer2, "MultiKey[3420, 4]", "", object1, multiKey4);
      multiKeyArray0[4] = multiKey5;
      multiKeyArray0[5] = multiKey0;
      MultiKey<String> multiKey6 = new MultiKey<String>("i[}(", "The array of keys must not be null", "The array of keys must not be null", "", "");
      multiKey6.getKey(4);
      boolean boolean1 = multiKey5.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("1", "1", "-q/+tX", "", "KrVN,Pf");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "MultiKey[1, 1, -q/+tX, , KrVN,Pf]", "MultiKey[1, 1, -q/+tX, , KrVN,Pf]");
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      Object object0 = new Object();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.equals(object0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey3.size();
      multiKey0.hashCode();
      // Undeclared exception!
      try { 
        multiKey1.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, (Object) null, (Object) null);
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-4806));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKeyArray0[0] = multiKey1;
      Integer integer4 = new Integer((-4806));
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer4, integer2, integer5, integer6);
      multiKeyArray0[1] = multiKey2;
      int int0 = (-2863);
      Integer integer7 = new Integer((-2863));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer7, integer7);
      multiKeyArray0[2] = multiKey3;
      Integer integer8 = new Integer(1);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer8, integer7);
      multiKeyArray0[3] = multiKey4;
      Integer integer9 = new Integer(3038);
      Integer integer10 = new Integer((-4806));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer7, integer9, integer10, integer8, integer5);
      multiKeyArray0[4] = multiKey5;
      MultiKey<Integer> multiKey6 = null;
      try {
        multiKey6 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("Hh%0M.0-7#", "");
      String string0 = multiKey1.getKey(0);
      assertEquals("Hh%0M.0-7#", string0);
      
      multiKey1.getKey(1);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      String string1 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[5, null], MultiKey[5, null]]", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("N'MT:!|4)7", "t.])f4xpG2=O'Ln+97F", "dBO%h`Ku?Tx1pj9viQ", "H3Y^vPf", "");
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-4578));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4578));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4578
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      Integer integer0 = new Integer((-1168));
      multiKey0.toString();
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, object0, "");
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey2, object0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      String string0 = multiKey3.toString();
      Integer integer1 = new Integer(0);
      multiKey3.equals(integer1);
      multiKey3.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey3;
      multiKeyArray0[4] = multiKey3;
      multiKeyArray0[5] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      String string1 = multiKey4.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("?", "org.apache.commons.collections4.keyvalue.MultiKey", "ly?Cle5'2cB", "", "bcf|9R^,gJ,1LTHC:");
      Object object0 = new Object();
      multiKey0.equals(object0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("r{tmec", "_4ec", "R`e:MxJxP48{");
      MultiKey<String> multiKey1 = new MultiKey<String>("r{tmec", "Z9*p`Dcf/|");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey1, multiKey0, multiKey0);
      boolean boolean0 = multiKey2.equals("R`e:MxJxP48{");
      assertFalse(boolean0);
  }
}
