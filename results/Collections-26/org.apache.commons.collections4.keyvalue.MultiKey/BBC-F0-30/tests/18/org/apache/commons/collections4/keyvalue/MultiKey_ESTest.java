/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:24 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "</Cv}9IYY2AX";
      stringArray0[1] = "</Cv}9IYY2AX";
      stringArray0[2] = "99BnNVK@w";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.getKey(0);
      Integer integer2 = new Integer((-2288));
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", integer2);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey4.getKey(0);
      assertEquals(7, object0);
      
      multiKey3.toString();
      boolean boolean0 = multiKey3.equals(multiKey3);
      boolean boolean1 = multiKey4.equals(multiKey3);
      assertFalse(boolean1 == boolean0);
      
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[, -2288]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("0>qizmZ,^n8", "", "0>qizmZ,^n8", (String) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "0>qizmZ,^n8";
      objectArray0[1] = (Object) "0>qizmZ,^n8";
      objectArray0[2] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey1.equals(multiKey2);
      Integer integer0 = new Integer(20);
      Integer integer1 = new Integer(12);
      Integer integer2 = new Integer(20);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer2);
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      multiKey0.toString();
      stringArray0[1] = "ld\"Q]ZQ:VuIGF_5\"";
      stringArray0[2] = "6\f.poSP_!*,^.R";
      stringArray0[3] = "eV< o6qwz%SYL";
      stringArray0[4] = "MultiKey";
      multiKey0.toString();
      stringArray0[5] = "^*$n[Y@ZGs^FYO}|mZ*";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[0];
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.size();
      multiKey2.size();
      multiKey2.equals((Object) null);
      multiKey0.toString();
      boolean boolean0 = multiKey1.equals("eV< o6qwz%SYL");
      assertFalse(boolean0);
      
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "");
      Integer integer0 = new Integer((-1148));
      Integer integer1 = new Integer(2619);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, (Object) null, (Object) null, "");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[-1148, -1148, -1148, 2619], -1148, null, null, ]", string0);
      
      multiKey2.hashCode();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey1.size();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = null;
      objectArray0[8] = null;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.getKey(4);
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = null;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer[] integerArray0 = new Integer[9];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-720));
      integerArray0[3] = integer3;
      int int1 = 0;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-720));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int1);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer integer9 = multiKey0.getKey(0);
      assertEquals(1, (int)integer9);
      
      objectArray0[0] = (Object) integer9;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0[6], (Object) null, integer7);
      multiKey1.getKey(int0);
      objectArray0[2] = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer2, (Object) null, multiKey3);
      boolean boolean0 = multiKey2.equals(multiKey4);
      assertTrue(multiKey3.equals((Object)multiKey0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E[*BaXb;%TmonbXP*";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKeys();
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.toString();
      int int0 = 502;
      // Undeclared exception!
      try { 
        multiKey1.getKey(502);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 502
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/kn";
      stringArray0[1] = "`NXY;K^";
      stringArray0[2] = "";
      stringArray0[3] = ":Uw._E)cAdF!l-";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MultiKey", "MultiKey", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.hashCode();
      multiKey0.size();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      int int0 = (-1121);
      Integer integer2 = new Integer((-1121));
      Integer integer3 = new Integer(450);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      // Undeclared exception!
      try { 
        multiKey1.getKey(742);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 742
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(979);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer1, multiKey1);
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null", "", ".~uKzP8 -Y6dOp=+");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("w]T%{2H9)b&X7Hq", "", "w]T%{2H9)b&X7Hq", "", "r~+Ze");
      multiKeyArray0[1] = multiKey1;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = ".~uKzP8 -Y6dOp=+";
      stringArray0[3] = "";
      stringArray0[4] = "r~+Ze";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("o.I/ci+$", ")oos{", ".~uKzP8 -Y6dOp=+");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "MultiKey", ":Q^&BG-XtKLv9r");
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      assertEquals(5, multiKey5.size());
  }
}
