/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:48:59 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "org.apache.commons.collections4.keyvalue.MultiKey", (String) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object object1 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>("|OTMk", "", "M#X+*<,", "M#X+*<,", "|OTMk");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, object0, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, multiKey2);
      multiKey0.toString();
      multiKey1.toString();
      multiKey3.size();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3);
      multiKey4.toString();
      boolean boolean0 = multiKey4.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[|OTMk, , M#X+*<,, M#X+*<,, |OTMk]", string0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2);
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, false);
      Integer integer1 = new Integer(2);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integerArray0);
      multiKey6.getKey(2);
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object) null, multiKey2, multiKey5, integer1, (Object) null);
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "hn ,w}r!M*";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "hn ,w}r!M*", "BDW*~N0y7.B~$rK");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey1, "L(P-puK<t-As?", multiKey2);
      multiKey3.toString();
      multiKey2.equals(multiKey0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3);
      multiKey3.toString();
      multiKey4.toString();
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[hn ,w}r!M*, ], MultiKey[null, MultiKey[, hn ,w}r!M*, BDW*~N0y7.B~$rK], L(P-puK<t-As?, MultiKey[hn ,w}r!M*, ]]]", string0);
      
      boolean boolean0 = multiKey4.equals(multiKey0);
      assertFalse(boolean0);
      
      multiKey3.hashCode();
      multiKey3.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 299;
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(299);
      multiKey0.toString();
      multiKey0.equals(integer0);
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.equals((Object) null);
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, object0, (Object) null, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(299);
      multiKey0.toString();
      multiKey0.equals(integer0);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("5hI1B?YB@G7wikzv", "MultiKey[]");
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(299);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 299
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("\" lbp-uOh", integer0, integer0, multiKey0, "\" lbp-uOh");
      multiKey1.toString();
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("\" lbp-uOh", "\" lbp-uOh", (String) null, "\" lbp-uOh", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1, multiKey0);
      multiKey3.getKeys();
      multiKey2.size();
      multiKey1.size();
      multiKey0.size();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKey(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[0]", "MultiKey[0]", integer1, int0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey1.hashCode();
      multiKey0.getKey(0);
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[0]", "MultiKey[0]", "MultiKey[0]", "MultiKey[MultiKey[MultiKey[0], MultiKey[0], 0, 0], MultiKey[MultiKey[0], MultiKey[0], 0, 0], MultiKey[MultiKey[0], MultiKey[0], 0, 0]]", (String) null);
      multiKey3.toString();
      multiKey3.equals("MultiKey[0]");
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey4.getKey(142);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 142
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1qEW?!kR";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.size();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      Integer[] integerArray0 = new Integer[1];
      multiKey1.toString();
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals(integer0);
      multiKey0.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String> multiKey0 = new MultiKey<String>("QpB.WT", "", "", "QpB.WT", "QpB.WT");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      int int0 = 0;
      MultiKey<String> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, multiKey1, multiKey3);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-545));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -545
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-63));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "lW.$?U~(45");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, (MultiKey<String>) null, multiKey0, multiKey0);
      assertEquals(4, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = (-1789);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1789));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1789
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
