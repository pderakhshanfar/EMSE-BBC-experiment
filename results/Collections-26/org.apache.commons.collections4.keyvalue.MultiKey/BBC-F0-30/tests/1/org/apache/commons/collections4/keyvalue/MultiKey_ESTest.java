/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:18 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("0", "ReTnl<$x  <?2F5", "", "ReTnl<$x  <?2F5", "ReTnl<$x  <?2F5");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "5P5KTFz$MW*D|:@");
      MultiKey<String> multiKey3 = new MultiKey<String>("A5%\"", "");
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey1.size();
      int int1 = multiKey1.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("~7tLcJhBP;{{^n>0*tN", "", "MultiKey", "MultiKey", "");
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, "", object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey2.toString();
      multiKey1.hashCode();
      Integer integer1 = new Integer(3283);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.getKey(0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3, multiKey3);
      multiKey4.hashCode();
      MultiKey<String> multiKey5 = new MultiKey<String>("", "Ev4O{DhW;t/(qc/JO<q");
      // Undeclared exception!
      try { 
        multiKey5.getKey(3283);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3283
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~7tLcJhBP;{{^n>0*tN";
      stringArray0[1] = "MultiKey[]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.size();
      multiKey0.hashCode();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", object0, object1, "~7tLcJhBP;{{^n>0*tN");
      multiKey2.hashCode();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "MultiKey[]");
      boolean boolean0 = multiKey3.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[, , ]";
      stringArray0[2] = "MultiKey[, , ]";
      stringArray0[3] = "MultiKey[, , ]";
      stringArray0[4] = "";
      stringArray0[5] = "MultiKey[, , ]";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, MultiKey[, , ], MultiKey[, , ], MultiKey[, , ], , MultiKey[, , ], , ]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1107);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-3186));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1107);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer8 = new Integer((-1278));
      Integer integer9 = new Integer((-4830));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer8, integer9);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey1);
      MultiKey<Integer> multiKey3 = multiKey2.getKey(0);
      objectArray0[0] = (Object) multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      assertEquals(1, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("Z3*4", "MultiKey", "MultiKey", "", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", "MultiKey", integer0, object0, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, multiKey3, multiKey1, "");
      multiKey4.toString();
      multiKey3.equals(multiKey4);
      multiKey1.getKey(0);
      multiKey3.hashCode();
      int int0 = multiKey4.size();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "m", "");
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("R4A=Kvbj", "R4A=Kvbj", "R4A=Kvbj", "");
      int int0 = (-807);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-807));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -807
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "", "", object0);
      String string0 = multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(769);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[java.lang.Object@57b0f115, java.lang.Object@57b0f115, , , java.lang.Object@57b0f115]", "", "", "B5P`_qk@*Yce", "");
      multiKeyArray0[1] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[2] = multiKey4;
      multiKeyArray0[3] = multiKey1;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      String string1 = multiKey5.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1023);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1023
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
