/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("%aD }W", "", "{0*DG\"Dg2.w}lj+(", "", "_U\"F}0'");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[%aD }W, , {0*DG\"Dg2.w}lj+(, , _U\"F}0']", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "MultiKey", "");
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      Object object0 = new Object();
      multiKey3.equals(multiKey1);
      multiKey1.toString();
      Integer integer0 = new Integer((-3416));
      Integer integer1 = new Integer((-3416));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, (Integer) null, integer1);
      int int0 = multiKey4.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1315);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "|7L)r#";
      objectArray0[1] = (Object) "|7L)r#";
      objectArray0[2] = (Object) "|7L)r#";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, objectArray0[1]);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0);
      Integer integer1 = new Integer(1315);
      Integer integer2 = new Integer(1315);
      Integer integer3 = new Integer((-1595));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer2, integer3);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[1315, 1315, -1595]", string0);
      
      Integer integer4 = new Integer(4082);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[1315, 1315, -1595]", "org.apache.commons.collections4.keyvalue.MultiKey");
      Integer integer5 = new Integer(1);
      Object object0 = new Object();
      boolean boolean1 = multiKey3.equals(object0);
      assertFalse(boolean1);
      
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0);
      multiKey0.equals(multiKey5);
      assertFalse(multiKey5.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" S:2PZAdsYh:.#MWtiC", " S:2PZAdsYh:.#MWtiC");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer integer0 = new Integer(2479);
      Integer integer1 = new Integer(2479);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, object0, (Object) null, object0, integer1);
      multiKey2.toString();
      Integer integer2 = new Integer(2479);
      Object object1 = new Object();
      boolean boolean0 = multiKey2.equals(object1);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("", "<", "", "");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "MultiKey[2479, java.lang.Object@67c23fe2, null, java.lang.Object@67c23fe2, 2479]";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey[2479, java.lang.Object@67c23fe2, null, java.lang.Object@67c23fe2, 2479]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      String string0 = multiKey4.getKey(1);
      assertNull(string0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = null;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey5);
      multiKey6.toString();
      String string1 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[2479, 2479, null, 2479], MultiKey[2479, 2479, null, 2479], MultiKey[null]]", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.equals(object1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("MultiKey[java.lang.Object@345188dd, java.lang.Object@7445ece9]");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, "MultiKey[java.lang.Object@345188dd, java.lang.Object@7445ece9]", "", "^d&$L_$4qi|V");
      String string1 = multiKey2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("}", "}", "}", "}");
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("7", "`?z~KJLJ;:mQ\f'", "(92#)");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[7, `?z~KJLJ;:mQ\f', (92#)]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" S:2PZAdsYh:.#MWtik", " S:2PZAdsYh:.#MWtik", "$FG@)-%_@][Q");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(" S:2PZAdsYh:.#MWtik", " S:2PZAdsYh:.#MWtik", " S:2PZAdsYh:.#MWtik", "$FG@)-%_@][Q");
      assertEquals(4, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(592);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.equals(integerArray0[0]);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[592, 0]", string0);
      
      multiKey2.hashCode();
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "MY-f");
      Object object0 = new Object();
      Object object1 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MY-f";
      stringArray0[1] = "";
      stringArray0[2] = "MY-f";
      stringArray0[3] = "MY-f";
      stringArray0[4] = "";
      stringArray0[5] = "n,0%X";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey";
      stringArray0[8] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = (-1816);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1816));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1816
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
