/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:49 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1523));
      Integer integer2 = new Integer(2313);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer0);
      Integer integer4 = multiKey0.getKey(0);
      assertEquals(0, (int)integer4);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, -1523, 2313, 0, 0]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("S\u0001*Y", "S\u0001*Y", (String) null, (String) null);
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer((int) integer5);
      Integer integer7 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer6, integer1, integer7);
      Object object0 = new Object();
      Integer integer8 = new Integer(5);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer7, integer8);
      assertFalse(multiKey3.equals((Object)multiKey2));
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object1 = multiKey4.getKey(1);
      boolean boolean0 = multiKey1.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" ", " ", " ", " ");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(" ", multiKey0, multiKey0, " ");
      multiKey1.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      multiKey2.getKeys();
      // Undeclared exception!
      try { 
        multiKey1.getKey(802);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 802
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1523));
      Integer integer2 = new Integer(2313);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer0);
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("S\u0001*Y", "S\u0001*Y", (String) null, (String) null);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer((int) integer4);
      Integer integer6 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer5, integer1, integer6);
      Object object0 = new Object();
      Integer integer7 = new Integer(8);
      Integer integer8 = new Integer(5);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer7, integer8);
      multiKey2.equals((Object) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey4.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1698;
      Integer integer0 = new Integer(1698);
      Integer integer1 = new Integer(1698);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer0, integer0);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "p:\u0001dIf/<A9?~C", (String) null);
      Integer integer0 = new Integer(13);
      Integer integer1 = new Integer(13);
      Integer integer2 = new Integer((-201));
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer3, integer3, integer4, (Integer) null);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey2.equals(multiKey3);
      multiKey1.size();
      boolean boolean1 = multiKey3.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, p:\u0001dIf/<A9?~C, null]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(570);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = new Integer(963);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer0, integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.getKeys();
      multiKey1.hashCode();
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-975));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.size();
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("=k 9", "=k 9");
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(4428);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "", integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[null, , 4428, 4428]";
      stringArray0[2] = "MultiKey[null, , 4428, 4428]";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "MultiKey[null, , 4428, 4428]";
      stringArray0[6] = "MultiKey[null, , 4428, 4428]";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("j!!r5Y z$M1yj*?$", "MultiKey[null, , 4428, 4428]");
      multiKey2.equals(multiKey3);
      multiKey0.equals(multiKey3);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "s=Jt8'nr\"ZNbbmN?h";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "~HhDr#4p7\":qf05";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>(">k5CnxG}_qwskU9", "-`)y", "s=Jt8'nr\"ZNbbmN?h");
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String> multiKey3 = multiKey2.getKey(0);
      assertEquals(5, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = multiKey1.getKey(0);
      objectArray0[2] = (Object) integer1;
      Integer integer2 = multiKey1.getKey(0);
      objectArray0[3] = (Object) integer2;
      multiKey1.toString();
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object2, objectArray0[3]);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey2, multiKey2, multiKey0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(1056);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1056
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(186);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey1.equals(integer4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1602);
      Integer integer1 = new Integer(1602);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer2 = new Integer(1602);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer1, "MultiKey[1602, 1602, 1602, 1602]", integer2);
      Object[] objectArray1 = multiKey2.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("q~x<h~>?", "q~x<h~>?", "q~x<h~>?", "", "");
      Object object0 = new Object();
      Integer integer0 = new Integer(296);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "q~x<h~>?", "q~x<h~>?");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-343));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -343
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = object0;
      objectArray0[8] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1351);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1351
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(175);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2431));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(6, integerArray1.length);
  }
}
