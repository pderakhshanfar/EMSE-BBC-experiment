/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:21 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "", "MultiKey[]");
      String string0 = multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.size();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey1.toString();
      String string1 = multiKey1.getKey(0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "The array of keys must not be null";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "The array of keys must not be null";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "The array of keys must not be null";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      boolean boolean0 = multiKey0.equals(objectArray0[1]);
      Integer integer0 = new Integer(14);
      boolean boolean1 = multiKey1.equals(integer0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "mK2hU+3Pq-Hf|%Qd#iq", "mK2hU+3Pq-Hf|%Qd#iq", "");
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer0, integer1, integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>("NB+:\"GrlMl}Jf]s?66", "_X035G1)%Y:pSDo]", "}fy:*V6H M9");
      multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      Integer integer3 = new Integer(4);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer3);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey4.getKey(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "mK2hU+3Pq-Hf|%Qd#iq", "NB+:\"GrlMl}Jf]s?66", "NB+:\"GrlMl}Jf]s?66", "org.apache.commons.collections4.keyvalue.MultiKey");
      Object object0 = new Object();
      multiKey5.equals(object0);
      multiKey5.size();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      Integer integer0 = new Integer(10);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, objectArray0[0], multiKey2, multiKey0, multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1, multiKey2, multiKey3);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey5);
      Object object0 = new Object();
      MultiKey<Object> multiKey7 = new MultiKey<Object>(objectArray0);
      multiKey5.equals(multiKey7);
      assertFalse(multiKey7.equals((Object)multiKey3));
      
      MultiKey<String> multiKey8 = new MultiKey<String>("", "}M,y/zS;E%oB0==/{'", "w.*ZyM$s|");
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKey8, multiKey8);
      boolean boolean0 = multiKey9.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("pM'+8#:i<+U4|c!", "pM'+8#:i<+U4|c!", "'^5'=q=");
      multiKey0.toString();
      multiKey0.size();
      boolean boolean0 = multiKey0.equals("'^5'=q=");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer2);
      multiKey1.toString();
      boolean boolean1 = multiKey1.equals(multiKey0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "'^5'=q=";
      objectArray0[1] = (Object) "pM'+8#:i<+U4|c!";
      objectArray0[2] = (Object) "'^5'=q=";
      objectArray0[3] = (Object) "pM'+8#:i<+U4|c!";
      objectArray0[4] = (Object) integer1;
      objectArray0[5] = (Object) multiKey1;
      objectArray0[6] = (Object) "'^5'=q=";
      objectArray0[7] = (Object) "'^5'=q=";
      objectArray0[8] = (Object) "'^5'=q=";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey['^5'=q=, pM'+8#:i<+U4|c!, '^5'=q=, pM'+8#:i<+U4|c!, 1, MultiKey[3, 3, 1, 3, 3], '^5'=q=, '^5'=q=, '^5'=q=], MultiKey['^5'=q=, pM'+8#:i<+U4|c!, '^5'=q=, pM'+8#:i<+U4|c!, 1, MultiKey[3, 3, 1, 3, 3], '^5'=q=, '^5'=q=, '^5'=q=], MultiKey['^5'=q=, pM'+8#:i<+U4|c!, '^5'=q=, pM'+8#:i<+U4|c!, 1, MultiKey[3, 3, 1, 3, 3], '^5'=q=, '^5'=q=, '^5'=q=], MultiKey['^5'=q=, pM'+8#:i<+U4|c!, '^5'=q=, pM'+8#:i<+U4|c!, 1, MultiKey[3, 3, 1, 3, 3], '^5'=q=, '^5'=q=, '^5'=q=]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[0] = multiKey0;
      Integer integer1 = new Integer((-1253));
      Integer integer2 = new Integer(int0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) int0, integer0, integer1, integer2);
      multiKeyArray0[1] = multiKey1;
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(int0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, (Integer) int0, integer4);
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      assertEquals(3, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("W|", "W|", "W|");
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      Integer integer0 = new Integer(2323);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, integer0, integer0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey1);
      multiKey2.hashCode();
      multiKey2.size();
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(3396);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3396
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("rwUwMu0*7P?1!M", "rwUwMu0*7P?1!M");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(1);
      multiKey0.size();
      multiKey0.getKey(0);
      String string0 = null;
      String string1 = "<4%Gf1W4";
      MultiKey<Object> multiKey1 = new MultiKey<Object>("<4%Gf1W4", "<4%Gf1W4");
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("<4%Gf1W4", "", "W.(yXE]S7");
      multiKey2.getKey(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("<4%Gf1W4", "MultiKey[rwUwMu0*7P?1!M, rwUwMu0*7P?1!M]", "", "rwUwMu0*7P?1!M");
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-313));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -313
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[0]";
      stringArray0[1] = "MultiKey[0]";
      stringArray0[2] = "MultiKey[0]";
      stringArray0[3] = "MultiKey[0]";
      stringArray0[4] = "MultiKey[0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.size();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.getKey(0);
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
