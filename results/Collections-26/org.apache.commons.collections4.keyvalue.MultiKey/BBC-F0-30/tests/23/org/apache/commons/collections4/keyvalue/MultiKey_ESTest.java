/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:55 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, "b2yF6");
      MultiKey<String> multiKey2 = new MultiKey<String>("b2yF6", "b2yF6");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, multiKey2, multiKey0, multiKey2);
      multiKey3.toString();
      multiKey2.equals(multiKey2);
      int int0 = multiKey2.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(14);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1513));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      multiKey3.size();
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey0.equals(multiKey4);
      assertFalse(multiKey4.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      Object object0 = new Object();
      int int0 = 3;
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer((-1394));
      Integer[] integerArray0 = new Integer[4];
      multiKey0.toString();
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.getKeys();
      Integer integer2 = new Integer(int0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("b2yF6", object0, int0, multiKey2, integer2);
      Integer integer3 = new Integer(int0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "b2yF6";
      stringArray0[1] = "MultiKey[MultiKey[3, 3, -1394, 3], MultiKey[3, 3, -1394, 3]]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "b2yF6";
      stringArray0[4] = "MultiKey[MultiKey[3, 3, -1394, 3], MultiKey[3, 3, -1394, 3]]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer3, "MultiKey[MultiKey[3, 3, -1394, 3], MultiKey[3, 3, -1394, 3]]", multiKey4, object1, integer3);
      multiKey5.equals("MultiKey[]");
      // Undeclared exception!
      try { 
        multiKey4.getKey((-1960));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1960
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.size();
      Object object0 = new Object();
      Integer integer2 = new Integer(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, "", object0, integer2, multiKey0);
      multiKey1.getKey(2);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(168);
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "MultiKey", object1, (Object) null);
      multiKey0.getKey(3);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("\"E*6E!t", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.equals(multiKey1);
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      multiKey0.toString();
      objectArray0[0] = (Object) integer0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      Integer integer3 = new Integer(797);
      multiKey0.equals(integer3);
      multiKey2.getKeys();
      multiKey2.size();
      int int0 = multiKey1.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null", "Q =$v7j/dBH3-d", "$).(|4EW{\"I,'9r^bjk", "$).(|4EW{\"I,'9r^bjk");
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("**62P1==rpt@4*;P~", (String) null, "**62P1==rpt@4*;P~");
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[**62P1==rpt@4*;P~, null, **62P1==rpt@4*;P~]", multiKey0, (Object) null, integer0);
      multiKey1.getKey(0);
      Integer integer1 = new Integer((-70));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey3);
      multiKey4.getKeys();
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(2224);
      String string0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, (Object) null, (Object) null, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 793;
      // Undeclared exception!
      try { 
        multiKey0.getKey(793);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 793
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1981);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2625);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[2, 2, 0, 0, 1981, 2625]", string0);
      
      boolean boolean0 = multiKey0.equals(integerArray0[5]);
      assertFalse(boolean0);
  }
}
