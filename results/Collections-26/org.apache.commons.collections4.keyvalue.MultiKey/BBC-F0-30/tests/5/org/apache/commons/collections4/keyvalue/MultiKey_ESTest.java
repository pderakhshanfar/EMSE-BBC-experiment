/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:34 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("<", multiKey0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) "<";
      objectArray0[2] = (Object) "<";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      multiKey1.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "?H";
      stringArray0[1] = "aGIbO";
      stringArray0[2] = "h\"";
      stringArray0[3] = "MultiKey";
      stringArray0[4] = "0ga(F@nX";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[?H, aGIbO, h\", MultiKey, 0ga(F@nX]", "?H", object0, multiKey0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.size();
      multiKey2.toString();
      multiKey1.equals("");
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[4];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey3.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(1126);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer((-815));
      Integer integer2 = new Integer((-815));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, (Object) null, integer1, multiKey0);
      multiKey2.size();
      int int0 = multiKey2.size();
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey0.toString();
      multiKey3.toString();
      multiKey0.toString();
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
      
      multiKey3.toString();
      Integer integer3 = multiKey0.getKey(0);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer3;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[0] = multiKey4;
      multiKeyArray0[1] = multiKey1;
      Integer integer4 = new Integer((-833));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer3, integerArray0[2], integer4, integerArray0[2]);
      multiKeyArray0[2] = multiKey5;
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[1126, 1126, -815], MultiKey[1126, 1126, -815, -815, -815], MultiKey[1126, -815, -833, -815]]", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "GP]V/6cBqC9-c<3sh", "");
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "iRPlll+D?Tr 4yu", "", "", "GP]V/6cBqC9-c<3sh");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-5280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5280
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "\"mt40Fp");
      multiKey0.getKey(0);
      objectArray0[1] = (Object) null;
      multiKey0.getKey(0);
      objectArray0[2] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKey(0);
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      Object object1 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[java.lang.Object@26bb2ebd, java.lang.Object@26bb2ebd, java.lang.Object@26bb2ebd, java.lang.Object@26bb2ebd]";
      stringArray0[1] = "MultiKey[MultiKey[java.lang.Object@26bb2ebd, java.lang.Object@26bb2ebd, java.lang.Object@26bb2ebd, java.lang.Object@26bb2ebd], MultiKey[java.lang.Object@26bb2ebd, java.lang.Object@26bb2ebd, java.lang.Object@26bb2ebd, java.lang.Object@26bb2ebd]]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      Object object2 = null;
      Object[] objectArray0 = new Object[2];
      Object object3 = new Object();
      multiKey2.toString();
      objectArray0[0] = object3;
      objectArray0[1] = (Object) multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      int int0 = 959;
      multiKey0.toString();
      multiKey3.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(959);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 959
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = ";$C(r!F32>3Fv7";
      String string0 = "#yv@NYzTN+";
      stringArray0[2] = "#yv@NYzTN+";
      stringArray0[3] = ";Gi=A%gPCTU[9{pu";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1568);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1568
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
