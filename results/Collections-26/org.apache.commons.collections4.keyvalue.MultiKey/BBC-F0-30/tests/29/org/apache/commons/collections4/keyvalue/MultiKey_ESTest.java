/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:54:35 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, "");
      Object object0 = multiKey1.getKey(1);
      multiKey0.equals(object0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1165);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-212));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey((int) integerArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -212
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("0ifRhQ&s5XLz8ooRJ", "0ifRhQ&s5XLz8ooRJ", "0ifRhQ&s5XLz8ooRJ", "", integer0);
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "0ifRhQ&s5XLz8ooRJ");
      multiKey2.equals("");
      int int1 = multiKey0.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = true;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iyt>Z";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "3d,ScY]z";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.equals(multiKey1);
      int int0 = 3;
      multiKey0.getKey(3);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.getKeys();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-616));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-616));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(3021);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey3.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      int int1 = multiKey1.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      multiKey1.getKey(0);
      Object object0 = multiKey1.getKey(1);
      //  // Unstable assertion: assertNull(object0);
      
      multiKey0.getKeys();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      String string0 = multiKey2.toString();
      //  // Unstable assertion: assertEquals("MultiKey[MultiKey[null, null, MultiKey[4, 4, 0]], MultiKey[null, null, MultiKey[4, 4, 0]]]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.equals(multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1528));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1338));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(247);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[3]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-231));
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(9, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, integer0, integer0, integer0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.equals(object0);
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.getKeys();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.toString();
      MultiKey<Object> multiKey4 = multiKey3.getKey(1);
      multiKey4.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey5.toString();
      multiKey5.toString();
      // Undeclared exception!
      try { 
        multiKey5.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 3;
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer((-1));
      int int1 = (-5772);
      Integer integer3 = new Integer((-5772));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      MultiKey<String> multiKey1 = new MultiKey<String>("hw,3Lmd-=AwW#W", "hw,3Lmd-=AwW#W", "hw,3Lmd-=AwW#W");
      Object object0 = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>("hw,3Lmd-=AwW#W", multiKey1, integer3, integer3, multiKey1);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(2062);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2062
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2h$,vK7";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null, "MultiKey");
      int int0 = 1;
      multiKey0.getKey(1);
      objectArray0[0] = (Object) "";
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      int int1 = 1439;
      // Undeclared exception!
      try { 
        multiKey1.getKey(1439);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1439
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "y{upC2", "", "");
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-390);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-390));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -390
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
