/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:15 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(3129);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Integer integer1 = new Integer(3129);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3129);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Integer integer1 = new Integer(3129);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0, (Object) null, integer0, (Object) null);
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.getKeys();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey2.getKeys();
      multiKey1.getKeys();
      MultiKey<MultiKey<Object>> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer1 = new Integer((-1));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey1, "(Aw[ADDB]cm4b.-0", integer1, objectArray0[0]);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, MultiKey[0], (Aw[ADDB]cm4b.-0, -1, 0]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey2);
      assertFalse(boolean0);
      
      Integer integer2 = new Integer((-3405));
      Integer integer3 = new Integer(3);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer1, integer3, integer4);
      boolean boolean1 = multiKey3.equals("(Aw[ADDB]cm4b.-0");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("!&;J'VKm", "!&;J'VKm", (String) null, "i@Pc]5t\"", "");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey3.toString();
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("!&;J'VKm", multiKey3);
      multiKey4.toString();
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[!&;J'VKm, MultiKey[null, null]]", string0);
      
      multiKey4.getKeys();
      multiKey1.getKey(0);
      int int0 = multiKey3.size();
      multiKey3.getKey(0);
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "kMv2;e[m";
      MultiKey<String> multiKey0 = new MultiKey<String>("kMv2;e[m", "kMv2;e[m", "kMv2;e[m");
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", (String) null);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer((-1));
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(800);
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(800);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 800
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "(Vs)E^L6^Yt:-2e");
      multiKey0.size();
      String string0 = "C||?u83P}o!^/53";
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2218));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2218));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey(1962);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1962
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0, "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.getKeys();
      int int0 = multiKey0.size();
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(6);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer1);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKeyArray0[0] = multiKey1;
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("ug", "ug", "ug", "oy%Kdf,AZg1k0I+");
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey3.hashCode();
      multiKey2.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[1, 1, 1, 1]", string0);
      
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, "", "MultiKey[1, 1, 1, 1]", object1);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("oy%Kdf,AZg1k0I+", multiKey4, integer1);
      MultiKey<String> multiKey6 = new MultiKey<String>("", "", "WrI2_^:5", "i*=QTT?", ">3WVFTr-atxC");
      Object object2 = multiKey6.getKey(1);
      assertEquals("", object2);
      
      Integer integer2 = new Integer(2840);
      Object object3 = new Object();
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey5, "", integer2, object3);
      boolean boolean0 = multiKey7.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, object0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, multiKey1);
      multiKey0.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "", "MultiKey[java.lang.Object@d66e6dc, java.lang.Object@398e340f]", "", "MultiKey");
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("r%<U]3.Do\"=R!Ip", "r%<U]3.Do\"=R!Ip");
      multiKey0.toString();
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "r%<U]3.Do\"=R!Ip";
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.getKey(0);
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey3 = new MultiKey<String>("_(>q9", "I8(c", "r%<U]3.Do\"=R!Ip", "MultiKey[r%<U]3.Do\"=R!Ip, r%<U]3.Do\"=R!Ip]");
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey4.toString();
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[r%<U]3.Do\"=R!Ip, r%<U]3.Do\"=R!Ip], MultiKey[_(>q9, I8(c, r%<U]3.Do\"=R!Ip, MultiKey[r%<U]3.Do\"=R!Ip, r%<U]3.Do\"=R!Ip]], MultiKey[r%<U]3.Do\"=R!Ip, r%<U]3.Do\"=R!Ip], MultiKey[r%<U]3.Do\"=R!Ip, r%<U]3.Do\"=R!Ip]]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "eR)ydTEdVXMjp");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("k sD'|{|", "k sD'|{|");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("(uCZS+xm2C", "", "");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("k sD'|{|", "/$!:C");
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[MultiKey[, , , eR)ydTEdVXMjp], MultiKey[k sD'|{|, k sD'|{|], MultiKey[(uCZS+xm2C, , ], MultiKey[k sD'|{|, /$!:C]]", string0);
  }
}
