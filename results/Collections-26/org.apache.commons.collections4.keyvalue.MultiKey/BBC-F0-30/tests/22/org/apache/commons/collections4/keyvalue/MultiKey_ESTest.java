/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey0.getKeys();
      multiKey0.size();
      multiKey0.equals("MultiKey[MultiKey[], 1]");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-942));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -942
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(10);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer integer1 = new Integer(1652);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey0.size();
      Object object1 = new Object();
      multiKey0.equals(object1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-662));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -662
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, object0, integer0, (Object) null, object0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      multiKey1.toString();
      integerArray0[1] = integer1;
      integerArray0[2] = null;
      integerArray0[3] = null;
      integerArray0[4] = null;
      integerArray0[5] = null;
      integerArray0[6] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[8] = null;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, integer3);
      multiKey4.toString();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey4);
      multiKey3.size();
      multiKey0.equals(multiKey0);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-662));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -662
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKey0.getKey(0);
      objectArray0[4] = (Object) null;
      multiKey0.getKey(0);
      objectArray0[5] = (Object) null;
      Object object4 = new Object();
      objectArray0[6] = object4;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object object5 = multiKey1.getKey(0);
      assertSame(object5, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("{[jJ", "%`X-l$b|djo$@os#$", "%`X-l$b|djo$@os#$", "{[jJ", "%`X-l$b|djo$@os#$");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.hashCode();
      boolean boolean0 = false;
      MultiKey<MultiKey<String>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1784));
      Integer integer1 = new Integer((-1784));
      Integer integer2 = new Integer((-1784));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer0, (Object) null, multiKey1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey1;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, "", "", objectArray0[4]);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey0, (Object) null, multiKey2, multiKey4);
      Integer integer3 = new Integer((-1784));
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey5, integer3);
      assertFalse(multiKey5.equals((Object)multiKey1));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey8 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey7.equals(multiKey8);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("('B]:k", ">a7B7&4|u7qVwCk-*Go", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(">a7B7&4|u7qVwCk-*Go", multiKey0, ">a7B7&4|u7qVwCk-*Go", "");
      multiKey1.size();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(57);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2583));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1883);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[0]);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey2.getKeys();
      assertEquals(7, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "lM-3$ma}3|;";
      stringArray0[1] = "l\"y";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "~49?D*1~r)G'RSK2Eu0";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, "", "", (Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3);
      assertEquals(3, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-776));
      Integer integer1 = new Integer((-776));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer2;
      objectArray0[2] = (Object) integer1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) integer2;
      objectArray0[7] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey1.toString();
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(1560);
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer4);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      multiKey1.hashCode();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey1.equals(integer2);
      MultiKey<String> multiKey3 = new MultiKey<String>("y!$]]WA&", "MultiKey[0, 1560]", "MultiKey[-776, 0, -776, java.lang.Object@299071a8, MultiKey[-776, -776, -776, 0, -776], MultiKey[-776, -776, -776, 0, -776], 0, -776]");
      // Undeclared exception!
      try { 
        multiKey3.getKey(1422);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1422
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "KQ";
      stringArray0[1] = "";
      stringArray0[2] = "OyDYL:by?zr/H)";
      stringArray0[3] = ");&@Q>#jq<48l>05~%";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2498));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2498
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "195rs/\"^MfwCu";
      stringArray0[1] = "";
      stringArray0[2] = "D";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Object object7 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object6, object1, multiKey0, object7, object4);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      String[] stringArray0 = new String[6];
      multiKey0.toString();
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[null, null, ]";
      stringArray0[2] = "MultiKey[null, null, ]";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "MultiKey[null, null, ]";
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[null, null, ]", "MultiKey[null, null, ]", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey3, multiKey3, multiKey3);
      int int0 = multiKey4.size();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer1);
      int int1 = multiKey5.size();
      assertFalse(int1 == int0);
  }
}
