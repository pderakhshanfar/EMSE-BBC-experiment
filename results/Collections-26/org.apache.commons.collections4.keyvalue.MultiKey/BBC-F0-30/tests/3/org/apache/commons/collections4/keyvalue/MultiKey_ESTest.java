/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:39 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The arry of keys must ot be null", "The arry of keys must ot be null", "The arry of keys must ot be null", "The arry of keys must ot be null", "The arry of keys must ot be null");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "The arry of keys must ot be null";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "The arry of keys must ot be null";
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[The arry of keys must ot be null, The arry of keys must ot be null, The arry of keys must ot be null, The arry of keys must ot be null, The arry of keys must ot be null]", string0);
      
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>(" (g~nS!Fo:R#7", " (g~nS!Fo:R#7", "", "#]");
      // Undeclared exception!
      try { 
        multiKey2.getKey(503);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 503
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1513));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1113));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3599));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray1);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals(multiKey0);
      Object[] objectArray0 = multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals("MultiKey[-1513, -1113, -3599]");
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey2);
      multiKey3.toString();
      multiKey1.toString();
      multiKey3.hashCode();
      multiKey1.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-1513, -1113, -3599]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      String string0 = multiKey1.toString();
      MultiKey<String> multiKey3 = multiKey2.getKey(0);
      multiKey3.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[, , , , ]", "");
      multiKey0.toString();
      multiKey4.toString();
      multiKey0.equals(multiKey4);
      multiKey0.toString();
      multiKey4.size();
      String string1 = multiKey3.getKey(0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray1, false);
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[]", "MultiKey[]", multiKey1, object0);
      multiKey2.equals(object0);
      multiKey0.toString();
      multiKey2.size();
      multiKey2.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer0, (Integer) null, integer1);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "^b/Wr;Ak!xSNd_c", "");
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey4.getKey(489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 489
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2582);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2582);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, int0, integer3, integer4, integerArray0[2]);
      multiKey2.getKeys();
      multiKey2.equals(integerArray0[2]);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.hashCode();
      multiKey2.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[null, -1, 2582, 0, 2582]", "", "");
      int int1 = multiKey4.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Integer integer0 = new Integer((-224));
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "'", "Gv0#,--cs+", (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "Gv0#,--cs+", multiKey0);
      Object object0 = multiKey1.getKey(0);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey(1986);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1986
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, multiKey0, integer1);
      multiKey1.size();
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, null, MultiKey[2, 0, 0, 2, 0], MultiKey[2, 0, 0, 2, 0], 0]", string0);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "~(7MMy)bN_ WbgHR";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "_G<1JzUyv(`vMWS?m!";
      stringArray0[3] = "N!y<24]HzW?6xS>$";
      stringArray0[4] = "j?/):G]";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-719);
      Integer integer0 = new Integer((-719));
      Integer integer1 = new Integer(1014);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(24);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3411);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-144));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -144
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
