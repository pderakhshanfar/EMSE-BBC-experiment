/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:42:45 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) multiKey0;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "", multiKey1);
      multiKey2.getKeys();
      multiKey2.hashCode();
      assertFalse(multiKey2.equals((Object)multiKey1));
      
      boolean boolean0 = multiKey0.equals(objectArray0[3]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", (String) null, (String) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[MultiKey, MultiKey, null, null]", string0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", object0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.size();
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey2.getKey(1);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      boolean boolean1 = multiKey3.equals("MultiKey");
      assertFalse(boolean1);
      
      multiKey3.hashCode();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = null;
      stringArray0[2] = "MultiKey";
      multiKey1.toString();
      stringArray0[3] = "MultiKey[MultiKey, MultiKey, null, null]";
      stringArray0[4] = "MultiKey[MultiKey, MultiKey, null, null]";
      stringArray0[5] = "MultiKey[MultiKey, java.lang.Object@52888f69]";
      stringArray0[6] = "MultiKey[MultiKey, java.lang.Object@52888f69]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey0, multiKey4);
      multiKey5.size();
      assertFalse(multiKey0.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "_~hr;C!B,Of6_r");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(">N", "Ickl;q~p|[XH*2aR", multiKey0);
      multiKeyArray0[0] = multiKey1;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Ickl;q~p|[XH*2aR";
      stringArray0[1] = "";
      stringArray0[2] = "Ickl;q~p|[XH*2aR";
      stringArray0[3] = "Ickl;q~p|[XH*2aR";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(">N", multiKey1, "Ickl;q~p|[XH*2aR");
      multiKey3.toString();
      multiKeyArray0[1] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      Object object0 = multiKey4.getKey(1);
      Integer integer0 = new Integer(1);
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(">N", object0, integer0, object1);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey5, multiKey5, multiKey5, multiKey5);
      multiKey4.toString();
      multiKey1.toString();
      int int0 = multiKey5.size();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(1849);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey7.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      multiKey0.equals("MultiKey[]");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray1, false);
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals(integer0);
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("eFo:DU", "", "o<PYcwe IaLy$ ", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("eFo:DU", "o<PYcwe IaLy$ ", object0, multiKey0, "MultiKey[eFo:DU, , o<PYcwe IaLy$ , ]");
      multiKey1.equals("");
      multiKey1.hashCode();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[eFo:DU, , o<PYcwe IaLy$ , ]", "o<PYcwe IaLy$ ");
      multiKey2.equals(multiKey3);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey3);
      multiKey4.toString();
      multiKey4.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, (Object) null, object2);
      int int0 = 4;
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-625));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Qjk{~bF;";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey2.getKeys();
      Integer integer1 = new Integer((-625));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0[0], integer1, multiKey0, "", "Qjk{~bF;");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3);
      multiKey4.toString();
      multiKey3.toString();
      multiKey4.toString();
      multiKey0.toString();
      multiKey4.toString();
      multiKey4.size();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-625));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -625
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("D", "D", "D1t0uPaqU<&f1wa)", "o");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = 0;
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
