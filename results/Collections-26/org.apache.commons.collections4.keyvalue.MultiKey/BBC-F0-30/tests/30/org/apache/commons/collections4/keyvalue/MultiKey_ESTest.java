/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:54:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(11);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(11);
      boolean boolean0 = multiKey0.equals(multiKey0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[2] = "MultiKey";
      stringArray0[4] = "}R)Y8`{e#mk[A@_W7,";
      stringArray0[5] = "}R)Y8`{e#mk[A@_W7,";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean1 = multiKey1.equals(stringArray0[3]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Ih ", "Ih ", "Ih ");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-887));
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "", (Object) null);
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, (Object) null, multiKey0, "The array of keys must not be null", multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("The array of keys must not be null", multiKey2, "MultiKey");
      multiKey3.getKey(0);
      Integer integer1 = new Integer((-3371));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(85);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("The array of keys must not be null", integer1, integer2, integer3);
      String[] stringArray1 = multiKey0.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, object1);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey3.size();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(1088);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(7);
      Integer integer4 = new Integer(3);
      Integer integer5 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, integer3, integer4, integer5);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, "q7oKo/", multiKey1, integer5);
      boolean boolean0 = multiKey4.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1908));
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer1 = new Integer(444);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1, (Integer) null);
      multiKey1.getKey(0);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer2 = new Integer(4);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, ")N?LVZIM]d~#", object1, integer2, integer2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(")N?LVZIM]d~#", integer0, multiKey0, (Object) null, multiKey2);
      assertFalse(multiKey3.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("kTw*7kH7.dM", "kTw*7kH7.dM", "@gl)q3I@7>7g]mT");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("@gl)q3I@7>7g]mT");
      Integer integer0 = new Integer((-1360));
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1, integer0, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals(integer1);
      multiKey1.size();
      multiKey1.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[MultiKey[0, 0, 0, MultiKey[0, 0, 0]], MultiKey[0, 0, 0, MultiKey[0, 0, 0]], MultiKey[0, 0, 0, MultiKey[0, 0, 0]]]", "MultiKey[MultiKey[0, 0, 0, MultiKey[0, 0, 0]], MultiKey[0, 0, 0, MultiKey[0, 0, 0]], MultiKey[0, 0, 0, MultiKey[0, 0, 0]]]");
      // Undeclared exception!
      try { 
        multiKey3.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("K(zZH_/", "j", "j", "j");
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("K(zZH_/", "j");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.equals("K(zZH_/");
      multiKey2.getKey(1);
      multiKey1.toString();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer1);
      multiKey4.toString();
      int int0 = 1665;
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey4.getKey(1665);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1665
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(725);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey(725);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 725
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[java.lang.Object@58e02fbe, java.lang.Object@58e02fbe, java.lang.Object@58e02fbe]";
      stringArray0[1] = "MultiKey[java.lang.Object@58e02fbe, java.lang.Object@58e02fbe, java.lang.Object@58e02fbe]";
      stringArray0[2] = "MultiKey[java.lang.Object@58e02fbe, java.lang.Object@58e02fbe, java.lang.Object@58e02fbe]";
      stringArray0[3] = "gR pX1ldNcsVB,X'p";
      stringArray0[4] = "iJrs77^40Zv8_uX(X";
      stringArray0[5] = "MultiKey[java.lang.Object@58e02fbe, java.lang.Object@58e02fbe, java.lang.Object@58e02fbe]";
      stringArray0[6] = "MultiKey[java.lang.Object@58e02fbe, java.lang.Object@58e02fbe, java.lang.Object@58e02fbe]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey1.equals("iJrs77^40Zv8_uX(X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-620));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -620
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
