/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("1yx", "1yx", "1yx");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "SgcgJ*yHh >RBV;";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[6] = "HxJqnzavg";
      stringArray0[7] = "";
      stringArray0[8] = "8K1)N0.@S";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.equals(multiKey2);
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-108);
      Integer integer0 = new Integer((-108));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4034);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-108));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1313);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey3.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "#R6KH6cQ(5", "");
      multiKey0.toString();
      multiKey0.hashCode();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, #R6KH6cQ(5, ]", string0);
      
      Integer integer0 = new Integer(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, ":e0R,E;e", ":e0R,E;e", multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("|6EuH*q%R~('5%=]Rq", "5Uo'M36C -0<");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey4);
      Object object0 = multiKey5.getKey(2);
      boolean boolean0 = multiKey3.equals(object0);
      assertFalse(boolean0);
      
      multiKey1.size();
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", (String) null, "!kB:UBeiwd}1\"Ox0w", "^SQ=t,Tx4D+");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      Object object0 = new Object();
      multiKey2.equals(object0);
      multiKey0.size();
      multiKey2.equals("MultiKey[]");
      multiKey2.getKeys();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.toString();
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      multiKey4.toString();
      multiKey4.toString();
      multiKey2.equals("MultiKey[]");
      multiKey1.size();
      Object[] objectArray1 = multiKey4.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(552);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(498);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.size();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[552, 498, 498]";
      stringArray0[1] = "MultiKey[552, 498, 498]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, multiKey2, (MultiKey<String>) null);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-675));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -675
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(":dun-d5ohlp$9Onm", ":dun-d5ohlp$9Onm", ":dun-d5ohlp$9Onm");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[:dun-d5ohlp$9Onm, :dun-d5ohlp$9Onm, :dun-d5ohlp$9Onm]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      int int0 = (-287);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-287));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -287
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<String> multiKey0 = new MultiKey<String>(")6zc|", ")6zc|");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) ")6zc|";
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, ")6zc|");
      multiKey1.getKey(0);
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      Object object2 = multiKey2.getKey(0);
      assertNotNull(object2);
      
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey3.getKeys();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")6zc|";
      stringArray0[1] = ")6zc|";
      stringArray0[2] = ")6zc|";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      multiKey4.getKey(0);
      boolean boolean0 = multiKey2.equals(")6zc|");
      assertFalse(boolean0);
  }
}
