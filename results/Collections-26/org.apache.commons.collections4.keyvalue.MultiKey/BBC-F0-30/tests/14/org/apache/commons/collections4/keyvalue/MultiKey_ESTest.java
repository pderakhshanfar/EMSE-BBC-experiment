/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:51:22 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "ct3", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-209));
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, ]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[null, ]", "");
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey3, multiKey0, multiKey4, multiKey0, multiKey4);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey6 = new MultiKey<String>("X)z{K", "", "X)z{K", "");
      multiKeyArray0[1] = multiKey6;
      multiKeyArray0[0] = multiKey4;
      multiKeyArray0[3] = multiKey3;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey3;
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      boolean boolean0 = multiKey5.equals(multiKey7);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer((-209));
      MultiKey<Object> multiKey8 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey8.equals(multiKey0);
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-209));
      MultiKey<String> multiKey0 = new MultiKey<String>("<", "<", "<", "<");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("U>hU[?Ym", "wqI(_;V[uE`[14h=", "16", "");
      multiKey0.hashCode();
      multiKey0.equals("wqI(_;V[uE`[14h=");
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer((-409));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer3);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer3;
      multiKey1.toString();
      integerArray0[1] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey1.equals(multiKey2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "16";
      stringArray0[1] = "16";
      stringArray0[2] = "U>hU[?Ym";
      stringArray0[3] = "16";
      stringArray0[4] = "MultiKey[3, 3, 1, 1, -409]";
      stringArray0[5] = "";
      stringArray0[6] = "wqI(_;V[uE`[14h=";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey4 = new MultiKey<String>("U>hU[?Ym", "", "U>hU[?Ym", "16");
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey0, multiKey3, multiKey4, multiKey4, multiKey4);
      multiKey5.equals("16");
      int int0 = multiKey0.size();
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object[]) integerArray0, false);
      int int1 = multiKey6.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1324));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1324));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integerArray0[1], integerArray0[1], integer1, integerArray0[1]);
      multiKey1.getKeys();
      multiKey1.equals(multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-1324, -1324]", "", "", "t<,oAr+CdP'nkA;`", "");
      multiKey2.equals(integer1);
      // Undeclared exception!
      try { 
        multiKey2.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1324
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "The array of keys must not be null");
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[1] = (Object) null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey1.toString();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer1, integer0, integer3);
      multiKeyArray0[0] = multiKey1;
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, integer4, integer3, integer4);
      multiKeyArray0[1] = multiKey2;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "/ToA|baOD";
      stringArray0[6] = null;
      stringArray0[7] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, multiKey1, "", multiKey3);
      multiKeyArray0[2] = multiKey4;
      Object object0 = new Object();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "";
      stringArray1[1] = null;
      stringArray1[2] = "/ToA|baOD";
      stringArray1[3] = "";
      stringArray1[4] = "The array of keys must not be null";
      stringArray1[5] = null;
      stringArray1[6] = null;
      stringArray1[7] = "";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray1, true);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey1, object0, multiKey5);
      multiKeyArray0[3] = multiKey6;
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = multiKey7.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object object7 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object7, object1, object4);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1, object7, object3);
      assertEquals(4, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      int int0 = 1795;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1795);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1795
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
