/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:51:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, integer0, integer0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, integer0, object0);
      int int0 = 0;
      Object object1 = multiKey3.getKey(0);
      multiKey1.equals(object1);
      Object[] objectArray0 = new Object[5];
      Object object2 = new Object();
      multiKey3.toString();
      multiKey3.toString();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) "MultiKey[7, 7, 7, 7, MultiKey[7, 5, 5]]";
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, multiKey3, objectArray0[1]);
      // Undeclared exception!
      try { 
        multiKey5.getKey(1325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1325
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("_y$o<VAaG5a+&~v#", "MultiKey", "R#:txBK2", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKey1.equals(multiKey2);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, (Integer) null);
      int int0 = 5;
      // Undeclared exception!
      try { 
        multiKey3.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer1 = new Integer((-166));
      Integer integer2 = new Integer((-166));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      Integer integer3 = new Integer((-895));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, integer0, integer3);
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, object0, integer0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey1, multiKey1, multiKey3, multiKey1);
      multiKey0.toString();
      multiKey3.hashCode();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[0, -166, 0, -166]";
      stringArray0[1] = "MultiKey[0, -166, 0, -166]";
      stringArray0[2] = "MultiKey[0, -166, 0, -166]";
      stringArray0[3] = "MultiKey[0, -166, 0, -166]";
      stringArray0[4] = "MultiKey[0, -166, 0, -166]";
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey";
      stringArray0[7] = "MultiKey[0, -166, 0, -166]";
      stringArray0[8] = "MultiKey[0, -166, 0, -166]";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey5.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "+Lw7O\u0013p}y@";
      stringArray0[1] = "yJ-";
      stringArray0[2] = "yE8";
      stringArray0[3] = "";
      stringArray0[4] = "g>_D";
      stringArray0[5] = "aca;XX2Z";
      stringArray0[6] = " 5";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.getKeys();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[+Lw7O\u0013p}y@, yJ-, yE8, , g>_D, aca;XX2Z,  5], MultiKey[+Lw7O\u0013p}y@, yJ-, yE8, , g>_D, aca;XX2Z,  5], MultiKey[+Lw7O\u0013p}y@, yJ-, yE8, , g>_D, aca;XX2Z,  5], MultiKey[+Lw7O\u0013p}y@, yJ-, yE8, , g>_D, aca;XX2Z,  5], MultiKey[+Lw7O\u0013p}y@, yJ-, yE8, , g>_D, aca;XX2Z,  5]]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null, "u ZV}k6 H~~#~", (Object) null);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.getKey(1);
      multiKey1.equals((Object) null);
      multiKey1.getKeys();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3326);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(3326);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer3);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer0, multiKey0, integer2, integer3);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("C}yNj3k!FI|yBW", "u25+zd!O3N'J,J|*p");
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1415));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1415
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "LYt(+e!", "");
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(537);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, int0, multiKey1, object0);
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey1.toString();
      //  // Unstable assertion: assertEquals("MultiKey[537, 537, 0, 537, 0, 0, 0]", string0);
      
      int int1 = multiKey0.hashCode();
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      boolean boolean0 = multiKey0.equals("MultiKey[MultiKey[, , , LYt(+e!, ], 537, 0, MultiKey[537, 537, 0, 537, 0, 0, 0], 537]");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      boolean boolean0 = true;
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      MultiKey<Object>[] multiKeyArray1 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKeyArray1[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray1);
      multiKeyArray1[1] = multiKey2;
      Object object0 = new Object();
      String string0 = "MultiKey";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey1, object0, "MultiKey");
      multiKeyArray1[2] = multiKey3;
      Integer integer0 = new Integer((-3104));
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, (Object) null, multiKey3, (Object) null, multiKey2);
      int int0 = (-2484);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-2484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2484
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-163));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      int int1 = (-1);
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      String string0 = "";
      Integer integer7 = new Integer(int0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer7, (Integer) int1, (Integer) int0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(478);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 478
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(641);
      Integer integer3 = new Integer(641);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer3);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey1.toString();
      MultiKey<Integer>[] multiKeyArray1 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray1[0] = multiKey0;
      multiKeyArray1[1] = multiKey0;
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "tpppL#-R\"?hR&sF";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = multiKey0.size();
      assertEquals(7, int0);
  }
}
