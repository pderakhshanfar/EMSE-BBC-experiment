/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:53:49 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("(Dz(/ e(,dO:k{BK", "(Dz(/ e(,dO:k{BK", "(Dz(/ e(,dO:k{BK");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "S0$I@WJQ#0n.";
      String[] stringArray0 = new String[2];
      String string1 = "";
      stringArray0[0] = "";
      stringArray0[1] = "S0$I@WJQ#0n.";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("l\"A{<", "", "", "S0$I@WJQ#0n.", "l\"A{<");
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0, integer0);
      multiKey0.equals(integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("BF{Z+mWTj5Rwn+RP", "BF{Z+mWTj5Rwn+RP", "", "BF{Z+mWTj5Rwn+RP");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, (MultiKey<String>) null);
      multiKey2.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<Object>[] multiKeyArray1 = multiKey3.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Integer integer0 = new Integer((-1844));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer((-1844));
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, (Object) null, object0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, (Object) null, multiKey1, multiKey2, (Object) null);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "/}Hv^^uxH/E~_{XjJa";
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , , , /}Hv^^uxH/E~_{XjJa, , MultiKey, ]", string0);
      
      multiKey1.size();
      int int0 = multiKey0.size();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1103);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer1, int0);
      multiKey1.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "ges");
      multiKeyArray0[1] = multiKey3;
      multiKey3.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.getKeys();
      multiKey0.getKeys();
      multiKey1.size();
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey5, multiKey5, multiKey1, multiKey5);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[], MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, ges]], MultiKey[MultiKey[], MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, ges]], MultiKey[null, 1103, -1], MultiKey[MultiKey[], MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, ges]]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3202);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0[3], multiKey0, integerArray0[3], multiKey1);
      multiKey2.toString();
      multiKey0.equals(multiKey2);
      multiKey2.size();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      boolean boolean0 = multiKey3.equals(multiKey1);
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[1, 0, 1, 3202]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(": ", "", "", ")O2#R$COsFwy)'Y", "");
      String string0 = multiKey0.getKey(0);
      assertEquals(": ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      Object object1 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0, "EDg(GVQ>g", (Object) null, object1);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey1);
      multiKey2.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[java.lang.Object@3408c794, java.lang.Object@3408c794]";
      stringArray0[1] = "MultiKey[java.lang.Object@3408c794, java.lang.Object@3408c794]";
      stringArray0[2] = "MultiKey[java.lang.Object@3408c794, java.lang.Object@3408c794]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKey3.size();
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("4Yvdb6%F,Y;@w", (String) null, "org.apache.commons.collections4.keyvalue.MultiKey", "4Yvdb6%F,Y;@w");
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2494));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, (Object) null, multiKey1);
      multiKey2.hashCode();
      boolean boolean0 = multiKey2.equals(integer2);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey3, multiKey3);
      multiKey4.hashCode();
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      int int0 = 1277;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1277);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1277
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "");
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      int int1 = 352;
      Integer integer1 = new Integer(352);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2102));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[1]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-4470));
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[java.lang.Object@3cd9e92c, null]";
      stringArray0[1] = "MultiKey[java.lang.Object@3cd9e92c, null]";
      stringArray0[2] = "MultiKey[java.lang.Object@3cd9e92c, null]";
      stringArray0[3] = "MultiKey[java.lang.Object@3cd9e92c, null]";
      stringArray0[4] = "q&1(q@J.q,dm1`%{8";
      stringArray0[5] = ">k]$q<q!'5KPvs_p:Y";
      stringArray0[6] = "MultiKey[java.lang.Object@3cd9e92c, null]";
      stringArray0[7] = "MultiKey[java.lang.Object@3cd9e92c, null]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-313));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -313
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
