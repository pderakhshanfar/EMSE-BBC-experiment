/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:55:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(">=xg/MD#uaBy8Sx", "W|G", "zD=b];t");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      Integer integer0 = new Integer((-2991));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "MultiKey[]");
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = multiKey1.equals(object1);
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("!M\"=biA2Wv~2:YA", "!M\"=biA2Wv~2:YA", "!M\"=biA2Wv~2:YA", "!M\"=biA2Wv~2:YA");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      Integer integer0 = new Integer(2370);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey2.equals("!M\"=biA2Wv~2:YA");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[!M\"=biA2Wv~2:YA, !M\"=biA2Wv~2:YA, !M\"=biA2Wv~2:YA, !M\"=biA2Wv~2:YA], ], MultiKey[!M\"=biA2Wv~2:YA, !M\"=biA2Wv~2:YA, !M\"=biA2Wv~2:YA, !M\"=biA2Wv~2:YA]]", string0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, true);
      multiKey4.size();
      boolean boolean1 = multiKey0.equals(objectArray0[1]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, integer0, object0, (Object) null);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.toString();
      Object object1 = new Object();
      multiKey1.equals(object1);
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>(" q3\"zla.vBKhp", "", "MultiKey[0, 0, 0]", " q3\"zla.vBKhp");
      multiKey2.toString();
      multiKey2.hashCode();
      Integer integer2 = new Integer((-4048));
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer1, multiKey3);
      Integer integer3 = new Integer((-3345));
      boolean boolean0 = multiKey3.equals(integer3);
      assertFalse(boolean0);
      
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey3.size();
      assertFalse(multiKey3.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "pbX'&5\"3*y<A?+");
      multiKey1.getKey(0);
      objectArray0[3] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.toString();
      multiKey2.toString();
      Integer integer0 = new Integer(292);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, "t{D,TYH{ DLuPIwd");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "";
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-740));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1905);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1905);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3200));
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null, integer3);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey0.size();
      multiKey1.getKeys();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(4, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.size();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      Object object0 = multiKey2.getKey(0);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) "MultiKey[MultiKey[0, 0, 0, 0, -1], MultiKey[0, 0, 0, 0, -1], MultiKey[0, 0, 0, 0, -1], MultiKey[0, 0, 0, 0, -1]]";
      objectArray0[5] = (Object) "MultiKey[0, 0, 0, 0, -1]";
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) integer1;
      // Undeclared exception!
      try { 
        multiKey0.getKey(228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 228
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "[X:r-r+[ko:xl");
      int int0 = 2018;
      // Undeclared exception!
      try { 
        multiKey0.getKey(2018);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2018
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-485));
      Integer integer1 = new Integer((-4183));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0, integer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer1;
      multiKey0.toString();
      objectArray0[3] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals(objectArray0[5]);
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-485, -4183, -4183, -485, -485]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[0, null, 0]", (Object) null, multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey3);
      multiKey4.toString();
      multiKey4.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[0, null, 0]", (String) null, "");
      multiKeyArray0[6] = multiKey5;
      multiKeyArray0[7] = multiKey0;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey6.getKey(2919);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2919
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("e2+mtIK]>kZZ6D", "", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      boolean boolean0 = multiKey0.equals("e2+mtIK]>kZZ6D");
      assertFalse(boolean0);
  }
}
