/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:49:04 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", (String) null, "");
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "{E{`$|Sc*");
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1314));
      Integer integer1 = new Integer(3082);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      Integer integer2 = new Integer(3082);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, (MultiKey<Integer>) null, (MultiKey<Integer>) null, multiKey1);
      assertFalse(multiKey1.equals((Object)multiKey0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) multiKey2;
      objectArray0[5] = (Object) multiKey2;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer2;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "b}~;0W";
      stringArray0[1] = "";
      stringArray0[2] = "Aj!]t";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[b}~;0W, , Aj!]t, ]", string0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[b}~;0W, , Aj!]t, ]", "MultiKey[]", "MultiKey[b}~;0W, , Aj!]t, ]", "Aj!]t", "");
      Object object0 = multiKey2.getKey(4);
      assertEquals("", object0);
      
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, 0, 0]", "MultiKey[0, 0, 0]", "F", "", "F");
      multiKey1.size();
      multiKey0.hashCode();
      multiKey0.toString();
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer((-2922));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, integer0, integer1, integer2);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-600));
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, objectArray0[0], integer0, integer1, integer2);
      Object object1 = multiKey1.getKey(0);
      objectArray0[1] = object1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.getKey(0);
      objectArray0[2] = null;
      MultiKey<String> multiKey3 = new MultiKey<String>("N?[@Tj}1?AVWee", "N?[@Tj}1?AVWee");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey3);
      // Undeclared exception!
      try { 
        multiKey4.getKey(1415);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1415
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(2994);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer3);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[2994, 2, 0, 0, 0]", string0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      Integer integer4 = new Integer(1751);
      Integer integer5 = new Integer(2634);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer4, integer5);
      Integer integer6 = new Integer(1751);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[2994, 2, 0, 0, 0]", multiKey1, integer6);
      multiKey2.hashCode();
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "_bsc";
      stringArray0[4] = "t94DA4^ch";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(1);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", object0);
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, "t94DA4^ch", multiKey1, object2, "");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey1, multiKey1);
      MultiKey<Object> multiKey4 = multiKey3.getKey(1);
      objectArray0[0] = (Object) multiKey4;
      Integer integer0 = new Integer(3158);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -268
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-603));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-160));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer2, integer0, integer3, integer4, (Integer) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1, integer1, integer1, multiKey0);
      assertEquals(5, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey0 = new MultiKey<String>("Gbc/6/Lx,!4zY@U0", "Gbc/6/Lx,!4zY@U0", "Gbc/6/Lx,!4zY@U0");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("u'&HF_86>#M0", "", "Gbc/6/Lx,!4zY@U0");
      multiKeyArray0[1] = multiKey1;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Gbc/6/Lx,!4zY@U0";
      stringArray0[1] = "Gbc/6/Lx,!4zY@U0";
      stringArray0[2] = "";
      stringArray0[3] = "Gbc/6/Lx,!4zY@U0";
      stringArray0[4] = "";
      stringArray0[5] = "Gbc/6/Lx,!4zY@U0";
      stringArray0[6] = "Gbc/6/Lx,!4zY@U0";
      stringArray0[7] = "Gbc/6/Lx,!4zY@U0";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "oBHT<5kN.8;f%S");
      multiKeyArray0[3] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      boolean boolean0 = multiKey4.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("dSf2", "dSf2");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("dSf2", "dSf2", "]:Kxl*");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.equals(multiKey1);
      multiKey0.size();
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey3.hashCode();
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-2956);
      Integer integer0 = new Integer((-2956));
      Integer integer1 = new Integer((-571));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null");
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2956));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2956
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
