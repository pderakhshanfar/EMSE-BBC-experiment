/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:21 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      assertEquals(2, multiKey0.size());
      
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, (Integer) null, (Integer) null);
      Integer integer2 = multiKey1.getKey(3);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("m4F&`)&gU^;U", "m4F&`)&gU^;U", "", "", "m4F&`)&gU^;U");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[m4F&`)&gU^;U, m4F&`)&gU^;U, , , m4F&`)&gU^;U]", string0);
      
      String[] stringArray0 = new String[13];
      stringArray0[1] = "m4F&`)&gU^;U";
      stringArray0[5] = "";
      stringArray0[3] = "m4F&`)&gU^;U";
      stringArray0[4] = "MultiKey[m4F&`)&gU^;U, m4F&`)&gU^;U, , , m4F&`)&gU^;U]";
      stringArray0[5] = "m4F&`)&gU^;U";
      stringArray0[6] = "";
      stringArray0[0] = "MultiKey[m4F&`)&gU^;U, m4F&`)&gU^;U, , , m4F&`)&gU^;U]";
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey2.hashCode();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKey3.size();
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey0.equals("");
      multiKey3.getKeys();
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("m-4F&`)&gU^;U", "hTKtm[)", "", "", "hTKtm[)");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hTKtm[)";
      stringArray0[1] = "MultiKey[m-4F&`)&gU^;U, hTKtm[), , , hTKtm[)]";
      stringArray0[2] = "MultiKey[m-4F&`)&gU^;U, hTKtm[), , , hTKtm[)]";
      stringArray0[3] = "m-4F&`)&gU^;U";
      stringArray0[4] = "MultiKey[m-4F&`)&gU^;U, hTKtm[), , , hTKtm[)]";
      stringArray0[5] = "m-4F&`)&gU^;U";
      stringArray0[6] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer((-1238));
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("m-4F&`)&gU^;U", "hTKtm[)", "", "", "hTKtm[)");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[m-4F&`)&gU^;U, hTKtm[), , , hTKtm[)]", string0);
      
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hTKtm[)";
      stringArray0[1] = "MultiKey[m-4F&`)&gU^;U, hTKtm[), , , hTKtm[)]";
      stringArray0[2] = "MultiKey[m-4F&`)&gU^;U, hTKtm[), , , hTKtm[)]";
      stringArray0[3] = "m-4F&`)&gU^;U";
      stringArray0[4] = "MultiKey[m-4F&`)&gU^;U, hTKtm[), , , hTKtm[)]";
      stringArray0[5] = "m-4F&`)&gU^;U";
      stringArray0[6] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, "hTKtm[)", multiKey3, integer0);
      Object object0 = multiKey4.getKey(0);
      Integer integer1 = new Integer((-1238));
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object0, integer1, object1, "", object2);
      Object object3 = multiKey5.getKey(0);
      boolean boolean0 = multiKey1.equals(object3);
      assertTrue(boolean0);
      assertFalse(multiKey5.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1, integer2, integer2, integer0);
      int int0 = multiKey1.size();
      multiKey0.getKeys();
      multiKey0.hashCode();
      Integer integer3 = new Integer((-2671));
      multiKey0.equals(integer3);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "v$}zkG/)G";
      stringArray0[3] = ".;ZCXv";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "Q#A![&sT";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0);
      Object object1 = multiKey1.getKey(0);
      multiKey1.toString();
      objectArray0[0] = object1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey0.getKeys();
      multiKey2.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "MultiKey[MultiKey[null], java.lang.Object@33781766]";
      stringArray0[2] = "MultiKey[MultiKey[null], java.lang.Object@33781766]";
      stringArray0[3] = "MultiKey[MultiKey[null], java.lang.Object@33781766]";
      stringArray0[4] = "MultiKey[MultiKey[null]]";
      stringArray0[5] = "MultiKey[MultiKey[null], java.lang.Object@33781766]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey4);
      MultiKey<String> multiKey6 = multiKey5.getKey(0);
      assertNotSame(multiKey6, multiKey4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MbW";
      stringArray0[1] = "REY:by=JH\"{Gg=q";
      stringArray0[2] = "}D";
      stringArray0[3] = "";
      stringArray0[4] = ";)";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("8=m7As", "8=m7As");
      Object object0 = new Object();
      Integer integer0 = new Integer(961);
      Integer integer1 = new Integer((-2050));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("8=m7As", object0, multiKey2, "8=m7As", multiKey2);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2050));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2050
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Integer integer0 = new Integer(737);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer0);
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(737);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 737
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2747);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-321));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 2747, 0, -321, 2747]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
