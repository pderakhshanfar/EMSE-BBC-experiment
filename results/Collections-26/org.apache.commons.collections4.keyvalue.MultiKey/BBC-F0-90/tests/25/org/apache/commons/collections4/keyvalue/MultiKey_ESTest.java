/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:54:11 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("+KPSXyy.CF7Rlxkr", "+KPSXyy.CF7Rlxkr");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A3CRM,";
      stringArray0[1] = "A3CRM,";
      stringArray0[2] = "A3CRM,";
      stringArray0[3] = "A3CRM,";
      stringArray0[4] = "A3CRM,";
      stringArray0[5] = "A3CRM,";
      stringArray0[6] = "A3CRM,";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "ha/8&~n(QVxc[^";
      String string1 = "#q'O]KtDHSFI3X0}l<y";
      MultiKey<String> multiKey0 = new MultiKey<String>("ha/8&~n(QVxc[^", "", "/$FN^C-!5 jH", "#q'O]KtDHSFI3X0}l<y");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKeys();
      Integer integer0 = new Integer(14);
      Integer integer1 = new Integer((-3542));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("`VICp,=,kGUFY!", "`VICp,=,kGUFY!", "`VICp,=,kGUFY!", "`VICp,=,kGUFY!", ";n$CATW)Fr@%mmj>XnU");
      multiKey0.hashCode();
      Integer integer0 = new Integer((-1276));
      Integer integer1 = new Integer((-676));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey1.hashCode();
      multiKey0.hashCode();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.getKeys();
      multiKey1.size();
      MultiKey<String> multiKey3 = new MultiKey<String>(";n$CATW)Fr@%mmj>XnU", ";n$CATW)Fr@%mmj>XnU", "2s", "2s", "ur),3*t");
      boolean boolean0 = multiKey3.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p!n=q8B";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      //  // Unstable assertion: assertEquals("MultiKey[p!n=q8B]", string0);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      int int0 = multiKey0.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[p!n=q8B]", "MultiKey[p!n=q8B]");
      int int1 = multiKey2.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey1.getKeys();
      Integer integer0 = new Integer(2980);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0, integer1, integer2);
      Integer integer3 = multiKey2.getKey(0);
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.equals("");
      Integer integer0 = new Integer(2906);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey1, integer0, "");
      multiKey2.toString();
      multiKey2.equals("c0])JFL=X1X<RX");
      multiKey0.hashCode();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKey(0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.size();
      multiKey1.size();
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(25);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "ZqGXWALe2>s<V";
      String string1 = "iS)emPY";
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "ZqGXWALe2>s<V", "ZqGXWALe2>s<V", (String) null, "iS)emPY");
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1591);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1591
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.equals(integer0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1, integer1);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "z", multiKey0, multiKey1, (Object) null);
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey3, multiKey4, multiKey3, multiKey3);
      Object object0 = multiKey5.getKey(0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey0, object0, multiKey3);
      multiKeyArray0[2] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>("", "org.apache.commons.collections4.keyvalue.MultiKey", "z");
      multiKeyArray0[3] = multiKey7;
      Integer integer2 = new Integer((-1687));
      MultiKey<Object> multiKey8 = new MultiKey<Object>(integer2, (Object) null);
      MultiKey<Object> multiKey9 = new MultiKey<Object>("", multiKey8);
      multiKeyArray0[4] = multiKey9;
      Integer integer3 = new Integer(5);
      MultiKey<Object> multiKey10 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<Object> multiKey11 = new MultiKey<Object>(multiKey6, multiKey9, integer3, multiKey10);
      multiKeyArray0[5] = multiKey11;
      MultiKey<Object> multiKey12 = new MultiKey<Object>(multiKey5, integer3);
      multiKeyArray0[6] = multiKey12;
      MultiKey<Object> multiKey13 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[7] = multiKey13;
      MultiKey<MultiKey<Object>> multiKey14 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      String string0 = multiKey14.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
