/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:54:21 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "XJ~>v{+-FrD!");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      multiKeyArray0[8] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey1.getKeys();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "G<1S!dQ_5E\"sDj";
      objectArray0[1] = (Object) "G<1S!dQ_5E\"sDj";
      objectArray0[2] = (Object) "G<1S!dQ_5E\"sDj";
      objectArray0[3] = (Object) "G<1S!dQ_5E\"sDj";
      objectArray0[4] = (Object) "G<1S!dQ_5E\"sDj";
      objectArray0[5] = (Object) "G<1S!dQ_5E\"sDj";
      objectArray0[6] = (Object) "G<1S!dQ_5E\"sDj";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("`Omc", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.equals("MultiKey[`Omc, java.lang.Object@58b701ab]");
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey2.hashCode();
      multiKey0.toString();
      Object[] objectArray0 = multiKey0.getKeys();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKeys();
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey5.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      multiKey0.getKey(1);
      Object[] objectArray0 = new Object[9];
      multiKey0.getKey(1);
      objectArray0[0] = null;
      multiKey0.getKey(2);
      objectArray0[1] = null;
      objectArray0[2] = (Object) "uCL";
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = null;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1, multiKey0, multiKey0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[null, null, null, null, null], MultiKey[null, null, uCL, null, null, MultiKey[null, null, null, null, null], null, null, MultiKey[null, null, null, null, null]], MultiKey[null, null, null, null, null], MultiKey[null, null, null, null, null]]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("a", "a", "a", (Object) null);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("H i|VFhDb_o(m_2YI2", "(4sJBg5Hc&V2/", "(4sJBg5Hc&V2/");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object[] objectArray0 = new Object[8];
      multiKey0.toString();
      objectArray0[0] = (Object) "(4sJBg5Hc&V2/";
      objectArray0[1] = (Object) "H i|VFhDb_o(m_2YI2";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "H i|VFhDb_o(m_2YI2";
      Object object0 = new Object();
      objectArray0[6] = object0;
      multiKey1.toString();
      objectArray0[7] = (Object) multiKey0;
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[H i|VFhDb_o(m_2YI2, (4sJBg5Hc&V2/, (4sJBg5Hc&V2/], MultiKey[H i|VFhDb_o(m_2YI2, (4sJBg5Hc&V2/, (4sJBg5Hc&V2/], MultiKey[H i|VFhDb_o(m_2YI2, (4sJBg5Hc&V2/, (4sJBg5Hc&V2/]]", string0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
      
      multiKey0.size();
      Object object1 = new Object();
      multiKey0.equals(object1);
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      Integer integer1 = multiKey3.getKey(0);
      assertNotNull(integer1);
      
      Object object2 = new Object();
      boolean boolean1 = multiKey0.equals(object2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("`Omc", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.equals("MultiKey[`Omc, java.lang.Object@3ea689d]");
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey2.hashCode();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-506));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -506
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("9o_ 6\" wYEQD#a5C(", "9o_ 6\" wYEQD#a5C(");
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, integer0, multiKey2);
      // Undeclared exception!
      try { 
        multiKey3.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0);
      Object object1 = multiKey0.getKey(0);
      objectArray0[1] = object1;
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1873));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1873
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+h$){,fc0{,$djB";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "tgW>!=4Eshv.";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "tgW>!=4Eshv.", "MultiKey[+h$){,fc0{,$djB, , , tgW>!=4Eshv.]", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, "", multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, null, MultiKey[+h$){,fc0{,$djB, , , tgW>!=4Eshv.], , MultiKey[, tgW>!=4Eshv., MultiKey[+h$){,fc0{,$djB, , , tgW>!=4Eshv.], ]]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-873));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-623);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-623));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -623
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ":?";
      stringArray0[1] = "^)7s@N935A)!*9.Y+b";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Eeg-VVu";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1314));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1314
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
