/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:47:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, (Object) null, (Object) null);
      Integer integer0 = new Integer(5);
      Object object0 = new Object();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, (Object) null, object0, multiKey1, multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey3);
      Object object1 = multiKey4.getKey(0);
      boolean boolean0 = multiKey1.equals(object1);
      assertTrue(boolean0);
      
      MultiKey<String> multiKey5 = new MultiKey<String>((String) null, "", (String) null);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[null, , null]", string0);
      assertFalse(multiKey5.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0);
      Integer integer1 = multiKey1.getKey(0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1629);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "", integer0);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", (String) null);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      multiKey2.size();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.toString();
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer(4);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2, integer3);
      multiKey4.toString();
      boolean boolean0 = multiKey4.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[5, 3, 4]", string0);
      
      int int1 = multiKey1.size();
      int int2 = multiKey4.hashCode();
      assertFalse(int2 == int1);
      
      multiKey0.size();
      multiKey1.getKey(1);
      int int3 = multiKey0.hashCode();
      assertFalse(int3 == int0);
      
      boolean boolean1 = multiKey1.equals(multiKey0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey0.size();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, "zK8&Y.uY.\"0", "zK8&Y.uY.\"0");
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      multiKey2.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, multiKey2, multiKey3);
      multiKey4.getKeys();
      // Undeclared exception!
      try { 
        multiKey3.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[]", (Object) null, "MultiKey[]");
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      Object object1 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, object0, (Object) null, "MultiKey[]", object1);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("mWxJ5*sAo", "mWxJ5*sAo");
      int int0 = multiKey0.size();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1486));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1109));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1443);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[6]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int2 = multiKey1.hashCode();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer((-4284));
      Integer integer1 = new Integer((-4284));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-4284));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4284
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      multiKey2.toString();
      objectArray0[0] = (Object) multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", (String) null);
      multiKey0.toString();
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey3);
      MultiKey<String> multiKey5 = multiKey4.getKey(0);
      objectArray0[1] = (Object) multiKey5;
      multiKey5.toString();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0);
      multiKey6.getKey(1);
      int int0 = multiKey4.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-55));
      Integer integer3 = new Integer((-55));
      Integer integer4 = new Integer((-55));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer4);
      multiKeyArray0[0] = multiKey0;
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, -55, -55, -55]", string0);
      
      Integer integer7 = new Integer((-55));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer5, integer3, integer0, integer6, integer7);
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer6, "f}oP|N", object0);
      multiKey3.getKeys();
      multiKey0.size();
      multiKey3.getKeys();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey3, multiKey3);
      boolean boolean0 = multiKey4.equals("-T");
      assertFalse(boolean0);
      
      multiKey0.size();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, , , , , , ], MultiKey[, , , , , , ], MultiKey[, , , , ]]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      Integer[] integerArray0 = null;
      boolean boolean0 = true;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey0.getKey(0);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }
}
