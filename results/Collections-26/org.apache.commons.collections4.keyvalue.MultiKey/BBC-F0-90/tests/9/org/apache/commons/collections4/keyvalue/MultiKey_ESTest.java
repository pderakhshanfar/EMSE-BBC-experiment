/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:46:53 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("e6", ".", ".");
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "e6";
      objectArray0[2] = (Object) ".";
      objectArray0[3] = (Object) "MultiKey[e6, ., .]";
      objectArray0[4] = (Object) "q";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      String string0 = multiKey0.getKey(0);
      assertEquals("e6", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer0, integer1);
      multiKey4.size();
      String string1 = multiKey4.toString();
      assertEquals("MultiKey[0, 0, 0, 0]", string1);
      
      Object object0 = new Object();
      boolean boolean1 = multiKey4.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0, object1, object0, "");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey0.size();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("h6m", "9o<rm");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("h6m", integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("e6", "MultiKey[h6m, 0]", "e6");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[e6, MultiKey[h6m, 0], e6]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      String string1 = multiKey0.getKey(0);
      assertEquals("h6m", string1);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      boolean boolean1 = multiKey3.equals("");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("v,_o9", object0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "v,_o9";
      objectArray0[2] = (Object) "v,_o9";
      objectArray0[3] = (Object) "v,_o9";
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      int int0 = 0;
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, multiKey1, objectArray0[2], objectArray0[2]);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      MultiKey<MultiKey<String>> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "#Sbty=O.8Xjy^h'wn", "");
      int int0 = multiKey1.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object1 = multiKey1.getKey(1);
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer integer2 = multiKey2.getKey(0);
      assertEquals(0, (int)integer2);
      
      objectArray0[5] = (Object) integer2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      assertTrue(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("The array of keys must not be null");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("The array of keys must not be null", multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey0.hashCode();
      multiKey1.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(3803);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3803
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("r A9}j <RmNOKGO", "r A9}j <RmNOKGO", "MultiKey", "r A9}j <RmNOKGO", "MultiKey");
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "r A9}j <RmNOKGO", "MultiKey");
      multiKey1.toString();
      multiKey0.toString();
      Object object0 = multiKey1.getKey(1);
      assertEquals("r A9}j <RmNOKGO", object0);
      
      boolean boolean0 = multiKey0.equals("r A9}j <RmNOKGO");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-2000));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0, integer1, integer0, integer2);
      multiKey2.hashCode();
      multiKey1.toString();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MultiKey[r A9}j <RmNOKGO, r A9}j <RmNOKGO, MultiKey, r A9}j <RmNOKGO, MultiKey]";
      objectArray0[1] = (Object) integer2;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey2;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "r A9}j <RmNOKGO";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey3.toString();
      multiKey2.hashCode();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey, r A9}j <RmNOKGO, MultiKey]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-656));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-656));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      Integer integer4 = new Integer((-4414));
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey1, integerArray0[2], integer4, multiKey2);
      multiKey3.hashCode();
      multiKey0.size();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((int) integerArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -656
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object object3 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object2, object2, object1, object3);
      Object object4 = multiKey1.getKey(0);
      objectArray0[3] = object4;
      // Undeclared exception!
      try { 
        multiKey1.getKey(918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 918
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(98);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, integer1);
      multiKey0.hashCode();
      Integer integer2 = new Integer(1990);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(98);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer4, integer4);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, integer3, multiKey1, (Object) null, integer3);
      multiKey2.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("u*)wCsBenk#+XjxK", "u*)wCsBenk#+XjxK", "u*)wCsBenk#+XjxK");
      multiKey3.toString();
      int int0 = multiKey3.size();
      assertEquals(3, int0);
  }
}
