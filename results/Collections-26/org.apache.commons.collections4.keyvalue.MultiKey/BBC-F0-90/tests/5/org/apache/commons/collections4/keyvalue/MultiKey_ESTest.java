/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:13 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = null;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer1, integer1, (Integer) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("1zV.;\"x,Nwn:m'&f", "BGm>)FXWG\"+xs|Zp5-r");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "x:";
      stringArray0[1] = "BGm>)FXWG\"+xs|Zp5-r";
      stringArray0[2] = "BGm>)FXWG\"+xs|Zp5-r";
      multiKey1.equals(multiKey1);
      int int0 = 2;
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer((-864));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer3);
      // Undeclared exception!
      try { 
        multiKey2.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, MultiKey[, null, ], , null, MultiKey[, null, ]]", string0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("U;8Vg>j`X\"LU", object0, "U;8Vg>j`X\"LU");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "U;8Vg>j`X\"LU", "", "", "U;8Vg>j`X\"LU");
      Integer[] integerArray0 = new Integer[6];
      int int0 = 3;
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      int int1 = 1;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int1);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      multiKey2.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-609));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.size();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1584));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1584
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer0, (Integer) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("1Jy", "1Jy");
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[1Jy, 1Jy]", string0);
      
      multiKey1.hashCode();
      Integer integer1 = new Integer(2025);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, multiKey1, "1Jy");
      multiKey2.size();
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[1Jy, 1Jy]";
      stringArray0[1] = "1Jy";
      stringArray0[2] = "MultiKey[1Jy, 1Jy]";
      stringArray0[3] = "vmI7r;";
      stringArray0[4] = "MultiKey[1Jy, 1Jy]";
      stringArray0[5] = "1Jy";
      stringArray0[6] = "W*rvF&_";
      stringArray0[7] = "MultiKey[1Jy, 1Jy]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object[] objectArray0 = new Object[1];
      multiKey0.toString();
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey2, multiKey2);
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.equals("");
      multiKey1.hashCode();
      multiKey2.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "", (String) null);
      multiKey4.toString();
      multiKey4.getKey(4);
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(30);
      Integer integer1 = new Integer(30);
      Integer integer2 = new Integer(30);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.toString();
      multiKey1.toString();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "MultiKey[30, 30, 30, 30]";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "MultiKey[, , ]";
      Integer integer3 = new Integer(0);
      Object object1 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", objectArray0[1], (Object) null, integer3, object1);
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey1.toString();
      objectArray0[7] = (Object) "";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      multiKey3.size();
      multiKey1.hashCode();
      Object[] objectArray1 = multiKey3.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 4253;
      Integer integer0 = new Integer(4253);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1659));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1659
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "U;8Vg>j`X\"LU");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("U;8Vg>j`X\"LU", object0, "U;8Vg>j`X\"LU");
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, object1, "The array of keys must not be null");
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ">d<\"P{|Q,~tF*";
      stringArray0[1] = "vVpB9$AN Y";
      stringArray0[2] = "GeY@\"S^.";
      stringArray0[3] = "'V`0o+h<G-bb35Qf";
      stringArray0[4] = "x%L& o_&Am~-nvdY0{";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.getKey(0);
      multiKey1.toString();
      multiKey1.equals("vVpB9$AN Y");
      multiKey0.equals("1(xN}`");
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "Jlv~", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, (MultiKey<Object>) null, multiKey1, (MultiKey<Object>) null, multiKey1);
      int int0 = 1659;
      // Undeclared exception!
      try { 
        multiKey2.getKey(1659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1659
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("JU4'o0MT", "JU4'o0MT", "YQ;tlJC]i]=7=8", "JU4'o0MT", "YQ;tlJC]i]=7=8");
      multiKey0.hashCode();
  }
}
