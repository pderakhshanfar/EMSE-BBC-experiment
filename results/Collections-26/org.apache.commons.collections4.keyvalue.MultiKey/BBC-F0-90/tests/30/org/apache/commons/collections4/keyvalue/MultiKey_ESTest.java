/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:55:17 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String string0 = "The array of keys must not be null";
      String string1 = "";
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      Integer integer1 = new Integer(0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int0 = 0;
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, "The array of keys must not be null", (Object) null, integer0, (Object) null);
      multiKeyArray0[0] = multiKey1;
      int int1 = (-3475);
      Integer integer2 = new Integer((-3475));
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-3475));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3475
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "}|`0KIfqXS{k");
      multiKey0.toString();
      multiKey0.getKey(0);
      String string0 = multiKey0.getKey(0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "YvUvV1r4T#tM#)/", "9", "");
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Object object1 = multiKey0.getKey(0);
      objectArray0[1] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, (Object) null, object0);
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, (String) null);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertTrue(multiKey4.equals((Object)multiKey1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{b<,!V:";
      stringArray0[1] = "3a63DiX9OZiJ";
      stringArray0[2] = "0XIERYPY<%.5Q88{r";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray1);
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey1.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      multiKeyArray0[8] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      int int0 = multiKey3.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[0] = multiKey0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer0, integer3, integer4);
      multiKeyArray0[1] = multiKey1;
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer5, integer6);
      multiKeyArray0[2] = multiKey2;
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      multiKey3.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey4.getKey(0);
      MultiKey<String> multiKey5 = new MultiKey<String>("", "T2", "&zd+*2", "e8 6i#hQJI(]B", "");
      MultiKey<String> multiKey6 = new MultiKey<String>("", "MultiKey[0, 0]");
      // Undeclared exception!
      try { 
        multiKey6.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "(( czDJWYJi`";
      int int0 = 506;
      Integer integer0 = new Integer(506);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("(( czDJWYJi`", integer0, "(( czDJWYJi`");
      // Undeclared exception!
      try { 
        multiKey0.getKey(506);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 506
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, object0);
      String string0 = multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-3965));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.hashCode();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[null, null, null, null, java.lang.Object@6fd8b3c8]";
      stringArray0[1] = "MultiKey[null, null, null, null, java.lang.Object@6fd8b3c8]";
      stringArray0[2] = "MultiKey[null, null, null, null, java.lang.Object@6fd8b3c8]";
      stringArray0[3] = "4`~^raO3l :t4&]j";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      String string1 = multiKey2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("*|'v[=D18>'[F2H2k", "", "*|'v[=D18>'[F2H2k", "[X/Wi.DZx&En*>YHqwa", "MultiKey");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*|'v[=D18>'[F2H2k";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "*|'v[=D18>'[F2H2k";
      stringArray0[3] = "*|'v[=D18>'[F2H2k";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "m";
      stringArray0[7] = "";
      stringArray0[8] = "wr1I";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, false);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, multiKey1, "MultiKey", multiKey2, multiKey3);
      Object object1 = multiKey4.getKey(0);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
