/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:30 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "COHc}nX% KCR4$");
      boolean boolean1 = multiKey1.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "COHc}nX% KCR4$";
      objectArray0[2] = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey2, multiKey0, multiKey2, multiKey0);
      Integer integer0 = new Integer((-1273));
      MultiKey<String> multiKey4 = new MultiKey<String>("", (String) null);
      assertFalse(multiKey4.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      String string0 = "64h7)zx]FqHP#W]k\"";
      MultiKey<String> multiKey0 = new MultiKey<String>("64h7)zx]FqHP#W]k\"", "", "TdNfuMF'T&2zS.?H]J");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("64h7)zx]FqHP#W]k\"", "MultiKey", "dr8\"]1Jr ``&N*/U");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("64h7)zx]FqHP#W]k\"", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey4.toString();
      multiKey4.toString();
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey3, multiKey2);
      multiKey5.hashCode();
      multiKey1.toString();
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKey6.equals(multiKey4);
      multiKey6.size();
      String string1 = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey7 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[MultiKey[64h7)zx]FqHP#W]k\", , TdNfuMF'T&2zS.?H]J], MultiKey[], MultiKey[64h7)zx]FqHP#W]k\", MultiKey, dr8\"]1Jr ``&N*/U], MultiKey[64h7)zx]FqHP#W]k\", ]]");
      // Undeclared exception!
      try { 
        multiKey7.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(3974);
      Integer integer1 = new Integer(3974);
      Integer integer2 = new Integer(3974);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer0, integer2);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, "");
      Object object0 = multiKey0.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "MultiKey[]", object0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals("MultiKey[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "");
      multiKey1.hashCode();
      Integer integer0 = new Integer((-847));
      Integer integer1 = new Integer((-847));
      Integer integer2 = new Integer((-847));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "MultiKey", "", "MultiKey", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("5k(1P#i(0-", "5k(1P#i(0-");
      multiKeyArray0[1] = multiKey1;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5k(1P#i(0-";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = null;
      stringArray0[3] = "MultiKey";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = "MultiKey";
      stringArray0[6] = "";
      stringArray0[7] = "5k(1P#i(0-";
      stringArray0[8] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(integer0);
      multiKey0.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[MultiKey[0, 0, 0], MultiKey[0, 0, 0], 0, 0]", ";+ g=wcT(Zt~tniLM", ";+ g=wcT(Zt~tniLM", "The array of keys must not be null");
      multiKey2.getKey(0);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2430));
      Integer integer2 = new Integer((-2430));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      Integer integer3 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("a4p$IPe-D&&Jcq6$3", object4, "a4p$IPe-D&&Jcq6$3", integer0, (Object) null);
      multiKey1.getKey(0);
      objectArray0[5] = (Object) "a4p$IPe-D&&Jcq6$3";
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4043));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4043
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = new Object();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(object1);
      multiKey0.getKeys();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[java.lang.Object@42a7a2c]";
      stringArray0[1] = "MultiKey[java.lang.Object@42a7a2c]";
      stringArray0[2] = "MultiKey[java.lang.Object@42a7a2c]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey1.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", (String) null);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, , null]", string0);
      
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, multiKey1, "", object0);
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey3.getKeys();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-5131));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2815));
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      Object object1 = new Object();
      boolean boolean0 = multiKey4.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("=;._o~", "=;._o~", "=;._o~");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("=;._o~", "=;._o~", "=;._o~", multiKey0, object0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.hashCode();
  }
}
