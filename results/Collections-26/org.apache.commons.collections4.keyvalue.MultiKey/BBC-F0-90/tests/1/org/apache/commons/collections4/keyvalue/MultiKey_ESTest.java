/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:43:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", (String) null, "?7nsoU.oXP`6k+(");
      multiKey0.toString();
      multiKey0.equals(multiKey0);
      Integer integer0 = new Integer(4680);
      Integer integer1 = new Integer((-1));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1, "org.apache.commons.collections4.keyvalue.MultiKey", "?7nsoU.oXP`6k+(", (Object) null);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1719));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1719
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" %V'/zSChv)-", " %V'/zSChv)-", (String) null, "@8tQcO)_>7^");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String>[] multiKeyArray1 = multiKey1.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("^", (Object) null, (Object) null);
      multiKey0.getKey(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.hashCode();
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0, 0, 0]", "'W6T%UUu;ejx/9qCJ", "MultiKey[0, 0, 0, 0]", "RQWgKBm3j-5Pi 2fU$", "MultiKey[0, 0, 0, 0]");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      Object object0 = multiKey3.getKey(0);
      multiKey2.equals(object0);
      multiKey2.toString();
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Integer integer0 = new Integer((-3122));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0);
      Integer integer1 = new Integer((-3122));
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer1, "", object0, object1);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKey2.toString();
      multiKeyArray0[3] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey3.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-631));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -631
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "MultiKey";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "MultiKey");
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      Integer integer2 = new Integer(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer0, integer2, "MultiKey");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey1.equals("MultiKey[0, 0]");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-241));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -241
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("$+xnO!{h:;G", "L}qVu[AAqH[-:k,");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1288));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1288
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      Object object1 = multiKey0.getKey(2);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, "/?$R[.Fu(W_|NhD`", multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0, multiKey1, multiKey1);
      // Undeclared exception!
      try { 
        multiKey3.getKey(1753);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1753
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("{J^Q%k(zkJHHx~xsUg4", "", "");
      multiKey0.size();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      int int0 = 97;
      Integer integer0 = new Integer(97);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[1] = multiKey1;
      Integer integer1 = new Integer(int0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, integer1);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, (Integer) int0);
      multiKeyArray0[3] = multiKey3;
      Integer integer2 = new Integer(97);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, integer1);
      multiKeyArray0[4] = multiKey4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[5] = multiKey5;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer0, integer2, integer2);
      multiKeyArray0[6] = multiKey6;
      Integer integer3 = new Integer((-2265));
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer((-4362));
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer3, integer4, integer4, integer5, integer1);
      multiKeyArray0[7] = multiKey7;
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>((Integer) null, integer5);
      multiKeyArray0[8] = multiKey8;
      MultiKey<MultiKey<Integer>> multiKey9 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      Integer integer6 = multiKey4.getKey(0);
      assertEquals(97, (int)integer6);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, object0);
      assertEquals(3, multiKey1.size());
  }
}
