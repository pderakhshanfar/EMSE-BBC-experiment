/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:46 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey3;
      Integer integer1 = new Integer(1140);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKeyArray0[1] = multiKey4;
      Integer integer2 = new Integer(708);
      Integer integer3 = new Integer(1140);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer2, integer3, integer2, integer3);
      multiKeyArray0[2] = multiKey5;
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer((-2336));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer4, (Integer) null, integer5, integer4);
      multiKeyArray0[3] = multiKey6;
      Integer integer6 = new Integer(2);
      Integer integer7 = new Integer(1140);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer3, integer4, integer6, integer0, integer7);
      multiKeyArray0[4] = multiKey7;
      Integer integer8 = new Integer(0);
      Integer integer9 = new Integer(2);
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>((Integer) null, (Integer) null, integer3, integer8, integer9);
      multiKeyArray0[5] = multiKey8;
      Integer integer10 = new Integer((-165));
      MultiKey<Integer> multiKey9 = new MultiKey<Integer>(integer9, integer3, integer10, (Integer) null);
      multiKeyArray0[6] = multiKey9;
      MultiKey<MultiKey<Integer>> multiKey10 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey10.getKey(2);
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer0 = new Integer(1140);
      Integer integer1 = new Integer(708);
      Integer integer2 = new Integer(1140);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer((-2336));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer3, (Integer) null, integer4, integer3);
      multiKeyArray0[3] = multiKey3;
      Integer integer5 = new Integer(2);
      Integer integer6 = new Integer(1140);
      Integer integer7 = new Integer(0);
      Integer integer8 = new Integer(2);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, (Integer) null, integer2, integer7, integer8);
      multiKeyArray0[5] = multiKey4;
      Integer integer9 = new Integer((-165));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer8, integer2, integer9, (Integer) null);
      multiKeyArray0[6] = multiKey5;
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[2, 1140, -165, null]", string0);
      
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      Object object0 = multiKey6.getKey(2);
      assertNull(object0);
      
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey2, multiKey1, (Object) null);
      boolean boolean0 = multiKey7.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(405);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4076);
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer2 = new Integer(1);
      integerArray0[4] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKeyArray0[0] = multiKey3;
      Integer integer1 = new Integer(1140);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKeyArray0[1] = multiKey4;
      Integer integer2 = new Integer(708);
      multiKey4.toString();
      Integer integer3 = new Integer(1140);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer2, integer3, integer2, integer3);
      multiKeyArray0[2] = multiKey5;
      Integer integer4 = new Integer(1);
      MultiKey<String> multiKey6 = new MultiKey<String>("The array of keys must not be null", (String) null, "The array of keys must not be null", "", "MultiKey");
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", integer0, "(q;XX}:", "");
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "{bjuc&rUC9P\"Xd1");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = null;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>(" A", " A");
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      multiKey2.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " A";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey3.size();
      multiKey2.size();
      Object object0 = new Object();
      multiKey3.equals(object0);
      multiKey2.toString();
      multiKey2.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey3;
      multiKeyArray0[4] = multiKey3;
      multiKeyArray0[5] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int1 = multiKey4.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-uI";
      stringArray0[1] = ":[#<.eQ8a1,";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "#}c@;K'(;D<w";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-uI, :[#<.eQ8a1,, , , , , , #}c@;K'(;D<w, ]", string0);
      
      int int0 = multiKey0.size();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("GOJkJd<", "GOJkJd<", "", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "BU,|Q", (String) null, "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, "GOJkJd<", "GOJkJd<");
      Object object0 = multiKey2.getKey(0);
      assertNotNull(object0);
      
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, object0, integer0, (Object) null);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = new Integer((-498));
      integerArray0[4] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[0, 0, 0, 0, -498]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.size();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = null;
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "");
      int int0 = (-415);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-415));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -415
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
