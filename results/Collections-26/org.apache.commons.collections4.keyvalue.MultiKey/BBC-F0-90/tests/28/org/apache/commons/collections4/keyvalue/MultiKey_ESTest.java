/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:54:31 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", (String) null, "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      Integer[] integerArray0 = new Integer[5];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1760);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[1, 1, 1, 1, 1760]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, object0, "org.apache.commons.collections4.keyvalue.MultiKey", int0, multiKey3);
      boolean boolean0 = multiKey2.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("'>2_#>|3\u0000wq6T8`o", (String) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey2;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("'>2_#>|3\u0000wq6T8`o", (Object) null, objectArray0[2]);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      Integer integer0 = new Integer((-762));
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKeyArray0);
      multiKey5.equals(multiKey6);
      assertFalse(multiKey6.equals((Object)multiKey4));
      assertFalse(multiKey6.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1985);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("3", "MultiKey", "w", "");
      boolean boolean1 = multiKey0.equals(multiKey1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object0, multiKey0, object0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[java.lang.Object@365768ac, java.lang.Object@365768ac, java.lang.Object@365768ac, MultiKey[], java.lang.Object@365768ac]";
      multiKey1.toString();
      stringArray0[1] = "MultiKey[java.lang.Object@365768ac, java.lang.Object@365768ac, java.lang.Object@365768ac, MultiKey[], java.lang.Object@365768ac]";
      stringArray0[2] = "MultiKey[java.lang.Object@365768ac, java.lang.Object@365768ac, java.lang.Object@365768ac, MultiKey[], java.lang.Object@365768ac]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.toString();
      multiKey3.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey3.toString();
      Object object1 = new Object();
      multiKey2.toString();
      multiKey1.toString();
      multiKey3.toString();
      boolean boolean0 = multiKey3.equals(object1);
      assertFalse(boolean0);
      
      multiKey3.getKeys();
      multiKey2.getKeys();
      multiKey3.getKeys();
      multiKey0.size();
      multiKey1.size();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.equals("vkGElGHs])");
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "vkGElGHs])", "MultiKey[]", "vkGElGHs])", "MultiKey[]");
      multiKey1.toString();
      int int0 = (-1253);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1253));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1253
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "#jS~Mc/YpSmx&";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKey(0);
      objectArray0[2] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(5060);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(998);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 998, 998, 0, -1]", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(0);
      multiKey1.getKeys();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[0, 998, 998, 0, -1]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.getKey(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      boolean boolean0 = multiKey3.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1040);
      Integer integer1 = new Integer(1040);
      Integer integer2 = new Integer(1040);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1, integer1, integer2);
      multiKey0.equals(integer2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i8jB)G";
      stringArray0[1] = "";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "i<}O5&k*o:muob#";
      stringArray0[4] = "";
      stringArray0[5] = "<jf,z;]}GGZWOI";
      String string1 = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-669));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -669
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey0.getKey(int0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(int0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer1, multiKey0, integer2);
      assertEquals(4, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2499));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2499
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer((-1361));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer2);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[3, 3, -1361, -1361]", "", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey");
      multiKey2.toString();
      int int0 = multiKey2.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1137);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2527));
      integerArray0[4] = integer4;
      int int1 = 4;
      Integer integer5 = new Integer(4);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int1);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2196
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
