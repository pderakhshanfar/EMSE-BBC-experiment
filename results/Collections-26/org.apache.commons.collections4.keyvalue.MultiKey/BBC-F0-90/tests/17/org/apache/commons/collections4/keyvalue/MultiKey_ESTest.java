/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:31 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("$}+", "$}+", "$}+");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("$}+", multiKey0, multiKey0, multiKey0);
      Integer integer0 = new Integer(759);
      Integer integer1 = new Integer((-1285));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer1);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, integer1, object0, multiKey0);
      Integer integer2 = new Integer(467);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey4 = new MultiKey<String>("$}+", (String) null, "1_glw=g7L]", (String) null);
      multiKeyArray0[0] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>((String) null, "$}+", "1_glw=g7L]", (String) null);
      multiKeyArray0[1] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey6.size();
      boolean boolean0 = multiKey4.equals(multiKey4);
      assertTrue(boolean0);
      
      Integer integer3 = new Integer(2);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer3, (Integer) null, (Integer) null);
      MultiKey<MultiKey<Integer>> multiKey8 = new MultiKey<MultiKey<Integer>>(multiKey7, multiKey2, multiKey7, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey8.getKeys();
      assertFalse(multiKey2.equals((Object)multiKey7));
      assertFalse(multiKey7.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      String[] stringArray0 = new String[0];
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      Integer integer0 = new Integer(439);
      Integer integer1 = new Integer(439);
      Integer integer2 = new Integer((-437));
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.equals((Object) null);
      multiKey1.toString();
      Integer integer3 = new Integer(1303);
      multiKey1.equals(integer3);
      multiKey2.toString();
      multiKey2.size();
      multiKey1.size();
      String[] stringArray1 = multiKey2.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      String[] stringArray0 = new String[0];
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(":Q<v", object1, ":Q<v", (Object) null, multiKey1);
      Integer integer0 = new Integer(439);
      Integer integer1 = new Integer(439);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, multiKey2);
      Integer integer2 = new Integer((-437));
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKey4.equals((Object) null);
      multiKey3.equals(multiKey1);
      multiKey1.toString();
      Integer integer3 = new Integer(1303);
      multiKey1.equals(integer3);
      multiKey4.toString();
      int int0 = multiKey4.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1246));
      Integer integer1 = new Integer(3);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "E9tB+br";
      stringArray0[2] = "Q4M*wt]0/z";
      stringArray0[3] = "";
      stringArray0[4] = "iQ#}TK2jJI";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey0.equals(multiKey1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      Object[] objectArray0 = multiKey2.getKeys();
      assertNotSame(stringArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("=*=50U$h", "=*=50U$h", "=*=50U$h");
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey2.getKey(0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey1, "=*=50U$h");
      multiKey2.toString();
      multiKey3.getKeys();
      multiKey3.toString();
      multiKey3.size();
      multiKey3.equals(objectArray0[1]);
      multiKey0.getKey(0);
      MultiKey<MultiKey<Integer>> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", ">'/?y5o_@ i8xL0QmY", ">'/?y5o_@ i8xL0QmY");
      multiKey0.hashCode();
      multiKey0.getKey(2);
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, "", integer1);
      int int0 = multiKey1.size();
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey2.toString();
      int int1 = multiKey2.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(2780);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer1, integer1);
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.equals("MultiKey[-1, -1, -1, 2780, 2780]");
      Integer integer2 = new Integer((-3983));
      multiKey0.equals(integer2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[-1, -1, -1, 2780, 2780]";
      stringArray0[1] = "MultiKey[-1, -1, -1, 2780, 2780]";
      multiKey0.toString();
      stringArray0[2] = "MultiKey[-1, -1, -1, 2780, 2780]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.getKeys();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      int int0 = (-2621);
      Integer integer1 = new Integer((-2621));
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer2);
      String string0 = "!F0cVeg";
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("!F0cVeg", "42");
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(";", ";", ";", ")CO<nU@1><M`'");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ")CO<nU@1><M`'";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object0, object1, (Object) null, integer0);
      multiKey2.equals(multiKey1);
      MultiKey<String> multiKey3 = new MultiKey<String>("-0vV6J`Yq!C5+pL_\"}", "-0vV6J`Yq!C5+pL_\"}", "-0vV6J`Yq!C5+pL_\"}", "}=J^F:1e]+Q79G~", "}=J^F:1e]+Q79G~");
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "<6n>";
      stringArray0[4] = "Y`vGa";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , , <6n>, Y`vGa]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "xhI3->2I|$]";
      String string1 = "AUabk[3wl>";
      MultiKey<String> multiKey0 = new MultiKey<String>("xhI3->2I|$]", "xhI3->2I|$]", "", "AUabk[3wl>", "");
      String string2 = "y4U>KtmHzjxH";
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("xhI3->2I|$]", "y4U>KtmHzjxH", "MultiKey", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, "");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2);
      int int0 = 3139;
      // Undeclared exception!
      try { 
        multiKey3.getKey(3139);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3139
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-801));
      Integer integer1 = new Integer((-801));
      Integer integer2 = new Integer((-1848));
      Integer integer3 = new Integer((-801));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-801));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -801
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Q/m<<X\"EjTr", "=/<kO(JqKq", "5^.Obw~M*rQ}7z");
      assertEquals(3, multiKey0.size());
  }
}
