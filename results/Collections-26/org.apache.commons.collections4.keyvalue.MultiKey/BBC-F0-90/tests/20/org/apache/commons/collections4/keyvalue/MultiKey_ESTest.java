/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:53:50 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("-%B", "-%B", "-%B");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(";Vj3%%KMWL;Jo4}\"9+3", "", "", ";Vj3%%KMWL;Jo4}\"9+3");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-2089));
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Object object1 = multiKey0.getKey(0);
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, object2, object1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object0, object2, multiKey0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKey0.toString();
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey1;
      multiKeyArray0[8] = multiKey0;
      boolean boolean0 = false;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<String>[] multiKeyArray1 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(")", ")");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
      
      multiKey1.toString();
      Integer integer0 = new Integer(2331);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey2.toString();
      int int2 = multiKey2.hashCode();
      assertFalse(int2 == int0);
      
      multiKey1.toString();
      multiKey1.equals("MultiKey[null, 2331]");
      multiKey0.toString();
      boolean boolean0 = multiKey2.equals("MultiKey[]");
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[), )]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer(1790);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, (Integer) null);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) null;
      Integer integer1 = new Integer(1790);
      MultiKey<String> multiKey1 = new MultiKey<String>("3-7f1H:+w7[wHHa", "", "3-7f1H:+w7[wHHa", "", "3-7f1H:+w7[wHHa");
      multiKey1.getKey(0);
      Object object0 = new Object();
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, "3-7f1H:+w7[wHHa", object0, integer2);
      Object object1 = multiKey2.getKey(0);
      objectArray0[1] = object1;
      Object object2 = multiKey2.getKey(0);
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      multiKey1.getKey(0);
      objectArray0[5] = (Object) "3-7f1H:+w7[wHHa";
      Object object5 = new Object();
      objectArray0[6] = object5;
      Object object6 = new Object();
      objectArray0[7] = object6;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      Integer integer3 = new Integer((-5035));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, (Integer) null, (Integer) null, integer3);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, "T");
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-188));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      int int1 = 4;
      Integer integer4 = new Integer(4);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[2]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int1);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      Object object1 = multiKey0.getKey(1);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.equals(object0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKey0.toString();
      multiKeyArray0[5] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey3.getKeys();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-312));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-312));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-272));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, false);
      boolean boolean0 = multiKey4.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(440);
      Integer integer1 = new Integer(440);
      Integer integer2 = new Integer(440);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      // Undeclared exception!
      try { 
        multiKey0.getKey(440);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 440
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "]vbtk3wfT4\\1&1nK8N";
      String string1 = "''uR)";
      MultiKey<String> multiKey0 = new MultiKey<String>("]vbtk3wfT4\u0001&1nK8N", "''uR)");
      Integer integer0 = new Integer((-1602));
      Integer integer1 = new Integer((-3673));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "''uR)", "''uR)", integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3673
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer((-2024));
      Integer integer2 = new Integer((-2024));
      Integer integer3 = new Integer((-2024));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer3);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[5, -2024, -2024, -2024, -2024]";
      stringArray0[1] = "MultiKey[5, -2024, -2024, -2024, -2024]";
      stringArray0[2] = "MultiKey[5, -2024, -2024, -2024, -2024]";
      stringArray0[3] = "MultiKey[5, -2024, -2024, -2024, -2024]";
      stringArray0[4] = "MultiKey[5, -2024, -2024, -2024, -2024]";
      stringArray0[5] = "MultiKey[5, -2024, -2024, -2024, -2024]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey2.equals(multiKey3);
      multiKey2.hashCode();
      Object object0 = new Object();
      multiKey2.equals(object0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2738);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2738
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
