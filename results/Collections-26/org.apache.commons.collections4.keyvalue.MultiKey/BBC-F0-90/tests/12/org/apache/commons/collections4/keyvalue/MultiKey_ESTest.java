/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:50:15 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-3964));
      Integer integer1 = new Integer(0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) integer0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        multiKey1.getKey(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "U?", "U?");
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "", integer0);
      Object object0 = multiKey1.getKey(0);
      multiKey1.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[1];
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.equals(integer0);
      Integer integer1 = new Integer(0);
      multiKey0.equals(object0);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[, , U?, U?]", "", "MultiKey[MultiKey[, , U?, U?], , , 1]");
      multiKey3.getKey(1);
      multiKey1.equals("");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integerArray0);
      multiKeyArray0[3] = multiKey4;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object>[] multiKeyArray1 = multiKey5.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1490));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1490
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>(":dO", "", "Q", ":dO", "2vj}W>jE");
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) "2vj}W>jE";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "2vj}W>jE";
      Object object1 = new Object();
      objectArray0[7] = object1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-791));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -791
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "");
      Object object0 = new Object();
      Integer integer0 = new Integer(3030);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey1, "", "", "MultiKey");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", multiKey0, object0, multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, "Nx+UX<L\"Q-l;,z'", multiKey1);
      multiKey4.hashCode();
      multiKey3.toString();
      multiKey0.size();
      multiKey3.equals("Nx+UX<L\"Q-l;,z'");
      boolean boolean0 = multiKey4.equals(object0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(3030);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      boolean boolean1 = multiKey0.equals(multiKey5);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "2ce$-S;c?A|:jFr;1M?";
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string1 = "<`Ij~/* oE@!";
      stringArray0[4] = "<`Ij~/* oE@!";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Object object0 = new Object();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, "", "");
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.toString();
      multiKey1.equals(integer1);
      multiKey1.getKey(2);
      multiKey0.getKeys();
      Integer integer2 = new Integer((-1));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, "MultiKey[2, 2, 2]", "");
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8Ns's'{";
      stringArray0[1] = "";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "O'A";
      stringArray0[4] = "Ud0*]*";
      stringArray0[5] = "-TEg`^i=uVG_rf)";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-147));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-877));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-147));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(6);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey3 = new MultiKey<String>("The array of keys must not be null", "", "", "", "");
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, multiKey2, multiKey3);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey2, multiKey4, multiKey2);
      Object[] objectArray0 = multiKey5.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      int int0 = 1;
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "", integer0);
      multiKey1.getKey(0);
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[0];
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", "", "", "");
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("j'>k! ", multiKey1, (Object) null);
      multiKey2.toString();
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1934));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1934
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      int int0 = (-2920);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2920));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2920
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(4065);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(4065);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(4065);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4065
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "\"m$-Ks'O.w+:VR7";
      stringArray0[3] = "";
      stringArray0[4] = "X*AaE1F,@nOK:%;| >";
      stringArray0[5] = "";
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>("^98YHFbn&l", "");
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", multiKey2);
      multiKey1.toString();
      multiKey0.toString();
      int int0 = (-2329);
      multiKey2.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2329));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2329
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer0 = new Integer((-1309));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-1309));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer3, integer4, integer1);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
