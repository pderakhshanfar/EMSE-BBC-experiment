/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:47:05 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "T7~>yEJ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "F1BPyDn%";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer2);
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "M_22";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(3);
      assertNull(object0);
      
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      boolean boolean0 = multiKey2.equals((Object) null);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("M_22", "M_22", "M_22", "M_22", "M_22");
      multiKey3.hashCode();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "M_22";
      stringArray0[1] = "M_22";
      stringArray0[2] = "M_22";
      stringArray0[3] = "M_22";
      stringArray0[4] = "M_22";
      stringArray0[5] = "M_22";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey5 = new MultiKey<String>("M_22", "M_22", "");
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[M_22, M_22, ]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-3675));
      Integer integer1 = new Integer((-3675));
      Integer integer2 = new Integer((-3675));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1, integer0, integer1, integer2);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("QBF.>['82BsC>(j@S", "MultiKey[-3675]", "MultiKey[-3675]");
      multiKey2.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey3.size();
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, "QBF.>['82BsC>(j@S", integer0, multiKey0, integer4);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.equals("MultiKey[MultiKey[-3675], QBF.>['82BsC>(j@S, -3675, MultiKey[-3675, -3675, -3675, -3675, -3675], 1]");
      multiKey4.toString();
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
      
      multiKey4.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-3675]", string0);
      
      Integer integer5 = new Integer(7);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey4.equals(integer4);
      assertFalse(boolean0);
      
      multiKey4.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1864));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      assertNotSame(multiKeyArray1, multiKeyArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", (Object) null, (Object) null, "");
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "Iv+k/");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("Iv+k/", integer0, (Object) null, integer0, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.equals(multiKey2);
      multiKey2.hashCode();
      multiKey0.getKeys();
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey3.size();
      multiKey0.getKeys();
      multiKey1.size();
      multiKey2.getKey(0);
      int int0 = multiKey3.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "T7~>yEJ";
      stringArray0[1] = "";
      stringArray0[2] = "-&8\"uVq(-cIO4";
      stringArray0[3] = "F1BPyDn%";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer2);
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Kr~qg[7", "Kr~qg[7", "Kr~qg[7");
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, object1);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.hashCode();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "", "Iz&[0qu\"cNg}jRi<58'");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("The array of keys must not be null", "KbC", "ADi_mlS=:}0z", "Yqk\"_3<]>>sxyc", "Iz&[0qu\"cNg}jRi<58'");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("CL^fP(NEWzR8", "0g", "0g", "ADi_mlS=:}0z", "ADi_mlS=:}0z");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("Yqk\"_3<]>>sxyc", "MultiKey");
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey", "", "WBAsxW/=+'<bC?#w%n", "Iz&[0qu\"cNg}jRi<58'", "Qr~JbIRgwoE{X&_");
      multiKeyArray0[4] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("CL^fP(NEWzR8", "", "org.apache.commons.collections4.keyvalue.MultiKey", "n:ikP!OBcZS", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[5] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("0(Y=DP$+", "org.apache.commons.collections4.keyvalue.MultiKey", "WBAsxW/=+'<bC?#w%n");
      multiKeyArray0[6] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("", "Yqk\"_3<]>>sxyc", "KbC", "t@&nip{]3@v\"@9|o", "Qr~JbIRgwoE{X&_");
      multiKeyArray0[7] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = (-3108);
      // Undeclared exception!
      try { 
        multiKey9.getKey((-3108));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3108
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("I;1cBZG!CE&LKR$jvo", "I;1cBZG!CE&LKR$jvo", "I;1cBZG!CE&LKR$jvo", "I;1cBZG!CE&LKR$jvo");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "I;1cBZG!CE&LKR$jvo";
      Object object0 = new Object();
      objectArray0[1] = object0;
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo]";
      multiKey0.toString();
      multiKey2.toString();
      stringArray0[1] = "MultiKey[I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo]";
      stringArray0[2] = "MultiKey[I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo]";
      multiKey0.toString();
      stringArray0[3] = "MultiKey[I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo]";
      stringArray0[4] = "MultiKey[I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo]";
      stringArray0[5] = "MultiKey[I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKey3.getKey(0);
      multiKey2.equals("MultiKey[I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo]");
      multiKey2.equals("MultiKey[I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo, I;1cBZG!CE&LKR$jvo]");
      int int0 = multiKey2.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1417));
      Integer integer1 = new Integer((-1417));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1, multiKey0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1024));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1024
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
