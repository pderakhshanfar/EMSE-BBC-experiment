/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:21:32 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("/", "C~d_jJu[\"aS", ")wZX?N2");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "/";
      objectArray0[1] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "2";
      objectArray0[4] = (Object) "2";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1733);
      Integer integer3 = new Integer(1733);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      Object object1 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, multiKey1, object0, object1);
      Object object2 = multiKey3.getKey(0);
      boolean boolean0 = multiKey0.equals(object2);
      assertTrue(boolean0);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("'r", "'r", "'r", "'r");
      Object object0 = new Object();
      Integer integer0 = new Integer(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, (Object) null, integer0);
      multiKey1.getKey(2);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1361);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(654);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKey(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[null, null, 0, 0, 654]";
      stringArray0[1] = "MultiKey[null, null, 0, 0, 654]";
      stringArray0[2] = "MultiKey[null, null, 0, 0, 654]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.hashCode();
      String[] stringArray0 = new String[0];
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey1.toString();
      multiKey0.equals("MultiKey[]");
      multiKey1.equals("MultiKey[]");
      Integer integer0 = null;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey2.equals("MultiKey[]");
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1112));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1112
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, object1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[java.lang.Object@1df5505d, 0, java.lang.Object@7eb1010b]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.size();
      Object object2 = new Object();
      Object object3 = new Object();
      Integer integer1 = new Integer((-4520));
      Integer integer2 = new Integer((-4520));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object2, multiKey0, object3, integer1, integer2);
      multiKey2.toString();
      Object object4 = multiKey2.getKey(0);
      multiKey0.equals(object4);
      multiKey0.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-4520));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4520
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|[m(yVv";
      stringArray0[1] = "@[";
      stringArray0[2] = "CM";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "%+NeAa@/";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("|[m(yVv", "%+NeAa@/", "%+NeAa@/");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      assertEquals(4, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", (Object) null);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = null;
      String string0 = "Il;ks6Ch";
      MultiKey<String> multiKey2 = new MultiKey<String>("Il;ks6Ch", "Il;ks6Ch", "Il;ks6Ch");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, multiKey2);
      multiKey3.size();
      multiKey0.toString();
      multiKey2.toString();
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1361);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(4);
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      MultiKey<String> multiKey1 = new MultiKey<String>("gU$$#JpaMl1", "", "Fa/^C");
      boolean boolean0 = multiKey1.equals("gU$$#JpaMl1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "/U,1fI&_@8|@");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-981));
      Integer integer1 = new Integer((-981));
      Integer integer2 = new Integer(31);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object0, multiKey0, integer2);
      int int0 = multiKey1.size();
      multiKey0.size();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "cHKoS\",87Z";
      stringArray0[2] = "1G,B";
      stringArray0[3] = "";
      stringArray0[4] = "Q{)zwex8_B#";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      int int1 = multiKey2.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(275);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 275
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(827);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 827
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
