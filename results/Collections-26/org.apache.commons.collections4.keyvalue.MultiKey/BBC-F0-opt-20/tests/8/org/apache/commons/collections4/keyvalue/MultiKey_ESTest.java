/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:05:16 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("/", "", (String) null);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = (-13);
      Integer integer0 = new Integer((-13));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      int int1 = 5;
      Integer integer2 = new Integer(5);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1136));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer3);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1);
      multiKey2.toString();
      multiKey0.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[MultiKey[-13, -13, 5, 5, 5, -1136], MultiKey[MultiKey[-13, -13, 5, 5, 5, -1136], 5]]", ".S}xh{Rw{JTZzy'L", "MultiKey[MultiKey[-13, -13, 5, 5, 5, -1136], MultiKey[MultiKey[-13, -13, 5, 5, 5, -1136], 5]]", "");
      multiKey3.toString();
      Object object0 = new Object();
      multiKey2.equals(multiKey1);
      multiKey1.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey", "", "MultiKey[-13, -13, 5, 5, 5, -1136]", "f!", "'");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-13));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, ")U5X<eQH");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(")U5X<eQH", integer0, multiKey0, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey0, multiKey1);
      multiKey2.size();
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer0 = new Integer((-2135));
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.hashCode();
      multiKey2.size();
      multiKey2.hashCode();
      String[] stringArray1 = multiKey0.getKeys();
      multiKey0.equals((Object) null);
      String[] stringArray2 = multiKey0.getKeys();
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, "", "");
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, , ], MultiKey[, , ], , ]", string0);
      
      multiKey2.size();
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey1.getKeys();
      boolean boolean1 = multiKey2.equals("MultiKey[MultiKey[, , ], MultiKey[, , ], , ]");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-415);
      Integer integer0 = new Integer((-415));
      Integer integer1 = new Integer(3);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "$dOtB", "", "$FOZltC_x8vE_pah");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, 0, 0, 5, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey0, multiKey1, multiKey1, multiKey0);
      multiKey2.toString();
      Integer integer0 = new Integer(3213);
      Integer integer1 = new Integer(3213);
      Integer integer2 = new Integer(3213);
      Integer integer3 = new Integer(3213);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer3);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-845));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -845
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "g=p^K;QxAb", "g=p^K;QxAb", "g=p^K;QxAb");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, g=p^K;QxAb, g=p^K;QxAb, g=p^K;QxAb]", string0);
      
      int int0 = 2;
      multiKey0.getKey(2);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("g=p^K;QxAb", "g=p^K;QxAb", object0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1918);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      int int2 = multiKey3.hashCode();
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(964);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 964, 964]", string0);
      
      Integer integer2 = multiKey0.getKey(0);
      objectArray0[1] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
      
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, integer2, "o{I!gt.B~#uBy_");
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("hGG", "");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("A39b<G^7]['73", (Object) null, integer0, (Object) null, integer0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-295));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -295
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      multiKey0.toString();
      multiKey0.equals(integer1);
      String string0 = "Hf";
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("IKn", "Hf", "h`");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-240));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -240
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "OLQ*=kvZ_5/";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "[E{Hw0bLQZxPgAm=M";
      stringArray0[3] = "OX)e+^*4P4-Qsl";
      stringArray0[4] = "m%";
      stringArray0[5] = "pN'mhMf?D_TetMmo";
      stringArray0[6] = "[";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("[E{Hw0bLQZxPgAm=M", "org.apache.commons.collections4.keyvalue.MultiKey", "k:$d'CN;YM?~oP96");
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }
}
