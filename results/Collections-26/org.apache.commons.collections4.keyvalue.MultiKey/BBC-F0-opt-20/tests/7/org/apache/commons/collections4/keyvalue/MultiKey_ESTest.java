/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:33 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertFalse(multiKey0.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "^*.,@U&P}gV");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("za/Lpxq;lmo", "xi6rC;g*#mee");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      int int0 = 4;
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer((-289));
      Integer integer3 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer3);
      multiKeyArray0[0] = multiKey1;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer3;
      integerArray0[1] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      integerArray0[6] = integer3;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[1] = multiKey2;
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(int0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer4, integerArray0[4], integer5, integer4);
      multiKeyArray0[2] = multiKey3;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) int0, (Integer) int0);
      multiKeyArray0[3] = multiKey4;
      Integer integer6 = new Integer(2729);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>((Integer) int0, integer4, (Integer) int0, integer6, integer3);
      multiKeyArray0[4] = multiKey5;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[5] = multiKey6;
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integerArray0, false);
      assertFalse(multiKey7.equals((Object)multiKey4));
      
      multiKeyArray0[6] = multiKey7;
      MultiKey<MultiKey<Integer>> multiKey8 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Object> multiKey9 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey8.equals(multiKey9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 2;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, (Integer) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = object0;
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, object1, objectArray0[1], object1, objectArray0[1]);
      Object object2 = multiKey1.getKey(0);
      objectArray0[3] = object2;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, multiKey2, objectArray0[0]);
      multiKey3.getKey(2);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-1422));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1422
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "'|V-Wk+{(LzMOkS";
      stringArray0[1] = ".";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKey(1);
      String[] stringArray0 = new String[9];
      multiKey0.toString();
      stringArray0[0] = "MultiKey[, java.lang.Object@36b8991e]";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "gJ{0'/";
      stringArray0[4] = "MultiKey[, java.lang.Object@36b8991e]";
      stringArray0[5] = "";
      stringArray0[6] = "";
      multiKey0.toString();
      stringArray0[7] = "";
      stringArray0[8] = "MultiKey[, java.lang.Object@36b8991e]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, (MultiKey<String>) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey1.size();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, "MultiKey[, java.lang.Object@36b8991e]", (Object) null);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(2);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[, ]", "", "x7$", "", "");
      Object object0 = multiKey2.getKey(0);
      assertTrue(object0.equals((Object)string0));
      
      boolean boolean0 = multiKey1.equals("MultiKey[, ]");
      assertFalse(boolean0);
      
      multiKey1.size();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "x7$";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey1.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey4.toString();
      multiKey4.size();
      multiKey3.getKeys();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "x7$";
      stringArray0[5] = "x7$";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey[, , MultiKey[, ], , java.lang.Object@690aa0a4, x7$]";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, multiKey2, multiKey5, (MultiKey<String>) null);
      multiKey6.toString();
      assertFalse(multiKey5.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      multiKey0.toString();
      objectArray0[2] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer1 = new Integer(0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", integer0, integer0, multiKey1, integer1);
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2181));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2181
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "j|;<(L0{\"OhbvH";
      MultiKey<String> multiKey1 = new MultiKey<String>("{nKmp LWwjOX", "{nKmp LWwjOX", "{nKmp LWwjOX", "j|;<(L0{\"OhbvH", "j|;<(L0{\"OhbvH");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.size();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[{nKmp LWwjOX, {nKmp LWwjOX, {nKmp LWwjOX, j|;<(L0{\"OhbvH, j|;<(L0{\"OhbvH]", (Object) null, "MultiKey[1, 1, 1, 1]", integer1);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = 432;
      // Undeclared exception!
      try { 
        multiKey0.getKey(432);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 432
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", "]U^6,", "", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "", "", "", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Hs`(>Y|ll";
      stringArray0[2] = "3c";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1888);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3938));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-277));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[3]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "j(?[-H6Q&H\"h!yN)";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey";
      stringArray0[4] = "3<68soyXpUk#";
      stringArray0[5] = "MultiKey";
      stringArray0[6] = "6XLqX{}C Gd9~1qZ1r";
      stringArray0[7] = "T?Z~d2hlvwM";
      stringArray0[8] = "mP";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer(738);
      boolean boolean0 = multiKey1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[, , , The array of keys must not be null], MultiKey[MultiKey[, , , The array of keys must not be null], MultiKey[, , , The array of keys must not be null]]], MultiKey[MultiKey[, , , The array of keys must not be null], MultiKey[MultiKey[, , , The array of keys must not be null], MultiKey[, , , The array of keys must not be null]]], MultiKey[MultiKey[, , , The array of keys must not be null], MultiKey[MultiKey[, , , The array of keys must not be null], MultiKey[, , , The array of keys must not be null]]], MultiKey[MultiKey[, , , The array of keys must not be null], MultiKey[MultiKey[, , , The array of keys must not be null], MultiKey[, , , The array of keys must not be null]]]]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(561);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(561);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 561
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
