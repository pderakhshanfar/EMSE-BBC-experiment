/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:25:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "#N'`r%xsn?H+1V", "> gw", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, , #N'`r%xsn?H+1V, > gw, ], MultiKey[, , #N'`r%xsn?H+1V, > gw, ], MultiKey[, , #N'`r%xsn?H+1V, > gw, ]]", string0);
      
      multiKey1.hashCode();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[MultiKey[, , #N'`r%xsn?H+1V, > gw, ], MultiKey[, , #N'`r%xsn?H+1V, > gw, ], MultiKey[, , #N'`r%xsn?H+1V, > gw, ]]";
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("#N'`r%xsn?H+1V", "FsL^0Uy", "", "MultiKey[MultiKey[, , #N'`r%xsn?H+1V, > gw, ], MultiKey[, , #N'`r%xsn?H+1V, > gw, ], MultiKey[, , #N'`r%xsn?H+1V, > gw, ]]");
      Object object0 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      multiKey0.size();
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "}4fvaO_^cE$%G(Eop", "}4fvaO_^cE$%G(Eop", "}4fvaO_^cE$%G(Eop");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[The array of keys must not be null, }4fvaO_^cE$%G(Eop, }4fvaO_^cE$%G(Eop, }4fvaO_^cE$%G(Eop]", string0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "}4fvaO_^cE$%G(Eop";
      Integer integer0 = new Integer((-1084));
      Integer integer1 = new Integer((-1084));
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer1, (Object) null, objectArray0[0]);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, objectArray0[0], integer0, multiKey1);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0[0], multiKey2, integer0, multiKey0, integer2);
      multiKey3.getKey(0);
      objectArray0[3] = null;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      multiKey4.toString();
      Object object1 = multiKey4.getKey(0);
      assertNull(object1);
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Q-";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "X", "'2<0=TU.R#", "'2<0=TU.R#", "");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      Integer integer2 = new Integer(4501);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0, integer2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, integer1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[null, 0, 4501], 0]", string0);
      
      multiKey3.equals(multiKey0);
      multiKey2.equals("MultiKey[, X, '2<0=TU.R#, '2<0=TU.R#, ]");
      Object object0 = new Object();
      multiKey2.equals(object0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      boolean boolean0 = multiKey4.equals(integer1);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = null;
      integerArray0[1] = null;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, false);
      boolean boolean1 = multiKey3.equals(multiKey5);
      assertFalse(boolean1);
      
      multiKey3.getKeys();
      assertFalse(multiKey2.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      int int0 = 1;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 1, 1]", string0);
      
      Integer integer3 = multiKey2.getKey(0);
      assertEquals(0, (int)integer3);
      
      boolean boolean0 = multiKey1.equals("MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object2 = multiKey0.getKey(0);
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1990);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      Integer integer4 = multiKey1.getKey(0);
      objectArray0[4] = (Object) integer4;
      Object object4 = new Object();
      objectArray0[5] = object4;
      Object object5 = new Object();
      objectArray0[6] = object5;
      Object object6 = new Object();
      objectArray0[7] = object6;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, object0);
      boolean boolean0 = multiKey3.equals(object1);
      assertFalse(boolean0);
      assertNotSame(object1, object2);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-2774));
      Integer integer1 = new Integer(1133);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1, integer1, multiKey0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals((Object) null);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[MultiKey[-2774, 1133, -2774, -2774], 1133, 1133, MultiKey[-2774, 1133, -2774, -2774], 1133]", "MultiKey[MultiKey[-2774, 1133, -2774, -2774], 1133, 1133, MultiKey[-2774, 1133, -2774, -2774], 1133]", "MultiKey[MultiKey[-2774, 1133, -2774, -2774], 1133, 1133, MultiKey[-2774, 1133, -2774, -2774], 1133]", "~vsz$p1rz");
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey1.getKey(1);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "ddd0)$/X.[,";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "ddd0)$/X.[,");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = "Fv q!BfO$Ps";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "Fv q!BfO$Ps");
      int int0 = (-3556);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3556));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3556
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.equals((Object) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "MultiKey[0, 0, 0, 0]";
      objectArray0[3] = (Object) "MultiKey[0, 0, 0, 0]";
      // Undeclared exception!
      try { 
        multiKey0.getKey(106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 106
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer2, (Object) null, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[MultiKey[0, 0, 0], 0, null, 0]", "MultiKey[MultiKey[0, 0, 0], 0, null, 0]", "MultiKey[MultiKey[0, 0, 0], 0, null, 0]", "MultiKey[MultiKey[0, 0, 0], 0, null, 0]", (String) null);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = object0;
      objectArray0[8] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = (-1309);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1309));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1309
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
