/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:10 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("8@56", "8@56", "8@56");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(8);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "[cERF5t`%");
      Object object0 = multiKey0.getKey(3);
      assertEquals("", object0);
      
      Integer integer2 = new Integer((-360));
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, integer1, integer1, multiKey1);
      multiKey2.size();
      Integer integer3 = new Integer(3);
      multiKey0.equals(integer3);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey3.size();
      Object object1 = new Object();
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integerArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer4, object1, multiKey4);
      Integer integer5 = new Integer((-2742));
      boolean boolean0 = multiKey0.equals(integer5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "", (String) null);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(168);
      Integer integer1 = new Integer(168);
      Integer integer2 = new Integer(168);
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer3, integer1);
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer3;
      objectArray0[4] = (Object) integer3;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, , null]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("KVil]FJWpj?M'.*6W#", "KVil]FJWpj?M'.*6W#");
      boolean boolean0 = multiKey0.equals("KVil]FJWpj?M'.*6W#");
      assertFalse(boolean0);
      
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.getKeys();
      Integer integer0 = new Integer(424);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("KVil]FJWpj?M'.*6W#", multiKey1, integer0);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey", "KVil]FJWpj?M'.*6W#", "M", "MultiKey");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[KVil]FJWpj?M'.*6W#, KVil]FJWpj?M'.*6W#]", string0);
      
      boolean boolean1 = multiKey2.equals(multiKey1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "", (String) null);
      multiKey0.equals((Object) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("|1a&'U{;qv-:n", "", "");
      Integer integer0 = new Integer(736);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) "";
      multiKey0.toString();
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey1;
      multiKey1.toString();
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) integer1;
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[736, , , MultiKey[736, 0, 736], , MultiKey[|1a&'U{;qv-:n, , ], 0]", string0);
      
      multiKey2.getKeys();
      multiKey2.getKeys();
      multiKey2.getKeys();
      String string1 = multiKey0.getKey(0);
      assertEquals("|1a&'U{;qv-:n", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("%rA$8US@", "%rA$8US@", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0);
      Integer integer1 = multiKey1.getKey(1);
      multiKey1.equals(integer1);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      multiKey0.equals(object0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "MultiKey[]", "MultiKey[]", "n", "MultiKey[]");
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1241);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1241
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
      
      multiKey0.size();
      multiKey0.getKeys();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[null, null]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[null, null]]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      int int0 = (-697);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-697));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -697
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey3 = multiKey2.getKey(2);
      multiKey3.toString();
      multiKey0.equals(int0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1308);
      Integer integer1 = new Integer(1308);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(1308);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1308
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
