/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:15:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) multiKey1;
      objectArray0[6] = (Object) multiKey1;
      objectArray0[7] = (Object) integer0;
      objectArray0[8] = (Object) integer0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey2);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object1 = multiKey3.getKey(0);
      boolean boolean1 = multiKey0.equals(object1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("z4~az/;'YZ", "z4~az/;'YZ", "z4~az/;'YZ", "z4~az/;'YZ", "z4~az/;'YZ");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "Q";
      MultiKey<String> multiKey0 = new MultiKey<String>("Q", "Q", "Q", "Y+2r", "Y+2r");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer((-287));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, object1, integer0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.toString();
      int int0 = 3;
      multiKey1.getKey(3);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<Object> multiKey3 = multiKey2.getKey(3);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1521);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1521
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1620));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      int int0 = 1;
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(1);
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0, multiKey0);
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.getKeys();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "The array of keys must not be null", "", "MultiKey[null, null]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey3.equals((Object) null);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey4.toString();
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("DMEEHm[ o", "[/]#Lfjm:[WO_x 61=>", "DMEEHm[ o");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, (Object) null, multiKey0, "[/]#Lfjm:[WO_x 61=>");
      multiKey1.toString();
      multiKey1.equals("Wh*1SFuj}8$");
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      Object object0 = multiKey2.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, object0, object1, (Object) null, integer1);
      multiKeyArray0[4] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, "DMEEHm[ o", "MultiKey[0, 0, null, MultiKey[DMEEHm[ o, [/]#Lfjm:[WO_x 61=>, DMEEHm[ o], [/]#Lfjm:[WO_x 61=>]", multiKey1);
      multiKeyArray0[5] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[6] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = multiKey6.size();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      multiKey0.equals(object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "&F:_VA=\"QsHn", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("&F:_VA=\"QsHn", "", (Object) null);
      int int0 = 1313;
      // Undeclared exception!
      try { 
        multiKey2.getKey(1313);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1313
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
