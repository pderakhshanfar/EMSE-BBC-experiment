/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:32 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-1, -1, -1]", string0);
      
      objectArray0[3] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-2021));
      String string0 = "q6_02)4Ys3N`Hw>:";
      MultiKey<String> multiKey0 = new MultiKey<String>("q6_02)4Ys3N`Hw>:", "q6_02)4Ys3N`Hw>:", (String) null);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.getKeys();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "!qQDVZB";
      stringArray0[1] = "j^j'XG6}s8<]<4|C 8";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.getKey(0);
      objectArray0[1] = (Object) "!qQDVZB";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1570));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1570
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, (Object) null, (Object) null, "");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", ">C%?|X", ">C%?|X", "jv29YIWsb", "");
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      int int0 = multiKey2.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, multiKey2);
      multiKey3.toString();
      multiKey3.getKey(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "MultiKey[0, MultiKey[null, java.lang.Object@1368887d]]";
      stringArray0[3] = "MultiKey[MultiKey[0], MultiKey[0], MultiKey[0]]";
      stringArray0[4] = null;
      stringArray0[5] = "MultiKey[MultiKey[0], MultiKey[0], MultiKey[0]]";
      stringArray0[6] = "MultiKey[0, MultiKey[null, java.lang.Object@1368887d]]";
      stringArray0[7] = null;
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKey4.getKeys();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3);
      multiKey5.toString();
      multiKey4.getKeys();
      String string0 = multiKey4.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 2904;
      Integer integer0 = new Integer(2904);
      Integer integer1 = new Integer(2904);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer1);
      multiKey0.toString();
      multiKey0.equals(integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("0yd#O^s.5`u", "0yd#O^s.5`u", "0yd#O^s.5`u", "0yd#O^s.5`u");
      Integer[] integerArray0 = new Integer[5];
      multiKey0.toString();
      int int0 = 3;
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1036);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[3, 3, 1036, 3, 0]", int0, integer0, multiKey1, "0yd#O^s.5`u");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey0.hashCode();
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[3, 3, 1036, 3, 0]", "MultiKey[MultiKey[3, 3, 1036, 3, 0], 3, 3, MultiKey[3, 3, 1036, 3, 0], 0yd#O^s.5`u]", "MultiKey[0yd#O^s.5`u, 0yd#O^s.5`u, 0yd#O^s.5`u, 0yd#O^s.5`u]", "ab=");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey3, multiKey0, multiKey3);
      multiKey4.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(4376);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4376
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
