/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:53:44 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "k&_Q8CVAg<:";
      stringArray0[1] = "v!p9wB";
      stringArray0[2] = "y{=mh8[&Q}[9";
      stringArray0[3] = "y{=mh8[&Q}[9";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, "y{=mh8[&Q}[9", multiKey0);
      multiKey1.toString();
      Integer integer0 = new Integer(1);
      Object object1 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>("k&_Q8CVAg<:", "y{=mh8[&Q}[9");
      Object object2 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>(")izGJ,MI34W?HvPb;*", "k&_Q8CVAg<:", "", "v!p9wB", "Cx<(Oxl2c8fe8;f0");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object2, multiKey3, integer0, object0, "y{=mh8[&Q}[9");
      multiKey4.toString();
      Integer integer1 = new Integer(1);
      boolean boolean0 = multiKey4.equals(multiKey4);
      assertFalse(multiKey4.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("N", "N");
      multiKey0.equals("N");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("t\"", "MultiKey[null, -1, -1]", "MultiKey[null, -1, -1]", "", ":xObPz<Ag\"T!}t&}aP");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.hashCode();
      int int0 = multiKey0.size();
      multiKey0.getKeys();
      multiKey1.equals(integer1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      multiKey0.equals(multiKey3);
      multiKey1.size();
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("\"de5C3\"fVI,rJ", "\"de5C3\"fVI,rJ");
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[\"de5C3\"fVI,rJ, \"de5C3\"fVI,rJ]", string0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1135);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1762);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey0.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4Obs!(zasu5@O*2_";
      stringArray0[1] = "3Y[qqD=Q(!=*`\u0000";
      stringArray0[2] = "";
      stringArray0[3] = "b3k@zT'm";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "yjs9P}@\"";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.hashCode();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey3);
      multiKey4.hashCode();
      multiKey3.getKeys();
      multiKey2.hashCode();
      multiKey0.hashCode();
      multiKey3.hashCode();
      multiKey0.equals("");
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2406
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[0, 0]";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[0, 0]";
      multiKey0.toString();
      stringArray0[3] = "MultiKey[0, 0]";
      stringArray0[4] = "MultiKey[0, 0]";
      stringArray0[5] = "MultiKey[0, 0]";
      stringArray0[6] = "MultiKey[0, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey1.size();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      multiKey0.getKey(0);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[null, null, null]", "");
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1499);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "nG<:zD<[EHe7I7?6(";
      stringArray0[3] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , nG<:zD<[EHe7I7?6(, ]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, "", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.getKey(1);
      multiKey1.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2537));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2537
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 0;
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("8?~:.+=pkA", "8?~:.+=pkA");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object1);
      multiKey2.hashCode();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.equals("8?~:.+=pkA");
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&XZXS tj[q<";
      stringArray0[1] = "Q ?X[,7=,'IQ";
      stringArray0[2] = "fgYt#|0:f/";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      Object object0 = multiKey1.getKey(3);
      assertEquals("", object0);
  }
}
