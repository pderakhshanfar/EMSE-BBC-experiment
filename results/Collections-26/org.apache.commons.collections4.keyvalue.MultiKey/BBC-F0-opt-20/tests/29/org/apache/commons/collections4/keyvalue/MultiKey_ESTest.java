/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:52:26 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey0 = new MultiKey<String>("gp%j8A`_$>`", "6'k", "gp%j8A`_$>`", ">8d.~!XYg1/U");
      multiKeyArray0[4] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>(">8d.~!XYg1/U", "6'k", ">8d.~!XYg1/U", ">8d.~!XYg1/U", "gp%j8A`_$>`");
      multiKeyArray0[1] = multiKey0;
      MultiKey<String> multiKey2 = new MultiKey<String>("6'k", "", "+7\"yL0]p,@bC*");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("pI NADiqGLf[cS", "pF>l!FB<vY^]");
      multiKey2.toString();
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("pF>l!FB<vY^]", "pF>l!FB<vY^]", "", "E\"VosuAa`CyO!\u0007", "+&I[ZK");
      multiKeyArray0[4] = multiKey4;
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[pF>l!FB<vY^], pF>l!FB<vY^], , E\"VosuAa`CyO!\u0007, +&I[ZK]", string0);
      
      boolean boolean0 = multiKey4.equals(multiKey4);
      assertTrue(boolean0);
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[], MultiKey[]]", "MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[], MultiKey[]]");
      multiKey3.getKey(0);
      multiKey3.toString();
      multiKey1.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey2.toString();
      int int0 = multiKey3.size();
      multiKey2.getKeys();
      int int1 = multiKey0.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray1);
      multiKey1.toString();
      multiKey1.equals("MultiKey[]");
      multiKey0.equals(multiKey1);
      multiKey1.equals("MultiKey[]");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.size();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2003));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1571));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey3.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("I+hZ}n..IvM]q2>)", "I+hZ}n..IvM]q2>)", "I", "I+hZ}n..IvM]q2>)", "");
      Integer integer0 = new Integer(101);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "");
      multiKey1.getKeys();
      Integer integer1 = new Integer(71);
      Integer integer2 = new Integer(33);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer1);
      MultiKey<String> multiKey3 = new MultiKey<String>("]px", "MltCK", "", "");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "MultiKey[0, 0]";
      objectArray0[1] = (Object) "MultiKey[0, 0]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "MultiKey[0, 0]", "MultiKey[0, 0]");
      Object object0 = multiKey1.getKey(0);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) "MultiKey[0, 0]";
      objectArray0[4] = (Object) "MultiKey[0, 0]";
      objectArray0[5] = (Object) "MultiKey[0, 0]";
      objectArray0[6] = (Object) integer1;
      objectArray0[7] = (Object) integer1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey2.equals("MultiKey[0, 0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-4124));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "oo#EVb2^Rbd", "oo#EVb2^Rbd", "oo#EVb2^Rbd", "oo#EVb2^Rbd");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey1.getKeys();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      boolean boolean0 = multiKey2.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "f.nQ+?!'C6NKI";
      stringArray0[0] = "f.nQ+?!'C6NKI";
      String string1 = "MultiKey";
      stringArray0[1] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<MultiKey<Integer>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = null;
      Integer integer1 = new Integer(1037);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer1, (Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.equals(integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1037);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1037
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "W*8V409hS,,LS", "", "W*8V409hS,,LS");
      Integer integer0 = new Integer((-4215));
      Integer integer1 = new Integer((-4215));
      Integer integer2 = new Integer((-4215));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "W*8V409hS,,LS";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) integer2;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "", "", integerArray0[1]);
      // Undeclared exception!
      try { 
        multiKey3.getKey((int) integerArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4215
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Vr9$6qNTDe]";
      stringArray0[2] = ":&SXG$HG_.eO;gv";
      stringArray0[3] = "o";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Sy9#4+!&R_FTBfbDH";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3206
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0);
      Object object1 = multiKey1.getKey(1);
      objectArray0[1] = object1;
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "");
      multiKey2.toString();
      int int0 = 4;
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String[] stringArray0 = new String[9];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = "";
      stringArray0[2] = "";
      String string2 = "M\"j(";
      stringArray0[3] = "M\"j(";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "i-d#77xW9";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      int int0 = 0;
      MultiKey<String> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object1, "MultiKey", (Object) null);
      // Undeclared exception!
      try { 
        multiKey3.getKey(2455);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2455
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
