/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:36:08 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-1976));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("?Se-KBlC&~,}h", "?Se-KBlC&~,}h", "?Se-KBlC&~,}h");
      boolean boolean0 = multiKey1.equals(multiKey0);
      boolean boolean1 = multiKey1.equals(integer0);
      assertFalse(boolean1);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?Se-KBlC&~,}h";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "MultiKey", (String) null, "?Se-KBlC&~,}h");
      multiKeyArray0[6] = multiKey3;
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKey5, multiKey2);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[?Se-KBlC&~,}h], MultiKey[?Se-KBlC&~,}h]]", string0);
      
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1976));
      MultiKey<Object> multiKey7 = new MultiKey<Object>("?Se-KBlC&~,}h", integer1, integer2, "?Se-KBlC&~,}h");
      boolean boolean2 = multiKey1.equals(multiKey1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("?Se-KBlC&~,}h", "?Se-KBlC&~,}h", "");
      multiKey0.toString();
      multiKey0.equals("?Se-KBlC&~,}h");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, (Integer) null, integer1, (Integer) null);
      multiKeyArray0[3] = multiKey2;
      Integer integer2 = new Integer((int) integer0);
      Integer integer3 = new Integer((int) integer0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer3);
      multiKeyArray0[4] = multiKey3;
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer4, integer4, (Integer) null, (Integer) null, integer0);
      multiKeyArray0[5] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      Object object0 = multiKey5.getKey((int) integer1);
      MultiKey<Object> multiKey6 = new MultiKey<Object>("", multiKey0, object0, multiKey1);
      multiKey6.toString();
      multiKey6.equals(integer2);
      int int0 = multiKey6.size();
      MultiKey<Object>[] multiKeyArray1 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKeyArray1);
      int int1 = multiKey7.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey2.toString();
      multiKey2.getKeys();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(354);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(983);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(983);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-753));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", (String) null, (String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKey1.toString();
      int int0 = multiKey0.size();
      multiKey0.toString();
      Integer integer0 = new Integer(1396);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey3.equals(multiKey0);
      multiKey1.size();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey4.toString();
      multiKey4.toString();
      multiKey2.toString();
      multiKey4.getKey(2);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(743);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      multiKey1.size();
      Object object0 = new Object();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(354);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(4037);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4037
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "U:ExcWD.+V;t)f2";
      stringArray0[1] = "Oze+I&'}z?8n\"";
      stringArray0[2] = "=EoUZ$Se5,`s%l%=s>}";
      stringArray0[3] = "";
      String string0 = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("=EoUZ$Se5,`s%l%=s>}");
      MultiKey<String>[] multiKeyArray0 = null;
      MultiKey<MultiKey<String>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "e>gf2(hcV`u", "The array of keys must not be null", "e>gf2(hcV`u");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey0.size();
      multiKey0.equals("e>gf2(hcV`u");
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1051);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Object object0 = new Object();
      multiKey0.equals(object0);
      String string0 = "";
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, multiKey0, multiKey0);
      int int0 = 4;
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "W#}?2%23";
      stringArray0[1] = "";
      stringArray0[2] = "d2+uj`E";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "ine:r";
      stringArray0[5] = "GrzAZ[|2lJ^";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = multiKey0.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      int int0 = (-1898);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1898));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1898
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, (String) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2568);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2568
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
