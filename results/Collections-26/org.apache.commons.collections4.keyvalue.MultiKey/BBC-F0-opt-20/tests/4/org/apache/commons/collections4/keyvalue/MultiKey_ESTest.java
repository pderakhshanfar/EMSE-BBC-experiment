/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:12 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer1, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer2 = new Integer(int0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0, 4, 0, 0]", "MultiKey[0, 0, 4, 0, 0]");
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(int0, integer2, multiKey2);
      boolean boolean0 = multiKey1.equals(multiKey3);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) int0, integer1, (Integer) int0, integer0, integerArray0[1]);
      multiKey2.toString();
      multiKey4.toString();
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey4, multiKey4);
      multiKey4.toString();
      multiKey5.toString();
      multiKey5.toString();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey6, (Object) null);
      Object object0 = multiKey7.getKey(int0);
      boolean boolean1 = multiKey6.equals(object0);
      assertFalse(boolean1 == boolean0);
      
      MultiKey<MultiKey<Object>> multiKey8 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey7, multiKey3, multiKey3, multiKey0);
      String string0 = multiKey8.toString();
      assertEquals("MultiKey[MultiKey[0, 0, MultiKey[MultiKey[0, 0, 4, 0, 0], MultiKey[0, 0, 4, 0, 0]]], MultiKey[MultiKey[MultiKey[MultiKey[0, 0, 4, 0, 0], MultiKey[0, 0, 4, 0, 0]], MultiKey[MultiKey[0, 0, 4, 0, 0], MultiKey[0, 0, 4, 0, 0]], MultiKey[MultiKey[0, 0, 4, 0, 0], MultiKey[0, 0, 4, 0, 0]]], null], MultiKey[0, 0, MultiKey[MultiKey[0, 0, 4, 0, 0], MultiKey[0, 0, 4, 0, 0]]], MultiKey[0, 0, MultiKey[MultiKey[0, 0, 4, 0, 0], MultiKey[0, 0, 4, 0, 0]]], MultiKey[0, 0, 4, 0, 0]]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1110);
      Integer integer1 = new Integer((-3324));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      int int1 = 4;
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer1, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer2 = new Integer(int0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0, 4, 0, 0]", "MultiKey[0, 0, 4, 0, 0]");
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(int0, integer2, multiKey2);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
      
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) int0, integer3, (Integer) int0, integer0, (Integer) int1);
      multiKey1.toString();
      multiKey4.toString();
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey4, multiKey4);
      multiKey5.toString();
      multiKey5.toString();
      multiKey2.size();
      multiKey0.getKey(4);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, true);
      multiKey6.getKeys();
      int int2 = multiKey6.hashCode();
      assertTrue(int2 == int0);
      
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey0, multiKey6, "MultiKey[0, 0, 0, 0, 4]");
      String string0 = multiKey7.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 4, 0, 0], MultiKey[], MultiKey[0, 0, 0, 0, 4]]", string0);
      
      boolean boolean1 = multiKey7.equals("MultiKey[MultiKey[0, 0, 4, 0, 0], MultiKey[0, 0, 4, 0, 0]]");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer2, integer3);
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "+N%M";
      stringArray0[2] = "";
      stringArray0[3] = "{Z]Fa55| Cu";
      stringArray0[4] = "";
      stringArray0[5] = "266ZQcZms";
      stringArray0[6] = "hF";
      stringArray0[7] = ">]Trv1K&n,GAC++.#";
      stringArray0[8] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null, "", "org.apache.commons.collections4.keyvalue.MultiKey");
      assertEquals(4, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      int int1 = 4;
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer1, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer2 = new Integer(int0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0, 4, 0, 0]", "MultiKey[0, 0, 4, 0, 0]");
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(int0, integer2, multiKey2);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
      
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) int0, integer3, (Integer) int0, integer0, (Integer) int1);
      multiKey1.toString();
      multiKey4.toString();
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey4, multiKey4);
      multiKey5.toString();
      multiKey5.toString();
      int int2 = multiKey0.hashCode();
      assertFalse(int2 == int0);
      
      multiKey3.size();
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey3, multiKey3, multiKey0);
      multiKey6.getKey(3);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 4]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1517));
      Integer integer1 = new Integer(1659);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer1);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.toString();
      multiKey1.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, object0, multiKey1);
      multiKey1.toString();
      multiKey2.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-3363));
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[1, -3363, 1, 1]", (String) null);
      Object object0 = new Object();
      multiKey2.equals(object0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[1, -3363, 1, 1]", "MultiKey[MultiKey[1, -3363, 1, 1], -3363]", "");
      multiKeyArray0[2] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey4.getKeys();
      assertNotSame(multiKeyArray1, multiKeyArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      String string1 = multiKey0.getKey(0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wKxk[Ta";
      stringArray0[1] = "";
      stringArray0[2] = "8mD%>MesX3dREuPk";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      MultiKey<Integer> multiKey1 = null;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      int int0 = 70;
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "z)Xigx?p!E5";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "tG=rp4";
      stringArray0[5] = "'wWym/";
      stringArray0[6] = "";
      stringArray0[7] = ">";
      stringArray0[8] = "J0%J$Z";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Object object0 = null;
      Object object1 = new Object();
      Object object2 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
