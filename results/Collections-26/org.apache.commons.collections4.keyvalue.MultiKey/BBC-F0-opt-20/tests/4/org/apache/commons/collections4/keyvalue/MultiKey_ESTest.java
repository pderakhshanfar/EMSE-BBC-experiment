/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:00 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, (String) null, "O]CPP");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[null, null, null, O]CPP], MultiKey[null, null, null, O]CPP]]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, (Object) null);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
      
      multiKey2.size();
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey1.getKeys();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "I";
      stringArray0[1] = "#<v7h6O?w|";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("jUXHR[75|_iuB$0k!", "-*fG", "<4lP%0mqX8+\"(h7}", "-*fG", "jUXHR[75|_iuB$0k!");
      MultiKey<String> multiKey1 = new MultiKey<String>("-*fG", "<4lP%0mqX8+\"(h7}", "");
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("ko@Esntq\",A", "ko@Esntq\",A", "-*fG", "ko@Esntq\",A");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[ko@Esntq\",A, ko@Esntq\",A, -*fG, ko@Esntq\",A]", string0);
      
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("{x=i*{@qr9hcr)lP", "");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "ko@Esntq\",A";
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) "ko@Esntq\",A";
      objectArray0[4] = object0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(9);
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer0, (Integer) null, integer2, integer3);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("3i4%j&*D", multiKey1, multiKey2, multiKey3);
      multiKey2.toString();
      assertFalse(multiKey2.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.size();
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null, multiKey0, (Object) null);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, null, MultiKey[], null]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>("nE]$/)c+L", (String) null, "nE]$/)c+L", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, (Object) null, (Object) null, "");
      int int0 = 2843;
      // Undeclared exception!
      try { 
        multiKey1.getKey(2843);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2843
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.getKey(0);
      objectArray0[0] = null;
      multiKey0.toString();
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "MultiKey[null, null]");
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-1, -1, -1, 0]", "g0^M", (String) null, "MultiKey[-1, -1, -1, 0]");
      multiKey2.toString();
      multiKey2.hashCode();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(742);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 742
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2054));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2054));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object object8 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null);
      Object object9 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object8, object3, object9);
      multiKey2.size();
      assertSame(object0, object8);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = (-55);
      Integer integer0 = new Integer((-55));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(813);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-643));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-55));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.size();
      Integer integer7 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>("`C6minqp`:pKrs5]*", "");
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2017));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2017
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "D'd*5H)";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey0, (Object) null, multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, MultiKey[The array of keys must not be null, org.apache.commons.collections4.keyvalue.MultiKey, , , D'd*5H)], null, MultiKey[The array of keys must not be null, org.apache.commons.collections4.keyvalue.MultiKey, , , D'd*5H)]]", string0);
  }
}
