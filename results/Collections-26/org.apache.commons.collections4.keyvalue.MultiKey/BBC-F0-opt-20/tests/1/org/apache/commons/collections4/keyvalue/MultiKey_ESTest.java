/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:45:41 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(2929);
      Integer integer1 = new Integer(1179);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey1.getKeys();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "f\"zL^UdU");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Integer integer0 = new Integer((-1078));
      Integer integer1 = new Integer((-1078));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey1.equals(multiKey2);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "Y`XK*6h3o", "Y`XK*6h3o", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("2pd&V3&:kxT=1", "t >va}CJ", "", "");
      multiKeyArray0[2] = multiKey2;
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("P)yqThx7plEh", "2pd&V3&:kxT=1");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "Cr 8~3+eP1/=om", "P)yqThx7plEh", "The array of keys must not be null", "MultiKey");
      multiKeyArray0[5] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String> multiKey7 = new MultiKey<String>("", "", "mTb};`vkmL{,&F", "t >va}CJ");
      MultiKey<String> multiKey8 = new MultiKey<String>(stringArray0, true);
      multiKey3.equals(multiKey8);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("dC:m@;", "dC:m@;", "", "dC:m@;");
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2541);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[2541]", string0);
      
      int int0 = multiKey0.size();
      int int1 = multiKey1.hashCode();
      assertTrue(int1 == int0);
      
      boolean boolean1 = multiKey0.equals(multiKey1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = multiKey0.getKey(1);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("4w-B2&=42$h6g8", "8n<YvzjTq-Pn l");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals("4w-B2&=42$h6g8");
      Object object0 = new Object();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals(object0);
      multiKey0.equals("MultiKey[]");
      multiKey0.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals("MultiKey[]");
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("MultiKey[]");
      assertFalse(boolean0);
      
      multiKey1.hashCode();
      multiKey0.size();
      multiKey2.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("/'4r#VCe)W6_", "[Xc_*%3l9", "/'4r#VCe)W6_", "1}mh}[mp'jdoa\"g3");
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "", "[Xc_*%3l9");
      Object object0 = multiKey1.getKey(1);
      assertEquals("", object0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null, "");
      Integer integer1 = new Integer(1);
      multiKey1.toString();
      multiKey2.toString();
      Integer integer2 = new Integer(636);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer1, integer2);
      multiKey0.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey1.toString();
      Integer integer3 = new Integer(636);
      multiKey2.toString();
      multiKey1.equals(integer3);
      multiKey3.getKey(1);
      multiKey3.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey3.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[/'4r#VCe)W6_, [Xc_*%3l9, /'4r#VCe)W6_, 1}mh}[mp'jdoa\"g3]", string0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-152));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1, integer1, multiKey0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "n +sv~!Y\tmMnCmM7o;");
      multiKey0.toString();
      Integer integer0 = new Integer(228);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      int int0 = multiKey1.size();
      multiKey1.toString();
      multiKey0.equals("n +sv~!Y\tmMnCmM7o;");
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      Object object0 = multiKey2.getKey(1);
      assertFalse(object0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "?5i6W}5p{MZ3~^?";
      stringArray0[2] = "C%c*r";
      stringArray0[3] = "FlgSH";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = "";
      stringArray0[6] = "-S#";
      stringArray0[7] = "hSczQO0X$";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.hashCode();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "C%c*r");
      Integer integer0 = new Integer(2543);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey2, multiKey1, "hSczQO0X$", integer0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) stringArray1, false);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey4, multiKey1, multiKey4);
      multiKey5.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("j:X.", "j:X.");
      multiKey0.toString();
      int int0 = 0;
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
