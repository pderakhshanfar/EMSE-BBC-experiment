/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:11 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) multiKey0;
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object2 = multiKey1.getKey(0);
      multiKey0.equals(object2);
      String string0 = multiKey0.getKey(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "org.apache.commons.collections4.keyvalue.MultiKey", multiKey0, "");
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0);
      multiKey0.equals((Object) null);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer1, multiKey0);
      multiKey1.equals("");
      Object object0 = multiKey1.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "gM.9:YIAT( \"r";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "j^Y1NV?R}T", object0, integer0);
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("@$`{{gbN:dNlsni[ ", "@$`{{gbN:dNlsni[ ", "The array of keys must not be null");
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<MultiKey<String>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[]", (Object) null, "MultiKey[]", (Object) null, (Object) null);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("_f>4=3J(p#p<\"EC.-", "_f>4=3J(p#p<\"EC.-");
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("_f>4=3J(p#p<\"EC.-", multiKey0, multiKey0, multiKey0, integer0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "FCdt'PYH";
      stringArray0[2] = "FuvmjuzVS-W";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      int int1 = 1;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.getKey(4);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer5, integer1);
      multiKey1.equals(int1);
      multiKey0.toString();
      multiKey1.equals(int0);
      multiKey1.toString();
      multiKey0.toString();
      int int2 = multiKey1.size();
      multiKey0.toString();
      multiKey1.getKey(int0);
      multiKey1.getKey(int0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[0, 0, 0, 0, 0, 0, 1]";
      stringArray0[1] = "MultiKey[0, 0, 0, 0, 0, 0, 1]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.hashCode();
      int int3 = multiKey2.size();
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("~'Eme4=^6veof", "", "");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "", (String) null, (String) null);
      multiKey0.equals(multiKey1);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1315));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[0] = multiKey2;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer0, integer2, integer3);
      multiKeyArray0[1] = multiKey3;
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer0, integer4);
      multiKeyArray0[2] = multiKey4;
      Integer integer5 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer5, integer3, integer2);
      multiKeyArray0[3] = multiKey5;
      Integer integer6 = new Integer(3579);
      Integer integer7 = new Integer(int0);
      Integer integer8 = new Integer(0);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer6, integer7, integer8, integer7);
      multiKeyArray0[4] = multiKey6;
      Integer integer9 = new Integer(0);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer1, integer9);
      multiKeyArray0[5] = multiKey7;
      Integer integer10 = new Integer(1292);
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>((Integer) null, integerArray0[0], integer10);
      multiKeyArray0[6] = multiKey8;
      MultiKey<MultiKey<Integer>> multiKey9 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      // Undeclared exception!
      try { 
        multiKey9.getKey(956);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 956
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = null;
      String string0 = "L$`vE3nZc#5FVlZ3ni";
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, "L$`vE3nZc#5FVlZ3ni");
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("L$`vE3nZc#5FVlZ3ni", (Object) null, "MultiKey[null, null, null, null, L$`vE3nZc#5FVlZ3ni]");
      Object object1 = null;
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1340);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1826);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2907));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2907
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">a-RIvP7;@L;!";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer((-3563));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey2.size();
      multiKey2.equals(multiKey0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[, , ]", "");
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.hashCode();
      int int0 = multiKey0.size();
      int int1 = multiKey1.size();
      assertFalse(int1 == int0);
  }
}
