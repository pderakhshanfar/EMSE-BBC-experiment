/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:43 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, ",", ",", (Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      multiKeyArray0[8] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "MultiKey");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      Integer integer0 = new Integer((-410));
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[null, null]", "MultiKey[null, null, -410, 0, 0]", "", "", "MultiKey[null, null, -410, 0, 0]");
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, "", "MultiKey[null, null]", (Object) null);
      multiKey2.equals(multiKey3);
      multiKey2.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("THb", "MultiKey[]", "&uZ_Hc~Fy0+#}nQ`Z#", "THb", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-3186));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3186
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", object0);
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey0.toString();
      multiKey0.getKey(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[null, 0]";
      stringArray0[1] = "MultiKey[null, 0]";
      stringArray0[2] = "MultiKey[null, 0]";
      stringArray0[3] = "MultiKey[null, 0]";
      stringArray0[4] = "MultiKey[null, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-2365));
      Integer integer1 = new Integer((-2365));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[null, null, null, null]", "MultiKey[null, null, null, null]");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[null, null, null, null]", "", "F;i");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>(">st2X]~", "MultiKey[null, null, null, null]");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[null, null, null, null]", "MultiKey[null, null, null, null]", "MultiKey[null, null, null, null]");
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[null, null, null, null]", ":.4E=Gay#IaeK>h", "F;i", "F;i");
      multiKeyArray0[4] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey[null, null, null, null]", "MultiKey[null, null, null, null]");
      multiKeyArray0[5] = multiKey6;
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String>[] multiKeyArray1 = multiKey7.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey1;
      int int0 = 2009;
      Integer integer0 = new Integer(2009);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(2009);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2009
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(1063);
      Integer integer1 = new Integer(517);
      Integer integer2 = new Integer(1063);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer0, integer2);
      MultiKey<String> multiKey2 = new MultiKey<String>("}wzGKT$n:Qybi/", "}wzGKT$n:Qybi/", "");
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, integer0, multiKey2, multiKey1);
      // Undeclared exception!
      try { 
        multiKey3.getKey(1063);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1063
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2018);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2018);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[4]);
      integerArray0[6] = integer6;
      int int0 = 0;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      String string0 = "<tgluEz]z\"Z<N";
      String string1 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "<tgluEz]z\"Z<N", "<tgluEz]z\"Z<N", "");
      multiKey1.toString();
      multiKey1.equals("");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      Integer integer8 = new Integer((int) integerArray0[1]);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", integer8, integerArray0[3]);
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey", "=J`", "-QU] Y", "`~Lm$b8U");
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2592));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2592
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      String string0 = "?zUa\"i+4kXZ\\R";
      Object object1 = new Object();
      Object object2 = null;
      int int0 = 494;
      Integer integer0 = new Integer(494);
      Integer integer1 = new Integer(494);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-377));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -377
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
