/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:57 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("|", "|", "", "");
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "o>cND+'?", "|");
      multiKey1.getKey(1);
      MultiKey<String> multiKey2 = new MultiKey<String>("o>cND+'?", "<>+Spx+nK\" ", "<>+Spx+nK\" ", "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey0, "o>cND+'?", "o>cND+'?", multiKey2);
      Object object1 = multiKey3.getKey(1);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zM-M{J3jT/";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "V";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      multiKey0.equals(integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "MultiKey[, , ]");
      multiKey1.toString();
      multiKey1.size();
      multiKey1.size();
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer2);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, -1, 0, 0]", string0);
      
      Integer integer3 = new Integer(4689);
      boolean boolean0 = multiKey3.equals(integer3);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object0, integer0, object1, multiKey4);
      multiKey4.getKeys();
      assertFalse(multiKey4.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1615));
      String string0 = "";
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.hashCode();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.equals(integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.size();
      multiKey0.equals(multiKey1);
      multiKey0.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", ".$zPWu@%TUsK~Ok<J", "F29&cOk", "F29&cOk");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[, .$zPWu@%TUsK~Ok<J, F29&cOk, F29&cOk]", object0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "MultiKey[, .$zPWu@%TUsK~Ok<J, F29&cOk, F29&cOk]";
      objectArray0[1] = (Object) "MultiKey[, .$zPWu@%TUsK~Ok<J, F29&cOk, F29&cOk]";
      objectArray0[2] = (Object) "MultiKey[, .$zPWu@%TUsK~Ok<J, F29&cOk, F29&cOk]";
      objectArray0[3] = (Object) ".$zPWu@%TUsK~Ok<J";
      objectArray0[4] = (Object) "F29&cOk";
      objectArray0[5] = (Object) "F29&cOk";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey1, multiKey2, multiKey1);
      multiKey3.equals(objectArray0[0]);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(346);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer2, integer1);
      // Undeclared exception!
      try { 
        multiKey4.getKey(346);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 346
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, object1);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "+z2yq>DO`sO}y", "", ")");
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "";
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0, (Integer) null);
      multiKey1.getKey(0);
      objectArray0[2] = (Object) null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2794));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2794
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(">^rcBM[KPRqXHX&i=", "zwu{Rp[8L~bm\"S@XL", "zwu{Rp[8L~bm\"S@XL", ">^rcBM[KPRqXHX&i=");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(">^rcBM[KPRqXHX&i=", "zwu{Rp[8L~bm\"S@XL", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[>^rcBM[KPRqXHX&i=, zwu{Rp[8L~bm\"S@XL, zwu{Rp[8L~bm\"S@XL, >^rcBM[KPRqXHX&i=]");
      Integer integer0 = new Integer(4);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, ">^rcBM[KPRqXHX&i=");
      multiKey2.toString();
      multiKey2.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, (Object) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(692);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 692
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(4465);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "The array of keys must not be null");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , , , The array of keys must not be null]", string0);
  }
}
