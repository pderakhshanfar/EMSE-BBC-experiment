/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:08 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.size();
      Integer integer0 = new Integer((-963));
      Integer integer1 = new Integer(1);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      Integer integer2 = new Integer(1178);
      Integer integer3 = new Integer(3);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey0.getKey(1);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer1, integer0, (Integer) null);
      Integer integer2 = new Integer(1);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, multiKey0, integer2);
      multiKey2.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "L;L~6";
      stringArray0[2] = "_QL%H^5YG/[+#C;#2W";
      stringArray0[3] = "t";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.getKey(0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, MultiKey[null, 0, 1, 0, null], MultiKey[null, null], 1]", string0);
      
      multiKey2.getKeys();
      multiKey2.getKey(1);
      multiKey2.size();
      multiKey3.getKeys();
      multiKey2.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "zdL_.Zc|", "");
      multiKeyArray0[3] = multiKey4;
      multiKeyArray0[4] = multiKey3;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      boolean boolean0 = multiKey5.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer1);
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0, 0, 0]", "");
      multiKey2.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -456
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "$ow+m.9}8H\"oQ(D9";
      stringArray0[2] = "9cw";
      stringArray0[3] = "u";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(1);
      objectArray0[2] = (Object) "$ow+m.9}8H\"oQ(D9";
      MultiKey<String> multiKey1 = new MultiKey<String>("u", "MultiKey", ")ufeu9.xH6_sR", "");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "u", "");
      multiKey2.getKey(0);
      objectArray0[3] = (Object) "";
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "MultiKey", "-5c", "");
      multiKey3.getKey(0);
      objectArray0[4] = (Object) "";
      Object object2 = new Object();
      objectArray0[5] = object2;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      assertEquals(6, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "fhvUq&z==n\"", (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("fhvUq&z==n\"", "", "W(KbhD/?{");
      multiKey1.equals(multiKey2);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey1.size();
      multiKey2.size();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("+Uh!:&+p>g&wJ&f8", "B/D+5J", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[+Uh!:&+p>g&wJ&f8, B/D+5J, ]", "MultiKey[+Uh!:&+p>g&wJ&f8, B/D+5J, ]", "MultiKey[+Uh!:&+p>g&wJ&f8, B/D+5J, ]", multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, (MultiKey<Object>) null);
      multiKey2.size();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2214);
      integerArray0[0] = integer0;
      int int0 = 4;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2214);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-5348));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey3.size();
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(2424);
      Integer integer1 = new Integer(2424);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2721));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2721));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2721));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2721));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`|rp(L?Pdm?";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "~LL^?";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "s2TL;^cF<.-F n/U";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals(integer4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("!", "L**a/!+]vX&!ZLZ4E0}", "Dj%C+dC");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "!";
      objectArray0[1] = (Object) "L**a/!+]vX&!ZLZ4E0}";
      objectArray0[2] = (Object) "!";
      objectArray0[3] = (Object) "Dj%C+dC";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "!";
      objectArray0[6] = (Object) "L**a/!+]vX&!ZLZ4E0}";
      objectArray0[7] = (Object) "L**a/!+]vX&!ZLZ4E0}";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[!, L**a/!+]vX&!ZLZ4E0}, !, Dj%C+dC, MultiKey[!, L**a/!+]vX&!ZLZ4E0}, Dj%C+dC], !, L**a/!+]vX&!ZLZ4E0}, L**a/!+]vX&!ZLZ4E0}]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey0 = new MultiKey<String>("HbqU6VZ^/XF]+k+f4", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("HbqU6VZ^/XF]+k+f4", "\"je+j(fk", "HbqU6VZ^/XF]+k+f4", "\"je+j(fk", "");
      multiKeyArray0[1] = multiKey1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"je+j(fk";
      stringArray0[1] = "\"je+j(fk";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", (String) null, "MultiKey", "HbqU6VZ^/XF]+k+f4", "\"je+j(fk");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("cR+K*", (String) null, "I'BVVWtN XT", "");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "m<");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", "");
      multiKeyArray0[6] = multiKey6;
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey7.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1494);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((int) integerArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1494
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
