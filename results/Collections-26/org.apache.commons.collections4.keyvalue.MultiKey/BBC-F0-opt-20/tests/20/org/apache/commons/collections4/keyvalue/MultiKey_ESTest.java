/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:39:09 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("fI", "fI", "fI", "fI", "plg?8zW=H1O;");
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("plg?8zW=H1O;", "59\fq= G4,B5");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("fI", multiKey0, object0);
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("fI", integer0, "plg?8zW=H1O;", "plg?8zW=H1O;");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[fI, 0, plg?8zW=H1O;, plg?8zW=H1O;]", string0);
      
      multiKey3.hashCode();
      multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals("plg?8zW=H1O;");
      boolean boolean1 = multiKey2.equals(multiKey2);
      assertFalse(boolean1 == boolean0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("plg?8zW=H1O;", (String) null);
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array Kf keys must not be null", "The array Kf keys must not be null", "&8;");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "&8;";
      objectArray0[3] = (Object) "The array Kf keys must not be null";
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = multiKey1.getKey(1);
      assertEquals(0, (int)integer2);
      
      objectArray0[4] = (Object) integer2;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("7", "7", "", "-i/5aWpa=@8U-^");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "7", (String) null, "", "");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, 7, null, , ]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[9];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("mlG{a71>a[<ueT,=", "mlG{a71>a[<ueT,=");
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("COe2-W>vdsPXDk~+*", (String) null);
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("COe2-W>vdsPXDk~+*", (Object) null, "Skp");
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, multiKey1);
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"?,VI9pC1", (String) null, "MultiKey", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("uER");
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[1, 1]", "MultiKey[1, 1]", "MultiKey[1, 1]");
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-184));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -184
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey0.size();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer((-1061));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-[hF";
      stringArray0[1] = "-[hF";
      stringArray0[2] = "-[hF";
      stringArray0[3] = "-[hF";
      stringArray0[4] = "-[hF";
      stringArray0[5] = "-[hF";
      stringArray0[6] = "-[hF";
      stringArray0[7] = "-[hF";
      stringArray0[8] = "[`";
      boolean boolean0 = true;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("-[hF", integer0, integer0, multiKey0, "-[hF");
      multiKey1.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("-[hF", object0);
      multiKey2.getKey(0);
      objectArray0[0] = (Object) "-[hF";
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1564);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "aGMy}#<i";
      stringArray0[3] = "tk";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer2, integer2, integer3, integer2);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("mlG{a71>a[<ueT,=", "0arlT>b8 WWZ7");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      int int0 = (-3308);
      Integer integer2 = new Integer((-3308));
      Integer integer3 = new Integer((-3308));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer3);
      Object[] objectArray0 = null;
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "MultiKey[0, 0, 0]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-481));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      multiKey0.size();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[-481, -481, -481]";
      stringArray0[1] = "MultiKey[-481, -481, -481]";
      stringArray0[2] = "MultiKey[-481, -481, -481]";
      stringArray0[3] = "MultiKey[-481, -481, -481]";
      stringArray0[4] = "MultiKey[-481, -481, -481]";
      stringArray0[5] = "MultiKey[-481, -481, -481]";
      stringArray0[6] = "MultiKey[-481, -481, -481]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Integer integer1 = new Integer(3);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer2 = new Integer(2771);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer1, object0, object1, integer2);
      Object object2 = multiKey2.getKey(1);
      assertTrue(object2.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "ZjI@Jku^k!f[uw";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ZjI@Jku^k!f[uw";
      stringArray0[1] = "ZjI@Jku^k!f[uw";
      stringArray0[2] = "ZjI@Jku^k!f[uw";
      stringArray0[3] = ":\u0002n,!m%}d:4PYwz8I";
      stringArray0[4] = "ZjI@Jku^k!f[uw";
      stringArray0[5] = "ZjI@Jku^k!f[uw";
      stringArray0[6] = "ZjI@Jku^k!f[uw";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
