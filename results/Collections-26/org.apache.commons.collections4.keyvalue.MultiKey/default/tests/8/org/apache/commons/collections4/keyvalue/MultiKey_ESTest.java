/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:15:14 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("]pT57ESKKhQA+J", "]pT57ESKKhQA+J");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]pT57ESKKhQA+J, ]pT57ESKKhQA+J]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      int int0 = multiKey1.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.getKey(3);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey2.getKeys();
      Integer integer3 = new Integer(0);
      multiKey2.equals(integer3);
      multiKey0.hashCode();
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-3087));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3087));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-512));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0[1], integer3, integer2, integer2);
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.equals("");
      boolean boolean0 = multiKey1.equals(integer2);
      assertFalse(boolean0);
      
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey2.toString();
      multiKey2.getKeys();
      Object object0 = multiKey1.getKey(0);
      assertEquals((-3087), object0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      multiKey3.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-3087, -3087, -512]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("ci<Q6b\"xM_--+", "ci<Q6b\"xM_--+");
      MultiKey<String> multiKey1 = new MultiKey<String>("ci<Q6b\"xM_--+", "ci<Q6b\"xM_--+", "ci<Q6b\"xM_--+", "ci<Q6b\"xM_--+");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[ci<Q6b\"xM_--+, ci<Q6b\"xM_--+, ci<Q6b\"xM_--+, ci<Q6b\"xM_--+]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "4`qz=ky4W,5-";
      String string1 = "";
      String string2 = "5$G*|,TkL\"Avg";
      String string3 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "4`qz=ky4W,5-", "", "5$G*|,TkL\"Avg", "");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-914));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -914
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(3288);
      Integer integer1 = new Integer(3288);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "9x0LKVx%-KDJ@pV15JL");
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("9x0LKVx%-KDJ@pV15JL", object0);
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.toString();
      multiKey0.size();
      multiKey3.size();
      multiKey0.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey3, multiKey3);
      MultiKey<String> multiKey5 = new MultiKey<String>("", "MultiKey[3288, 3288, 3288, 3288]", "");
      multiKey4.equals(multiKey5);
      // Undeclared exception!
      try { 
        multiKey3.getKey(3288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3288
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("#9Skyzm", "#9Skyzm", "#9Skyzm", "#9Skyzm", "#9Skyzm");
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("B_zFN8GsKF~3=", "B_zFN8GsKF~3=", "B_zFN8GsKF~3=", "B_zFN8GsKF~3=", "B_zFN8GsKF~3=");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[B_zFN8GsKF~3=, B_zFN8GsKF~3=, B_zFN8GsKF~3=, B_zFN8GsKF~3=, B_zFN8GsKF~3=]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("Kn| jU'&9'RUG", "Kn| jU'&9'RUG");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("NXSom>x*", "NXSom>x*");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("B_zFN8GsKF~I3=", "B_zFN8GsKF~I3=");
      boolean boolean0 = multiKey0.equals("B_zFN8GsKF~I3=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.hashCode();
      multiKey0.getKeys();
      Object object1 = new Object();
      multiKey0.equals(object1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer(2);
      multiKey1.equals(integer0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey2.getKeys();
      assertEquals(9, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = null;
      Object object1 = new Object();
      String string0 = "The array of keys must not be null";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object1;
      objectArray0[1] = null;
      objectArray0[2] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "4LWv");
      multiKey0.getKey(0);
      objectArray0[3] = (Object) "The array of keys must not be null";
      objectArray0[4] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<String> multiKey2 = new MultiKey<String>("4LWv", "The array of keys must not be null", "org.apache.commons.collections4.keyvalue.MultiKey", "The array of keys must not be null");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(0, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("aiAsZl{i6d,} Pja ", "aiAsZl{i6d,} Pja ");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("aiAsZl{i6d,} Pja ", "aiAsZl{i6d,} Pja ", "aiAsZl{i6d,} Pja ", "aiAsZl{i6d,} Pja ");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "e9lM";
      stringArray0[3] = "";
      stringArray0[4] = "'^-2";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("e9lM", "e9lM");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey", "The array of keys must not be null", "e9lM");
      // Undeclared exception!
      try { 
        multiKey2.getKey(525);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 525
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("#9SAz5", "#9SAz5", "#9SAz5");
      assertEquals(3, multiKey0.size());
  }
}
