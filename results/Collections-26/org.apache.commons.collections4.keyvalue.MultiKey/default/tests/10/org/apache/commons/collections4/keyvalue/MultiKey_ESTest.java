/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:38:02 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.size();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1972);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2861));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2861));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey((int) integerArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2861
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dXZnC4yYa&}AtuHW";
      stringArray0[1] = "cIR@~npbr]`|3xL";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(2);
      objectArray0[0] = (Object) "";
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, multiKey0, multiKey0);
      multiKey1.getKey(2);
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Integer integer0 = new Integer(2);
      Object object2 = new Object();
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, object2, "", integer1, "");
      Object object3 = multiKey2.getKey(0);
      objectArray0[4] = object3;
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "MultiKey");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0[0], objectArray0[0], "MultiKey", multiKey1);
      Object object2 = new Object();
      Integer integer0 = new Integer(2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object2, integer0, multiKey0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3, multiKey3, multiKey1, multiKey3);
      MultiKey<Object> multiKey5 = multiKey4.getKey(2);
      objectArray0[1] = (Object) multiKey5;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "MultiKey";
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0);
      multiKey6.size();
      boolean boolean0 = multiKey5.equals(multiKey3);
      assertTrue(boolean0);
      assertFalse(multiKey5.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(2779);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(0, multiKey0.size());
      
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("mT", "mT");
      boolean boolean0 = multiKey0.equals("mT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      assertEquals(2, multiKey0.size());
      
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer3 = multiKey0.getKey(0);
      multiKey0.hashCode();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer3;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      multiKey0.toString();
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[]";
      stringArray0[5] = "MultiKey[]";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      Integer integer1 = multiKey0.getKey(1);
      objectArray0[4] = (Object) integer1;
      Object object4 = new Object();
      Object object5 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object4, object5);
      Object object6 = multiKey1.getKey(0);
      objectArray0[5] = object6;
      String string0 = "";
      MultiKey<String> multiKey2 = new MultiKey<String>("", (String) null, "", "FM_r4", (String) null);
      multiKey2.getKey(0);
      objectArray0[6] = (Object) "";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      Object object7 = new Object();
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, object2, object7, (Object) null, integer3);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer2, multiKey4, multiKey5, integer3);
      // Undeclared exception!
      try { 
        multiKey6.getKey(2251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2251
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer((-1927));
      int int0 = 0;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      Integer integer2 = multiKey0.getKey(1);
      objectArray0[0] = (Object) integer2;
      String string0 = "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "");
      int int1 = 2;
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(3466);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3466
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey", "MultiKey");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" .S ", " .S ", " .S ");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null);
      multiKey0.getKey(0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "";
      multiKey0.toString();
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object2 = new Object();
      multiKey0.toString();
      String string0 = multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, objectArray0[7], object2, "", "");
      multiKey2.toString();
      multiKey2.toString();
      Object object3 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", object3, objectArray0[7]);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1);
      multiKey4.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      String string1 = multiKey5.toString();
      assertFalse(string1.equals((Object)string0));
  }
}
