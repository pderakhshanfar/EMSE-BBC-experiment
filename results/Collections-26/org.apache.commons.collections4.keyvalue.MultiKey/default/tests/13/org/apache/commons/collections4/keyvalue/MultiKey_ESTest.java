/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:16:28 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      assertEquals(2, multiKey0.size());
      
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.getKeys();
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      boolean boolean0 = multiKey0.equals(objectArray0[6]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = " Hx";
      stringArray0[1] = " Hx";
      stringArray0[2] = " Hx";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>("p^=v", "p^=v", (String) null, (String) null, (String) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[p^=v, p^=v, null, null, null]", string0);
      
      multiKey0.getKey(0);
      objectArray0[2] = (Object) "p^=v";
      Object object2 = new Object();
      objectArray0[3] = object2;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "AEn21:Y.S;f");
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
      
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "MultiKey");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+");
      assertEquals(4, multiKey0.size());
      
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+");
      assertEquals(5, multiKey0.size());
      
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("5MmsoV<", "5MmsoV<", "5MmsoV<");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>("p^=v", "p^=v", (String) null, (String) null, (String) null);
      multiKey0.getKey(0);
      objectArray0[2] = (Object) "p^=v";
      Object object2 = new Object();
      objectArray0[3] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "p^=v", multiKey0);
      multiKey1.getKey(0);
      objectArray0[4] = null;
      Object object3 = new Object();
      objectArray0[5] = object3;
      MultiKey<String> multiKey2 = new MultiKey<String>("7[l]u%3n", "xUmc-l>0PZhh@L*Ks1-", "", "");
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("p^=v", (Object) null, "7[l]u%3n", multiKey2, multiKey2);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("'DqG", "p^=v", "");
      Object object4 = multiKey4.getKey(0);
      assertEquals("'DqG", object4);
      
      objectArray0[6] = (Object) "'DqG";
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey5, multiKey6);
      boolean boolean0 = multiKey7.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<String> multiKey0 = new MultiKey<String>("KVZBo", "", "mrb!Uqs", "");
      int int0 = 4;
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{G#U!C4X0DF&S~V";
      stringArray0[1] = "6";
      stringArray0[2] = "";
      stringArray0[3] = "mt|`v*A9_";
      stringArray0[4] = "9ML3erA";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      assertEquals(0, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(object0);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+");
      boolean boolean0 = multiKey0.equals(") 'Xd%ocnm-0O_q!+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+", ") 'Xd%ocnm-0O_q!+");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[) 'Xd%ocnm-0O_q!+, ) 'Xd%ocnm-0O_q!+, ) 'Xd%ocnm-0O_q!+, ) 'Xd%ocnm-0O_q!+, ) 'Xd%ocnm-0O_q!+]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "D", "D", "D", "");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("gruCce#Q;^O", "gruCce#Q;^O", "gruCce#Q;^O", "gruCce#Q;^O");
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
