/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:38:16 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("#IcDD>g", "#IcDD>g", "#IcDD>g");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.size();
      multiKey1.toString();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "#IcDD>g";
      objectArray0[1] = (Object) "#IcDD>g";
      objectArray0[2] = (Object) "#IcDD>g";
      objectArray0[3] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey2.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-3394));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0, object0, integer0, integer0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("+@ 7U?6{Q", "+@ 7U?6{Q", "+@ 7U?6{Q");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.getKeys();
      Object object0 = new Object();
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0, integer0);
      MultiKey<String> multiKey3 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "+@ 7U?6{Q", "org.apache.commons.collections4.keyvalue.MultiKey", "", "T!*4NxeyizQ");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKey0.getKey(0);
      objectArray0[1] = (Object) null;
      multiKey0.getKey(0);
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("W", (String) null, "", "", (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("W", "$4 !|a`m.~IX7V", "", "$4 !|a`m.~IX7V", multiKey1);
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals(multiKey1);
      multiKey0.equals("");
      multiKey2.getKeys();
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-859));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -859
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("ot5Kaj~jY0Q]U$si", "ot5Kaj~jY0Q]U$si", "ot5Kaj~jY0Q]U$si", "ot5Kaj~jY0Q]U$si", "ot5Kaj~jY0Q]U$si");
      assertEquals(5, multiKey0.size());
      
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "jG'a3.y/C@ESN(Qq:";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, objectArray0[0], objectArray0[0]);
      Object object1 = multiKey1.getKey(0);
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey2.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-987));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey0.getKeys();
      Integer integer1 = new Integer(1880);
      Integer integer2 = new Integer(1880);
      Integer integer3 = new Integer((-987));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer3);
      multiKey2.toString();
      multiKey2.size();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Mk*3}t3/0~O6P/SJ0";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "0AdfA]jo)^M##^+i";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3);
      multiKey4.hashCode();
      multiKey0.size();
      multiKey3.getKeys();
      // Undeclared exception!
      try { 
        multiKey2.getKey(1466);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1466
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-3394));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0, (Object) null, integer0, integer0);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("a", "a");
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.equals("MultiKey[a, a]");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "a", "", "");
      int int0 = (-2898);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2898));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2898
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "MultiKey", "MultiKey", "MultiKey", "MultiKey");
      boolean boolean0 = multiKey0.equals("MultiKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3298));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3298
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(8, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      Object object0 = multiKey0.getKey(1);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "sz^/$:D&30s9*l;aX";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("T=Cqua", "", "", "M9og!C@~RPa\"?/!RvN");
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, multiKey1, "", (Object) null);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey2.toString();
      Integer integer0 = new Integer((-177));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("ot5Kaj~jY0Q]U$si", "ot5Kaj~jY0Q]U$si", "ot5Kaj~jY0Q]U$si", "ot5Kaj~jY0Q]U$si", "ot5Kaj~jY0Q]U$si");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("{3P}Ari0..", "{3P}Ari0..", "{3P}Ari0..", "{3P}Ari0..", "{3P}Ari0..");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1971);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[0, 1971, 0, 0]", integer2, integer1);
      multiKey2.size();
      multiKey2.size();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.hashCode();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("i)9MS@hc+$GdtY", "i)9MS@hc+$GdtY", "i)9MS@hc+$GdtY");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey");
      assertEquals(2, multiKey0.size());
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[MultiKey, MultiKey]", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
