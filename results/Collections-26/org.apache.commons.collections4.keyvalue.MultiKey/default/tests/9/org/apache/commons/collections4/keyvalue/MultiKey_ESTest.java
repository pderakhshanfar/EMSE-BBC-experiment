/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:14:54 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(1, multiKey0.size());
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "bY]e4\"_P6pJ";
      stringArray0[1] = "y=M6',lq)!@}";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object object0 = multiKey2.getKey(1);
      multiKey0.toString();
      multiKey2.toString();
      multiKey1.equals(object0);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey1.toString();
      multiKey3.size();
      multiKey1.size();
      multiKey1.size();
      multiKey0.equals("bY]e4\"_P6pJ");
      multiKey2.size();
      multiKey1.size();
      multiKey0.size();
      multiKey0.getKeys();
      Integer integer1 = new Integer((-1));
      boolean boolean0 = multiKey2.equals(integer1);
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[bY]e4\"_P6pJ, y=M6',lq)!@}, , ]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("33'Zf\"mH", (String) null, "33'Zf\"mH", (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-2118));
      Integer integer1 = new Integer((-1050));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]";
      stringArray0[1] = "MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]";
      stringArray0[2] = null;
      stringArray0[3] = "MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]";
      stringArray0[4] = "X73Q>>j,1uGzxb";
      stringArray0[5] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]", string0);
      
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]", "MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]");
      multiKey3.getKeys();
      Integer integer2 = new Integer(5);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer4, integer0, integer0, integer4);
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, false);
      multiKey5.getKey(5);
      Integer integer5 = new Integer((-1050));
      boolean boolean0 = multiKey4.equals(integer5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("33'Zf\"mH", (String) null, "33'Zf\"mH", (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-2118));
      Integer integer1 = new Integer((-1050));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]";
      stringArray0[1] = "MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]";
      stringArray0[2] = null;
      stringArray0[3] = "MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]";
      stringArray0[4] = "X73Q>>j,1uGzxb";
      stringArray0[5] = null;
      stringArray0[6] = "MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]";
      stringArray0[7] = "MultiKey[33'Zf\"mH, null, 33'Zf\"mH, null, null]";
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-2118, -1050]", string0);
      
      stringArray0[8] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("s", "s");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("L1J4h@a;*2W4VSLsK", "L1J4h@a;*2W4VSLsK");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-1));
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("f~5", "f~5");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, (Object) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.hashCode();
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null);
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = "MultiKey";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "MultiKey", "MultiKey");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      int int0 = 0;
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        multiKey2.getKey(1239);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1239
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("L1J4h@a;*2W4VSLsK", "L1J4h@a;*2W4VSLsK", "L1J4h@a;*2W4VSLsK");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.size();
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":jV<$[P*iMooQc", ":jV<$[P*iMooQc", ":jV<$[P*iMooQc", ":jV<$[P*iMooQc");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[:jV<$[P*iMooQc, :jV<$[P*iMooQc, :jV<$[P*iMooQc, :jV<$[P*iMooQc]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":jV<$[P*iMooQc", ":jV<$[P*iMooQc", ":jV<$[P*iMooQc", ":jV<$[P*iMooQc", ":jV<$[P*iMooQc");
      assertEquals(5, multiKey0.size());
      
      boolean boolean0 = multiKey0.equals(":jV<$[P*iMooQc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      Object[] objectArray0 = new Object[8];
      multiKey0.toString();
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "MultiKey[null, null, null, null, null]";
      objectArray0[2] = (Object) "MultiKey[null, null, null, null, null]";
      objectArray0[3] = (Object) "MultiKey[null, null, null, null, null]";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      multiKey0.toString();
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "MultiKey[null, null, null, null, null]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-4069);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4069));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4069
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MCgelL^0^h", "MCgelL^0^h");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(")$0`%;y>6:{N)#QOd", integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(")$0`%;y>6:{N)#QOd", ")$0`%;y>6:{N)#QOd", (Object) null, integer0, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey1);
      assertEquals(5, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(0, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "");
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":j<$[P*iMooQc", ":j<$[P*iMooQc", ":j<$[P*iMooQc", ":j<$[P*iMooQc");
      assertEquals(4, multiKey0.size());
      
      // Undeclared exception!
      try { 
        multiKey0.getKey(332);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 332
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Integer integer0 = new Integer(693);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object2, integer0, object0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[3] = (Object) multiKey2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey3.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2045);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      assertEquals(2, multiKey0.size());
  }
}
