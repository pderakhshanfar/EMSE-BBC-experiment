/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:39:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("GIZNc", (String) null, "}JS", "Qy4C0");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "}JS";
      objectArray0[3] = (Object) "}JS";
      objectArray0[4] = (Object) "GIZNc";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "GIZNc";
      objectArray0[8] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals("}JS");
      multiKey1.getKeys();
      boolean boolean1 = multiKey0.equals(objectArray0[5]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("(!", "(!", "(!", "(!");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.getKey(0);
      objectArray0[1] = (Object) null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      Object object5 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object4, object0, object5);
      multiKey1.getKey(0);
      objectArray0[6] = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3, multiKey1, multiKey2, multiKey1);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(3);
      objectArray0[0] = (Object) multiKey2;
      multiKey2.getKey(1);
      objectArray0[1] = (Object) "MultiKey";
      Object object0 = new Object();
      multiKey1.toString();
      multiKey2.toString();
      objectArray0[2] = object0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      multiKey3.equals("MultiKey");
      multiKey3.getKeys();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      multiKey4.toString();
      multiKey3.equals(multiKey4);
      multiKey2.toString();
      multiKey2.equals("");
      Integer integer0 = new Integer((-1426));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0);
      int int0 = multiKey5.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("P9EF4(xYt8o=w(bq2", "P9EF4(xYt8o=w(bq2", "P9EF4(xYt8o=w(bq2", "P9EF4(xYt8o=w(bq2", "P9EF4(xYt8o=w(bq2");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, multiKey0);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, multiKey2);
      multiKey3.size();
      multiKey2.toString();
      multiKey2.toString();
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey4.getKey(1);
      multiKey0.size();
      multiKey0.getKeys();
      multiKey3.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-2427));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", "");
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey4.toString();
      multiKey1.toString();
      multiKey4.getKeys();
      multiKey1.getKey(0);
      multiKey2.hashCode();
      multiKey0.equals("");
      multiKey3.toString();
      multiKey1.size();
      MultiKey<Integer> multiKey5 = null;
      try {
        multiKey5 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("~D*_mty]1", "~D*_mty]1");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      assertEquals(4, multiKey0.size());
      
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = new Object();
      multiKey2.equals(object0);
      Integer integer2 = new Integer(4);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = integer2;
      integerArray0[6] = integer0;
      integerArray0[7] = integer2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Object object1 = multiKey3.getKey(4);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer2, object1);
      multiKey4.toString();
      multiKey4.toString();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4, multiKey4, multiKey4);
      multiKey5.size();
      multiKey0.toString();
      multiKey4.getKeys();
      multiKey4.getKeys();
      multiKey4.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1812));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1812
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      assertEquals(3, multiKey0.size());
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("~D*_mty]1", "~D*_mty]1", "~D*_mty]1");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("GIZNc", (String) null, "}JS", "Qy4C0");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "}JS";
      objectArray0[3] = (Object) "}JS";
      objectArray0[4] = (Object) "GIZNc";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "GIZNc";
      objectArray0[8] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals("}JS");
      assertFalse(boolean0);
  }
}
