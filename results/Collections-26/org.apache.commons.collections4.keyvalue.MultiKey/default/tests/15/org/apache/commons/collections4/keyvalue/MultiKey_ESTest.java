/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:16:24 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-3237));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "NP5.<DrH-zv";
      stringArray0[1] = ";{";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "";
      stringArray0[4] = "D5c<Of";
      stringArray0[5] = "V41/7*f= G6N";
      stringArray0[6] = "7TV_A`3T\"sAoA*";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[NP5.<DrH-zv, ;{, The array of keys must not be null, , D5c<Of, V41/7*f= G6N, 7TV_A`3T\"sAoA*]", string0);
      
      multiKey1.size();
      multiKey0.hashCode();
      Integer integer1 = new Integer((-875));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, object0, object1, object2);
      MultiKey<String> multiKey3 = new MultiKey<String>("The array of keys must not be null", "", "The array of keys must not be null", "", ";{");
      assertFalse(multiKey3.equals((Object)multiKey1));
      
      boolean boolean0 = multiKey2.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(0, multiKey0.size());
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("*8=", "B<Q7/)");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      MultiKey<String> multiKey4 = new MultiKey<String>("zvF,", "B<Q7/)", "B<Q7/)");
      int int0 = 1;
      multiKey4.getKey(1);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, object1, object1, "B<Q7/)");
      multiKeyArray0[2] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey3, multiKey5);
      Object object3 = multiKey6.getKey(1);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(object3, multiKey1, (Object) null, "");
      multiKeyArray0[3] = multiKey7;
      Object object4 = new Object();
      MultiKey<Object> multiKey8 = new MultiKey<Object>("B<Q7/)", multiKey3, multiKey7, multiKey2, object4);
      multiKeyArray0[4] = multiKey8;
      MultiKey<Object> multiKey9 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey10 = new MultiKey<Object>(multiKey4, (Object) null);
      multiKey10.getKey(1);
      MultiKey<Object> multiKey11 = new MultiKey<Object>(multiKey9, (Object) null, multiKey7, (Object) null);
      multiKeyArray0[5] = multiKey11;
      MultiKey<MultiKey<Object>> multiKey12 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int1 = (-2756);
      // Undeclared exception!
      try { 
        multiKey12.getKey((-2756));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2756
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "bDIWL@L{{Cm!ETw#]", "n*yf", "n*yf");
      multiKey0.toString();
      multiKey0.size();
      multiKey0.size();
      Integer integer0 = new Integer(4);
      multiKey0.toString();
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String>[] multiKeyArray1 = multiKey2.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("D", "D", "D");
      assertEquals(3, multiKey0.size());
      
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "t]", "", "", "dNr>:wS-y6igG`,2Qm");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2224);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2224
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, "");
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("D", "D", "D");
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey0, multiKey1, multiKey1);
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "MultiKey[null, null, null, null]", "", (String) null);
      multiKey3.toString();
      multiKey1.toString();
      multiKey3.size();
      multiKey1.getKeys();
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, "", integer0);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Q{6f";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String string0 = multiKey1.getKey(int0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      assertEquals(5, multiKey0.size());
      
      // Undeclared exception!
      try { 
        multiKey0.getKey(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Y2Pyz{", "Y2Pyz{", "Y2Pyz{", "Y2Pyz{", "Y2Pyz{");
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Z@TfFnwXKB,8B:Q+'", "Z@TfFnwXKB,8B:Q+'", "Z@TfFnwXKB,8B:Q+'", "Z@TfFnwXKB,8B:Q+'");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("D", "D");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[D, D]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-1625));
      Integer integer1 = new Integer(5);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, integer1, object0);
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, multiKey0, object1);
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-1625, 5]", string0);
      
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      Integer integer2 = new Integer((-2280));
      Integer integer3 = new Integer((-2280));
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, integer2, integer3, "MultiKey[-1625, 5]", integer3);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
  }
}
