/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:18:46 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("3xM&@xgrA", "3xM&@xgrA", "3xM&@xgrA", "3xM&@xgrA", "3xM&@xgrA");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(11);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1);
      multiKey1.size();
      multiKey0.equals(integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey2.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Cm(Wt.0jN b(V*", "'-^<Mvw25jTNT'^m07", "`0smaz", "e");
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, "`0smaz");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "e");
      multiKey1.toString();
      multiKey3.getKey(0);
      multiKey2.equals("");
      int int1 = multiKey1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      // Undeclared exception!
      try { 
        multiKey1.getKey(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "q\"2>*k}0E";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("q\"2>*k}0E", "q\"2>*k}0E");
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Mi>mV,ar";
      stringArray0[1] = "MultiKey[java.lang.Object@72bd3488]";
      stringArray0[2] = "MultiKey[java.lang.Object@72bd3488]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-4645));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4645
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("1;y/=^P/2", "1;y/=^P/2");
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, "", (Object) null);
      multiKey2.size();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey1, multiKey1, multiKey2);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2106);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2106);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[0]);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      boolean boolean0 = multiKey1.equals(integerArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("G2\"` ZPx2G]E%e ", "G2\"` ZPx2G]E%e ", "G2\"` ZPx2G]E%e ");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("3xM&@xgrA", "3xM&@xgrA", "^mz;Yl#UQg3A'qY,a+E", ">[D+Ooc}?~p", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&jAYU%n|~6q|Ke:LE=";
      stringArray0[1] = "8}Y:2XUB$\"<$";
      stringArray0[2] = "w,jt";
      stringArray0[3] = "";
      stringArray0[4] = "(zT2ttzKr(!}_'hb5M(";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "zIXyry.kn";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0, integer0);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = new Integer[7];
      integerArray1[0] = integer0;
      integerArray1[1] = integer0;
      integerArray1[2] = integer0;
      integerArray1[3] = integer0;
      Integer integer1 = new Integer(0);
      integerArray1[4] = integer1;
      integerArray1[5] = integer0;
      integerArray1[6] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray1);
      Object object0 = multiKey2.getKey(5);
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, (Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "hN$_e+");
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, hN$_e+]", string0);
      
      String string1 = multiKey1.getKey(0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("1by/|^P/Z", "1by/|^P/Z");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("s<B_a8_Y#c", "s<B_a8_Y#c", "s<B_a8_Y#c");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[s<B_a8_Y#c, s<B_a8_Y#c, s<B_a8_Y#c]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-109));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-109));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -109
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-12));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "V";
      stringArray0[1] = "I!rCxTeD$E_ur ";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      int int0 = (-3235);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3235));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3235
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      MultiKey<Integer> multiKey1 = multiKey0.getKey(1);
      assertNull(multiKey1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(0, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("G2e5\"` ZPx2G]E%e ", "G2e5\"` ZPx2G]E%e ");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("}YsK\" ", "}YsK\" ", "}YsK\" ", "}YsK\" ");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("}YsK\" ", "}YsK\" ", "}YsK\" ", "}YsK\" ", "}YsK\" ");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", ")AI");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", (String) null, "M\u0000w,.~>|tQ", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey", "", "", "YN!g`q6g'l");
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      assertEquals(5, multiKey5.size());
  }
}
