/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 00:46:34 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("_+P~8H+", "_+P~8H+");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "_+P~8H+");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "_+P~8H+";
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) multiKey1;
      objectArray0[5] = (Object) multiKey1;
      objectArray0[6] = (Object) multiKey1;
      objectArray0[7] = (Object) "_+P~8H+";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[_+P~8H+, _+P~8H+]", string0);
      
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("_+P~8H+", "_+P~8H+");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "_+P~8H+");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey1;
      objectArray0[6] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[_+P~8H+, _+P~8H+]", string0);
      
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(multiKey2.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, (Object) null, object0);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      assertNotSame(multiKeyArray1, multiKeyArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Ac!!7pN`99", "Ac!!7pN`99", "Ac!!7pN`99", "Ac!!7pN`99", "Ac!!7pN`99");
      assertEquals(5, multiKey0.size());
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>("Ac!!7pN`99", multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MBCfAu>T>gM8~)", "MBCfAu>T>gM8~)", "MBCfAu>T>gM8~)");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "MBCfAu>T>gM8~)");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      MultiKey<Object> multiKey3 = multiKey2.getKey(0);
      multiKey3.toString();
      Integer integer0 = new Integer((-16));
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.equals(integer0);
      Integer integer1 = new Integer(0);
      multiKey3.equals(integer1);
      multiKey2.toString();
      multiKey3.hashCode();
      multiKey3.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("", ".", "MultiKey[MultiKey[null, MBCfAu>T>gM8~)], MultiKey[null, MBCfAu>T>gM8~)]]", "The array of keys must not be null", "=Zl.[g|cz&`A");
      multiKey4.toString();
      multiKey4.getKey(0);
      multiKey2.equals("");
      String string0 = (String)multiKey3.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(12, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-341));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "", integer0, "<+d]kSn%]$x rZo=v", "");
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      multiKey0.toString();
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-341, -341, -341, -341, -341]", string0);
      
      multiKey1.equals("");
      multiKey0.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("<+d]kSn%]$x rZo=v", "MultiKey[-341, -341, -341, -341, -341]", "", "8Dd=");
      boolean boolean0 = multiKey2.equals(integerArray0[4]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      boolean boolean0 = false;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-820));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -820
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, 0, 0]", "MultiKey[0, 0, 0]");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      int int0 = 1;
      multiKey2.toString();
      MultiKey<String> multiKey3 = multiKey2.getKey(1);
      multiKey0.equals("MultiKey[0, 0, 0]");
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey1.toString();
      int int1 = 0;
      multiKey3.getKey(0);
      MultiKey<Integer> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("dX~tN}\"s'4zo$U", "dX~tN}\"s'4zo$U", "dX~tN}\"s'4zo$U", "dX~tN}\"s'4zo$U");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer0 = new Integer((-952));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, "");
      multiKeyArray0[0] = multiKey1;
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[2] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, integer0, (Object) null);
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey2, multiKey4, object1, (Object) null, "5|u0!+MQR");
      multiKeyArray0[3] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      boolean boolean0 = multiKey6.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Ac!!7pN`99", "Ac!!7pN`99", "Ac!!7pN`99", "Ac!!7pN`99");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("I8l>VpT:'5F7", "I8l>VpT:'5F7", "I8l>VpT:'5F7", "I8l>VpT:'5F7", "I8l>VpT:'5F7");
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("08qBr91~_PZ3_)", "08qBr91~_PZ3_)");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Ac!!7pN`99", "Ac!!7pN`99", "Ac!!7pN`99");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("08qBr91~_Z3_)", "08qBr91~_Z3_)");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      boolean boolean0 = multiKey0.equals("MultiKey[MultiKey[08qBr91~_Z3_), 08qBr91~_Z3_)], MultiKey[08qBr91~_Z3_), 08qBr91~_Z3_)], MultiKey[08qBr91~_Z3_), 08qBr91~_Z3_)]]");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(2161);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "5#C&gqivrtp8AmIf");
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer0, multiKey2, "MultiKey[MultiKey[08qBr91~_Z3_), 08qBr91~_Z3_)], MultiKey[08qBr91~_Z3_), 08qBr91~_Z3_)], MultiKey[08qBr91~_Z3_), 08qBr91~_Z3_)]]", (Object) null);
      multiKey0.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.size();
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer2, integer2);
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[2161, 2, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Ac!!7pN`99", "Ac!!7pN`99");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("GF<kW'JNgn@#B", "GF<kW'JNgn@#B");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1259));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1259
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
