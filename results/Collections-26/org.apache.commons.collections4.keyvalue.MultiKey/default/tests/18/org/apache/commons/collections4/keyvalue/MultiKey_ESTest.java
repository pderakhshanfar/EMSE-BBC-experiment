/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:39:59 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[14];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("", (String) null);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("I.F", "I.F");
      MultiKey<String> multiKey1 = new MultiKey<String>("I.F", "I.F");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1555));
      multiKey1.equals(integer0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.size();
      multiKey2.hashCode();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey3.hashCode();
      Object object0 = multiKey1.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"Q?^jz3", "", "\"Q?^jz3");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("The array of keys must not be null", "");
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "\"Q?^jz3", multiKey1, "The array of keys must not be null", "");
      Object[] objectArray0 = multiKey3.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      int int0 = (-2368);
      Integer integer0 = new Integer((-2368));
      Integer integer1 = new Integer((-2368));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, ":", integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, integer1, ":", multiKey0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, multiKey1);
      Object object0 = new Object();
      int int1 = 1092;
      Integer integer2 = new Integer(1092);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, object0, multiKey0, ":", integer2);
      multiKeyArray0[1] = multiKey3;
      Integer integer3 = new Integer((-1218));
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer3, integer3, (Object) null, multiKey4);
      multiKeyArray0[2] = multiKey5;
      String string0 = "";
      Object object1 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey1, multiKey2, "", object1);
      multiKeyArray0[3] = multiKey6;
      Object object2 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ":";
      stringArray0[1] = ":";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = ":";
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey7.getKey((-1008));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1008
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.getKey(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.getKey(3);
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      int int1 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      Integer integer4 = new Integer(0);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer5 = new Integer((-1));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, integer5, int0, integer4);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(int1, integer0, integer4, multiKey1);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.hashCode();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[-1, -1, 0, 0]";
      stringArray0[1] = "MultiKey[-1, -1, 0, 0]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[-1, -1, 0, 0], MultiKey[-1, -1, 0, 0]]", string0);
      
      int int2 = multiKey1.hashCode();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      assertEquals(4, multiKey0.size());
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";";
      stringArray0[1] = "";
      stringArray0[2] = "2l";
      stringArray0[3] = "MultiKey";
      stringArray0[4] = "DPM2Bo^CRK:d`<r.k_x";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      assertEquals(8, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-591);
      Integer integer0 = new Integer((-591));
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("TDj6X6rnVg\"", "org.apache.commons.collections4.keyvalue.MultiKey", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, 0, 0]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      assertEquals(2, multiKey0.size());
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(1304);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals("");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.size();
      multiKey3.hashCode();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      int int0 = multiKey4.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("ih2=E1HmOEIbEKdz@", "ih2=E1HmOEIbEKdz@");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2329));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2329
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("hmNQ;z;xsG1Zkm", "hmNQ;z;xsG1Zkm", "hmNQ;z;xsG1Zkm", "hmNQ;z;xsG1Zkm", "hmNQ;z;xsG1Zkm");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", (String) null, "sY<U", (String) null);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-124));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -124
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
