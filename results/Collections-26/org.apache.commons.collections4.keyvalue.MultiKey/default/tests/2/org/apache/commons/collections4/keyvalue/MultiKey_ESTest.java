/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:13:55 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("SW,!J3[D GPDd!", "SW,!J3[D GPDd!", "SW,!J3[D GPDd!");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("SW,!J3[D GPDd!", "SW,!J3[D GPDd!", multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "6|[O_Gsq9OKXz9@hkY", "6|[O_Gsq9OKXz9@hkY", "", "6|[O_Gsq9OKXz9@hkY");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(3008);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Integer integer1 = new Integer(3008);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1, integer1, integer0, integer1);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object object0 = multiKey0.getKey(0);
      objectArray0[0] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object0);
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer0 = new Integer(1982);
      Integer integer1 = new Integer(1982);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer1);
      multiKeyArray0[0] = multiKey0;
      Integer integer2 = new Integer(1982);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer2, (Integer) null, (Integer) null, integer1);
      multiKeyArray0[1] = multiKey1;
      Integer integer3 = new Integer(1982);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(1468);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer3, integer4, integer5, integer6);
      multiKeyArray0[2] = multiKey2;
      Integer integer7 = new Integer(0);
      multiKey0.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer3, integer7);
      multiKeyArray0[3] = multiKey3;
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      multiKey4.getKeys();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[1982, 1982, null, 1982]";
      stringArray0[1] = "MultiKey[1982, 1982, null, 1982]";
      stringArray0[2] = "MultiKey[1982, 1982, null, 1982]";
      stringArray0[3] = "MultiKey[1982, 1982, null, 1982]";
      stringArray0[4] = "MultiKey[1982, 1982, null, 1982]";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, true);
      multiKey6.getKey(0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object) null, (Object) null, multiKey5, "MultiKey[1982, 1982, null, 1982]", "MultiKey[1982, 1982, null, 1982]");
      multiKey7.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("G8#cmEb", "G8#cmEb", "G8#cmEb", "G8#cmEb");
      multiKey0.toString();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null", "8vra~cIm|-:x(", "\"z;d6(-X0Z& |;<q", "MultiKey");
      multiKey0.toString();
      multiKey0.hashCode();
      int int0 = 5;
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("8vra~cIm|-:x(", integer0, "The array of keys must not be null");
      // Undeclared exception!
      try { 
        multiKey1.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey0.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray1, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "MultiKey[4]", "");
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      assertEquals(0, multiKey0.size());
      
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = 916;
      Integer integer0 = new Integer(916);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, multiKey0, integer0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(931);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 931
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("SW,!J3[D GPDd!", "SW,!J3[D GPDd!", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("SW,!J3[D GPDd!", "", multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-922));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-922));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer2);
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "`'rSUyjh;?>");
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey0.equals(multiKey2);
      assertFalse(boolean1);
      
      multiKey2.toString();
      int int0 = multiKey1.size();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-922, -922]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("SW,!J3[D G$Dcd!", "SW,!J3[D G$Dcd!");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("SW,!J3[D GPDcd!", "SW,!J3[D GPDcd!", "SW,!J3[D GPDcd!", "SW,!J3[D GPDcd!", "SW,!J3[D GPDcd!");
      assertEquals(5, multiKey0.size());
      
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("8)a@uMC3dH4aM", "8)a@uMC3dH4aM");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[8)a@uMC3dH4aM, 8)a@uMC3dH4aM]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-2525));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      boolean boolean0 = multiKey0.equals("SW,!J3[D GPDcd!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-2387));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      Integer integer1 = new Integer((-2387));
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer1, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("8)a@uMC3dH4aM", "8)a@uMC3dH4aM", "8)a@uMC3dH4aM");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("SW,!J3[D GPDcd!", "SW,!J3[D GPDcd!", "", "SW,!J3[D GPDcd!");
      assertEquals(4, multiKey0.size());
  }
}
