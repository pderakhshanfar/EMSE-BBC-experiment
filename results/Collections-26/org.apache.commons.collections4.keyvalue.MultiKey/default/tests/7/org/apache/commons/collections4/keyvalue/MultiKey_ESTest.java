/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:14:03 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("vOnww", object0, "vOnww", integer0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      Object object1 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " _ oT':/V@";
      objectArray0[1] = (Object) " _ oT':/V@";
      objectArray0[2] = (Object) " _ oT':/V@";
      objectArray0[3] = (Object) " _ oT':/V@";
      objectArray0[4] = (Object) " _ oT':/V@";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(2);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "mA", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1413));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.size();
      Object object0 = new Object();
      multiKey0.equals(object0);
      String[] stringArray1 = multiKey1.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "Cy^!3m", "Cy^!3m");
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      Object[] objectArray0 = new Object[1];
      multiKey0.toString();
      objectArray0[0] = (Object) "MultiKey[null, null, Cy^!3m, Cy^!3m]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1913);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1913);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "The aruay of keys must not be null", "The aruay of keys must not be null", multiKey0, multiKey0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("vOqww", "vOqww");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "vOqww";
      objectArray0[2] = (Object) "vOqww";
      objectArray0[3] = (Object) "vOqww";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) multiKey0;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[vOqww, vOqww], vOqww, vOqww, vOqww, MultiKey[vOqww, vOqww], MultiKey[vOqww, vOqww], MultiKey[vOqww, vOqww], MultiKey[vOqww, vOqww], MultiKey[vOqww, vOqww]]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey", "", multiKey2, integer0, integer0);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(799);
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer(799);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2, integer0, integer3, integer1);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[799, 3, 3, 799, 799]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("X", "X", "X", "X", "X");
      boolean boolean0 = multiKey0.equals("X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      Object object0 = multiKey0.getKey(0);
      multiKey0.toString();
      multiKey0.toString();
      Object object1 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1);
      multiKey1.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.getKey(1);
      multiKey1.toString();
      Integer integer2 = new Integer(74);
      multiKey0.equals(integer2);
      multiKey0.hashCode();
      multiKey0.getKey(0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKeyArray0[3] = multiKey3;
      multiKeyArray0[4] = multiKey2;
      MultiKey<String> multiKey4 = new MultiKey<String>("~@sJl_q", "", "MultiKey", "MultiKey[0, java.lang.Object@44c3ab3b]");
      multiKeyArray0[5] = multiKey4;
      multiKeyArray0[6] = multiKey2;
      multiKeyArray0[7] = multiKey2;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      int int0 = multiKey5.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "rvD(\"9zb4zJAWM";
      stringArray0[2] = "'0DEG64O~-xQ>3n";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2873);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2873
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2107);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2107);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0[3], multiKey1, "MultiKey[, ]");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey3, multiKey3);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      // Undeclared exception!
      try { 
        multiKey4.getKey((int) integerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2107
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(0, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "");
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", object0, object1, object0, object0);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1685);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1536));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1536
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("a&", "a&", "a&", "a&");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = "\"V[B";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, object2, object0, "\"V[B");
      int int0 = (-526);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-526));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -526
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(586);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(586);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 586
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      assertEquals(5, multiKey0.size());
  }
}
