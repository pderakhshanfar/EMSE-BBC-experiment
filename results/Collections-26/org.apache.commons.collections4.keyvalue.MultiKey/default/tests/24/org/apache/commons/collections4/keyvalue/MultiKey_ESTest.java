/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:40:51 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Integer[] integerArray0 = new Integer[1];
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object1, multiKey1, object2);
      multiKey0.size();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "htBmACNbIVcg}XU<:";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiKey3.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      assertEquals(2, multiKey0.size());
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("");
      multiKey0.equals(multiKey1);
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[, ]", "MultiKey[]", "MultiKey[]");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-3887));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3887
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      int int1 = 0;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Object object0 = multiKey0.getKey(int0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0, (Object) null);
      multiKey1.getKey(0);
      objectArray0[0] = null;
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "8Y3eQQ-?";
      stringArray0[2] = "0$Lc5z;x0@2uif?";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.getKey(0);
      objectArray0[6] = (Object) "";
      multiKey1.getKey(0);
      objectArray0[7] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.size();
      assertTrue(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, (Object) null, object0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(int0);
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[0]";
      stringArray0[1] = "MultiKey[0]";
      stringArray0[2] = "MultiKey[0]";
      stringArray0[3] = "P2YU&:X9]=ZE2)((";
      stringArray0[4] = "MultiKey[0]";
      stringArray0[5] = "MultiKey[0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey2.toString();
      multiKey2.equals(multiKey0);
      multiKey2.size();
      multiKey2.equals("");
      multiKey0.getKeys();
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-549));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3392));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2835);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2206);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2206);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2835);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[1]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-3392));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-3003));
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[-549, -3392, 2835, 2206, 2206, 2835, -3392, -3392, -3003], MultiKey[-549, -3392, 2835, 2206, 2206, 2835, -3392, -3392, -3003]]", string0);
      
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "");
      Integer integer9 = new Integer((-3392));
      Integer integer10 = new Integer(2172);
      Integer integer11 = new Integer((-1455));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0[4], integer9, integerArray0[1], integer10, integer11);
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey", "", "MultiKey");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, multiKey4);
      boolean boolean0 = multiKey2.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("[(", "[(");
      boolean boolean0 = multiKey0.equals("[(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("or.apace.commons.coetions4.keyvalue.MultiKey", "or.apace.commons.coetions4.keyvalue.MultiKey", "or.apace.commons.coetions4.keyvalue.MultiKey");
      assertEquals(3, multiKey0.size());
      
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Jg7jy$'FI{}dzg", "Jg7jy$'FI{}dzg");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Jg7jy$'FI{}dzg";
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.pache.comons.collections4.kealue.MultiKey", "org.pache.comons.collections4.kealue.MultiKey", "org.pache.comons.collections4.kealue.MultiKey", "org.pache.comons.collections4.kealue.MultiKey", "org.pache.comons.collections4.kealue.MultiKey");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "MultiKey", "");
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1084));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1700);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1219));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2194);
      integerArray0[4] = integer4;
      int int0 = 2;
      Integer integer5 = new Integer(2);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2194);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2194);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(2788);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      int int0 = 722;
      // Undeclared exception!
      try { 
        multiKey0.getKey(722);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 722
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      assertEquals(0, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, multiKey0, (MultiKey<Object>) null, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "", "", "", "p4");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2);
      MultiKey<String> multiKey4 = multiKey3.getKey(0);
      assertEquals(5, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-5036));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5036
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
      try { 
        multiKey1.getKey(218);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 218
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
