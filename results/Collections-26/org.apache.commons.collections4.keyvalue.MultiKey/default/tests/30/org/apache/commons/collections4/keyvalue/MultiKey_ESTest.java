/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:21:12 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1607);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Integer integer1 = new Integer(1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object object2 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("#2x NNf", multiKey2, object2, object0, objectArray0[1]);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey3;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      multiKeyArray0[6] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey4.toString();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3);
      multiKey4.size();
      Object object3 = new Object();
      Integer integer2 = new Integer((-2587));
      boolean boolean0 = multiKey2.equals(multiKey2);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      Integer integer0 = new Integer(3);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[]", "", (String) null, "");
      MultiKey<String> multiKey3 = new MultiKey<String>("J^oLBs?Ah,Db59jq%de", (String) null, "");
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, object0, multiKey1, (Object) null, "");
      Object object1 = multiKey4.getKey(2);
      Object object2 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, object1, object2);
      Object object3 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(object3, (Object) null, multiKey1);
      multiKey6.toString();
      multiKey4.toString();
      multiKey6.hashCode();
      multiKey4.size();
      multiKey1.hashCode();
      Integer integer1 = new Integer((-2258));
      multiKey5.equals(integer1);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray1 = multiKey0.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("{8C`1y<j^t2F(]_CH^", "{8C`1y<j^t2F(]_CH^", "{8C`1y<j^t2F(]_CH^", (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("\"] ~>w&b0T?}jPGMY", (String) null);
      String string0 = multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey0.getKey(3);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey2.hashCode();
      multiKey0.hashCode();
      multiKey1.hashCode();
      Object object0 = multiKey0.getKey(0);
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "4R [ESZtR&FprePk?V";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "MultiKey", "MultiKey[, , 4R [ESZtR&FprePk?V, ]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.equals("");
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 0, 0, 0, 0]", string0);
      
      boolean boolean0 = multiKey2.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("(>`rIZc|HX", "(>`rIZc|HX", "(>`rIZc|HX", "(>`rIZc|HX", "(>`rIZc|HX");
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("(>`rIZc|HX", "(>`rIZc|HX", "(>`rIZc|HX");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("ng$L", "k^{0]W4Qh7sNI{&OZ]", "k^{0]W4Qh7sNI{&OZ]", "k^{0]W4Qh7sNI{&OZ]", "ng$L");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(5172);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5172);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(896);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1301);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-3177));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(186);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      String string0 = "gW[Q";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("gW[Q", (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer0, "gW[Q", (Object) null);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey2, multiKey1);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2214
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("X>p,sIZc^HX", "X>p,sIZc^HX", "X>p,sIZc^HX");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(6, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("4#X*4", "4#X*4", "4#X*4");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("zz@\"**S1w'|D'4-9-u?", "zz@\"**S1w'|D'4-9-u?");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("p+ZE$8I5{y;a5%m mI", "p+ZE$8I5{y;a5%m mI");
      boolean boolean0 = multiKey0.equals("p+ZE$8I5{y;a5%m mI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-4183));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4183
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("(>`IZc|HX", "(>`IZc|HX", "(>`IZc|HX", "(>`IZc|HX", "(>`IZc|HX");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "I", "I", "", "The array of keys must not be null");
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.equals(multiKey0);
      Integer integer2 = multiKey1.getKey(1);
      assertTrue(integer2.equals((Object)integer0));
  }
}
