/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 00:43:58 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer3);
      boolean boolean0 = multiKey0.equals("N y+s@");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("N y+s@", integer2, (Object) null);
      boolean boolean1 = multiKey1.equals(multiKey1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("N y+s@", integer0, "N y+s@");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      assertEquals(3, multiKey0.size());
      
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "h.SO:T0J_Bi#Y$N`P/");
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.getKeys();
      multiKey0.equals("_]~yqELb1=}_ZD`h");
      int int0 = multiKey1.size();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-2428));
      Integer integer3 = new Integer(7);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer3;
      integerArray0[1] = integer3;
      integerArray0[2] = integer3;
      integerArray0[3] = integer0;
      Integer integer4 = new Integer(7);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKey3.size();
      Object object0 = new Object();
      multiKey1.equals(object0);
      Integer integer5 = new Integer((-3541));
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer5, integer1);
      int int1 = multiKey4.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", ".C/~ ,?/R", "", "6N4OE", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      multiKey0.equals(integer0);
      String string0 = multiKey0.getKey(4);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("+E,/)zIy'=)7", "+E,/)zIy'=)7", "+E,/)zIy'=)7");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "uDeZ;)>7<uK1";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "EI";
      stringArray0[5] = "q s~%dIB@";
      stringArray0[6] = "";
      stringArray0[7] = "l{i,EyY4l~Z.FTV8t\"";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("l{i,EyY4l~Z.FTV8t\"", "uDeZ;)>7<uK1");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, object0, "");
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      assertEquals(2, multiKey0.size());
      
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(451);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("r*qS]n", "r*qS]n");
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals("r*qS]n");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer1 = new Integer(451);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[MultiKey[r*qS]n, r*qS]n], MultiKey[r*qS]n, r*qS]n], MultiKey[r*qS]n, r*qS]n], MultiKey[r*qS]n, r*qS]n], MultiKey[r*qS]n, r*qS]n]]", integer1, multiKey3);
      multiKeyArray0[0] = multiKey4;
      String string0 = "?\\*:i(9w";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "6?TX7{=t";
      stringArray0[1] = "r*qS]n";
      stringArray0[2] = "MultiKey[r*qS]n, r*qS]n]";
      stringArray0[3] = "r*qS]n";
      stringArray0[4] = "r*qS]n";
      stringArray0[5] = "r*qS]n";
      stringArray0[6] = "?*:i(9w";
      stringArray0[7] = "?*:i(9w";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>((Integer) null, (Integer) null);
      int int0 = 1657;
      // Undeclared exception!
      try { 
        multiKey6.getKey(1657);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1657
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[6];
      multiKey0.getKey(1);
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object object0 = multiKey1.getKey(1);
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "pO`6ID^{e4q", "U08h4)bsO]L-PKW<\"{");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, pO`6ID^{e4q, U08h4)bsO]L-PKW<\"{]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("", "pO`6ID^{e4q", "`k*\"iVx`!bc)");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey2.equals("pO`6ID^{e4q");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      assertEquals(5, multiKey0.size());
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      assertEquals(4, multiKey0.size());
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(0, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(6136);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "", "", "");
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("d4", "d4");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "iw]@eT)c5'-[wT/s_cs";
      MultiKey<String> multiKey0 = new MultiKey<String>("iw]@eT)c5'-[wT/s_cs", "iw]@eT)c5'-[wT/s_cs", "iw]@eT)c5'-[wT/s_cs", "iw]@eT)c5'-[wT/s_cs", "iw]@eT)c5'-[wT/s_cs");
      // Undeclared exception!
      try { 
        multiKey0.getKey(1572);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1572
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-2877);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2877));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2877
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
