/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:20:17 GMT 2020
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("i@:`KxFZ1x.", "i@:`KxFZ1x.", "i@:`KxFZ1x.");
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2944));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1012));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      int int0 = 1;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[1]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.getKeys();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.equals(multiKey0);
      int int0 = multiKey0.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "dyNCc$uxNFX1";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "dyNCc$uxNFX1", multiKey0, "", object1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1861);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, integer0, integer2);
      Integer integer3 = new Integer(1768);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer3, integer2);
      multiKey3.toString();
      multiKey2.size();
      int int0 = new Integer(1861);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object>[] multiKeyArray1 = multiKey4.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "#B.1840{J");
      multiKey0.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object1);
      Integer integer0 = new Integer(0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) "#B.1840{J";
      objectArray1[1] = (Object) integer0;
      objectArray1[2] = object1;
      objectArray1[3] = object1;
      objectArray1[4] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray1);
      multiKey2.getKey(4);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "", integer0);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "");
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", multiKey3, "", multiKey4, integer1);
      multiKey5.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey6.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "w):R5VKB25X", "", "w):R5VKB25X");
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "#B.1840{J", "#B.1840{J", (Object) null);
      int int0 = 4;
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("q", "q");
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey0.size();
      multiKey0.getKey(0);
      multiKey0.getKey(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "F:a;=.";
      stringArray0[2] = "\u0002RD";
      stringArray0[3] = "";
      stringArray0[4] = "b:ne#t";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("$o~/ /[y0o3Ct/ 7r", "$o~/ /[y0o3Ct/ 7r");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-2209));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      assertEquals(2, multiKey0.size());
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", multiKey0);
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey4.equals(multiKey2);
      Object object0 = new Object();
      multiKey4.toString();
      multiKey2.equals(object0);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Ql.w";
      stringArray0[2] = "AZh-$HbPs%+cj io";
      stringArray0[3] = "";
      stringArray0[4] = "6q~3w";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.getKey(0);
      objectArray0[4] = (Object) "";
      Integer integer0 = new Integer(52);
      Integer integer1 = new Integer(52);
      Integer integer2 = new Integer(52);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      // Undeclared exception!
      try { 
        multiKey1.getKey(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("py.<Q/%J,B)<D+I{o!", "py.<Q/%J,B)<D+I{o!", "py.<Q/%J,B)<D+I{o!", "py.<Q/%J,B)<D+I{o!");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1128
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      int int1 = 1;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(197);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, ]", string0);
      
      multiKey1.equals("");
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      multiKeyArray0[8] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Integer integer0 = new Integer(4);
      boolean boolean0 = multiKey2.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      assertEquals(3, multiKey0.size());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey1.equals(objectArray0[3]);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean1 = multiKey1.equals(multiKey2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "", object0, object1);
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", (Object) null, object2, object0);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      multiKey1.getKeys();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.getKeys();
      multiKey1.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(0, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("TC+ZM5p<_X~52Z0", "TC+ZM5p<_X~52Z0", "TC+ZM5p<_X~52Z0", "TC+ZM5p<_X~52Z0", "TC+ZM5p<_X~52Z0");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "ZJ#4/V2", "ZJ#4/V2", object1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object2 = new Object();
      multiKey0.equals(object2);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
