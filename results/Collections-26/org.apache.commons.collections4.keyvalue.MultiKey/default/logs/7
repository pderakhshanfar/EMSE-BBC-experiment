* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.collections4.keyvalue.MultiKey
* Starting Client-0
* Connecting to master process on port 17214
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-26/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.keyvalue.MultiKey
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 152
* Using seed 601450317
* Starting evolution
* Initial Number of Goals in DynaMOSA = 68 / 152
* Search finished after 301s and 1057 generations, 640951 statements, best individual has fitness: 16.0
* Minimizing test suite
[MASTER] 04:13:40.148 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 37
* Number of covered goals: 31
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 32
* Number of covered goals: 31
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 69%
* Total number of goals: 13
* Number of covered goals: 9
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Generated 28 tests with total length 303
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 34%
* Compiling and checking tests
[MASTER] 04:13:55.631 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.commons.collections4.keyvalue.MultiKey;
[MASTER] 04:13:55.632 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
MultiKey<Integer>[] multiKeyArray0 = multiKey0.getKeys();
assertEquals(5, multiKeyArray0.length);


[MASTER] 04:14:01.999 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:14:02.003 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Integer integer0 = new Integer(118);
Integer integer1 = new Integer(2);
MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
multiKey0.toString();
multiKey0.toString();
multiKey0.toString();
multiKey0.toString();
multiKey0.toString();
Integer integer2 = new Integer(4);
MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer0, integer2, integer2);
MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey1, multiKey0);
multiKey2.toString();
MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
Object object0 = new Object();
Integer integer3 = new Integer(118);
MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey0, "MultiKey[118, 118, 2]", integer3, object0);
multiKeyArray0[0] = multiKey3;
MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
Object object1 = multiKey4.getKey(0);
Object[] objectArray0 = new Object[9];
objectArray0[0] = (Object) multiKey3;
objectArray0[1] = (Object) "MultiKey[118, 118, 2]";
objectArray0[2] = object1;
Object object2 = new Object();
objectArray0[7] = object2;
objectArray0[8] = object1;
MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, true);
multiKeyArray0[2] = multiKey5;
MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey[118, 118, 2]", "MultiKey[118, 118, 2]");
multiKey6.getKey(0);
MultiKey<String> multiKey7 = new MultiKey<String>("MultiKey[118, 118, 2]", "", "n8?X3O~Z]/L~", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
multiKey7.getKey(0);
MultiKey<Object> multiKey8 = new MultiKey<Object>("MultiKey[MultiKey[118, 118, 2], MultiKey[118, 118, 2], MultiKey[118, 118, 2], MultiKey[4, 118, 4, 4], MultiKey[118, 118, 2]]", "MultiKey[118, 118, 2]", "MultiKey[118, 118, 2]");
multiKeyArray0[3] = multiKey3;
MultiKey<Object> multiKey9 = new MultiKey<Object>(object0, object0, object1, "MultiKey[118, 118, 2]", "MultiKey[MultiKey[118, 118, 2], MultiKey[118, 118, 2], MultiKey[118, 118, 2], MultiKey[4, 118, 4, 4], MultiKey[118, 118, 2]]");
multiKeyArray0[4] = multiKey9;
MultiKey<Object> multiKey10 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
multiKeyArray0[5] = multiKey10;
Object object3 = new Object();
MultiKey<Object> multiKey11 = new MultiKey<Object>(object2, object3);
multiKeyArray0[6] = multiKey11;
MultiKey<MultiKey<Object>> multiKey12 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
multiKey12.toString();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'MultiKey_ESTest' to results/Collections-26/org.apache.commons.collections4.keyvalue.MultiKey/default/tests/7
* Done!

* Computation finished
