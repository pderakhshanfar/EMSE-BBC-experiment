/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:27:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("VZTC<i&4,xE", "VZTC<i&4,xE", "VZTC<i&4,xE", "VZTC<i&4,xE");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "9kw60kbdk]J(c=$e", "");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Object object1 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, object1);
      multiKey3.toString();
      int int0 = (-3284);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-3284));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3284
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, multiKey1);
      multiKey2.toString();
      multiKey2.equals(multiKey1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey3.toString();
      multiKey3.equals("MultiKey[MultiKey[MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ]], null, MultiKey[MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ]]]");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1401));
      Integer integer2 = new Integer((-1986));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer2);
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2y4J/+H:";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "}";
      stringArray0[6] = "";
      stringArray0[7] = "fp;o";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, object0, (Object) null, multiKey1);
      multiKey2.equals("");
      multiKey2.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[2y4J/+H:, The array of keys must not be null, , , , }, , fp;o]", string0);
      
      Integer integer3 = new Integer(155);
      Integer integer4 = new Integer((-1402));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer3, integer4, integer4);
      Object object1 = multiKey3.getKey(0);
      assertEquals((-1401), object1);
      
      boolean boolean0 = multiKey2.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, integer0, integer0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[1, 1, 1, 1, MultiKey[java.lang.Object@7ca93a2a, ]]";
      stringArray0[1] = "MultiKey[1, 1, 1, 1, MultiKey[java.lang.Object@7ca93a2a, ]]";
      multiKey0.toString();
      stringArray0[2] = "";
      multiKey0.toString();
      stringArray0[3] = "MultiKey[1, 1, 1, 1, MultiKey[java.lang.Object@7ca93a2a, ]]";
      stringArray0[4] = "MultiKey[1, 1, 1, 1, MultiKey[java.lang.Object@7ca93a2a, ]]";
      stringArray0[5] = "MultiKey[1, 1, 1, 1, MultiKey[java.lang.Object@7ca93a2a, ]]";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey[java.lang.Object@7ca93a2a, ]";
      multiKey1.toString();
      stringArray0[8] = "MultiKey[java.lang.Object@7ca93a2a, ]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.toString();
      multiKey2.hashCode();
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[null, 1]", string0);
      
      int int0 = multiKey3.size();
      boolean boolean0 = multiKey3.equals("MultiKey[1, 1, 1, 1, MultiKey[java.lang.Object@7ca93a2a, ]]");
      assertFalse(boolean0);
      
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "|U";
      stringArray0[1] = "-";
      stringArray0[2] = "}tj).)F4|";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[|U, -, }tj).)F4|, The array of keys must not be null, ]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1);
      boolean boolean0 = false;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(247);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer2, integer1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(835);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 835
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ElxK\"0";
      stringArray0[1] = "ElxK\"0";
      stringArray0[2] = "ElxK\"0";
      stringArray0[3] = "ElxK\"0";
      stringArray0[4] = "ElxK\"0";
      stringArray0[5] = "ElxK\"0";
      stringArray0[6] = "ElxK\"0";
      stringArray0[7] = "ElxK\"0";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("ElxK\"0", multiKey0, "ElxK\"0", "ElxK\"0", "ElxK\"0");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[ElxK\"0, MultiKey[ElxK\"0, ElxK\"0, ElxK\"0, ElxK\"0, ElxK\"0, ElxK\"0, ElxK\"0, ElxK\"0], ElxK\"0, ElxK\"0, ElxK\"0]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(144);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.hashCode();
  }
}
