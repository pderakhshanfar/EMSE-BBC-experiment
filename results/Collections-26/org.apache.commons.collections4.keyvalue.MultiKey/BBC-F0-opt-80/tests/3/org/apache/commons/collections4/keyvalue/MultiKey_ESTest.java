/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:58 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.getKeys();
      boolean boolean0 = multiKey0.equals(objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3596);
      Integer integer1 = new Integer((-492));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",'zB*GS H-eMhD!";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "<'0~pu`";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "_X+8";
      stringArray0[7] = "";
      stringArray0[8] = "(G[Y-3iA3K6dWEdL";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey0;
      Integer integer0 = new Integer(2004);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer0, (Object) null, multiKey0, multiKey1);
      multiKeyArray0[1] = multiKey2;
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("~klX0wL!w!~kb [}J?", multiKey0, (Object) null);
      multiKeyArray0[2] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      assertFalse(multiKey4.equals((Object)multiKey0));
      
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey5.toString();
      multiKey5.toString();
      multiKey5.getKey(0);
      multiKey0.hashCode();
      MultiKey<String> multiKey6 = new MultiKey<String>("E87", "", "MultiKey[MultiKey[null, null, null, null], MultiKey[MultiKey[null, null, null, null], 2004, null, MultiKey[null, null, null, null], MultiKey[2004, java.lang.Object@549dae39]], MultiKey[~klX0wL!w!~kb [}J?, MultiKey[null, null, null, null], null], MultiKey[MultiKey[null, null, null, null], MultiKey[MultiKey[null, null, null, null], 2004, null, MultiKey[null, null, null, null], MultiKey[2004, java.lang.Object@549dae39]], MultiKey[~klX0wL!w!~kb [}J?, MultiKey[null, null, null, null], null], null]]", "");
      boolean boolean0 = multiKey0.equals(multiKey6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M_S";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "udS~Z+v/`\"";
      stringArray0[4] = "";
      stringArray0[5] = "CR!v=OZ2.<%@m>T=g_";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-477));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -477
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKey(0);
      Integer integer0 = new Integer((-436));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      Object object0 = multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-436));
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, integer0, object0, multiKey2, "");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[-436, -436, -436, MultiKey[-436, -436, -436, -436, -436, -436, -436], ]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, object0, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = multiKey0.getKeys();
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0, object0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      multiKey0.size();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, object2, object0, object1, object1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-312));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -312
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ")m+dW_Zy|~!)vQ2|je";
      String string1 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>(")m+dW_Zy|~!)vQ2|je", ")m+dW_Zy|~!)vQ2|je", (String) null);
      multiKey0.toString();
      multiKey0.hashCode();
      String string2 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", ")m+dW_Zy|~!)vQ2|je");
      int int0 = 1541;
      // Undeclared exception!
      try { 
        multiKey1.getKey(1541);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1541
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null]", string0);
  }
}
