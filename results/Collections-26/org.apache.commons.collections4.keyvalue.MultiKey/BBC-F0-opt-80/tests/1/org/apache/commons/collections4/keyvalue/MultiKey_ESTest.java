/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object1, integer0, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      boolean boolean0 = multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey]", string0);
      
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.hashCode();
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, integer0);
      boolean boolean1 = multiKey1.equals(multiKey1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey0);
      multiKey2.getKeys();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "h", "MultiKey");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey2.size();
      multiKey0.toString();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey3.toString();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(2);
      objectArray0[0] = null;
      multiKey0.getKey(2);
      objectArray0[1] = null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      Integer integer0 = new Integer((-4695));
      boolean boolean0 = multiKey1.equals(integer0);
      assertFalse(boolean0);
      
      multiKey1.toString();
      assertFalse(multiKey1.equals((Object)multiKey0));
      
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "MultiKey[null, null, null]", "", "MultiKey[null, null, null]");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, , MultiKey[null, null, null], , MultiKey[null, null, null]], MultiKey[, , MultiKey[null, null, null], , MultiKey[null, null, null]], MultiKey[, , MultiKey[null, null, null], , MultiKey[null, null, null]]]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", object0, object0, object1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.getKeys();
      multiKey0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[MultiKey, java.lang.Object@2ba08773, java.lang.Object@2ba08773, java.lang.Object@7c16e5bc]";
      stringArray0[1] = "MultiKey[MultiKey, java.lang.Object@2ba08773, java.lang.Object@2ba08773, java.lang.Object@7c16e5bc]";
      stringArray0[2] = "MultiKey[MultiKey, java.lang.Object@2ba08773, java.lang.Object@2ba08773, java.lang.Object@7c16e5bc]";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.hashCode();
      int int0 = multiKey0.size();
      multiKey0.hashCode();
      multiKey0.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      int int1 = multiKey2.hashCode();
      assertTrue(int1 == int0);
      
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("MultiKey[MultiKey, java.lang.Object@2ba08773, java.lang.Object@2ba08773, java.lang.Object@7c16e5bc]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "c[66{Ci0c~`=o^O");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("^tlS2%R>C:$bg", "", "^tlS2%R>C:$bg", "c[66{Ci0c~`=o^O", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "^tlS2%R>C:$bg", "^tlS2%R>C:$bg");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "55SUrRV\"'");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "55SUrRV\"'", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[5] = multiKey5;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^tlS2%R>C:$bg";
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", (String) null, (String) null);
      multiKeyArray0[7] = multiKey7;
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      int int0 = multiKey8.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = ">Rp";
      stringArray0[2] = "hAY(2BnP0\"<s+";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, multiKey1, "", "org.apache.commons.collections4.keyvalue.MultiKey");
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, object0);
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "o1Bem>x _jg");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      int int0 = (-3398);
      Integer integer3 = new Integer((-3398));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer3);
      // Undeclared exception!
      try { 
        multiKey0.getKey(1404);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1404
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(object0);
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.toString();
      multiKey1.equals("");
      Integer integer0 = new Integer((-711));
      Integer integer1 = new Integer((-2122));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer0);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(1, int0);
  }
}
