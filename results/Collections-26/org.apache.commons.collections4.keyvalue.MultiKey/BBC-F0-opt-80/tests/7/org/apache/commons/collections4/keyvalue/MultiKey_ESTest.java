/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "kggOARyaB,9mU");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("kggOARyaB,9mU", "kggOARyaB,9mU");
      multiKey0.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[kggOARyaB,9mU, kggOARyaB,9mU]", string0);
      
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey1);
      boolean boolean0 = multiKey1.equals("");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer((-3993));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, (Integer) null, integer2, integer3);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, multiKey3, "QQN0$hxi=6AHm<");
      Integer integer4 = new Integer((-1));
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer4, "MultiKey[kggOARyaB,9mU, kggOARyaB,9mU]", "MultiKey[, , kggOARyaB,9mU]", "kggOARyaB,9mU", integer4);
      Object object0 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0[0], object0);
      multiKey4.getKeys();
      boolean boolean1 = multiKey0.equals(objectArray0[0]);
      assertFalse(boolean1 == boolean0);
      
      multiKey6.toString();
      assertFalse(multiKey6.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "", "The array of keys must not be null");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer((-1659));
      Integer integer1 = new Integer((-877));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer1);
      int int0 = multiKey3.size();
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1125);
      Integer integer1 = new Integer(576);
      Integer integer2 = new Integer(856);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer0);
      multiKey0.size();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("GTxX\" @F;{c", "GTxX\" @F;{c", "GTxX\" @F;{c", "GTxX\" @F;{c");
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey0.getKeys();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.hashCode();
      Integer integer0 = new Integer((-790));
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer2);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-790));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -790
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0);
      MultiKey<String> multiKey1 = new MultiKey<String>(".{/WYH*e9lYr<SwM4.:", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKey(0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[.{/WYH*e9lYr<SwM4.:, ]", ".{/WYH*e9lYr<SwM4.:", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String> multiKey4 = multiKey3.getKey(0);
      assertEquals(2, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(953);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = 4;
      Integer integer2 = new Integer(4);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2553));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2975);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-3268));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(953);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey0.getKey(0);
      Integer integer8 = new Integer(4);
      Integer integer9 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer8, integer9, (Integer) null);
      MultiKey<String> multiKey2 = new MultiKey<String>("zum(UKmPB", "", "", "");
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey1, multiKey2, object1, int0);
      multiKey3.hashCode();
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "ThjL\"`C");
      boolean boolean0 = multiKey2.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("5{?T&", "5{?T&", integer0, (Object) null);
      multiKey0.toString();
      Object object0 = multiKey0.getKey(3);
      assertNull(object0);
      
      Integer integer1 = new Integer((-3104));
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer0, integer3);
      multiKey1.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zlXeZt]v]tl6\u0006S`";
      stringArray0[1] = "5{?T&";
      stringArray0[2] = "5{?T&";
      stringArray0[3] = "MultiKey[5{?T&, 5{?T&, 0, null]";
      stringArray0[4] = "5{?T&";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer3, "5{?T&", multiKey2);
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey4.toString();
      multiKey2.equals(integer2);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[zlXeZt]v]tl6\u0006S`, 5{?T&, 5{?T&, MultiKey[5{?T&, 5{?T&, 0, null], 5{?T&]", string0);
      
      boolean boolean0 = multiKey0.equals("MultiKey[5{?T&, 5{?T&, 0, null]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-276));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -276
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey");
      // Undeclared exception!
      try { 
        multiKey0.getKey(1044);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1044
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "H1'OvMgq'RGN+ViU";
      stringArray0[1] = "rY*gmWV@";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      int int0 = multiKey1.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!I'\"zfa_57S]rGha";
      stringArray0[1] = "0IOQYd(NKAiLgQOcm";
      stringArray0[2] = "";
      stringArray0[3] = ",BXJPd aW}i`wm'iQ";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-3424));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3424));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-3424));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "$l9a]T";
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "$l9a]T", object0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-179);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-179));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -179
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2545);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2545);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(986);
      integerArray0[2] = integer2;
      int int0 = 1;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(986);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[2545, 2545, 986, 1, 1, 986, 986]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "/F", "/F", "f#|(k m|X0/[[5", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("f#|(k m|X0/[[5", ">0L 5kdt.qBeuAUf", "");
      multiKeyArray0[1] = multiKey1;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKeyArray0[2] = multiKey2;
      boolean boolean0 = true;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey3.getKey(2926);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2926
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(3086);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3086);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2311));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
      try { 
        multiKey0.getKey(3086);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3086
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
