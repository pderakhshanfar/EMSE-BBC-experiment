/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:40 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("p", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Object object0 = multiKey1.getKey(4);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "DYm%Srfi2K3/>U::bL4";
      stringArray0[4] = "%&3d=U3udQBc*+EC";
      stringArray0[5] = "";
      stringArray0[6] = "P|Y.Kb$.Ck'";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, "");
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray1);
      multiKey0.equals(multiKey2);
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("1bL|Cx", "1bL|Cx", "1bL|Cx", "1bL|Cx", "1bL|Cx");
      Integer integer0 = new Integer((-1414));
      Integer integer1 = new Integer(3136);
      Integer integer2 = new Integer(3136);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      multiKey2.toString();
      multiKey2.toString();
      Integer integer3 = new Integer((-1414));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, integer3);
      multiKey3.toString();
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      multiKey1.size();
      multiKey1.equals(multiKey2);
      Integer integer4 = new Integer(297);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[-1414, 3136, 3136], -1414]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-2307));
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-2291));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(876);
      Integer integer1 = new Integer(876);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, ":[6", "");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("DSFLbw$Urts%8l", "The array of keys must not be null", "");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("DSFLbw$Urts%8l", "+mC:A4&}}GR$Z|l8S", "", "y'Jl8", "y'Jl8");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("DSFLbw$Urts%8l", "", "+mC:A4&}}GR$Z|l8S", "th*|-zz0980==c}f");
      multiKeyArray0[5] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey6.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1211));
      Integer integer2 = new Integer((-1211));
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1, integer2);
      multiKey7.getKey(0);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey1, (Object) null, (Object) null);
      int int0 = multiKey8.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1307));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "=e[*TWMD~";
      multiKey0.equals("=e[*TWMD~");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "1bL|Cx";
      MultiKey<String> multiKey0 = new MultiKey<String>("1bL|Cx", "1bL|Cx", "1bL|Cx", "1bL|Cx");
      Integer integer0 = new Integer((-1414));
      Integer integer1 = new Integer(3136);
      Integer integer2 = new Integer(3136);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      multiKey2.toString();
      Integer integer3 = new Integer((-1414));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object1, object2, integer3);
      multiKey2.equals(multiKey3);
      multiKey1.size();
      multiKey1.equals(multiKey2);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1414));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1414
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "", (String) null, (String) null);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      Integer integer0 = new Integer((-1875));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey1.toString();
      multiKeyArray0[1] = multiKey2;
      Integer integer1 = new Integer((-1875));
      Integer integer2 = new Integer((-1875));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer1, integer2);
      multiKeyArray0[2] = multiKey3;
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      multiKey4.toString();
      multiKey4.equals("");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKeyArray0);
      multiKey5.hashCode();
      multiKey1.toString();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey6, multiKey5);
      multiKey7.getKeys();
      multiKey6.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey6.hashCode();
      MultiKey<String> multiKey8 = new MultiKey<String>("MultiKey", "MultiKey[-1875, -1875]");
      // Undeclared exception!
      try { 
        multiKey8.getKey((-1875));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1875
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object[] objectArray0 = new Object[7];
      multiKey0.toString();
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0]]", "");
      multiKeyArray0[0] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[0, 0, 0]", "f6GsO3l");
      multiKeyArray0[1] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0]]", "i^[;{%71$B-$1]", ",YD';TQ/jP");
      multiKeyArray0[2] = multiKey5;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[0, 0, 0]";
      stringArray0[1] = "f6GsO3l";
      stringArray0[2] = "MultiKey[MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0]]";
      stringArray0[3] = "i^[;{%71$B-$1]";
      stringArray0[4] = "MultiKey[0, 0, 0]";
      stringArray0[5] = "f6GsO3l";
      stringArray0[6] = "";
      stringArray0[7] = "f6GsO3l";
      stringArray0[8] = "MultiKey[MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, 0, 0], 0, 0, 0, 0, MultiKey[0, 0, 0], 0]]";
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      multiKeyArray0[3] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("f6GsO3l", "The array of keys must not be null", "T.!$im'SM~y-nWEm72q");
      multiKeyArray0[4] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("f6GsO3l", "f6GsO3l", "f6GsO3l");
      multiKeyArray0[5] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey9.getKey(2176);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2176
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object object1 = multiKey0.getKey(0);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.hashCode();
      assertTrue(multiKey1.equals((Object)multiKey0));
  }
}
