/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:05:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      multiKeyArray0[8] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ]]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "[|e#hrlU/-bP/_R!iBj";
      stringArray0[3] = "K:hPBCqjc<@w7Y/{*6";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("[|e#hrlU/-bP/_R!iBj", "");
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      assertEquals("[|e#hrlU/-bP/_R!iBj", object0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "[|e#hrlU/-bP/_R!iBj", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.size();
      multiKey1.getKeys();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.size();
      Integer integer0 = new Integer((-1715));
      Integer integer1 = new Integer(0);
      multiKey2.toString();
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer1, (Integer) null, integer2);
      multiKey4.toString();
      multiKey4.getKey(3);
      multiKey2.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[[|e#hrlU/-bP/_R!iBj, ]", string0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      int int0 = 1590;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1590);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1590
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKeys();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4~";
      stringArray0[1] = "";
      stringArray0[2] = "L%a4QqzhI";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-504));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -504
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = (-317);
      Integer integer0 = new Integer((-317));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-317));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("d_NkI S.Xs3rLQWEP", "d_NkI S.Xs3rLQWEP", "d_NkI S.Xs3rLQWEP");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey((int) integerArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -317
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(2984);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.equals("MultiKey[2984, 2984, null]");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[2984, 2984, null]", "MultiKey[2984, 2984, null]", "");
      String string0 = "0'.fOy4!`";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "0'.fOy4!`";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(2984);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2984
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "^%=i (IgIk";
      stringArray0[1] = "^%=i (IgIk";
      stringArray0[2] = "^%=i (IgIk";
      stringArray0[3] = "^%=i (IgIk";
      stringArray0[4] = "^%=i (IgIk";
      stringArray0[5] = "^%=i (IgIk";
      stringArray0[6] = "^%=i (IgIk";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      Integer integer0 = new Integer((-5));
      MultiKey<Object> multiKey1 = new MultiKey<Object>("^%=i (IgIk", "^%=i (IgIk", "^%=i (IgIk", "^%=i (IgIk", integer0);
      assertEquals(5, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "ZB6=?aF");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("ZB6=?aF", "ZB6=?aF", "ZB6=?aF");
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[ZB6=?aF, ZB6=?aF, ZB6=?aF]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1, integer2);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer3, integer1, integer1, integer4);
      Integer integer5 = new Integer((-581));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer5, integer3);
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey3, multiKey4);
      multiKey5.hashCode();
      assertFalse(multiKey2.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "-_ui% ]89J";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "-_ui% ]89J", "");
      multiKey0.toString();
      int int0 = (-2408);
      Integer integer0 = new Integer((-2408));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey1.equals("-_ui% ]89J");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      multiKey0.toString();
      objectArray0[4] = (Object) multiKey1;
      objectArray0[5] = (Object) "MultiKey[, -_ui% ]89J, ]";
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2408));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2408
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "/%`;5E!v)S";
      MultiKey<String> multiKey0 = new MultiKey<String>("/%`;5E!v)S", "/%`;5E!v)S");
      String string1 = "a";
      String string2 = "wsBErE";
      String string3 = null;
      MultiKey<String> multiKey1 = new MultiKey<String>("a", "wsBErE", (String) null, "", "The array of keys must not be null");
      int int0 = (-582);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-582));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -582
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, object0, object1);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
