/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:31:50 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.colletions4.keyvalue.MultiKey", "} xQjq4mXMLL", "J0*gY:|e$g]@H-8&eI", "", "e1QM&VH:6F>,H2vUF");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "\u0001", "");
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKey(1);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      multiKey0.toString();
      objectArray0[2] = object1;
      Object object2 = new Object();
      multiKey0.toString();
      objectArray0[3] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.equals(multiKey0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-790);
      Integer integer0 = new Integer((-790));
      Integer integer1 = new Integer((-790));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, integer0, integer1, integer0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      Integer integer2 = new Integer((-790));
      Integer integer3 = new Integer((-790));
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer3, integer3, integer3);
      multiKey2.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.equals(multiKey2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.getKeys();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[java.lang.Object@66c720b5, -790, -790, -790, -790]", "MultiKey[java.lang.Object@66c720b5, -790, -790, -790, -790]");
      multiKey3.hashCode();
      Integer integer4 = new Integer((-1));
      multiKey2.equals(integer4);
      multiKey2.equals(multiKey1);
      MultiKey<MultiKey<String>> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("W4LWI=~4{V?|fG_-|a", "W4LWI=~4{V?|fG_-|a");
      multiKey0.size();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("|I[pYj_6{R u,Uv,:", "|I[pYj_6{R u,Uv,:", "", "|I[pYj_6{R u,Uv,:", (String) null);
      multiKey0.toString();
      int int0 = multiKey0.size();
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[|I[pYj_6{R u,Uv,:, |I[pYj_6{R u,Uv,:, , |I[pYj_6{R u,Uv,:, null]", "MultiKey[5, 5, 5, 5, 5]", "|I[pYj_6{R u,Uv,:");
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1443));
      Integer integer1 = new Integer((-1443));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("_-@Cg7{y5Fjrp,u=oI", "", "xHpcb:$RvBe, E", "xHpcb:$RvBe, E");
      Object object0 = new Object();
      multiKey1.toString();
      multiKey1.equals(object0);
      multiKey1.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, "zAy`X}", multiKey1, "zAy`X}");
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "8BgbFUtAc2eO=T";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey2);
      multiKey3.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey4.toString();
      int int0 = multiKey4.size();
      multiKey4.getKeys();
      multiKey2.getKeys();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2336));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(62);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey5.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String> multiKey0 = new MultiKey<String>("'__Du(a#J/hisJ", "", "'__Du(a#J/hisJ");
      String string0 = multiKey0.getKey(1);
      assertEquals("", string0);
      
      objectArray0[0] = (Object) "";
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Integer integer1 = multiKey1.getKey(1);
      objectArray0[1] = (Object) integer1;
      Integer integer2 = multiKey1.getKey(1);
      objectArray0[2] = (Object) integer2;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[7] = integer3;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, integer3, multiKey1, integer4);
      Object object0 = multiKey3.getKey(0);
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      Object object3 = new Object();
      objectArray0[6] = object3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "g/";
      stringArray0[1] = "3|kM";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer((-458));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.getKey(1);
      objectArray0[2] = (Object) "";
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray1, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(3328);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3328
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("7(8K\";q|", "7(8K\";q|");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
