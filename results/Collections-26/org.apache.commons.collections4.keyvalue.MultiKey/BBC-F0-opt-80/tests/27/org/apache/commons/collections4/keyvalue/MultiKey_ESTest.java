/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:51:00 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(8);
      Integer integer2 = new Integer((-3624));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer0, integer2, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, integer2);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey1, integer2, "!~r?1u/7!/7nkB()He");
      int int0 = 1;
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      Object object0 = multiKey2.getKey(1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.equals(object0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = null;
      int int0 = (-47);
      Integer integer1 = new Integer((-47));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer1, integer1, (Integer) null);
      Integer[] integerArray0 = new Integer[0];
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1);
      multiKey1.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[null, null, -47, -47, null]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[null, null, -47, -47, null]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.equals(multiKey2);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      String string0 = "U8d\\gxnDacXq_";
      MultiKey<Object> multiKey4 = new MultiKey<Object>("U8dgxnDacXq_", multiKey3);
      multiKeyArray0[0] = multiKey4;
      Object object0 = new Object();
      boolean boolean0 = true;
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey3, object0, multiKey0, multiKey5);
      multiKeyArray0[1] = multiKey6;
      Integer integer2 = new Integer((-47));
      int int1 = 19;
      Integer integer3 = new Integer(19);
      Integer integer4 = new Integer(19);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer2, integer2, integer3, (Integer) null, integer4);
      int int2 = 14;
      // Undeclared exception!
      try { 
        multiKey7.getKey(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":", ":", ":");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[:, :, :]", string0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2016));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1218);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(7);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer integer6 = new Integer(7);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-1419));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, integer0, object0);
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, (String) null, (String) null);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("izR:UV", "", multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[izR:UV, , MultiKey[, null, null, null]]", string0);
      
      multiKey2.getKey(0);
      Integer integer0 = new Integer(888);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "MultiKey[MultiKey[izR:UV, , MultiKey[, null, null, null]], MultiKey[izR:UV, , MultiKey[, null, null, null]]]";
      objectArray0[2] = (Object) "MultiKey[MultiKey[izR:UV, , MultiKey[, null, null, null]], MultiKey[izR:UV, , MultiKey[, null, null, null]]]";
      objectArray0[3] = (Object) "MultiKey[MultiKey[izR:UV, , MultiKey[, null, null, null]], MultiKey[izR:UV, , MultiKey[, null, null, null]]]";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "izR:UV";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      multiKey3.getKey(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("izR:UV", (Object) null, integer0, "", integer1);
      boolean boolean0 = multiKey0.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey0;
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("7K x8iv", "7K x8iv", "", "7K x8iv", "180M3Y!I6}e{FR");
      multiKey1.getKey(1);
      Object object0 = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("7K x8iv", (Object) null, multiKey2, multiKey3);
      multiKeyArray0[1] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[2] = multiKey5;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey6 = null;
      try {
        multiKey6 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "0GaHV|j2#EC", (String) null, "", "g1SCrupE0:aBpg~V6i");
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "");
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "MultiKey[null, null, null]";
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = "";
      stringArray0[7] = null;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, "MultiKey[null, null, null]", multiKey3);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(2);
      multiKey0.toString();
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(1872);
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer3);
      multiKey1.getKey(0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "MultiKey[, null]";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) integer0;
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[, null]", "g1\"ht'_o^", "");
      multiKey2.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "", (Object) null, object0, (Object) null);
      multiKeyArray0[0] = multiKey3;
      Integer integer4 = new Integer(3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[, null]";
      stringArray0[1] = "bIo";
      stringArray0[2] = "MultiKey[, null]";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      Integer integer5 = new Integer((-1));
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer4, multiKey4, integer5);
      multiKeyArray0[1] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object> multiKey7 = multiKey6.getKey(1);
      objectArray0[4] = (Object) multiKey7;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) integer3;
      objectArray0[7] = (Object) null;
      MultiKey<Object> multiKey8 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey8.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "MultiKey[java.lang.Object@2a1b9e9, java.lang.Object@2a1b9e9]", "", "MultiKey[java.lang.Object@2a1b9e9, java.lang.Object@2a1b9e9]");
      multiKey1.equals("MultiKey[java.lang.Object@2a1b9e9, java.lang.Object@2a1b9e9]");
      multiKey0.size();
      multiKey1.hashCode();
      multiKey1.equals(object0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
