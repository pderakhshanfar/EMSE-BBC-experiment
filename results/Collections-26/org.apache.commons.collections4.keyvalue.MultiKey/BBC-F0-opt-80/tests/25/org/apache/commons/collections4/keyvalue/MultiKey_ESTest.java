/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:42:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(5);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer((-448));
      Integer integer6 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer6, integer6, integer6, integer6, integer0);
      Integer integer7 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer7);
      Integer integer8 = new Integer((-833));
      Integer integer9 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer9, integer9, integer3, (Integer) null);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, 0, null]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("p|mlj&B1s8,Oau?s", "p|mlj&B1s8,Oau?s");
      boolean boolean0 = multiKey3.equals(multiKey3);
      boolean boolean1 = multiKey3.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p|mlj&B1s8,Oau?s";
      stringArray0[1] = "p|mlj&B1s8,Oau?s";
      stringArray0[2] = "";
      stringArray0[3] = "p|mlj&B1s8,Oau?s";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, integer6, integer5);
      multiKey5.size();
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(stringArray0);
      multiKey0.getKey(0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jh?y*a]Fq~";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "S^}HB>i#%";
      stringArray0[5] = "Ww+qv$S-pLJP!";
      stringArray0[6] = "0kq.sA;sTY";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[jh?y*a]Fq~, , , , S^}HB>i#%, Ww+qv$S-pLJP!, 0kq.sA;sTY, ]", string0);
      
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals("jh?y*a]Fq~");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(321);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-2324));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      boolean boolean1 = multiKey0.equals(multiKey2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("CN-&^/Qvv}>6N", "The array of keys must not be null", "The array of keys must not be null", "X\"]0");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("CN-&^/Qvv}>6N", "X\"]0", "The array of keys must not be null", "CN-&^/Qvv}>6N");
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1, integer2);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-5007));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5007
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "EZNlHs,!~2EH y", (String) null, (String) null, ">EuY[el+&Z=g5P");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.size();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-2892));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("^YiM}>g9mNv", " 2na;Im5&Jm", " 2na;Im5&Jm");
      Integer integer0 = new Integer((-2040));
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>(" 2na;Im5&Jm", "^0", "^0", "^0");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "^YiM}>g9mNv", object0, multiKey1);
      multiKey2.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey3 = new MultiKey<String>("^YiM}>g9mNv", "Y)X &@e9JX`K8?.{'", "^YiM}>g9mNv", "&x*", "o1H;cK?BL.<wg");
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.hashCode();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "FrjsRc6 =cN4D";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
      
      multiKey1.hashCode();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, FrjsRc6 =cN4D, ]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2458);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      int int0 = 435;
      Integer integer2 = new Integer(435);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) "MultiKey[0, 0, 0, 435]";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "MultiKey[0, 0, 0, 435]";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      int int1 = 24;
      // Undeclared exception!
      try { 
        multiKey1.getKey(24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "slH";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "Dk,|gLKB9VM^EhEmKNs";
      stringArray0[4] = "])+0";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$NwtH@'";
      stringArray0[1] = "\"";
      stringArray0[2] = "55!4<>z'<.^I";
      stringArray0[3] = "4";
      stringArray0[4] = "wQd~Q|-SZ'";
      stringArray0[5] = ">";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey0.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 1320;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1320
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
