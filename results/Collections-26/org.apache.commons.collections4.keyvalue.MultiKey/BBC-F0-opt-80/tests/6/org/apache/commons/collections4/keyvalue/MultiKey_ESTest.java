/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:38 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("E~N>`{ 'n59sfNGz", "E~N>`{ 'n59sfNGz");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[E~N>`{ 'n59sfNGz, E~N>`{ 'n59sfNGz]", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "E~N>`{ 'n59sfNGz";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "E~N>`{ 'n59sfNGz";
      objectArray0[3] = (Object) "MultiKey[E~N>`{ 'n59sfNGz, E~N>`{ 'n59sfNGz]";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "E~N>`{ 'n59sfNGz";
      objectArray0[6] = (Object) "E~N>`{ 'n59sfNGz";
      objectArray0[7] = (Object) "E~N>`{ 'n59sfNGz";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("^1E]", "^1E]", "");
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey1.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("E~N>`{ 'n59sfNGz", "E~N>`{ 'n59sfNGz");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[E~N>`{ 'n59sfNGz, E~N>`{ 'n59sfNGz]", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "E~N>`{ 'n59sfNGz";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "E~N>`{ 'n59sfNGz";
      objectArray0[3] = (Object) "MultiKey[E~N>`{ 'n59sfNGz, E~N>`{ 'n59sfNGz]";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "E~N>`{ 'n59sfNGz";
      objectArray0[6] = (Object) "E~N>`{ 'n59sfNGz";
      objectArray0[7] = (Object) "E~N>`{ 'n59sfNGz";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey0.size();
      Integer integer0 = new Integer((-3944));
      Integer integer1 = new Integer((-3944));
      multiKey0.toString();
      Integer integer2 = new Integer(2);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "MultiKey[]", (String) null);
      multiKey1.toString();
      Integer integer3 = new Integer((-3944));
      Integer integer4 = new Integer(0);
      int int0 = 1;
      Integer integer5 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer2, integer4, integer5);
      multiKey2.equals("MultiKey[]");
      MultiKey<String> multiKey3 = new MultiKey<String>("$lf:@7&gg?KOhctck", ",");
      // Undeclared exception!
      try { 
        multiKey3.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 3;
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey0.equals(multiKey1);
      Integer integer2 = new Integer(251);
      MultiKey<String> multiKey2 = new MultiKey<String>("C9}=U0n]QrPn", "C9}=U0n]QrPn", "C9}=U0n]QrPn", "C9}=U0n]QrPn");
      multiKey2.equals(multiKey1);
      MultiKey<String> multiKey3 = new MultiKey<String>("C9}=U0n]QrPn", "");
      multiKey2.toString();
      multiKey1.toString();
      Object object0 = new Object();
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(2269);
      Integer integer5 = new Integer(2035);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer3, multiKey0, integer4, object0, integer5);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, multiKey4);
      // Undeclared exception!
      try { 
        multiKey5.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(8);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[8, null, null]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[8, null, null]", "MultiKey[8, null, null]");
      int int0 = multiKey1.size();
      Object object0 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, ",UA8mMs4 &pXh");
      Object object1 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = ",UA8mMs4 &pXh";
      stringArray0[2] = ",UA8mMs4 &pXh";
      stringArray0[3] = null;
      stringArray0[4] = "MultiKey[8, null, null]";
      stringArray0[5] = ",UA8mMs4 &pXh";
      stringArray0[6] = ",UA8mMs4 &pXh";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.getKey(0);
      MultiKey<String> multiKey4 = new MultiKey<String>("(XkNN3yp|APm>Sv", "", "MultiKey[8, null, null]", "MultiKey[8, null, null]", ",UA8mMs4 &pXh");
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, object0, multiKey4, object0, "");
      Object object2 = multiKey5.getKey(0);
      assertNull(object2);
      
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey2, object1, multiKey1, (Object) null, ",UA8mMs4 &pXh");
      int int1 = multiKey5.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0);
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "O'pgAs";
      stringArray0[2] = "0l1H|e.";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-655));
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2);
      // Undeclared exception!
      try { 
        multiKey2.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("7yy", (String) null, "", (String) null, "TzH{?$IPCrv)u");
      multiKey0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7yy";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = (-1828);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1828));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1828
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("BD~=Q)Kx|MH^@D .@I", "");
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1616);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer2 = new Integer(221);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer1);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey2, multiKey1, multiKey2, multiKey2);
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(";S$#yw?7`:\"M<({Qq", ";S$#yw?7`:\"M<({Qq");
      multiKey0.size();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "yhZnNw`pa9+BI1=8s(";
      multiKey0.toString();
      stringArray0[1] = ";S$#yw?7`:\"M<({Qq";
      stringArray0[2] = ";S$#yw?7`:\"M<({Qq";
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-912);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-912));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -912
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("'*|}xy(8{59yL", "", "'*|}xy(8{59yL", "'*|}xy(8{59yL");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("'*|}xy(8{59yL");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "MultiKey['*|}xy(8{59yL, , '*|}xy(8{59yL, '*|}xy(8{59yL]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-1);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "eR$QB}=lbC");
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "MultiKey[5, 5, 5, 5]";
      objectArray0[6] = (Object) "MultiKey[5, 5, 5, 5]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.getKey(5);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-2502));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2502
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[0, 0, 0, java.lang.Object@7313558c]";
      stringArray0[1] = "MultiKey[0, 0, 0, java.lang.Object@7313558c]";
      stringArray0[2] = "MultiKey[0, 0, 0, java.lang.Object@7313558c]";
      stringArray0[3] = "MultiKey[0, 0, 0, java.lang.Object@7313558c]";
      stringArray0[4] = "J;f:EOBX|}5uf";
      stringArray0[5] = "MultiKey[0, 0, 0, java.lang.Object@7313558c]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer2);
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey2.hashCode();
      multiKey1.hashCode();
      String string1 = multiKey1.toString();
      assertTrue(string1.equals((Object)string0));
  }
}
