/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:05:15 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "[_% 4kspy";
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer((-3416));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", integer0, "[_% 4kspy");
      Integer integer1 = new Integer(1172);
      Integer integer2 = new Integer(1172);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-3416));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer3, integer0, integer4, integer2);
      boolean boolean0 = multiKey0.equals(integer4);
      Integer integer5 = new Integer(1234);
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKey0.size();
      multiKey1.toString();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, integer1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.size();
      multiKey0.size();
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[5, 5, 5, 5, 5]", "e", (String) null, "De/", (String) null);
      multiKey3.toString();
      multiKey1.toString();
      multiKey3.getKey(4);
      multiKey1.equals((Object) null);
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0);
      multiKey1.size();
      multiKey1.equals(multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[-1, -1]", "]k+yJO7>", "MultiKey[-1, -1]");
      multiKey3.equals(integer0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-704));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-704));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3691);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(192);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-349));
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((int) integerArray0[6]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 192
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(3563);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.hashCode();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey2.getKeys();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[null, 3563]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[null, 3563]";
      stringArray0[5] = "MultiKey[]";
      stringArray0[6] = "MultiKey[]";
      stringArray0[7] = "MultiKey[null, 3563]";
      stringArray0[8] = "MultiKey[null, 3563]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey3.getKeys();
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKeyArray0[0] = multiKey0;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-3117));
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer((-3117));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer3, integer4, integer1, integer5);
      multiKeyArray0[1] = multiKey1;
      Integer integer6 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer3, integer6, integer1, (Integer) null);
      multiKeyArray0[2] = multiKey2;
      Integer integer7 = new Integer(0);
      Integer integer8 = new Integer(5330);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer7, integer3, integer8, integer3);
      multiKeyArray0[3] = multiKey3;
      Integer integer9 = new Integer(0);
      Integer integer10 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer8, integer2, integer9, integer10);
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      assertEquals(5, multiKey5.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("HMVTW&d", "HMVTW&d", "HMVTW&d", "The array of keys must not be null", "Mh<}7wN75q");
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      Object object1 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "The array of keys must not be null", object0, object1);
      multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("The array of keys must not be null", "HMVTW&d", "HMVTW&d", object0, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.equals(multiKey0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(707);
      Integer integer3 = new Integer((-467));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer2, integer2, integer0, integer3);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(707);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 707
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(1316);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -878
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "N6'g2Q'El6I/hb";
      MultiKey<String> multiKey0 = new MultiKey<String>("uJ/l4iZ+jxS6I!ccK7)", "N6'g2Q'El6I/hb", "uJ/l4iZ+jxS6I!ccK7)", "uJ/l4iZ+jxS6I!ccK7)", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[uJ/l4iZ+jxS6I!ccK7), N6'g2Q'El6I/hb, uJ/l4iZ+jxS6I!ccK7), uJ/l4iZ+jxS6I!ccK7), The array of keys must not be null]", "uJ/l4iZ+jxS6I!ccK7)", (Object) null, (Object) null);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.getKey(1);
      multiKey1.getKeys();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(456);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 456
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("b4'qiM|Yk*<fT2Z+_i", "b4'qiM|Yk*<fT2Z+_i", "b4'qiM|Yk*<fT2Z+_i", "b4'qiM|Yk*<fT2Z+_i", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      Object object1 = new Object();
      multiKey1.toString();
      multiKey0.equals(object1);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", object0, "o", "");
      multiKey1.hashCode();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
