/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:30:46 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "MultiKey[java.lang.Object@6b4bdf4b, java.lang.Object@6b4bdf4b, java.lang.Object@6b4bdf4b]", "5YS\"K#7774;;|");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) "MultiKey[java.lang.Object@6b4bdf4b, java.lang.Object@6b4bdf4b, java.lang.Object@6b4bdf4b, java.lang.Object@6b4bdf4b]";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      Object object1 = multiKey3.getKey(0);
      boolean boolean0 = multiKey1.equals(object1);
      assertTrue(boolean0);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("ko\"*,J=:G;Wm/Q~", "org.apache.commons.collections4.keyvalue.MultiKey", "e\"SmcnmPMQ~vxt@y$3");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[ko\"*,J=:G;Wm/Q~, org.apache.commons.collections4.keyvalue.MultiKey, e\"SmcnmPMQ~vxt@y$3], MultiKey[ko\"*,J=:G;Wm/Q~, org.apache.commons.collections4.keyvalue.MultiKey, e\"SmcnmPMQ~vxt@y$3], MultiKey[ko\"*,J=:G;Wm/Q~, org.apache.commons.collections4.keyvalue.MultiKey, e\"SmcnmPMQ~vxt@y$3]]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer1, integer1, integer0);
      multiKey0.toString();
      multiKey1.size();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A";
      stringArray0[1] = ".ZD 9O9{:\u0001";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = ".&.zdnLr8w.cgugum";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "A");
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-759));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-759));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2230));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[4]);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, "A", "", (Object) null, multiKey2);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Fn=E+";
      stringArray0[3] = "!hV'J7Y";
      stringArray0[4] = "9nE[UCqg8i*";
      stringArray0[5] = "t.GQ2n91:[~`}v1`";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("t.GQ2n91:[~`}v1`", (Object) null, (Object) null, (Object) null, "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[t.GQ2n91:[~`}v1`, null, null, null, ]", string0);
      
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, (MultiKey<Object>) null);
      multiKey2.hashCode();
      Integer integer0 = new Integer(1316);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      boolean boolean0 = multiKey0.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey0 = new MultiKey<String>("VR\"gBnG=$WcOMdL7I", (String) null);
      multiKeyArray0[0] = multiKey0;
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.toString();
      Integer integer0 = new Integer((-1395));
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals(integer0);
      multiKey0.equals("VR\"gBnG=$WcOMdL7I");
      multiKey0.toString();
      Integer integer1 = new Integer((-1395));
      multiKey0.toString();
      multiKey0.equals(integer1);
      Integer integer2 = new Integer((-1395));
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[VR\"gBnG=$WcOMdL7I, null]", integer1, integer2);
      multiKey2.toString();
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "k.a.N)|\"N2]p5`0", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      multiKey2.toString();
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      Integer integer4 = multiKey3.getKey(1);
      objectArray0[1] = (Object) integer4;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey5 = new MultiKey<String>("k.a.N)|\"N2]p5`0", "");
      multiKey5.getKey(0);
      multiKey4.toString();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey4, multiKey2, "k.a.N)|\"N2]p5`0", multiKey0);
      multiKey6.toString();
      multiKey6.getKeys();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey4.getKey(2353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2353
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "", "", multiKey0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey2.getKey(166);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 166
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1982));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      Object object0 = new Object();
      multiKey0.toString();
      multiKey0.equals(object0);
      int int0 = multiKey0.size();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("UmzH", "UmzH");
      multiKey1.hashCode();
      Integer integer1 = new Integer(320);
      multiKey1.equals(integer1);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2);
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "V{eV*<B'1V1Y@ay[.t";
      stringArray0[1] = "Xd:VC.$H{q5bst";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "9CgRWCdX";
      stringArray0[6] = "=}+n#G.]h*4tT<Nnk`";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey0.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }
}
