/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:24 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "*U{ NSNgh)raRwb^C", "");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "+Multiey";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "+Multiey";
      objectArray0[5] = (Object) "+Multiey";
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "+Multiey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object0 = multiKey1.getKey(6);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "MultiKey");
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey1.getKeys();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[null, null], MultiKey[null, null], MultiKey[null, null]]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey0.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.equals("MultiKey[]");
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[0, 0]", "", "bu>BYahD~A/$", "@EYI_i\"u_uf");
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer0);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1276));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("_f;?$j{", integer0, "_f;?$j{", "", "");
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      Integer integer3 = new Integer((-1276));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer3, integer2, integer1, (Integer) null);
      boolean boolean1 = multiKey1.equals(multiKey2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<String> multiKey0 = new MultiKey<String>("$J^1^=N$E8I$0Q", (String) null, (String) null, "h");
      multiKey0.getKey(1);
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object3 = multiKey1.getKey(1);
      assertNotNull(object3);
      assertNotSame(object3, object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "}6*V$@R");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey0.hashCode();
      int int0 = multiKey1.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("c%N68W)q,", "");
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1834));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(5, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "MultiKey");
      multiKey0.getKey(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F|+$u]i%l";
      stringArray0[1] = "F`z$b71d0nuw98>";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", (String) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("F|+$u]i%l", multiKey0, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey2, "F`z$b71d0nuw98>", integer0);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1733));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1733
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "nc", (String) null);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1979));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1979
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "Ra<K");
      multiKey0.size();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "Ra<K";
      objectArray0[2] = (Object) multiKey0;
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, Ra<K]", string0);
      
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "Ra<K";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.size();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      Object object1 = multiKey2.getKey(2);
      boolean boolean0 = multiKey1.equals(object1);
      assertFalse(boolean0);
  }
}
