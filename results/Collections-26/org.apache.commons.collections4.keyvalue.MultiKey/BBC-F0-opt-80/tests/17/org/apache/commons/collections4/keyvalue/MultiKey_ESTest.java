/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:35:41 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "#KLrw<OBjhU=?", "MultiKey");
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "#KLrw<OBjhU=?";
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals("MultiKey");
      boolean boolean1 = multiKey0.equals(objectArray0[4]);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-253));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-253));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-253, -253, 3]", string0);
      
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) integer1;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray1, true);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3);
      multiKey4.getKeys();
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("V:|2#Oua@Jqdo}V*i`}", "V:|2#Oua@Jqdo}V*i`}", "V:|2#Oua@Jqdo}V*i`}", "V:|2#Oua@Jqdo}V*i`}", "V:|2#Oua@Jqdo}V*i`}");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, object0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey2, multiKey0, multiKey0);
      MultiKey<String> multiKey4 = new MultiKey<String>((String) null, "MultiKey[]", (String) null, "");
      multiKey4.toString();
      multiKey4.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey4.toString();
      multiKey2.hashCode();
      Integer integer0 = new Integer((-1987));
      Integer integer1 = new Integer((-1987));
      Integer integer2 = new Integer((-1987));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1, integer2, integer2);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[-1987, -1987, -1987, -1987]", string0);
      
      Integer integer3 = new Integer(6);
      Integer integer4 = new Integer(0);
      boolean boolean0 = multiKey3.equals(integer4);
      assertFalse(boolean0);
      
      multiKey0.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "m", integer0, "m", integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("m", "", "m", (String) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, (Object) null);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey2, multiKey2, multiKey2);
      String[] stringArray0 = new String[1];
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      Object object0 = multiKey4.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 337;
      Integer integer0 = new Integer(337);
      Integer integer1 = new Integer(337);
      int int1 = 0;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1634);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer2);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "J.cp\"4)=r<>/+Dx-R", "mTtJY");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("");
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey0.toString();
      int int2 = 2961;
      // Undeclared exception!
      try { 
        multiKey0.getKey(2961);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2961
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z'jpb=K8xBg\"Xt^BU";
      stringArray0[1] = "R3]{jcUh=J";
      stringArray0[2] = "";
      stringArray0[3] = "OxlA$ZJDuKFT";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("R3]{jcUh=J", multiKey0, "OxlA$ZJDuKFT", object0);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(4);
      integerArray0[2] = integer2;
      int int0 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey2.getKeys();
      assertEquals(9, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, object0, integer0);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2223);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer1, integer0, integer2);
      multiKey3.size();
      MultiKey<String> multiKey4 = new MultiKey<String>("", ":N!#UM", "");
      multiKey4.size();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey2);
      boolean boolean0 = multiKey5.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 2;
      Integer integer0 = new Integer(2);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, (Object) null, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(2);
      multiKey2.getKey(int0);
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(3079);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3079
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1470));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "hvT*vh[UOpJ@ xw8\"";
      stringArray0[2] = "kRBE6yo";
      stringArray0[3] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer((-890));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-890, 0]", string0);
  }
}
