/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:40:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("k4{QJ,yiHa&ZBfN", "k4{QJ,yiHa&ZBfN", "k4{QJ,yiHa&ZBfN");
      boolean boolean0 = multiKey0.equals(multiKey1);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1, multiKey0, (Object) null, object0);
      Object object1 = multiKey2.getKey(0);
      objectArray0[0] = object1;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) multiKey0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<String> multiKey3 = new MultiKey<String>("k4{QJ,yiHa&ZBfN", "z;'r%?F(h3,gTcL");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey4.size();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      boolean boolean1 = multiKey0.equals(objectArray0[3]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      Integer integer0 = new Integer((-3862));
      multiKey1.equals(multiKey0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1918));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      Integer integer2 = new Integer((-260));
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer2);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer2);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[], -260]", string0);
      
      int int0 = multiKey1.size();
      int int1 = multiKey1.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("k4{QJ,yiHa&ZBfN", "k4{QJ,yiHa&ZBfN", "k4{QJ,yiHa&ZBfN");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1, multiKey0, (Object) null, object0);
      Object object1 = multiKey2.getKey(0);
      objectArray0[0] = object1;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) multiKey0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) multiKey1;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) multiKey1;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      multiKey3.equals(integer0);
      boolean boolean1 = multiKey3.equals("LI.(:>}M)hAD ");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey2.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[]";
      multiKey0.toString();
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey[]";
      stringArray0[5] = "MultiKey[]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.hashCode();
      multiKey1.getKey(1);
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, object0, object0, "MultiKey[]", object1);
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "7";
      stringArray0[2] = "";
      stringArray0[3] = "y5 _R}b";
      stringArray0[4] = "G^nTS;Cr%N:n";
      stringArray0[5] = " %G1";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("6", " %G1", "}@n.:!:8#V`cH", "7", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "7", "", "", "");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("{U3QlC", "", "", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", (String) null, "", "7");
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey5.getKeys();
      assertEquals(5, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-2006));
      Object object0 = null;
      Integer integer1 = new Integer((-2006));
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer1, (Object) null, object1);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(1);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("'.:R", (String) null, (String) null);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey3.getKeys();
      int int0 = multiKey0.size();
      multiKey2.equals((Object) null);
      multiKey2.equals((Object) null);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, integer0);
      String string0 = multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(object0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      multiKey0.toString();
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey0.size();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[java.lang.Object@37589448, 0, 0]", "The array of keys must not be null");
      String string1 = multiKey2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(241);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b)6-kR";
      stringArray0[1] = "D[MGUX";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey1.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
