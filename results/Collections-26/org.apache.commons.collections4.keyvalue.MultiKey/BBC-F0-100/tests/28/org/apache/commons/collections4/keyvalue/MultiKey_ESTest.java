/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:44:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("2", object0, "2", "2");
      multiKey0.getKey(2);
      Object[] objectArray0 = new Object[2];
      Object object1 = new Object();
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "2";
      multiKey0.equals(multiKey0);
      String string0 = "c";
      MultiKey<String> multiKey1 = new MultiKey<String>("#dR+;e?EWc!5<", "c", "SN~L~2yPx*JL8");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      Object[] objectArray1 = multiKey0.getKeys();
      multiKey0.size();
      Integer integer0 = new Integer((-1633));
      Integer integer1 = new Integer(758);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray1, false);
      multiKey0.toString();
      multiKey2.equals(integer1);
      // Undeclared exception!
      try { 
        multiKey4.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "7@M-ZYTp", "7@M-ZYTp", "cfvQld9Y", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "MultiKey[-1, -1]";
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      Object[] objectArray1 = multiKey1.getKeys();
      multiKey1.size();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray1, false);
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("2", object0, "2", "2");
      multiKey0.getKey(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("2", multiKey0);
      Object[] objectArray0 = new Object[2];
      Object object1 = new Object();
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "2";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey1.equals(multiKey2);
      String string0 = "c";
      MultiKey<String> multiKey3 = new MultiKey<String>("#dR+;e?EWc!5<", "c", "SN~L~2yPx*JL8");
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.size();
      MultiKey<Integer> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Object object0 = new Object();
      String string1 = "";
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "MultiKey", (String) null, (String) null, "rP;cLp6jqHzi<yV");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "", "");
      multiKey0.toString();
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey2.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("The array of keys must not be null", "rP;cLp6jqHzi<yV", multiKey2, "");
      multiKey3.toString();
      multiKey3.size();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(5);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-3585));
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey4.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("fm(azfV7sfvW", "fm(azfV7sfvW", "fm(azfV7sfvW", "fm(azfV7sfvW");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "fm(azfV7sfvW";
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[1] = (Object) "fm(azfV7sfvW";
      objectArray0[2] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      multiKey1.toString();
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer1);
      multiKey2.toString();
      multiKey2.getKey(3);
      multiKey1.size();
      multiKey1.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[fm(azfV7sfvW, fm(azfV7sfvW, MultiKey[fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW], MultiKey[fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW], MultiKey[fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW], MultiKey[fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW]]", string0);
      
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey3.hashCode();
      boolean boolean0 = multiKey2.equals("MultiKey[fm(azfV7sfvW, fm(azfV7sfvW, MultiKey[fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW], MultiKey[fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW], MultiKey[fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW], MultiKey[fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW, fm(azfV7sfvW]]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "");
      Integer integer0 = new Integer(1012);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey1);
      Object[] objectArray1 = multiKey2.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "", "&e", "", ".w'.CCa.Ynx'z5f,^(i");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", (Object) null, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>(".w'.CCa.Ynx'z5f,^(i", "MultiKey", "", "Wkm/Q", "");
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey1.equals(multiKey3);
      multiKey3.toString();
      int int0 = 2497;
      // Undeclared exception!
      try { 
        multiKey3.getKey(2497);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2497
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2305));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }
}
