/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:24 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("%:<", "%:<", object0, "%:<");
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "%:<", "MultiKey[%:<, %:<, java.lang.Object@1d4999f6, %:<]", "%:<");
      Object object1 = multiKey1.getKey(0);
      assertEquals("", object1);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "");
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.size();
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0);
      Integer integer1 = new Integer(1406);
      multiKey2.equals(integer1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      // Undeclared exception!
      try { 
        multiKey3.getKey(1406);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1406
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null, (Object) null);
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2489);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "");
      Integer integer1 = new Integer(2489);
      Integer integer2 = new Integer(2489);
      String string0 = multiKey1.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(412);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(3);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-2304));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals(multiKey0);
      multiKey0.equals(integer0);
      String string0 = "~\\_e4}x$wl@+,D&";
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[MultiKey[1, -2304], MultiKey[1, -2304]]", "~_e4}x$wl@+,D&", "MultiKey[1, -2304]");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1256));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1256
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "YEU3dO,";
      objectArray0[1] = (Object) "YEU3dO,";
      objectArray0[2] = (Object) "YEU3dO,";
      objectArray0[3] = (Object) "YEU3dO,";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("YEU3dO,", "YEU3dO,");
      multiKey1.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.equals("YEU3dO,");
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(529);
      Integer integer1 = new Integer(529);
      Integer integer2 = new Integer(583);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey1.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, object0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(529);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 529
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "D(r";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = " QP[\"AilZ";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "The array of keys must not be null", "MultiKey", "sv|)\"_K?k,o[MYZeR");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.size();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "MultiKey[, , The array of keys must not be null, MultiKey, sv|)\"_K?k,o[MYZeR]");
      multiKey1.getKey(1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) "MultiKey[, , The array of keys must not be null, MultiKey, sv|)\"_K?k,o[MYZeR]";
      objectArray0[2] = (Object) multiKey1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "MultiKey[, , The array of keys must not be null, MultiKey, sv|)\"_K?k,o[MYZeR]";
      objectArray0[5] = (Object) "MultiKey[, , The array of keys must not be null, MultiKey, sv|)\"_K?k,o[MYZeR]";
      objectArray0[6] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "", "The array of keys must not be null");
      // Undeclared exception!
      try { 
        multiKey3.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      String string0 = multiKey0.getKey(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
