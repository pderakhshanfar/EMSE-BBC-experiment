/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:40:06 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.getKeys();
      Object object0 = new Object();
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(159);
      Integer integer1 = new Integer((-1413));
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, "2XjiIqUi}>]G>);XoDc", object0, integer0, integer1);
      Integer integer2 = new Integer(159);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, multiKey0, integer2, integer0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer3 = new Integer(159);
      Integer integer4 = new Integer((-2009));
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey2.size();
      Integer integer5 = new Integer((-202));
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object1, integer0, integer2, "MultiKey[159, MultiKey[-1413, 2XjiIqUi}>]G>);XoDc, java.lang.Object@3661eba6, 159, -1413], MultiKey[-1413, 2XjiIqUi}>]G>);XoDc, java.lang.Object@3661eba6, 159, -1413], 159, 159]", "MultiKey[159, MultiKey[-1413, 2XjiIqUi}>]G>);XoDc, java.lang.Object@3661eba6, 159, -1413], MultiKey[-1413, 2XjiIqUi}>]G>);XoDc, java.lang.Object@3661eba6, 159, -1413], 159, 159]");
      boolean boolean0 = multiKey3.equals("MultiKey[-1413, 2XjiIqUi}>]G>);XoDc, java.lang.Object@3661eba6, 159, -1413]");
      assertFalse(boolean0);
      
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      multiKey1.size();
      MultiKey<String> multiKey4 = new MultiKey<String>((String) null, "");
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[null, ]", string0);
      
      Integer integer6 = new Integer(5);
      boolean boolean1 = multiKey4.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1, "MultiKey", object1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3472));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3472));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey1.size();
      Integer integer2 = new Integer((-1));
      multiKey0.equals(integer2);
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, ]", string0);
      
      Integer integer3 = new Integer(5);
      boolean boolean0 = multiKey2.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Integer integer0 = new Integer((-46));
      Integer integer1 = new Integer(1359);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      // Undeclared exception!
      try { 
        multiKey1.getKey(1359);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1359
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "E";
      stringArray0[3] = "3d)&w>_=?AK2x0'6";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("m", "!2!DMt0ZSt)Weod)i", "m", "PW$D%u~", "!2!DMt0ZSt)Weod)i");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.getKey(4);
      //  // Unstable assertion: assertEquals("!2!DMt0ZSt)Weod)i", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>("m", "!2!DMt0ZSt)Weod)i");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.getKeys();
      multiKey1.getKeys();
      String string1 = multiKey1.toString();
      //  // Unstable assertion: assertEquals("MultiKey[m, !2!DMt0ZSt)Weod)i]", string1);
      
      multiKey0.size();
      multiKey1.getKeys();
      multiKey2.hashCode();
      int int0 = multiKey0.size();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2250);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2066);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[2]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2066);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey3.hashCode();
      //  // Unstable assertion: assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "org.apache.commons.collections4.keyvalue.MultiKey", "The array of keys must not be null", "The array of keys must not be null");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = (-409);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-409));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -409
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String> multiKey0 = new MultiKey<String>("wc]jC}ab", "?^Piy{SFdulp", "?^Piy{SFdulp", "wc]jC}ab");
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", (String) null, "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey1, multiKey1);
      MultiKey<String> multiKey3 = multiKey2.getKey(0);
      objectArray0[0] = (Object) multiKey3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Integer integer0 = new Integer((-1205));
      Integer integer1 = new Integer((-1205));
      Integer integer2 = new Integer((-2720));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer3);
      Integer integer4 = multiKey4.getKey(4);
      objectArray0[3] = (Object) integer4;
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", multiKey4);
      // Undeclared exception!
      try { 
        multiKey5.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
