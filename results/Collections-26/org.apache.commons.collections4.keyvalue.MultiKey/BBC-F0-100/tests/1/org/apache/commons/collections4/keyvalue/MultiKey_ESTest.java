/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:21:50 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.getKeys();
      boolean boolean0 = multiKey0.equals(objectArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(4);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, (Integer) null);
      // Undeclared exception!
      try { 
        multiKey1.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, null]", string0);
      
      multiKey1.size();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, null]", "k=poY[=>7=_", "", (String) null, "");
      boolean boolean1 = multiKey2.equals((Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      multiKey1.toString();
      multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey2.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("]6^", "", "", (String) null);
      multiKey0.toString();
      Integer integer0 = new Integer((-230));
      Integer integer1 = new Integer(814);
      Integer integer2 = new Integer(814);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-230, 814, 814]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[null, null, null, null]", "MultiKey[null, null, null, null]");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, "MultiKey[null, null, null, null]", "MultiKey[null, null, null, null]", "MultiKey[null, null, null, null]");
      Integer integer0 = new Integer(1833);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "", "MultiKey[null, null, null, null]", integer0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "", "Dn`Ax0vYl4");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) "MultiKey[null, null, null, , Dn`Ax0vYl4]";
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      objectArray0[2] = (Object) "MultiKey[null, null, null, , Dn`Ax0vYl4]";
      objectArray0[3] = (Object) null;
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      Object object0 = multiKey2.getKey(3);
      assertNull(object0);
      
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[null, null, null, , Dn`Ax0vYl4], MultiKey[null, null, null, , Dn`Ax0vYl4], MultiKey[null, null, null, , Dn`Ax0vYl4], MultiKey[null, null, null, , Dn`Ax0vYl4], MultiKey[null, null, null, , Dn`Ax0vYl4]], MultiKey[null, null, null, , Dn`Ax0vYl4], MultiKey[null, null, null, , Dn`Ax0vYl4], null]", string0);
      
      Integer integer0 = new Integer((-764));
      Integer integer1 = new Integer((-849));
      Integer integer2 = new Integer((-62));
      Integer integer3 = new Integer((-62));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      boolean boolean0 = multiKey3.equals("MultiKey[null, null, null, , Dn`Ax0vYl4]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "4Rcn|9Bv^gW/f\"!Gcj", "4Rcn|9Bv^gW/f\"!Gcj");
      multiKey0.hashCode();
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKey0.equals("");
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer[] integerArray0 = new Integer[5];
      multiKey0.toString();
      Integer integer0 = new Integer((-559));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-559));
      multiKey0.toString();
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1506);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      multiKey0.toString();
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.equals("");
      multiKey0.hashCode();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2617);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2617
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 15;
      Integer integer0 = new Integer(15);
      Integer integer1 = new Integer(15);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.hashCode();
      String string0 = "3}T%dc}$XF$T%;j^LD8";
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[15, 15, 15]", "", "3}T%dc}$XF$T%;j^LD8");
      // Undeclared exception!
      try { 
        multiKey1.getKey(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      // Undeclared exception!
      try { 
        multiKey0.getKey(938);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 938
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
