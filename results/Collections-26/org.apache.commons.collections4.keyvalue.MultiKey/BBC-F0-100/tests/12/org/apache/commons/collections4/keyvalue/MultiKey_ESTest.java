/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:40:06 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("0PO8<i(BM9jPg#%>$", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey1, multiKey1, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.getKeys();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey3.size();
      // Undeclared exception!
      try { 
        multiKey3.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      int int0 = 3;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(135);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", "", "", multiKey0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey0.equals(multiKey2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[0, 3, 3, 3, 135, 3, 3]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      int int1 = multiKey3.size();
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(80);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey0.getKey(1);
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[80, null]";
      stringArray0[1] = "MultiKey[80, null]";
      stringArray0[2] = "MultiKey[80, null]";
      stringArray0[3] = "MultiKey[80, null]";
      stringArray0[4] = "MultiKey[80, null]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey2, multiKey1, multiKey1);
      multiKey3.hashCode();
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      Integer integer1 = new Integer(1);
      multiKey4.equals((Object) null);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      assertEquals(4, multiKey5.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, multiKey1, "X`'u_~{^h=9q1)SU");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey0.getKeys();
      int int0 = 2599;
      Integer integer0 = new Integer(2599);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey(2599);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2599
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "a<1cHyrp4q%|lW-(U");
      multiKey0.toString();
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("a<1cHyrp4q%|lW-(U", "", "", "MultiKey[java.lang.Object@a38e19e, java.lang.Object@a38e19e, java.lang.Object@a38e19e, java.lang.Object@a38e19e, java.lang.Object@a38e19e, java.lang.Object@a38e19e, java.lang.Object@a38e19e, java.lang.Object@a38e19e]");
      int int0 = multiKey2.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-1222);
      Integer integer0 = new Integer((-1222));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "%x{J}%,5g";
      stringArray0[2] = "";
      stringArray0[3] = "FR@d-^";
      stringArray0[4] = "U!J,2C]";
      stringArray0[5] = "O/*Q~!$Q6</UTGrI(";
      stringArray0[6] = "aXQd 7b>lp";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "", object1);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "&Hz=r+!U";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "}]R?9'Xj%-mQ";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , &Hz=r+!U, , , }]R?9'Xj%-mQ]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey0 = new MultiKey<String>("#R~sXt,J gUk|'*V", "y6H", "reB $AXEz$E", "e%V$G_ZbV<w(w93v", "");
      Integer integer0 = new Integer((-2458));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "#R~sXt,J gUk|'*V", "y6H", integer0, "reB $AXEz$E");
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>("e%V$G_ZbV<w(w93v", "y6H");
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2458));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2458
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(381);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer3 = new Integer(381);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, integer3, (Object) null, integer0, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      boolean boolean0 = multiKey3.equals("");
      assertFalse(boolean0);
      
      multiKey3.getKeys();
      multiKey3.hashCode();
      multiKey3.getKeys();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 381, 381, 0], 381, null, 0, MultiKey[0, 0, 381]]", string0);
      
      multiKey1.hashCode();
      multiKey2.size();
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-446));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("zOB#W}=JTF", "zOB#W}=JTF", integer0, integer0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[zOB#W}=JTF, zOB#W}=JTF, -446, -446]", "MultiKey[zOB#W}=JTF, zOB#W}=JTF, -446, -446]", "MultiKey[zOB#W}=JTF, zOB#W}=JTF, -446, -446]", "gm");
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey1.size();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[0, 0]";
      stringArray0[1] = "MultiKey[0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[0, 0], MultiKey[0, 0]]", string0);
      
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.hashCode();
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      Integer integer1 = new Integer(113);
      boolean boolean0 = multiKey4.equals(integer1);
      assertFalse(boolean0);
  }
}
