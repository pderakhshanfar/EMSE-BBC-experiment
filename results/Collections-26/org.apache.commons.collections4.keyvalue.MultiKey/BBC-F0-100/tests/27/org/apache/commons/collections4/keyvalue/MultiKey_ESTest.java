/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:29:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("kz|-ZYe/3qaKdz?r;", "0+7TS*jr", "kz|-ZYe/3qaKdz?r;", (String) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("", (String) null, "", (String) null, "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertFalse(multiKey0.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("T&|Qa5@`LvV}2", "T&|Qa5@`LvV}2", "", "k^75j;MH+/", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "=@~@=");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(2577);
      Integer integer1 = new Integer(2577);
      Integer integer2 = new Integer(2785);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer3);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals(multiKey1);
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey0.equals(multiKey2);
      Integer integer4 = new Integer(2785);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[MultiKey[2577, 2577, 2785], MultiKey[2577, 2577, 2785], MultiKey[2577, 0], MultiKey[2577, 0], MultiKey[2577, 0]]", integer2, integer4);
      Object[] objectArray0 = multiKey3.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(909);
      String string0 = "p.7";
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-697));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer3);
      Object object0 = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>("p.7", integer0, multiKey0, (Object) null);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1555));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1555
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("A~?|E", "f7", "", "", "mQ5+#");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("A~?|E", "A~?|E", "f7", multiKey0);
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, "t8+AH:x]$Z\"", (Object) null);
      multiKey0.getKey(1);
      Object object0 = new Object();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "", object0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey2.size();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, integer2);
      multiKey3.toString();
      Object[] objectArray0 = new Object[1];
      multiKey3.toString();
      objectArray0[0] = (Object) multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[1, 1, 1, 1, 3]]", string0);
      
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey5 = new MultiKey<String>("", "MultiKey[MultiKey[1, 1, 1, 1, 3]]", "MultiKey[MultiKey[1, 1, 1, 1, 3]]", "");
      boolean boolean1 = multiKey5.equals((Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("zJTv;4n_f", "zJTv;4n_f", "zJTv;4n_f", (Object) null, "zJTv;4n_f");
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, "");
      multiKeyArray0[1] = multiKey2;
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[2] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "@wQE&1re~MkVdIw@");
      multiKey0.hashCode();
  }
}
