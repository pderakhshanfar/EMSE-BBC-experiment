/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:40:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      multiKey0.toString();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer0);
      multiKey1.toString();
      Object object2 = multiKey2.getKey(0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[, , ], -1]", string0);
      
      boolean boolean0 = multiKey1.equals(object2);
      boolean boolean1 = multiKey0.equals(object1);
      assertFalse(boolean1);
      
      multiKey1.size();
      multiKey2.size();
      Object object3 = multiKey1.getKey(1);
      assertNotSame(object3, object1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      boolean boolean2 = multiKey0.equals(multiKey0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0);
      Object object1 = multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", object1, "MultiKey[]", integer0);
      multiKey1.toString();
      multiKey0.toString();
      Integer integer1 = new Integer((-519));
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[MultiKey[], java.lang.Object@7e6ac7e0]", "MultiKey[]", (Object) null, integer1, "MultiKey[MultiKey[], java.lang.Object@7e6ac7e0]");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey3);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      int int0 = 0;
      // Undeclared exception!
      try { 
        multiKey4.getKey((-3298));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3298
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("~E+", integer0);
      multiKey0.hashCode();
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer0);
      multiKey1.equals(multiKey0);
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "", (String) null, "The array of keys must not be null");
      Object object0 = new Object();
      multiKey2.equals(object0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey3, multiKey0);
      multiKey4.toString();
      multiKey3.toString();
      multiKey4.toString();
      multiKey0.toString();
      multiKey4.size();
      Object object1 = new Object();
      multiKey0.equals(object1);
      MultiKey<String> multiKey5 = null;
      try {
        multiKey5 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-6306));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      objectArray0[8] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object0 = new Object();
      multiKey0.toString();
      Object object1 = new Object();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, object0, object1, "");
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKey2.equals((Object) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[-6306, -6306, -6306, -6306, -6306, -6306, -6306, -6306, -6306]", string0);
      
      multiKey0.equals(multiKey3);
      multiKey1.hashCode();
      assertFalse(multiKey0.equals((Object)multiKey1));
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer1 = new Integer(5);
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, false);
      Integer integer2 = new Integer((int) integerArray0[5]);
      boolean boolean0 = multiKey4.equals(integer2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      objectArray0[4] = null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = null;
      objectArray0[7] = null;
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey0, multiKey1, (Object) null);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, "");
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "dveG r<O(FoBnD=_", "", (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey0.equals("");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[null, dveG r<O(FoBnD=_, , null, null]", "MultiKey[null, dveG r<O(FoBnD=_, , null, null]", "MultiKey[null, dveG r<O(FoBnD=_, , null, null]");
      multiKey3.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "]G9nJbQ%oZGop@", (String) null);
      Integer integer2 = new Integer((-3109));
      Integer integer3 = new Integer(1661);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer3);
      multiKey1.equals(multiKey2);
      multiKey1.equals((Object) null);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      int int0 = multiKey3.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5&";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = "]O;Ul2\\u";
      stringArray0[4] = string0;
      stringArray0[5] = "@IvE}Y$%]}";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "@IvE}Y$%]}", "", "@IvE}Y$%]}");
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = multiKey2.getKey(0);
      multiKey3.toString();
      int int0 = multiKey1.size();
      multiKey2.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-4774));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0);
      String string1 = multiKey4.toString();
      //  // Unstable assertion: assertEquals("MultiKey[-4774, -4774, -4774]", string1);
      
      boolean boolean0 = multiKey4.equals("");
      //  // Unstable assertion: assertFalse(boolean0);
      
      int int1 = multiKey3.hashCode();
      //  // Unstable assertion: assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":vnkRxwNd2qr_0z=:lY", ":vnkRxwNd2qr_0z=:lY");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0);
      int int0 = (-3700);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-3700));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3700
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(41);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, 41]", string0);
  }
}
