/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer((-1474));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", integer0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "The array of keys must not be null", (Object) null);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object0, object0, object1);
      multiKeyArray0[1] = multiKey2;
      Object object2 = new Object();
      Integer integer1 = new Integer((-1474));
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      Object object3 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer1, "", integer1, object3, (Object) null);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKeyArray0);
      Object object4 = multiKey5.getKey(0);
      Object object5 = new Object();
      Integer integer2 = new Integer(1083);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(object2, multiKey4, object4, object5, integer2);
      multiKeyArray0[2] = multiKey6;
      Object object6 = new Object();
      Integer integer3 = new Integer(3003);
      boolean boolean0 = multiKey5.equals(multiKey3);
      assertTrue(boolean0);
      assertFalse(multiKey5.equals((Object)multiKey6));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("q|QuI/c>@t!ux'kc", "Erma^)v{G.;TO!zu", "bw,*", (Object) null, object0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.size();
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".y]i90e9q!Yw,p17?j";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals(multiKey0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey2.toString();
      multiKey1.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey1.getKeys();
      multiKey0.equals("MultiKey[MultiKey[], MultiKey[], MultiKey[]]");
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".y]i90e9q!Yw,p17?j";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals(multiKey0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.hashCode();
      Object object0 = new Object();
      multiKey0.equals(object0);
      int int0 = 1720;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1720);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1720
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1601);
      Integer integer1 = new Integer((-1262));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      Integer integer2 = new Integer((-2573));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer2);
      multiKey1.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[1601, 1601, -1262, 1601]";
      stringArray0[1] = "MultiKey[java.lang.Object@680a1e74, -2573]";
      stringArray0[2] = "MultiKey[1601, 1601, -1262, 1601]";
      stringArray0[3] = "MultiKey[1601, 1601, -1262, 1601]";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "MultiKey[1601, 1601, -1262, 1601]";
      stringArray0[6] = "MultiKey[1601, 1601, -1262, 1601]";
      stringArray0[7] = "MultiKey[1601, 1601, -1262, 1601]";
      stringArray0[8] = "MultiKey[1601, 1601, -1262, 1601]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("5N^O.", "", "&[8K'7>Rbl", "");
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1772));
      Integer integer1 = new Integer((-1772));
      Integer integer2 = new Integer((-1772));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      Object object0 = new Object();
      Integer integer3 = new Integer((-1772));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, object0, integer3, integer1);
      multiKeyArray0[0] = multiKey1;
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer4, integer5, integer6);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey2, object0);
      multiKeyArray0[1] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.size();
      MultiKey<String> multiKey5 = new MultiKey<String>("ziUo~z`", "$0bMa'x;~#");
      multiKey5.equals("$0bMa'x;~#");
      // Undeclared exception!
      try { 
        multiKey3.getKey((-1772));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1772
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, integer0, (Object) null, integer1);
      multiKey0.getKeys();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "_wC.P";
      stringArray0[2] = "bMZQRzE";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "VjXtjzO8pAtJjxeL~";
      stringArray0[6] = "N$fPJkgGOdMJsM";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals("_wC.P");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1160);
      Integer integer1 = new Integer(1160);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer0, integer0, integer0);
      Integer integer2 = new Integer(1160);
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, multiKey0, integer2, integer3);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer integer0 = new Integer(497);
      Integer integer1 = null;
      Integer integer2 = new Integer((-2398));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer2);
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey", integer0, object0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2398));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2398
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer0 = new Integer((-801));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", integer0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, multiKey2, multiKey3);
      multiKeyArray0[2] = multiKey4;
      Integer integer1 = new Integer((-801));
      Integer integer2 = new Integer((-801));
      Object object0 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", integer1, integer2, object0, "");
      multiKeyArray0[3] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey6.getKeys();
      assertEquals(4, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      objectArray0[0] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[null]";
      stringArray0[1] = "MultiKey[null]";
      stringArray0[2] = "MultiKey[null]";
      stringArray0[3] = "MultiKey[null]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[null], MultiKey[null], MultiKey[null], MultiKey[null]]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", (Object) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, null]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(173);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(173);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("-~X 4ARAm6s", "-~X 4ARAm6s", "-~X 4ARAm6s", multiKey1, (Object) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, multiKey2, "-~X 4ARAm6s");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, integer4, int0);
      MultiKey multiKey5 = (MultiKey)multiKey4.getKey(int0);
      assertEquals(3, multiKey5.size());
  }
}
