/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:27:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      Integer integer0 = new Integer(12);
      int int0 = 757;
      Integer integer1 = new Integer((-1238));
      Integer integer2 = new Integer((-1238));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer2, integer2);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      multiKey0.equals(object0);
      Object object1 = new Object();
      Integer integer3 = new Integer((-1905));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, object1, integer3, multiKey1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer3;
      objectArray0[2] = (Object) multiKey2;
      objectArray0[3] = object1;
      objectArray0[4] = (Object) integer0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3);
      Object object2 = null;
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-1238));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1238
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "");
      multiKey1.size();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(821);
      integerArray0[0] = integer0;
      int int0 = 27;
      Integer integer1 = new Integer(27);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(27);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey2.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "e9");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey1.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer1);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1261));
      Integer integer1 = new Integer((-1261));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, (MultiKey<String>) null);
      multiKey2.size();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("{nvLS)", "", "MultiKey[]", "MultiKey[null, null, -1261, -1261]");
      multiKey3.toString();
      multiKey3.equals("");
      multiKey3.hashCode();
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) stringArray0, true);
      Object[] objectArray0 = multiKey4.getKeys();
      assertNotSame(stringArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(4314);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "1KFiiIHdK", "1KFiiIHdK", "");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0, "");
      assertEquals(3, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "The array of keys must not be null";
      objectArray0[1] = (Object) "The array of keys must not be null";
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(234);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2340));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2143));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(668);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(3);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1222));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(2);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer9 = multiKey1.getKey(0);
      objectArray0[2] = (Object) integer9;
      objectArray0[3] = (Object) "The array of keys must not be null";
      objectArray0[4] = (Object) "The array of keys must not be null";
      objectArray0[5] = (Object) "The array of keys must not be null";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer9, objectArray0[1]);
      Object object0 = multiKey3.getKey(int0);
      assertEquals(234, object0);
      
      boolean boolean0 = multiKey2.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1304));
      Integer integer1 = new Integer(648);
      Integer integer2 = new Integer(648);
      Integer integer3 = new Integer((-966));
      Integer integer4 = new Integer((-1396));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer4);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer1, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey3, multiKey2);
      multiKey4.getKeys();
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[-1304, 648, 648, -966, -1396]", "MultiKey[-1304, 648, 648, -966, -1396]", "");
      // Undeclared exception!
      try { 
        multiKey5.getKey(575);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 575
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "s:Yi/ALM", "^", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("The array of keys must not be null", multiKey1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      boolean boolean0 = multiKey3.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      assertEquals(1, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      int int0 = 3138;
      // Undeclared exception!
      try { 
        multiKey0.getKey(3138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3138
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "GK>4";
      MultiKey<String> multiKey0 = new MultiKey<String>("GK>4", "GK>4");
      // Undeclared exception!
      try { 
        multiKey0.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
