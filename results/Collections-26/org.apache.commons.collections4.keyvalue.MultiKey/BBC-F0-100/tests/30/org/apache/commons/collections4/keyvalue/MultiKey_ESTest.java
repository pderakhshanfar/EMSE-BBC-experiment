/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:33 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("C)", "C)", "C)", "C)");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("G*~", "G*~", ":x{9Ocb:?{`hF6ii", "G*~", ":x{9Ocb:?{`hF6ii");
      multiKey0.toString();
      multiKey0.equals((Object) null);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("&Q>nU;^l.,Px)Clii$,", object0, (Object) null, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0);
      MultiKey<Object> multiKey3 = multiKey2.getKey(0);
      objectArray0[0] = (Object) multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("&Q>nU;^l.,Px)Clii$,", "&Q>nU;^l.,Px)Clii$,", "&Q>nU;^l.,Px)Clii$,", "", "");
      multiKey4.getKey(0);
      objectArray0[1] = (Object) "&Q>nU;^l.,Px)Clii$,";
      multiKey3.getKey(0);
      objectArray0[2] = (Object) "&Q>nU;^l.,Px)Clii$,";
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, false);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey6.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      int int0 = multiKey0.size();
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[MultiKey[], MultiKey[], MultiKey[]]", "MultiKey[MultiKey[], MultiKey[], MultiKey[]]");
      multiKey2.size();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[MultiKey[], MultiKey[], MultiKey[]]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[]";
      stringArray0[5] = "MultiKey[MultiKey[], MultiKey[], MultiKey[]]";
      stringArray0[6] = "t<pvPwh";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      Object object0 = multiKey3.getKey(0);
      assertTrue(object0.equals((Object)string0));
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[MultiKey[], MultiKey[], MultiKey[]]", "MultiKey[MultiKey[], MultiKey[], MultiKey[]]");
      multiKey4.toString();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4, multiKey4);
      boolean boolean0 = multiKey5.equals("MultiKey[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", object0, "?L.");
      multiKey0.equals(object0);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.equals(integer0);
      multiKey0.hashCode();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer1);
      multiKey1.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey2.getKeys();
      Object object1 = multiKey0.getKey(0);
      assertFalse(object1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.equals(integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "gc", multiKey0);
      Object object0 = new Object();
      multiKey1.equals(object0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0, 0]", (String) null);
      MultiKey<String> multiKey3 = new MultiKey<String>("$", "", "9IZ^?Uc3:-");
      Object object1 = multiKey3.getKey(0);
      assertEquals("$", object1);
      
      boolean boolean0 = multiKey2.equals("$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1476);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer2);
      multiKey1.toString();
      multiKey1.equals(integer0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[1476, 1476]", "", "MultiKey[1476, 2, 1476, 0, 0]", "MultiKey[1476, 1476]");
      multiKey1.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      Integer integer3 = new Integer(162);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0, integer3);
      multiKey4.toString();
      multiKey0.equals(multiKey4);
      // Undeclared exception!
      try { 
        multiKey3.getKey(162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 162
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-4045));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.getKeys();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.equals(multiKey2);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "The array of keys must not be null", "Mx$I,J#G=TPBE#k~", "Mx$I,J#G=TPBE#k~", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey3);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.hashCode();
      multiKey0.hashCode();
      multiKey0.size();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, object1);
      multiKey0.toString();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1024));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1024));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(897);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey2, multiKey1, multiKey1, multiKey2);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1J&x'4XT";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "5G`z oMPK";
      stringArray0[5] = "R~@qA'&a";
      String string0 = "q~";
      stringArray0[6] = "q~";
      stringArray0[7] = "";
      String string1 = "xxLi;.5T8";
      stringArray0[8] = "xxLi;.5T8";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = (-1963);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1963));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1963
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
