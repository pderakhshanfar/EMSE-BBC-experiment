/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:06 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-20);
      Integer integer0 = new Integer((-20));
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0, "-*${$anFYs7 {BiqdsN");
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(612);
      Integer integer1 = new Integer(612);
      Integer integer2 = new Integer(612);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer2);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "1N6M6^=P<WUN");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      Object object0 = null;
      Integer integer3 = new Integer(612);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "MultiKey[null, 1N6M6^=P<WUN]", "1N6M6^=P<WUN", (Object) null, integer3);
      multiKey1.toString();
      Object object1 = multiKey2.getKey(0);
      multiKey1.equals(object1);
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey2.equals(multiKey3);
      Integer integer4 = new Integer(0);
      multiKey0.equals(integer4);
      multiKey1.toString();
      multiKey0.equals(integer4);
      multiKey3.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey(612);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 612
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      Object object0 = new Object();
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      int int0 = 2;
      multiKey0.getKey(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null, multiKey0);
      multiKey1.getKey(0);
      Integer integer0 = new Integer((-2894));
      String string1 = "I-VTGV#GweisJ`t!N";
      MultiKey<String> multiKey2 = new MultiKey<String>("I-VTGV#GweisJ`t!N", "I-VTGV#GweisJ`t!N");
      multiKey2.getKey(0);
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey3.getKey(959);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 959
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKeys();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "Qoi#*#9(xyf", "N|Lh`o}*");
      Integer integer1 = new Integer(0);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, object1, object0);
      multiKey2.toString();
      multiKey1.equals(multiKey3);
      multiKey1.getKey(1);
      multiKey2.size();
      multiKey1.hashCode();
      multiKey2.toString();
      multiKey3.equals(multiKey1);
      multiKey2.size();
      multiKey2.equals(object1);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-5415));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5415
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      multiKey1.equals("yws");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray1);
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey3.hashCode();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 17;
      Integer integer0 = new Integer(17);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(17);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("M<G'", object0, "M<G'");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[M<G', java.lang.Object@738b9e62, M<G']";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[M<G', java.lang.Object@738b9e62, M<G']";
      multiKey0.toString();
      stringArray0[3] = "&e-h7n";
      stringArray0[4] = "MultiKey[M<G', java.lang.Object@738b9e62, M<G']";
      stringArray0[5] = "eT8k";
      stringArray0[6] = "M<G'";
      stringArray0[7] = "MultiKey[M<G', java.lang.Object@738b9e62, M<G']";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.hashCode();
      multiKey0.hashCode();
      int int0 = multiKey1.size();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      int int1 = multiKey3.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String> multiKey0 = new MultiKey<String>("wh:+5Kq^*xDc VoJ", "wh:+5Kq^*xDc VoJ", "", "");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "wh:+5Kq^*xDc VoJ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      multiKey0.getKey(0);
      objectArray0[2] = (Object) "wh:+5Kq^*xDc VoJ";
      Object object1 = new Object();
      objectArray0[3] = object1;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0);
      int int0 = 1159;
      // Undeclared exception!
      try { 
        multiKey1.getKey(1159);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1159
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object1, "", (Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey0, multiKey0);
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      assertNotSame(multiKey4, multiKey0);
      
      objectArray0[1] = (Object) multiKey4;
      Integer integer0 = new Integer((-1568));
      Integer integer1 = new Integer((-1568));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      Integer integer2 = multiKey5.getKey(4);
      objectArray0[2] = (Object) integer2;
      Integer integer3 = multiKey5.getKey(0);
      objectArray0[3] = (Object) integer3;
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0);
      assertFalse(multiKey6.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1, multiKey0);
      int int0 = (-1481);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1481));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1481
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKeys();
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }
}
