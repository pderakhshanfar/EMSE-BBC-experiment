/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:44:46 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("SYQ<", "SYQ<", (String) null, "SYQ<", "SYQ<");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("SYQ<");
      Integer integer0 = new Integer((-587));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null);
      multiKey1.toString();
      Integer integer1 = new Integer((-587));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, (Integer) null, (Integer) null);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[SYQ<, SYQ<, null, SYQ<, SYQ<]", (Object) null, "The array of keys must not be null");
      Integer integer2 = new Integer((-587));
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[]", integer2);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object) null, "MultiKey[]", multiKey5);
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey4, multiKey1, multiKey1, multiKey6);
      multiKey6.toString();
      multiKey7.size();
      MultiKey<Object>[] multiKeyArray1 = multiKey3.getKeys();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[]", string0);
      
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKeyArray1);
      boolean boolean0 = multiKey3.equals("MultiKey[null, MultiKey[], MultiKey[MultiKey[], -587]]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("SYQ<", "SYQ<", (String) null, "SYQ<", "SYQ<");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("SYQ<");
      Integer integer0 = new Integer((-587));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(" $HrMPG", "MultiKey[-587, null]", "MultiKey[SYQ<, SYQ<, null, SYQ<, SYQ<]");
      multiKey2.toString();
      multiKey0.getKey(2);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("SYQ<", "SYQ<", (String) null, "SYQ<", "SYQ<");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("SYQ<");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-587));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null);
      multiKey1.toString();
      Integer integer1 = new Integer((-587));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, (Integer) null, (Integer) null);
      multiKey2.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, "SYQ<", "MultiKey[SYQ<, SYQ<, null, SYQ<, SYQ<]");
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey4, multiKey4, multiKey4);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[null, SYQ<, MultiKey[SYQ<, SYQ<, null, SYQ<, SYQ<]]", string0);
      
      multiKey5.size();
      multiKey5.getKeys();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKeyArray0);
      multiKey3.equals(multiKey6);
      assertFalse(multiKey3.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "_k=j%oGBPB<B", "_k=j%oGBPB<B");
      multiKey0.equals((Object) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, null, null, null, null, null, null, null]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey1, multiKey2, multiKey3);
      boolean boolean1 = multiKey4.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("SYQ<", "|C:0stG8\"", (String) null, "|C:0stG8\"", "SYQ<");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("SYQ<");
      Integer integer0 = new Integer((-587));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null);
      multiKey1.toString();
      Integer integer1 = new Integer((-587));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, (Integer) null, (Integer) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals((Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("]", "]", "]");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "]");
      // Undeclared exception!
      try { 
        multiKey2.getKey(1121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1121
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(5165);
      Integer integer2 = new Integer((-984));
      Integer integer3 = new Integer(5165);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(928);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-662));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer1);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "_k=j%oGBPB<B", "_k=j%oGBPB<B");
      multiKey0.equals((Object) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "_k=j%oGBPB<B";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "_k=j%oGBPB<B";
      objectArray0[6] = null;
      objectArray0[7] = (Object) "";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      Object object1 = new Object();
      multiKey1.equals(object1);
      Integer integer0 = new Integer((-27));
      Integer integer1 = new Integer((-27));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer0);
      Integer integer2 = multiKey3.getKey(2);
      assertTrue(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = (-1442);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1442));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1442
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(426);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("e_", "MultiKey[426, -1, -1, -1]", "");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) "MultiKey[426, -1, -1, -1]";
      objectArray0[2] = (Object) "MultiKey[426, -1, -1, -1]";
      multiKey1.toString();
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) "MultiKey[426, -1, -1, -1]";
      objectArray0[5] = (Object) "MultiKey[426, -1, -1, -1]";
      objectArray0[6] = (Object) "MultiKey[426, -1, -1, -1]";
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      multiKey2.equals(objectArray0[5]);
      multiKey2.hashCode();
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "z3{";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      String string0 = "[)uaI!yD`x=9i9(f<x";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
