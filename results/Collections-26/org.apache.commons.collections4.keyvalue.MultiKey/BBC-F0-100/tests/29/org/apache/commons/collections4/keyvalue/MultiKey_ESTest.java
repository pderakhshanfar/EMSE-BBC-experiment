/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:29:00 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object object0 = multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<LG[d9)p&E";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "|wq]XcE";
      stringArray0[5] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      boolean boolean1 = multiKey2.equals(objectArray0[6]);
      assertFalse(boolean1);
      
      boolean boolean2 = multiKey1.equals(multiKey0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2140);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[2140, 2140]", string0);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) "MultiKey[2140, 2140]";
      objectArray0[3] = (Object) "MultiKey[2140, 2140]";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      Integer integer1 = multiKey0.getKey(1);
      objectArray0[6] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      Integer integer2 = new Integer((-1756));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "", "uR`@$aeg0pa3f[", "MultiKey[java.lang.Object@33919edd, 2140, MultiKey[2140, 2140], MultiKey[2140, 2140], MultiKey[2140, 2140], MultiKey[2140, 2140], 2140]");
      multiKey3.toString();
      multiKey3.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[java.lang.Object@33919edd, 2140, MultiKey[2140, 2140], MultiKey[2140, 2140], MultiKey[2140, 2140], MultiKey[2140, 2140], 2140]", "");
      multiKey1.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[2140, 2140]", "MultiKey[java.lang.Object@33919edd, 2140, MultiKey[2140, 2140], MultiKey[2140, 2140], MultiKey[2140, 2140], MultiKey[2140, 2140], 2140]");
      boolean boolean1 = multiKey5.equals(multiKey4);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey0.equals(multiKey1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1);
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      assertFalse(multiKey3.equals((Object)multiKey2));
      
      multiKeyArray0[6] = multiKey3;
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[MultiKey[], MultiKey[]], MultiKey[], MultiKey[], MultiKey[], MultiKey[], MultiKey[], MultiKey[]]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object1, object2, integer0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1, multiKey0, multiKey1);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey1.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey0.getKey(0);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      Object object3 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object3);
      assertFalse(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey0));
      
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "", "");
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "}wg_Dk,v$HRuqQZ_M", "");
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey3, multiKey4, multiKey3);
      multiKey5.getKeys();
      boolean boolean1 = multiKey3.equals(multiKey5);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      Integer integer1 = multiKey0.getKey(0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("=", "=", "=", "=");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-3390));
      multiKey0.toString();
      Integer integer1 = new Integer(1025);
      multiKey0.toString();
      Integer integer2 = new Integer(79);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("MultiKey[=, =, =, =]");
      multiKey0.equals("MultiKey[-3390, -3390, 1025, 79, 79]");
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[=, =, =, =]", "MultiKey[=, =, =, =]", "", "MultiKey[=, =, =, =]");
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[=, =, =, =]", (Object) null, "MultiKey[=, =, =, =]");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[=, =, =, =], null, MultiKey[=, =, =, =]]", string0);
      
      boolean boolean0 = multiKey3.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "T>zo`+9%y?", "");
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("&]+O,J,|", "", "", "");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2298);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2546));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2546));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1183));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1212);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      String string1 = "X[Hdn'\"H";
      String string2 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "X[Hdn'\"H", "X[Hdn'\"H", (String) null);
      int int0 = (-194);
      Integer integer0 = new Integer((-194));
      Integer integer1 = new Integer((-194));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, multiKey1, object0, integer0);
      multiKeyArray0[0] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, "", "X[Hdn'\"H");
      multiKeyArray0[2] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[3] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey4, multiKey4, multiKey0, multiKey0);
      multiKeyArray0[4] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[5] = multiKey7;
      Integer integer2 = new Integer((-1340));
      String string3 = "'HBUq)-BG]8";
      MultiKey<String> multiKey8 = new MultiKey<String>("X[Hdn'\"H", "'HBUq)-BG]8", (String) null);
      // Undeclared exception!
      try { 
        multiKey8.getKey((-1340));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1340
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(5886);
      Integer integer1 = new Integer(5886);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[5886, 5886, 5886]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(4083);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4083
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
