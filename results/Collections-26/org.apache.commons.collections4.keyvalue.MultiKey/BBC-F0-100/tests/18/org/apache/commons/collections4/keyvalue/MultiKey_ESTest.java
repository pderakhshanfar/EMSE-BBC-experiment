/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:38 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "", "\"P#+S,W';>", "\"P#+S,W';>");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Object object1 = multiKey1.getKey(2);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-210));
      Integer integer1 = new Integer(3421);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, multiKey0);
      multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(":_}_mcY)}sM6`", "", "");
      Object object0 = new Object();
      multiKey1.equals(object0);
      Object[] objectArray1 = multiKey0.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      String string1 = "T";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      int int0 = 862;
      Integer integer0 = new Integer(862);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[, ]", integer0, "MultiKey[, ]", "T");
      multiKey1.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "XWM7[UOj2";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "XWM7[UOj2", "XWM7[UOj2", ":nEm Qkx3'");
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, object0, "", "XWM7[UOj2");
      multiKey3.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", object1);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey4);
      multiKey5.toString();
      Integer integer0 = new Integer((-5173));
      Integer integer1 = new Integer((-338));
      Integer integer2 = new Integer((-1380));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>((Integer) null, integer0, integer2, integer2, integer1);
      multiKey6.hashCode();
      multiKey0.size();
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[null, -5173, -1380, -1380, -338]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[]", "", "", "MultiKey[]", "");
      String string1 = multiKey2.getKey(1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-697));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-697));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(605);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-697));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[-697, -697, 605, -697, -697]", "MultiKey[-697, -697, 605, -697, -697]", "MultiKey[-697, -697, 605, -697, -697]", "MultiKey[-697, -697, 605, -697, -697]");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-697, -697, 605, -697, -697]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      String string0 = "";
      String string1 = "The array of keys must not be null";
      String string2 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey2.getKeys();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -972
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-381));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0, multiKey0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "5HM`h6qQ[+I%*";
      stringArray0[0] = "5HM`h6qQ[+I%*";
      stringArray0[1] = "";
      stringArray0[2] = "5eATj{oPv";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "M", "", "", "");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, object0, "", object1);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "p1XUSMn'+H  ";
      stringArray0[1] = "BHg%1X8";
      stringArray0[2] = "";
      stringArray0[3] = "{JNy";
      stringArray0[4] = "u||>oqp4q";
      stringArray0[5] = "";
      stringArray0[6] = "^IzX,yDUkMg";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(";=ebLG^!A6<nPHz/", ";=ebLG^!A6<nPHz/", ";=ebLG^!A6<nPHz/", ";=ebLG^!A6<nPHz/", ";=ebLG^!A6<nPHz/");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(";=ebLG^!A6<nPHz/", "", "", "", "J*qF");
      int int0 = (-1402);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1402));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1402
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
