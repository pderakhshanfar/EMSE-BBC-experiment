/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:40:05 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-1010));
      Integer integer1 = new Integer((-1010));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1010));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer2, integer2, integer3, integer3, integer1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1804);
      Integer integer1 = new Integer((-895));
      Integer integer2 = new Integer((-895));
      Integer integer3 = new Integer(1804);
      Integer integer4 = new Integer(1340);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer2, integer3, integer4);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKeys();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey1.equals((Object) null);
      multiKey1.equals("MultiKey[null, null, MultiKey[null, null], MultiKey[null, null]]");
      MultiKey<MultiKey<Integer>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, (String) null, (String) null);
      int int0 = 0;
      multiKey0.getKey(0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, multiKey1, (MultiKey<Object>) null);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", (Object) null, (Object) null, objectArray0[0]);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1596));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3206);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3206);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey4.getKeys();
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null);
      multiKey1.size();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.size();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      boolean boolean0 = multiKey3.equals(multiKey1);
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, 0, null]", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(95);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Integer integer1 = multiKey0.getKey(0);
      objectArray0[1] = (Object) integer1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      assertEquals(6, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(84);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("MultiKey", "MultiKey", integer0, "MultiKey");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", integer0, multiKey0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "MultiKey[MultiKey, MultiKey, 84, MultiKey]";
      objectArray0[2] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[MultiKey, MultiKey, 84, MultiKey]";
      stringArray0[1] = "MultiKey[MultiKey, MultiKey, 84, MultiKey]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2);
      int int1 = (-3122);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-3122));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3122
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
