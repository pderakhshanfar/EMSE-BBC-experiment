/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:24:08 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("R", "R", "The array of keys must not be null", "8@3(?", "The array of keys must not be null");
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, multiKey1, objectArray0[0], multiKey3, "The array of keys must not be null");
      Object object0 = multiKey4.getKey(1);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "The array of keys must not be null";
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) multiKey1;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) multiKey2;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, true);
      multiKey2.equals(multiKey5);
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(multiKey3.equals((Object)multiKey5));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "", "", "h", "");
      multiKey0.getKey(4);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("~Hu]Y@sZ ", "");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = objectArray0[2];
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      Object object1 = multiKey2.getKey(4);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object1, "");
      multiKey3.toString();
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey4.equals(multiKey2);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey1));
      
      Integer integer0 = new Integer(980);
      Integer integer1 = new Integer(980);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer2);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[980, 980, null, 4]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey2.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "RH:~]{`M@EEJdx";
      stringArray0[4] = "@";
      stringArray0[5] = "g\"0JCmXy0fcdxyRT*2&";
      stringArray0[6] = "";
      stringArray0[7] = "I9&T*";
      stringArray0[8] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "I9&T*", "g\"0JCmXy0fcdxyRT*2&", "");
      multiKey2.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2884));
      Integer integer2 = new Integer((-90));
      Integer integer3 = new Integer((-90));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer3);
      MultiKey<String> multiKey4 = new MultiKey<String>((String) null, "", "5fcfo>aH3r9c");
      Integer integer4 = new Integer((-2039));
      MultiKey<Object> multiKey5 = new MultiKey<Object>("I9&T*", multiKey3, multiKey0, multiKey4, integer4);
      boolean boolean0 = multiKey3.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      int int0 = 0;
      Integer integer1 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<MultiKey<Integer>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3586);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3586);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.equals(integer0);
      multiKey1.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("frcg-$", "QL3JIga(S_k.9", "frcg-$", "N", "N");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, object0, "W^.oD|6<");
      Object object1 = multiKey1.getKey(0);
      objectArray0[1] = object1;
      multiKey0.getKey(2);
      objectArray0[2] = null;
      Object object2 = new Object();
      objectArray0[3] = object2;
      multiKey0.getKey(2);
      objectArray0[4] = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      Object[] objectArray1 = multiKey2.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = multiKey0.getKey(0);
      objectArray0[4] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      String string0 = multiKey1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1153);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2759);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = "The array of keys must not be null";
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("~Hu]Y@sZ ", "~Hu]Y@sZ ", "The array of keys must not be null");
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("~Hu]Y@sZ ", multiKey0, object0);
      multiKey1.toString();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lp7J";
      stringArray0[1] = "";
      stringArray0[2] = "[g)75]x+i8A'q)Zd";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-483));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      assertEquals(7, multiKey0.size());
  }
}
