/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:39:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(";4p%(9p7Cql", (Object) null, ";4p%(9p7Cql");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[;4p%(9p7Cql, null, ;4p%(9p7Cql]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1632));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-1632, -1632, -1632]", string0);
      
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[-1632, -1632, -1632]";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[-1632, -1632, -1632]";
      stringArray0[3] = "MultiKey[-1632, -1632, -1632]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey2.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-1177));
      Integer integer1 = new Integer((-1328));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-2015));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer3);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-1177, -1328, 0, -1328, -2015]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0);
      Object object1 = new Object();
      Integer integer4 = new Integer((-1328));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, integer4);
      multiKey2.toString();
      multiKey1.equals("\"ny_v UH-K mdvVY(");
      multiKey1.toString();
      multiKey1.toString();
      Integer integer5 = new Integer((-1328));
      boolean boolean0 = multiKey2.equals(integer5);
      assertFalse(boolean0);
      
      multiKey0.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey", "", "", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey4.size();
      String string1 = multiKey3.getKey(0);
      assertEquals("MultiKey", string1);
      
      multiKey1.toString();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("#?Iu4ZcdeK", "The array of keys must not be null");
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, "The array of keys must not be null", multiKey0, "#?Iu4ZcdeK");
      multiKey1.hashCode();
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-838));
      int int0 = 0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-838));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-838, 0, -838]", string0);
      
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[-838, 0, -838]";
      stringArray0[1] = "MultiKey[-838, 0, -838]";
      stringArray0[2] = "MultiKey[-838, 0, -838]";
      stringArray0[3] = "MultiKey[-838, 0, -838]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "Y`MDB!G4lH*mIE~2", "");
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer2;
      integerArray0[6] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey0.equals(integer0);
      assertFalse(boolean1);
      
      String string1 = multiKey2.getKey(int0);
      assertNull(string1);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null, (Integer) null);
      Object object0 = multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[]", "MultiKey[]", "(>z!'U?", object0);
      int int0 = multiKey2.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-838));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-838));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-838, 0, -838]", string0);
      
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[-838, 0, -838]";
      stringArray0[1] = "MultiKey[-838, 0, -838]";
      stringArray0[2] = "MultiKey[-838, 0, -838]";
      stringArray0[3] = "MultiKey[-838, 0, -838]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "Y`MDB!G4lH*mIE~2", "");
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer2;
      integerArray0[6] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.size();
      Integer integer0 = new Integer((-2278));
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "^k4,LAJ;!";
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.getKeys();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey0.hashCode();
      multiKey1.equals("MultiKey[, ]");
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2278));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2278
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("y(vO/`YAT**\"@34sU", "", (String) null, "", "");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey1.toString();
      multiKey1.equals("");
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("s):xImu", "", "", "n|b;9_]Y*%[X$%}");
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(567);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, "");
      Integer integer0 = new Integer((-2514));
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, object0, integer0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("XO/LzQ(>)h", "MultiKey[0, 0, 0, 0]", (String) null, "MultiKey[0, 0, 0, 0]", "XO/LzQ(>)h");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[XO/LzQ(>)h, MultiKey[0, 0, 0, 0], null, MultiKey[0, 0, 0, 0], XO/LzQ(>)h]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals("MultiKey[, MultiKey[, , ]]");
      multiKey1.toString();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.equals("MultiKey[, MultiKey[, , ]]");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("P", object0, "P", "P");
      Integer integer0 = new Integer(1);
      multiKey1.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, multiKey3, "P", "P");
      multiKey4.toString();
      multiKey3.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey0, object0, multiKey4, integer0);
      multiKey5.toString();
      multiKey5.toString();
      int int0 = 3801;
      multiKey5.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey5.getKey(3801);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3801
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
