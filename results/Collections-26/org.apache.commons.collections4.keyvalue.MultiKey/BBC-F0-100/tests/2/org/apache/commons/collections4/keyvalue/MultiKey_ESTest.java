/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:39:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("',w^F!EUPA~H", "',w^F!EUPA~H", "',w^F!EUPA~H");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("',w^F!EUPA~H", multiKey0, "',w^F!EUPA~H", multiKey0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[',w^F!EUPA~H, MultiKey[',w^F!EUPA~H, ',w^F!EUPA~H, ',w^F!EUPA~H], ',w^F!EUPA~H, MultiKey[',w^F!EUPA~H, ',w^F!EUPA~H, ',w^F!EUPA~H]]", string0);
      
      Object object0 = multiKey1.getKey(1);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-2591));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-454));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2015));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2591));
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.toString();
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = 4;
      multiKey0.getKey(4);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, "org.apache.commons.collections4.keyvalue.MultiKey", (Object) null, object1);
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "P70xa):2-AnaDJgT|@", "The array of keys must not be null");
      multiKey0.getKey(0);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("The array of keys must not be null", "P70xa):2-AnaDJgT|@", object0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      Object object1 = multiKey1.getKey(0);
      assertEquals("The array of keys must not be null", object1);
      
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("P70xa):2-AnaDJgT|@", "The array of keys must not be null", "P70xa):2-AnaDJgT|@", "vXm\"LTIZuhyc\"fH7e");
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[P70xa):2-AnaDJgT|@, The array of keys must not be null, P70xa):2-AnaDJgT|@, vXm\"LTIZuhyc\"fH7e]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "!y0t2Z}?&", "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      multiKey1.toString();
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-3972));
      integerArray0[0] = integer0;
      int int0 = (-15);
      Integer integer1 = new Integer((-15));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3972));
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(975);
      Integer integer1 = new Integer((-1920));
      Integer integer2 = new Integer((-1920));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-502);
      Integer integer3 = new Integer((-502));
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[975, 975, 975, -1920, -1920]", integer0, integer3, multiKey1);
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey2.getKey(0);
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.equals("MultiKey[975, 975, 975, -1920, -1920]");
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1920));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1920
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = null;
      Object object1 = null;
      MultiKey<String> multiKey2 = new MultiKey<String>("'4,J#JI)m=SOq.c", "'4,J#JI)m=SOq.c", "'4,J#JI)m=SOq.c", "'4,J#JI)m=SOq.c");
      // Undeclared exception!
      try { 
        multiKey2.getKey(3603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3603
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "2Kd?d";
      stringArray0[2] = "SeUy#";
      stringArray0[3] = "4uEa4i9xsA";
      stringArray0[4] = "";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String string0 = multiKey1.getKey(1);
      assertEquals("2Kd?d", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = "CaKc4}9&RV?";
      String string1 = "^-\"|y";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("^-\"|y", object1, (Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object2, "CaKc4}9&RV?", object3, multiKey0, "^-\"|y");
      int int0 = 515;
      // Undeclared exception!
      try { 
        multiKey1.getKey(515);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 515
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
