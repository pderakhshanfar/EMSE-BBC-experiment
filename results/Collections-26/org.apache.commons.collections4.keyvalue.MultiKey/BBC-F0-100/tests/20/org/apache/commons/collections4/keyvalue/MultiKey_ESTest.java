/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:40:16 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(31);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "I+.eTa6V";
      stringArray0[3] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      multiKey2.equals(multiKey3);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey1, multiKey1, multiKey3);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, multiKey3, "<.W]@Q/7DaU+");
      MultiKey<Object> multiKey6 = new MultiKey<Object>("", "MultiKey", multiKey5, (Object) null, multiKey3);
      multiKey6.getKey(0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>("MultiKey", "");
      multiKey7.getKey(0);
      multiKey0.toString();
      multiKey3.toString();
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey8 = new MultiKey<Object>(integer1, "MultiKey[]", object0);
      multiKey8.toString();
      MultiKey<String> multiKey9 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey10 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<Object> multiKey11 = new MultiKey<Object>(multiKey9, multiKey10, multiKey5, "+^`-%=!]yYH{fmwisD");
      multiKey3.getKeys();
      Object[] objectArray0 = multiKey3.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "";
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      multiKey0.getKey(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer0 = new Integer(2145);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object> multiKey3 = multiKey2.getKey(0);
      assertNotSame(multiKey3, multiKey0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "u/d7yn#4]H,N");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals((Object) null);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, u/d7yn#4]H,N], ]", string0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2357);
      Integer integer2 = new Integer(2357);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer2);
      Integer integer3 = new Integer((-1312));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer3, (Integer) null);
      Object object0 = multiKey3.getKey(0);
      assertNotNull(object0);
      
      boolean boolean1 = multiKey2.equals(object0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[]", multiKey0);
      multiKey1.size();
      String string0 = "";
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[]", "The array of keys must not be null", "The array of keys must not be null", "", "The array of keys must not be null");
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      int int0 = 981;
      // Undeclared exception!
      try { 
        multiKey2.getKey(981);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 981
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer1, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer1, integer1, multiKey0, multiKey1);
      int int1 = (-868);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-868));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -868
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = " 5cb&D3@=qAg_(,";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey0.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      Object[] objectArray0 = multiKey2.getKeys();
      assertNotSame(stringArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = "U8tTy,U!8e/U";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "Yus=wcyDM{]DX~wL", "", "U8tTy,U!8e/U");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("Yus=wcyDM{]DX~wL");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "Yus=wcyDM{]DX~wL", "", "");
      int int0 = (-864);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-864));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -864
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("1Mfs0`9Vj", "1Mfs0`9Vj", "", "");
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
