/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:22:16 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey1.getKeys();
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.toString();
      multiKey1.size();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "wuO\"";
      stringArray0[5] = "MultiKey[]";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey[]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey2.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("P#", "P#", "P#", "wO!5$-RUD:#[^");
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>("wO!5$-RUD:#[^", "P#");
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[9];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1855));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1321));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1266));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[1, 1, 1, 0, -1855, 1, -1321, -1266, 1]", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":wnWvpqyR|4";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "MultiKey";
      stringArray0[6] = "RM";
      stringArray0[7] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "MultiKey", "");
      Integer integer0 = new Integer((-806));
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", integer0, "", object0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0);
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, multiKey2, multiKey3, object1, "The array of keys must not be null");
      int int0 = multiKey4.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "YP#";
      String string1 = "wO!5$-RUD\\:#[^";
      MultiKey<String> multiKey0 = new MultiKey<String>("YP#", "YP#", "YP#", "wO!5$-RUD:#[^");
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "O1kuh";
      String string2 = "";
      stringArray0[5] = "";
      stringArray0[6] = "Xf_UZQ;s1n|d35?bv";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, (Object) null, integer0, "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", multiKey3);
      multiKey4.getKey(0);
      Object object1 = null;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, "", (Object) null, "", multiKey0);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-954));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -954
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(266);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2924));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer1, integer0, integer0);
      multiKey0.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-2924, 266, 266, 266]", string0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0, (Object) null, multiKey0, "MultiKey[266, 266, -2924, 1]");
      multiKey2.getKeys();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[266, 266, -2924, 1]", "MultiKey[-2924, 266, 266, 266]", "MultiKey[266, 266, -2924, 1]", "MultiKey[-2924, 266, 266, 266]");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[-2924, 266, 266, 266]";
      stringArray0[1] = "MultiKey[266, 266, -2924, 1]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("y-uD8xHqv6", (String) null);
      multiKey0.toString();
      String string0 = multiKey0.getKey(0);
      multiKey0.hashCode();
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, (Object) null, multiKey1);
      String string1 = multiKey2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String string0 = null;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      int int0 = (-456);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -456
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
