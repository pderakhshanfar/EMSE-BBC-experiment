/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:34 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null, objectArray0[1]);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
      
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[null, null], null, null, null], MultiKey[MultiKey[null, null], null, null, null], MultiKey[MultiKey[null, null], null, null, null], MultiKey[MultiKey[null, null], null, null, null], MultiKey[MultiKey[null, null], null, null, null], MultiKey[MultiKey[null, null], null, null, null]]", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("$", "$");
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey2.getKeys();
      multiKey2.equals(multiKey1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(496);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 496
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(2);
      MultiKey<String> multiKey0 = new MultiKey<String>("q*T`]CynxeW{S", (String) null, (String) null, "");
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null);
      Integer integer1 = new Integer((-2531));
      MultiKey<String> multiKey2 = new MultiKey<String>("q*T`]CynxeW{S", "", (String) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer0, multiKey1, integer1, multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey1);
      assertEquals(2, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(824);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(824);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(824);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1172);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(824);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(873);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[824, 824, 824, 824, 824, 1172, 824, 873]", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("Q|$ 8sQM9j\"KlC&", " ", "483Q9.");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null, "fCW.f\"Gnq", object0, "Q|$ 8sQM9j\"KlC&");
      multiKey0.toString();
      multiKey1.getKey(0);
      Integer integer0 = new Integer(339);
      Integer integer1 = new Integer(339);
      Integer integer2 = new Integer(339);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey2.toString();
      Integer integer3 = multiKey2.getKey(0);
      assertTrue(integer3.equals((Object)integer2));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1166));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1166));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1166));
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("?Jq+kZ@eip#jVk:", "?Jq+kZ@eip#jVk:");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      Integer integer0 = new Integer((-1936));
      multiKey1.equals(integer0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-803));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -803
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1230));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      assertEquals(6, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, objectArray0[0], object0, multiKey2);
      MultiKey multiKey4 = (MultiKey)multiKey3.getKey(0);
      multiKey3.toString();
      objectArray0[1] = (Object) multiKey4;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[0, 0]]", string0);
      
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey[0, 0]", "MultiKey[0, 0]", ":ogR[D&qItO", "7", "");
      multiKey6.hashCode();
      multiKey2.size();
      multiKey5.getKeys();
      boolean boolean0 = multiKey3.equals(multiKey2);
      assertFalse(boolean0);
      
      multiKey6.getKey(2);
      Object object2 = new Object();
      MultiKey<Object> multiKey7 = new MultiKey<Object>("MultiKey[MultiKey[0, 0], MultiKey[0, 0], java.lang.Object@61a176c8, MultiKey[0, 0]]", "", object2, ":ogR[D&qItO");
      MultiKey<MultiKey<Object>> multiKey8 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey7);
      multiKey8.toString();
      assertFalse(multiKey7.equals((Object)multiKey3));
  }
}
