/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:23:00 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("C_", "GPjBME2e[pW%9");
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "!4", "!4");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "!4");
      assertFalse(multiKey1.equals((Object)multiKey0));
      
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "]~", "B4Z fH:XH");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "MultiKey[null, null, ]~, B4Z fH:XH]";
      objectArray0[1] = (Object) "MultiKey[null, null, ]~, B4Z fH:XH]";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "B4Z fH:XH";
      objectArray0[4] = (Object) "MultiKey[null, null, ]~, B4Z fH:XH]";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "]~";
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, ]~, B4Z fH:XH]", string0);
      
      objectArray0[7] = (Object) "B4Z fH:XH";
      objectArray0[8] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey1.size();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      int int0 = multiKey0.size();
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("H.6vG%z.#`a", "", "MultiKey[]");
      int int2 = multiKey1.hashCode();
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object2, object1, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3246));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3246
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "0q", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, "", multiKey0);
      multiKey0.toString();
      Object object0 = new Object();
      multiKey1.equals(object0);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2206);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1797);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((int) integerArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2206
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "D#S";
      stringArray0[4] = "";
      stringArray0[5] = "?pfRx3";
      stringArray0[6] = "";
      stringArray0[7] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0, "D#S", integer0, "");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "", "The array of keys must not be null", object0, "");
      multiKey2.getKeys();
      multiKey0.hashCode();
      multiKey1.getKeys();
      int int0 = multiKey1.size();
      multiKey2.getKeys();
      Integer integer1 = new Integer(999);
      Integer integer2 = new Integer(999);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer0, integer2);
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      int int0 = 3488;
      Integer integer0 = new Integer(3488);
      Integer integer1 = new Integer(3488);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      multiKey1.equals("MultiKey[]");
      MultiKey<String> multiKey2 = new MultiKey<String>("P*'bn&V2!)7", "MultiKey[]", "MultiKey[]");
      // Undeclared exception!
      try { 
        multiKey2.getKey(3488);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3488
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(1);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer((-250));
      Integer integer1 = new Integer((-250));
      Integer integer2 = new Integer((-653));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, integer1, integer0, integer2, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      int int0 = 1;
      Object object1 = multiKey1.getKey(1);
      objectArray0[1] = object1;
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = object1;
      objectArray1[1] = (Object) integer0;
      objectArray1[2] = (Object) integer2;
      Object object2 = new Object();
      objectArray1[3] = object2;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray1, false);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, (MultiKey<Object>) null, multiKey1, multiKey2);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-653));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -653
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("u<YJ", "A\"/?*G^c4I'gc*]?a*", "VnF", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("O@M&%;.$wgC!/q&k.:~");
      assertFalse(boolean0);
      
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "O@M&%;.$wgC!/q&k.:~", "MultiKey[0, 0]");
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "b@HTN0uriZ", "MultiKey[0, 0]");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, b@HTN0uriZ, MultiKey[0, 0]]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",s7E8cn}&W";
      stringArray0[1] = "#5ggRjm#h";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      assertEquals(2, multiKey0.size());
  }
}
