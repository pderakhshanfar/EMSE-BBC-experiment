/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:26:47 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey0.getKeys();
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("3Y^[_y)Rpoc4Q0Mz", "S{iU&sLfQKWP|.Z");
      Object object0 = multiKey0.getKey(0);
      assertEquals("3Y^[_y)Rpoc4Q0Mz", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -484
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\nCYx/KYW2}W", "\nCYx/KYW2}W");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(945);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("cY", "cY", integer0, integer0);
      String[] stringArray0 = new String[1];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("D9", (String) null, "D9");
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      Integer integer0 = multiKey0.getKey(1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "=K]@P;em_e", "", "NkLh6Q}eDuUVwTC9.");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object>[] multiKeyArray1 = multiKey0.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("8e", "8e", "8e", "8e");
      boolean boolean0 = multiKey0.equals("8e");
      assertFalse(boolean0);
  }
}
