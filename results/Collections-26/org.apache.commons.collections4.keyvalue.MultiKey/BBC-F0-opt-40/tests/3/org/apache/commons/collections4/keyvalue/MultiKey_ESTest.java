/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:40 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("mgt>nY )0.sa[M=65", "s4H38Ga_+Br0;.=xMR", "q~.*zB");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "s4H38Ga_+Br0;.=xMR";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[mgt>nY )0.sa[M=65, s4H38Ga_+Br0;.=xMR, q~.*zB], MultiKey[mgt>nY )0.sa[M=65, s4H38Ga_+Br0;.=xMR, q~.*zB], s4H38Ga_+Br0;.=xMR]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
      
      multiKey2.getKey(1);
      assertTrue(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mgt>nY )0.sa[M=65";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      multiKey3.equals(multiKey2);
      multiKey3.size();
      multiKey2.hashCode();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(484);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2, integer0, integer3);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer((-1599));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer4, (Integer) null, integer5);
      // Undeclared exception!
      try { 
        multiKey5.getKey((-755));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -755
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "C!4>rff#Q2p=[", "", "");
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.getKeys();
      int int0 = multiKey1.size();
      Integer integer1 = new Integer(7);
      MultiKey<String> multiKey2 = new MultiKey<String>("!IyPnZBfIh?eT2", "");
      Integer integer2 = new Integer(6);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, (Object) null, multiKey2, integer2);
      multiKey3.hashCode();
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      Integer integer3 = new Integer(0);
      boolean boolean0 = multiKey1.equals(integer2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("6tTV\"7Q", "6tTV\"7Q", "6tTV\"7Q");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("6tTV\"7Q", "6tTV\"7Q");
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.hashCode();
      multiKey1.getKey(0);
      int int0 = multiKey1.size();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      int int1 = multiKey3.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")za'?pj_zVpSeMf[UoO", "PUq1.1.k.QWe");
      multiKey0.size();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PUq1.1.k.QWe";
      stringArray0[1] = "PUq1.1.k.QWe";
      stringArray0[2] = ")za'?pj_zVpSeMf[UoO";
      stringArray0[3] = ")za'?pj_zVpSeMf[UoO";
      stringArray0[4] = "PUq1.1.k.QWe";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey0, multiKey0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[PUq1.1.k.QWe, PUq1.1.k.QWe, )za'?pj_zVpSeMf[UoO, )za'?pj_zVpSeMf[UoO, PUq1.1.k.QWe], MultiKey[)za'?pj_zVpSeMf[UoO, PUq1.1.k.QWe], MultiKey[)za'?pj_zVpSeMf[UoO, PUq1.1.k.QWe]]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey3.equals("PUq1.1.k.QWe");
      assertFalse(boolean0);
      
      multiKey3.size();
      multiKey3.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2031);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer0, integer0);
      Object object0 = multiKey4.getKey(0);
      assertEquals(0, object0);
      
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[MultiKey[PUq1.1.k.QWe, PUq1.1.k.QWe, )za'?pj_zVpSeMf[UoO, )za'?pj_zVpSeMf[UoO, PUq1.1.k.QWe], MultiKey[)za'?pj_zVpSeMf[UoO, PUq1.1.k.QWe], MultiKey[)za'?pj_zVpSeMf[UoO, PUq1.1.k.QWe]]", object0, ")za'?pj_zVpSeMf[UoO", multiKey4, object1);
      boolean boolean1 = multiKey3.equals(multiKey5);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(2307);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2307);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1808));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-37));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey0.getKeys();
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      multiKey0.getKey(0);
      Object object0 = null;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      String string1 = null;
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("]{B['~</*6TLv3GhwP", "", "");
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.size();
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      int int0 = (-1443);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1443));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1443
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
