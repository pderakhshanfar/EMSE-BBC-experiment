/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:05:12 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null, null]", string0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, object0, "bj*yQ`P`Qnb&uft'i%");
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[null, null, java.lang.Object@577048da, bj*yQ`P`Qnb&uft'i%]", "", "*_#G", "j}X5:i8}W30h");
      boolean boolean0 = multiKey2.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer(4);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer(3);
      Integer integer5 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer5, integer5, integer5);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null, (Object) null, "u%N&|3");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey3.toString();
      multiKey3.equals("u%N&|3");
      multiKey3.getKeys();
      Object object1 = multiKey1.getKey(3);
      assertFalse(object1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("iOV", "", "0Emf}?@W8=R,A+]Xa");
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey2.size();
      multiKey1.size();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null, null]", string0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, object0, "bj*yQ`P`Qnb&uft'i%");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, multiKey1);
      multiKey1.toString();
      Object object1 = multiKey2.getKey(1);
      assertNull(object1);
      
      Integer integer0 = new Integer(1974);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, integer0);
      multiKey3.getKeys();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[null, null, null, null, null]";
      stringArray0[1] = "MultiKey[null, null, null, null, null]";
      stringArray0[2] = "MultiKey[null, null, null, null, null]";
      stringArray0[3] = "MultiKey[null, null, null, null, null]";
      stringArray0[4] = "bj*yQ`P`Qnb&uft'i%";
      stringArray0[5] = "MultiKey[null, null, null, null, null]";
      stringArray0[6] = "MultiKey[null, null, null, null, null]";
      stringArray0[7] = "MultiKey[null, null, null, null, null]";
      stringArray0[8] = "MultiKey[null, null, null, null, null]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = null;
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      multiKey0.equals(multiKey1);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2766);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2766
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer7 = new Integer(0);
      Integer integer8 = new Integer(int0);
      Integer integer9 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer7, integer8, integer9);
      Object object2 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, object1, multiKey0, int0, object2);
      Object object3 = multiKey2.getKey(int0);
      objectArray0[1] = object3;
      Object object4 = new Object();
      objectArray0[2] = object4;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "", "");
      multiKey3.getKey(int0);
      objectArray0[3] = (Object) "";
      Object object5 = new Object();
      objectArray0[4] = object5;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey4.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("slIsk^9", "slIsk^9", "i82J$.O", "slIsk^9");
      multiKey1.equals((Object) null);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-199));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer1);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".";
      stringArray0[1] = "Ul";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "*#l[n9oP ->V";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", (String) null, "^7j|*]K?}1REu");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-593));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -593
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      String string0 = "0XP)x~k,ymmj!vrK%";
      String string1 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("0XP)x~k,ymmj!vrK%", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.equals("0XP)x~k,ymmj!vrK%");
      String string2 = "'q9W2cq5p.";
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(2824);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[4, 4, 2824, 4, 2824]";
      stringArray0[1] = "fj!Q";
      stringArray0[2] = "MultiKey[4, 4, 2824, 4, 2824]";
      stringArray0[3] = "MultiKey";
      stringArray0[4] = "MultiKey[4, 4, 2824, 4, 2824]";
      stringArray0[5] = "MultiKey[4, 4, 2824, 4, 2824]";
      stringArray0[6] = "MultiKey[4, 4, 2824, 4, 2824]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey(2824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2824
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
