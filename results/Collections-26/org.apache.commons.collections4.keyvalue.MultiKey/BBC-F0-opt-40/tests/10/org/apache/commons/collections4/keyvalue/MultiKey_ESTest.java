/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:50:14 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-349));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "", "");
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      multiKey3.getKey(0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey3.toString();
      multiKey1.getKeys();
      boolean boolean0 = multiKey3.equals(")tst2t@(NC$3");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey4.getKeys();
      multiKey2.getKey(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) integerArray0, false);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[-349]", string0);
      
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey5, multiKey1);
      MultiKey<Object> multiKey7 = multiKey6.getKey(0);
      boolean boolean1 = multiKey1.equals(multiKey7);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("L-X", "L-X", "L-X");
      multiKey1.getKey(0);
      int int1 = multiKey0.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1200));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, integer0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(1);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer0, object0, (Object) null, integer0);
      multiKey3.toString();
      multiKey3.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey4.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-349));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, multiKey2, "", "");
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      multiKey1.toString();
      multiKey3.toString();
      multiKey4.getKeys();
      MultiKey<MultiKey<Integer>> multiKey5 = null;
      try {
        multiKey5 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      Integer integer2 = new Integer(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, -1]", "MultiKey[0, -1]");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, "MultiKey[0, -1]", "MultiKey[0, -1]", "MultiKey[0, -1]", integer2);
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, multiKey2);
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey3.getKey((-5592));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5592
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("[0<N'J<(0!ct[#@w", "[0<N'J<(0!ct[#@w", "[0<N'J<(0!ct[#@w", "", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-846));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      int int0 = 4;
      Integer integer4 = new Integer(4);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey2.getKey(int0);
      assertEquals(4, object0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, "MultiKey[[0<N'J<(0!ct[#@w, [0<N'J<(0!ct[#@w, [0<N'J<(0!ct[#@w, , null]");
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[[0<N'J<(0!ct[#@w, [0<N'J<(0!ct[#@w, [0<N'J<(0!ct[#@w, , null]", "[0<N'J<(0!ct[#@w", multiKey0, object0, (Object) null);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[[0<N'J<(0!ct[#@w, [0<N'J<(0!ct[#@w, [0<N'J<(0!ct[#@w, , null], [0<N'J<(0!ct[#@w, MultiKey[[0<N'J<(0!ct[#@w, [0<N'J<(0!ct[#@w, [0<N'J<(0!ct[#@w, , null], 4, null]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer0);
      multiKeyArray0[1] = multiKey1;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) int0, (Integer) null, integerArray0[4], (Integer) null, (Integer) int0);
      multiKeyArray0[3] = multiKey3;
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, (Integer) int0, (Integer) int0, (Integer) int0, integer0);
      multiKeyArray0[4] = multiKey4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integerArray0[4], (Integer) int0, (Integer) null);
      multiKeyArray0[5] = multiKey5;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[6] = multiKey6;
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[7] = multiKey7;
      Integer integer2 = new Integer(1632);
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>((Integer) int0, integer2, (Integer) int0, integer2);
      multiKeyArray0[8] = multiKey8;
      MultiKey<MultiKey<Integer>> multiKey9 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      int int1 = multiKey9.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[{s_Kf}^Ai6&lCz";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "J9,l8I]s";
      stringArray0[4] = "";
      stringArray0[5] = ";id5O\"XaL$*z6~e;";
      stringArray0[6] = "Dpw";
      stringArray0[7] = ";[K28sn%R";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(";[K28sn%R", "Dpw");
      // Undeclared exception!
      try { 
        multiKey1.getKey(2237);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2237
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ">X~$";
      MultiKey<String> multiKey0 = new MultiKey<String>(">X~$", ">X~$", ">X~$", ">X~$");
      Integer integer0 = new Integer(723);
      multiKey0.equals(integer0);
      multiKey0.equals(">X~$");
      Object[] objectArray0 = new Object[7];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(">X~$", integer0, ">X~$");
      // Undeclared exception!
      try { 
        multiKey1.getKey(723);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 723
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "X^";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey0, multiKey1);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , X^]", string0);
      
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey2;
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", object0, multiKey1, multiKey2);
      multiKeyArray0[3] = multiKey3;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey4.equals(multiKey5);
      assertFalse(boolean0);
      assertTrue(multiKey5.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-3071));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-485));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -485
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      String string2 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      int int0 = 865;
      // Undeclared exception!
      try { 
        multiKey0.getKey(865);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 865
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[-1, -1, 0]", (Object) null, integer2, integer3, "MultiKey[-1, -1, 0]");
      multiKey1.hashCode();
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
