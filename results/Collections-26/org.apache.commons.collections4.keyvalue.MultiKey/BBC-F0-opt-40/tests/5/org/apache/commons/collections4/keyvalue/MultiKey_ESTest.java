/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:26 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Integer integer0 = new Integer(1125);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey0, multiKey1, multiKey1, integer0);
      Object object0 = multiKey2.getKey(1);
      multiKey0.equals(object0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey", multiKey2, multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.equals(multiKey3);
      MultiKey<String> multiKey4 = new MultiKey<String>("]czINvB XgwXD5", "org.apache.commons.collections4.keyvalue.MultiKey", "]czINvB XgwXD5");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(stringArray0);
      multiKey5.toString();
      Integer[] integerArray0 = new Integer[7];
      int int0 = 15;
      Integer integer0 = new Integer(15);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(15);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(15);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey6.size();
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = "The array of keys must not be null";
      stringArray0[7] = "The array of keys must not be null";
      stringArray0[8] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer(1);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, The array of keys must not be null, The array of keys must not be null, The array of keys must not be null, The array of keys must not be null, The array of keys must not be null, The array of keys must not be null, The array of keys must not be null, The array of keys must not be null]", string0);
      
      boolean boolean1 = multiKey1.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("`z?rlAxL<G", "`z?rlAxL<G", "`z?rlAxL<G", object0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[0, 0, 0]";
      stringArray0[1] = "MultiKey[0, 0, 0]";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "MultiKey[0, 0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.equals("MultiKey[0, 0, 0]");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey2.toString();
      Integer integer1 = new Integer(0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 0], MultiKey[0, 0, 0], The array of keys must not be null, MultiKey[0, 0, 0]]", string0);
      
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
      
      multiKey2.getKey(0);
      multiKey0.getKeys();
      multiKey0.getKey(0);
      boolean boolean1 = multiKey4.equals("MultiKey[0, 0, 0]");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 0;
      multiKey0.getKey(0);
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer1, objectArray0[3], objectArray0[0]);
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, integer0, multiKey1, "", object0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, multiKey2);
      Object object1 = multiKey1.getKey(0);
      assertNull(object1);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, 0, null, null]", string0);
      
      multiKey2.getKeys();
      Integer[] integerArray0 = new Integer[6];
      Integer integer2 = new Integer(0);
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, false);
      boolean boolean0 = multiKey4.equals(int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object1);
      Object object2 = multiKey0.getKey(0);
      objectArray0[2] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "", "IuAV+AW");
      Integer integer0 = new Integer((-1));
      multiKey2.equals(integer0);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      int int0 = multiKey3.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKeyArray0[0] = multiKey0;
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, "", (Object) null);
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = multiKey3.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "jRKjvBOWyQsp", "", "");
      multiKey0.toString();
      int int0 = multiKey0.size();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4493);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      Object object0 = new Object();
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0[0], object0, integer1, integer2, integer4);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey2.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      int int0 = (-642);
      Integer integer0 = new Integer((-642));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      String[] stringArray0 = null;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1184);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("e1ghEuo$~Df/e^DL", "e1ghEuo$~Df/e^DL", "e1ghEuo$~Df/e^DL");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, "e1ghEuo$~Df/e^DL", integer1);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2771));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2771
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
