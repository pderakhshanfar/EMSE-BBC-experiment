/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:50:16 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("B0ofu}(", "");
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("B0ofu}(", integer0, "");
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey1);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, (Integer) null, (Integer) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.getKeys();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      multiKey4.toString();
      multiKey2.equals(integer0);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      int int0 = multiKey1.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", (String) null, "The array of keys must not be null", (String) null);
      multiKey1.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0);
      Integer integer2 = new Integer(2369);
      Integer integer3 = new Integer(7);
      Integer integer4 = new Integer(2369);
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer(1);
      Integer integer7 = new Integer((-1));
      Integer integer8 = new Integer(7);
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1962));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.equals(integer0);
      Object object0 = new Object();
      Integer integer1 = new Integer(2023);
      multiKey0.toString();
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, integer1, integer2, "MultiKey[-1962, -1962, -1962]");
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKey(0);
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      Integer integer3 = new Integer(0);
      multiKey2.equals(integer3);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey3.toString();
      multiKey1.equals(multiKey0);
      multiKey0.hashCode();
      // Undeclared exception!
      try { 
        multiKey0.getKey(2023);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2023
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, (Object) null);
      multiKey0.getKey(3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "9Lh|jV&3Q";
      stringArray0[2] = "";
      stringArray0[3] = "]";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(4999);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4999);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "9y";
      MultiKey<String> multiKey0 = new MultiKey<String>("9y", "/]h?J)zO/", "9y", "9y");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.size();
      Integer integer2 = new Integer(0);
      multiKey0.equals(integer2);
      Object[] objectArray0 = null;
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-1, -1]", string0);
      
      multiKey0.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer0, "MultiKey[-1, -1]");
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 4;
      Integer integer0 = new Integer(4);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey0.getKey(int0);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object0, int0, object1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, multiKey1);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey3, multiKey3);
      multiKey4.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey5 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey", "$}DMy~ekYUWU[+U", "");
      multiKeyArray0[0] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String> multiKey7 = multiKey6.getKey(0);
      assertSame(multiKey7, multiKey5);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, object0, (Object) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[java.lang.Object@1c457963, null, java.lang.Object@1c457963, null, 0]", "MultiKey[java.lang.Object@1c457963, null, java.lang.Object@1c457963, null, 0]", "MultiKey[java.lang.Object@1c457963, null, java.lang.Object@1c457963, null, 0]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer2);
      multiKey2.toString();
      int int0 = (-1992);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1992));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1992
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1932));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1281);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey[-1932, 1281]";
      stringArray0[1] = "MultiKey[null, java.lang.Object@246266cf, java.lang.Object@246266cf]";
      stringArray0[2] = "MultiKey[-1932, 1281]";
      stringArray0[3] = "MultiKey[null, java.lang.Object@246266cf, java.lang.Object@246266cf]";
      stringArray0[4] = "MultiKey[null, java.lang.Object@246266cf, java.lang.Object@246266cf]";
      stringArray0[5] = "MultiKey[-1932, 1281]";
      stringArray0[6] = "MultiKey[-1932, 1281]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey2.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      int int0 = (-311);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-311));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -311
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
