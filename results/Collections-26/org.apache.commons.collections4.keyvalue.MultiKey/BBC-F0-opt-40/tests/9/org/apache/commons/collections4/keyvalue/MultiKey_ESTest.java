/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:57 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.com5ons.collectionm4.keyvalue.MultiKey", "org.apache.com5ons.collectionm4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.equals(multiKey0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "MultiKey[org.apache.com5ons.collectionm4.keyvalue.MultiKey, org.apache.com5ons.collectionm4.keyvalue.MultiKey]";
      objectArray0[3] = (Object) "MultiKey[org.apache.com5ons.collectionm4.keyvalue.MultiKey, org.apache.com5ons.collectionm4.keyvalue.MultiKey]";
      objectArray0[4] = (Object) "MultiKey[org.apache.com5ons.collectionm4.keyvalue.MultiKey, org.apache.com5ons.collectionm4.keyvalue.MultiKey]";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "MultiKey[org.apache.com5ons.collectionm4.keyvalue.MultiKey, org.apache.com5ons.collectionm4.keyvalue.MultiKey]";
      objectArray0[7] = (Object) "MultiKey[org.apache.com5ons.collectionm4.keyvalue.MultiKey, org.apache.com5ons.collectionm4.keyvalue.MultiKey]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-3229));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3229
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Integer[] integerArray0 = new Integer[5];
      int int0 = 15;
      Integer integer0 = new Integer(15);
      integerArray0[0] = integer0;
      int int1 = 1;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3495);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0[3], int1, integer2, object0, int1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3, multiKey2);
      Object object1 = multiKey4.getKey(1);
      boolean boolean0 = multiKey1.equals(object1);
      assertTrue(boolean0);
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(6);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "b1J sQC/7kl";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey1, "", integer0, multiKey2);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, multiKey4, (Object) null, "");
      multiKey3.toString();
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[], MultiKey[], , 6, MultiKey[, b1J sQC/7kl]], MultiKey[1, 1], null, ]", string0);
      
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      boolean boolean0 = multiKey6.equals("");
      assertFalse(boolean0);
      
      multiKey1.getKeys();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "MultiKey[MultiKey[], MultiKey[], , 6, MultiKey[, b1J sQC/7kl]]";
      stringArray1[1] = "";
      stringArray1[2] = "b1J sQC/7kl";
      stringArray1[3] = "";
      stringArray1[4] = "MultiKey[MultiKey[], MultiKey[], , 6, MultiKey[, b1J sQC/7kl]]";
      stringArray1[5] = "";
      stringArray1[6] = "b1J sQC/7kl";
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray1);
      String string1 = multiKey7.getKey(1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1954));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, "b1J sQC/7kl", "b1J sQC/7kl");
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      Integer integer1 = new Integer((-3174));
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer0, object0, "b1J sQC/7kl");
      Integer integer2 = new Integer(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, object0, object1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, "");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey(255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1954));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, "b1J sQC/7kl", "b1J sQC/7kl");
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey1.equals(multiKey0);
      multiKey0.getKeys();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[-1954, -1954, b1J sQC/7kl, b1J sQC/7kl]";
      stringArray0[1] = "MultiKey[-1954, -1954, b1J sQC/7kl, b1J sQC/7kl]";
      stringArray0[2] = "PA'pN%OdDlWH!";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1954));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1954
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, object1, object2);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[2] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object2, multiKey3);
      multiKeyArray0[3] = multiKey4;
      Integer integer0 = new Integer((-2449));
      Integer integer1 = new Integer(1414);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1);
      Object object3 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey5, object0, object3);
      multiKeyArray0[4] = multiKey6;
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey7.getKeys();
      assertEquals(5, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      String string1 = "&(gVQF10";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "&(gVQF10");
      int int0 = 1870;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1870);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1870
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0, (Object) null, multiKey0);
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, "OcK9wuQC$.D]MV[~N");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey2.toString();
      multiKey2.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[0, 0, 0]";
      stringArray0[1] = "OcK9wuQC$.D]MV[~N";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 0], OcK9wuQC$.D]MV[~N]", string0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>(",-HF@6.yH", "OcK9wuQC$.D]MV[~N");
      multiKey4.getKey(0);
      boolean boolean0 = multiKey3.equals(",-HF@6.yH");
      assertFalse(boolean0);
  }
}
