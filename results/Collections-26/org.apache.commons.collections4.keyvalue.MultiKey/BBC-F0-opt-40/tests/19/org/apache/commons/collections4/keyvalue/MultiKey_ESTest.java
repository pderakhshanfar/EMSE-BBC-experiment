/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:38:11 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey1.toString();
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object0, (Object) null, (Object) null, object0);
      multiKey3.toString();
      multiKey3.equals((Object) null);
      multiKey3.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null]", string0);
      
      Object object1 = new Object();
      boolean boolean0 = multiKey3.equals(object1);
      MultiKey<String> multiKey4 = new MultiKey<String>("\"7hd>>o}B", "", (String) null);
      boolean boolean1 = multiKey1.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(6659);
      integerArray0[0] = integer0;
      int int0 = 16;
      Integer integer1 = new Integer(16);
      integerArray0[1] = integer1;
      int int1 = 20;
      Integer integer2 = new Integer(20);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-52));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer8 = new Integer(851);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer8, integer7, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey1, multiKey1, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      multiKey3.equals(multiKey0);
      MultiKey<String> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-314);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-314));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -314
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(5230);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, (MultiKey<Integer>) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, "MultiKey[5230, 5230]", (Object) null);
      multiKey2.getKey(3);
      multiKey2.size();
      multiKey0.size();
      multiKey2.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[5230, 5230]", "MultiKey[5230, 5230]", "MultiKey[5230, 5230]");
      multiKeyArray0[1] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[5230, 5230]", "MultiKey[5230, 5230]", "MultiKey[5230, 5230]", "MultiKey[5230, 5230]", "MultiKey[5230, 5230]");
      multiKeyArray0[2] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>((String) null, "%7ra'");
      multiKeyArray0[3] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("MultiKey[5230, 5230]", "", "");
      multiKeyArray0[4] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("%7ra'", "%7ra'", "org.apache.commons.collections4.keyvalue.MultiKey", "%7ra'");
      multiKeyArray0[5] = multiKey8;
      MultiKey<String> multiKey9 = new MultiKey<String>("^WgH{tiV?:r/.cAs", "JR");
      multiKeyArray0[6] = multiKey9;
      MultiKey<String> multiKey10 = new MultiKey<String>("%7ra'", "JR");
      multiKeyArray0[7] = multiKey10;
      MultiKey<MultiKey<String>> multiKey11 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String>[] multiKeyArray1 = multiKey11.getKeys();
      assertEquals(8, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "Vs`JxtSNpYK&@");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>(".l9k<u", "", ".l9k<u");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>(".l9k<u", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("B/BHIs?{BGN6M6wA~\"", "", "Vs`JxtSNpYK&@", "Vs`JxtSNpYK&@", (String) null);
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>(".l9k<u", (String) null, "");
      multiKeyArray0[6] = multiKey6;
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      boolean boolean0 = multiKey7.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("dA@b<E]-(", " +Td,Lr", "", " +Td,Lr", "e=[JzwDGWqVpV");
      Object object0 = new Object();
      Integer integer0 = new Integer((-897));
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer((-897));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, (Object) null, multiKey1, (Object) null);
      multiKey2.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey2.getKeys();
      multiKey0.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey((-897));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -897
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", (String) null);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "MultiKey";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      multiKey0.getKey(0);
      objectArray0[3] = (Object) "MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey", (Object) null, object1);
      multiKey1.getKey(1);
      objectArray0[4] = null;
      Object object2 = new Object();
      objectArray0[5] = object2;
      Object object3 = new Object();
      objectArray0[6] = object3;
      Object object4 = new Object();
      objectArray0[7] = object4;
      Object object5 = new Object();
      multiKey0.toString();
      objectArray0[8] = object5;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.hashCode();
      int int0 = multiKey2.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("x{V2HNpN1(|T&", "+0[B4$`Y\":']wDQe(", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals("+0[B4$`Y\":']wDQe(");
      multiKey0.toString();
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey1.getKey(94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 94
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("aT,1", "aT,1", "aT,1", (String) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "aT,1";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "aT,1";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "aT,1", object0);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey2, multiKey1);
      multiKey2.toString();
      multiKey3.size();
      multiKey1.getKey(4);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -484
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 1440;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1440);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1440
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
