/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:51:41 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Gp[ZBG/", "Gp[ZBG/", "Gp[ZBG/");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "Gp[ZBG/", multiKey0, multiKey0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>("Gp[ZBG/", "Gp[ZBG/", "Gp[ZBG/", multiKey1, multiKey0);
      multiKeyArray0[1] = multiKey1;
      Object object0 = new Object();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[Gp[ZBG/, Gp[ZBG/, Gp[ZBG/]", string0);
      
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("Gp[ZBG/", object0, integer0, (Object) null);
      multiKeyArray0[2] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, "Gp[ZBG/");
      multiKeyArray0[3] = multiKey4;
      Object object1 = new Object();
      Object object2 = new Object();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1);
      Object object3 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey5, object3, "org.apache.commons.collections4.keyvalue.MultiKey", "", multiKey5);
      Object object4 = multiKey6.getKey(0);
      boolean boolean0 = multiKey0.equals(object4);
      multiKey4.getKeys();
      MultiKey<String> multiKey7 = new MultiKey<String>("", "(mp");
      boolean boolean1 = multiKey5.equals(object4);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "(-l]Ak", "(-l]Ak");
      Integer[] integerArray0 = new Integer[0];
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      Integer[] integerArray1 = multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray1);
      multiKey2.toString();
      multiKey2.toString();
      int int0 = (-1710);
      multiKey1.size();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1710));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1710
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("(-l]Ak", "(-l]Ak", "(-l]Ak", (String) null);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      Integer[] integerArray1 = multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray1);
      multiKey2.toString();
      multiKey2.toString();
      int int0 = (-1710);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1710));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1710
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(859);
      Integer integer1 = new Integer(1641);
      Integer integer2 = new Integer((-1939));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Integer integer0 = new Integer(1560);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[1560, 1560, 1560]", string0);
      
      Object object0 = new Object();
      Integer integer1 = new Integer(1560);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, "MultiKey[1560, 1560, 1560]", integer0, "MultiKey[1560, 1560, 1560]");
      Object object2 = multiKey2.getKey(2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, integer1, object2);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(6);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = new Integer((-795));
      Integer integer3 = new Integer(7);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      Integer integer4 = new Integer(6);
      Integer integer5 = new Integer(6);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer4, integer4, integer5);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, 6, 6, 6]", string0);
      
      Object object0 = new Object();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey3.getKey(0);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      Integer integer6 = new Integer((-795));
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer4;
      Integer integer7 = new Integer(1);
      integerArray0[1] = integer7;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[4] = null;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[null, 6, 6, 6]", integer6, multiKey4);
      multiKey5.getKeys();
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer((-2583));
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-2583));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2, (Integer) null);
      multiKey0.getKey(2);
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(2924);
      Integer integer1 = new Integer(2924);
      Integer integer2 = new Integer(2924);
      Integer integer3 = new Integer(2924);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer2, "1j93C");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.size();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("TQX~0a-9.", "y%LsTs{<M7SQkdX|(8T");
      multiKey2.toString();
      multiKey2.size();
      multiKey2.size();
      multiKey2.toString();
      multiKey0.equals(multiKey1);
      // Undeclared exception!
      try { 
        multiKey0.getKey(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "", "Oy 0u7", "", "");
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object1, multiKey1, multiKey2);
      multiKey2.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("", "MultiKey", "");
      multiKey4.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey3.equals(multiKey4);
      multiKey3.size();
      multiKey3.toString();
      multiKey2.size();
      multiKey0.toString();
      multiKey2.toString();
      // Undeclared exception!
      try { 
        multiKey2.getKey((-171));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -171
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "s1|ecVHRF", "");
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "";
      multiKey0.getKey(0);
      objectArray0[2] = (Object) "";
      multiKey0.getKey(0);
      objectArray0[3] = (Object) "";
      multiKey0.getKey(0);
      objectArray0[4] = (Object) "";
      Object object1 = new Object();
      objectArray0[5] = object1;
      multiKey0.toString();
      Object object2 = new Object();
      objectArray0[6] = object2;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = multiKey1.getKey(0);
      objectArray0[7] = (Object) integer2;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "", "=5pUp", (String) null);
      int int0 = 3115;
      // Undeclared exception!
      try { 
        multiKey0.getKey(3115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3115
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(328);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(592);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(328);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3224);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      int int0 = 5;
      Integer integer6 = new Integer(5);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[328, 592, 328, 592, 3224, 0, 5]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("", (String) null);
      Integer integer7 = new Integer(int0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer7);
      boolean boolean0 = multiKey2.equals("MultiKey[328, 592, 328, 592, 3224, 0, 5]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(961);
      Integer integer1 = new Integer(961);
      Integer integer2 = new Integer(961);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(961);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 961
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, "");
      int int0 = (-635);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-635));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -635
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "=EigTI";
      stringArray0[4] = "PKA^Z`X";
      stringArray0[5] = "!^6F$[MLe>,YB{KlK";
      stringArray0[6] = "NT(c5^%[5|XTX4AXi|_";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.size();
      Object object0 = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
