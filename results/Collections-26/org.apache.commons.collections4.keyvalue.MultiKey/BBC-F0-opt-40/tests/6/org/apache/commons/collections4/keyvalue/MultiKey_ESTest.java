/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:17 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "MultiKey";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "MultiKey";
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(0);
      objectArray0[5] = (Object) multiKey2;
      objectArray0[6] = (Object) "MultiKey";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey3.equals(objectArray0[1]);
      boolean boolean1 = multiKey2.equals(objectArray0[5]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = null;
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "kANIJeA W-GS";
      stringArray0[2] = "";
      stringArray0[3] = "kfHV+^k)R7p>luY#9";
      stringArray0[4] = "<";
      stringArray0[5] = "";
      stringArray0[6] = "The array of keys must not be null";
      stringArray0[7] = "";
      stringArray0[8] = "pc&O]m-T7tC}CK7)";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("The array of keys must not be null");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey2.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      String string0 = multiKey0.toString();
      //  // Unstable assertion: assertEquals("MultiKey[null, null]", string0);
      
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2896);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(3724);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey1.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[null, null]";
      stringArray0[1] = "MultiKey[null, null]";
      stringArray0[2] = "MultiKey[null, null]";
      stringArray0[3] = "MultiKey[null, null]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey2.equals("MultiKey[null, null]");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1676));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "MultiKey[-1676, -1676]";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "MultiKey[-1676, -1676]";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "MultiKey[-1676, -1676]";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) integer0;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) multiKey0;
      objectArray1[1] = (Object) multiKey0;
      objectArray1[2] = (Object) multiKey0;
      objectArray1[3] = (Object) multiKey0;
      objectArray1[4] = (Object) multiKey0;
      objectArray1[5] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray1[6] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray1);
      Object object1 = multiKey1.getKey(2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".|>GiRY";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, multiKey2, multiKey3, objectArray1[1]);
      boolean boolean0 = multiKey0.equals(multiKey4);
      assertTrue(multiKey0.equals((Object)multiKey3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(8s}R!9H^N\u0007z";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
      Integer integer0 = new Integer((-3893));
      Integer integer1 = new Integer((-3893));
      MultiKey<String> multiKey1 = new MultiKey<String>("(8s}R!9H^N\u0007z", (String) null, (String) null);
      multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer1, (Object) null, "(8s}R!9H^N\u0007z");
      multiKey3.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(stringArray0);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-3893));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3893
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "1,}RVkZSbEP#>");
      Integer integer0 = new Integer((-591));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer1);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("1,}RVkZSbEP#>", "", "", multiKey1);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("hGnx}%", "org.apache.commons.collections4.keyvalue.MultiKey", "hGnx}%", "gp&4o:R~^8MC9^", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.size();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-598));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -598
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
