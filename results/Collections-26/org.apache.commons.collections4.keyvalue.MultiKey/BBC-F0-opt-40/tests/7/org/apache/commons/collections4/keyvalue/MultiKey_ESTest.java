/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) integerArray0, false);
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(3086);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3086
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, integer0, "*:>m-Dzlb", (Object) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey2 = new MultiKey<String>("*:>m-Dzlb", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[2253, MultiKey[2253, 0], 0, *:>m-Dzlb, null]");
      multiKeyArray0[0] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Object object0 = multiKey3.getKey(0);
      assertNotNull(object0);
      
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "<(<O", (String) null, (String) null, (String) null);
      Integer integer0 = new Integer(366);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, integer0, multiKey0, integer0);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, integer0, "*:>m-Dzlb", (Object) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(819);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      assertEquals(4, multiKey0.size());
  }
}
