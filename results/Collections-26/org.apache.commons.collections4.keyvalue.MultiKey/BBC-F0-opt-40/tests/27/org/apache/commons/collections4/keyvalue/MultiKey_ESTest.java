/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:49:54 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer0 = new Integer(2623);
      Integer integer1 = new Integer(2623);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1, integer2);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer2, integer0, integer1);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer2, (Integer) null, integer1, integer1);
      multiKeyArray0[2] = multiKey3;
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(2);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer4, integer0);
      multiKeyArray0[3] = multiKey4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer0, integer1, integer2);
      multiKeyArray0[4] = multiKey5;
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[5] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      Object object0 = new Object();
      multiKey7.equals(object0);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(integerArray0);
      multiKey8.toString();
      multiKey8.equals(multiKey3);
      multiKey8.toString();
      multiKey4.equals(multiKey4);
      // Undeclared exception!
      try { 
        multiKey0.getKey(2623);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2623
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer0 = new Integer(2623);
      Integer integer1 = new Integer(2623);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1, integer2);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer2, integer0, integer1);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer2, (Integer) null, integer1, integer1);
      multiKeyArray0[2] = multiKey3;
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer(7);
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer((-349));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer5, integer6);
      Integer integer7 = new Integer((-349));
      Integer integer8 = new Integer(2);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer7, integer7, integer1, integer8);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, true);
      assertFalse(multiKey6.equals((Object)multiKey1));
      
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey8 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      boolean boolean0 = multiKey8.equals(multiKey7);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      multiKey1.equals(multiKey0);
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[1];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      Object[] objectArray0 = multiKey2.getKeys();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Integer integer0 = new Integer(190);
      Integer integer1 = new Integer(990);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null);
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer0 = new Integer(2623);
      Integer integer1 = new Integer(2623);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1, integer2);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer2, integer0, integer1);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer2, (Integer) null, integer1, integer1);
      multiKeyArray0[2] = multiKey3;
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(2);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer4, integer0);
      multiKeyArray0[3] = multiKey4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer0, integer1, integer2);
      multiKeyArray0[4] = multiKey5;
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[5] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      Object object0 = new Object();
      boolean boolean0 = multiKey7.equals(object0);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey8 = new MultiKey<Object>(integerArray0);
      boolean boolean1 = multiKey8.equals(multiKey3);
      assertFalse(boolean1);
      
      String string0 = multiKey8.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("{X>qDgDY", "{X>qDgDY");
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("{X>qDgDY", multiKey0);
      multiKey1.getKey(0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1896);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      Object object0 = new Object();
      Integer integer2 = new Integer((-543));
      MultiKey<Object> multiKey3 = new MultiKey<Object>("L(&hg", object0, integer2);
      MultiKey<String> multiKey4 = new MultiKey<String>("{X>qDgDY", "{X>qDgDY", "L(&hg");
      String string0 = multiKey3.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey1, multiKey3, "{X>qDgDY", multiKey4);
      MultiKey<Object> multiKey6 = new MultiKey<Object>("{X>qDgDY", "{X>qDgDY", multiKey2, multiKey5);
      String string1 = multiKey6.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(171);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer integer5 = multiKey0.getKey(0);
      objectArray0[1] = (Object) integer5;
      MultiKey<String> multiKey1 = new MultiKey<String>("O&j!V", "O&j!V");
      // Undeclared exception!
      try { 
        multiKey1.getKey(5516);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5516
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "");
      multiKey1.hashCode();
      multiKey0.equals("");
      Integer integer0 = new Integer(690);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0);
      int int0 = 0;
      multiKey2.getKey(0);
      // Undeclared exception!
      try { 
        multiKey0.getKey(914);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 914
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, object0, object0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-686));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -686
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(4275);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", integer0, integer1, integer1);
      multiKey0.size();
      multiKey0.toString();
      Integer integer2 = new Integer(1077);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer1, integer2);
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "", "n@_x=", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.getKeys();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, "", multiKey0);
      multiKey2.hashCode();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[The array of keys must not be null, , n@_x=, ]", string0);
  }
}
