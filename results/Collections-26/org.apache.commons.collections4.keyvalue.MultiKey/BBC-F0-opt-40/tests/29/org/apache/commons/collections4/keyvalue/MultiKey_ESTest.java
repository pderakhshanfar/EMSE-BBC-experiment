/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:52:48 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, multiKey0, integer1, integer1, integer0);
      Object object0 = multiKey1.getKey(1);
      multiKey0.equals(object0);
      Object object1 = multiKey1.getKey(0);
      assertTrue(object1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("=%4IXa", "=%4IXa", "");
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0);
      multiKey0.equals(multiKey1);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String>[] multiKeyArray1 = multiKey2.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "", (Object) null, (Object) null);
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      //  // Unstable assertion: assertNull(object0);
      
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer0, (Object) null, (Object) null, object1);
      multiKey2.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "  u=W";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      int int0 = multiKey3.size();
      int int1 = multiKey3.hashCode();
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      multiKey1.toString();
      multiKey2.toString();
      multiKey3.size();
      boolean boolean0 = multiKey3.equals(integer0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      //  // Unstable assertion: assertEquals("MultiKey[null, , null, null]", string0);
      
      multiKey1.hashCode();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", "", object1, "MultiKey[null, , null, null]", "");
      //  // Unstable assertion: assertFalse(multiKey4.equals((Object)multiKey2));
      
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, true);
      boolean boolean1 = multiKey3.equals(multiKey5);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.size();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      multiKey1.size();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "", (Object) null, (Object) null);
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      //  // Unstable assertion: assertNull(object0);
      
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer0, (Object) null, (Object) null, object1);
      multiKey2.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "  u=W";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey3.size();
      multiKey3.hashCode();
      multiKey1.toString();
      multiKey2.toString();
      int int0 = multiKey3.size();
      boolean boolean0 = multiKey3.equals(integer0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      //  // Unstable assertion: assertEquals("MultiKey[null, , null, null]", string0);
      
      multiKey1.hashCode();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey3);
      multiKey4.getKeys();
      int int1 = multiKey3.hashCode();
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey2, multiKey2);
      multiKey5.hashCode();
      //  // Unstable assertion: assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "MultiKey[]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("MultiKey[]");
      Integer integer0 = new Integer((-2222));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey0, multiKey0);
      multiKey3.getKeys();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[]", "MultiKey[]");
      multiKey4.size();
      MultiKey<MultiKey<String>> multiKey5 = null;
      try {
        multiKey5 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Ke@!", "Ke@!", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ke@!";
      stringArray0[1] = "Ke@!";
      stringArray0[2] = "";
      multiKey0.toString();
      stringArray0[3] = "Ke@!";
      stringArray0[4] = "MultiKey[Ke@!, Ke@!, ]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKey(0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "Ke@!");
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      multiKey3.equals("Ke@!");
      multiKey1.getKeys();
      multiKey3.getKey(int0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(3382);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3382
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("=%4IXa", "=%4IXa", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1830);
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer[] integerArray0 = new Integer[5];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1580));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(854);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer0, "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[2];
      Integer integer1 = new Integer(854);
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey(110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String> multiKey0 = new MultiKey<String>("Pj.:", "");
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "Pj.:";
      Object object0 = new Object();
      Integer integer0 = new Integer((-2264));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer0, (Object) null);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1430));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1430
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("zyhc;PH^", "", "cI2=h5rWD", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(4);
      Object object0 = new Object();
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer1);
      multiKey1.toString();
      // Undeclared exception!
      try { 
        multiKey1.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer0 = new Integer(1960);
      Integer integer1 = new Integer(1960);
      Integer integer2 = new Integer((-2368));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, (Object) null);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("bIQN}[G]?O", (String) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, multiKey0);
      multiKeyArray0[1] = multiKey3;
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, object0, integer2, multiKey3, "");
      multiKeyArray0[2] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[3] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey6.getKey(2716);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2716
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      // Undeclared exception!
      try { 
        multiKey1.getKey(1956);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1956
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
