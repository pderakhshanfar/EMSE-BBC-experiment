/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:30:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-338));
      Integer integer1 = new Integer(17);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.getKey(3);
      Integer integer2 = new Integer((-338));
      Integer integer3 = new Integer(3);
      Integer integer4 = new Integer(317);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer4, integer4);
      Integer integer5 = new Integer(26);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, multiKey1, "z)s{Q!iyl", integer5, integer0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2);
      Object object0 = multiKey3.getKey(3);
      boolean boolean0 = multiKey2.equals(object0);
      boolean boolean1 = multiKey2.equals("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "2*A");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[7] = multiKey1;
      multiKeyArray0[8] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey2.equals(multiKey4);
      assertTrue(boolean0);
      
      Integer integer1 = new Integer(1888);
      Integer integer2 = new Integer(21);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer2, integer0);
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer integer3 = new Integer(1888);
      integerArray0[3] = integer3;
      integerArray0[4] = integer1;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, true);
      assertFalse(multiKey6.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2213);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(71);
      Integer integer1 = new Integer((-3125));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object3, integer0, integer1, (Object) null, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      Object[] objectArray1 = multiKey0.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2747);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(435);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-3017));
      integerArray0[4] = integer4;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integerArray0);
      Integer integer5 = new Integer((-1192));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integerArray0[3], integer5, integerArray0[2]);
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey2.getKey(int0);
      multiKey2.toString();
      Integer integer6 = new Integer(4);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, integer6, integer1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(int0, integer1);
      Object object0 = new Object();
      multiKey1.getKey(1);
      // Undeclared exception!
      try { 
        multiKey2.getKey(4418);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4418
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      String[] stringArray0 = new String[6];
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "");
      MultiKey<String> multiKey1 = new MultiKey<String>("*oDwCR|T7NE*d\"_%d9s", "", "/}'XEl?d!uAl7K6{xL", "", "]wT=Usw*`a^|.");
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "", "", "");
      MultiKey<String> multiKey3 = new MultiKey<String>(",0Cgd93){-+c", (String) null, (String) null);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKeyArray0);
      multiKey5.equals(multiKey6);
      Object object1 = new Object();
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey8 = new MultiKey<String>("E6]cq91b4z", "wDj", "", "", "");
      MultiKey<Object> multiKey9 = new MultiKey<Object>(multiKey7, multiKey8);
      MultiKey<MultiKey<Object>> multiKey10 = new MultiKey<MultiKey<Object>>(multiKey6, multiKey6, multiKey9);
      multiKey10.getKeys();
      assertFalse(multiKey9.equals((Object)multiKey6));
      assertFalse(multiKey6.equals((Object)multiKey9));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("qn1fv`2", "qn1fv`2");
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1490));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1781));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      Object object0 = multiKey2.getKey(2);
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<String> multiKey0 = new MultiKey<String>("-b&'`QZe1.r", "-b&'`QZe1.r", "-b&'`QZe1.r", "-b&'`QZe1.r", "GUH");
      multiKey0.getKey(1);
      objectArray0[0] = (Object) "-b&'`QZe1.r";
      Object object0 = null;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1823));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-2473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2473
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-577));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      Object object0 = multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, object0);
      multiKey1.hashCode();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "C:a";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "R8`y706g*b`HL~R";
      stringArray0[5] = "mQ1.o@2PQQ{/vG";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey2.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "^";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "^", "oN$z7");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2747);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(435);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2025);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0[3], object0, integer1);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      multiKey2.toString();
      multiKey2.toString();
      Integer integer5 = new Integer(0);
      multiKey2.equals(integer5);
      multiKey0.hashCode();
      // Undeclared exception!
      try { 
        multiKey2.getKey(2025);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2025
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, multiKey0, (Object) null);
      multiKey0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[java.lang.Object@43a0c145, java.lang.Object@43a0c145]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey2.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      assertEquals(3, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) integer0;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      // Undeclared exception!
      try { 
        multiKey1.getKey(1508);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1508
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
