/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:03:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("HuC@M4&.=/k*ZU=", "HuC@M4&.=/k*ZU=");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals(objectArray0[2]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1667));
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer1 = new Integer((-1667));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1, integer1);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey1, multiKey1, multiKey0);
      multiKey2.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1667));
      MultiKey<String> multiKey0 = new MultiKey<String>("", "_B@3BH6{xetjv", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      multiKeyArray0[8] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray1);
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"Hzu?R}1\"m<I0S*\"l", "\"Hzu?R}1\"m<I0S*\"l", "\"Hzu?R}1\"m<I0S*\"l", "fdb~RBX");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("fdb~RBX", "fdb~RBX", multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.equals("MultiKey[\"Hzu?R}1\"m<I0S*\"l, \"Hzu?R}1\"m<I0S*\"l, \"Hzu?R}1\"m<I0S*\"l, fdb~RBX]");
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer2);
      multiKey3.equals(integer1);
      Integer integer3 = new Integer(5);
      multiKey3.toString();
      Integer integer4 = new Integer((-3533));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer4, integer2, integer2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[5, 0]", string0);
      
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey4, multiKey3);
      multiKey5.getKeys();
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      boolean boolean1 = multiKey2.equals(object1);
      assertFalse(boolean1);
      
      multiKey1.getKeys();
      multiKey4.size();
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "p.L";
      stringArray0[2] = "6jC$C";
      stringArray0[3] = "";
      stringArray0[4] = "v:/9 \"2g)";
      stringArray0[5] = "(&C";
      stringArray0[6] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.hashCode();
      multiKey0.getKeys();
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey0.toString();
      int int0 = multiKey1.size();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey2.toString();
      multiKey2.getKey(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "org.apache.commons.collections4.keyvalue.MultiKey");
      int int1 = multiKey3.hashCode();
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      String string0 = multiKey3.toString();
      //  // Unstable assertion: assertEquals("MultiKey[, org.apache.commons.collections4.keyvalue.MultiKey]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "*SllBP4dd)`]PL\">(zF");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2268));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(4);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("*SllBP4dd)`]PL\">(zF", "MultiKey[null, *SllBP4dd)`]PL\">(zF]", "*SllBP4dd)`]PL\">(zF", "*SllBP4dd)`]PL\">(zF", integer3);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals("*SllBP4dd)`]PL\">(zF");
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "nVAdja. &!-T%VQX~Xu";
      stringArray0[1] = "td&wCMp=C[1";
      stringArray0[2] = "P6!";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "_4[7BF", "_4[7BF", "The array of keys must not be null", "The array of keys must not be null");
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "The array of keys must not be null", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("_4[7BF", multiKey1);
      Object object1 = multiKey1.getKey(0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "MultiKey[, , , , ]");
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("jUq", "jUq", "jUq");
      int int0 = multiKey0.size();
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("KgZbN`kv!A;:o+}e^", "jUq", "KgZbN`kv!A;:o+}e^");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, multiKey1);
      int int1 = multiKey2.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "]Hz*Hm";
      boolean boolean0 = true;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = 3770;
      // Undeclared exception!
      try { 
        multiKey0.getKey(3770);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3770
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "ls)HyJ^POf@v^86iCfQ";
      stringArray0[2] = "";
      stringArray0[3] = "ep!n68'";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = 2253;
      // Undeclared exception!
      try { 
        multiKey1.getKey(2253);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2253
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
