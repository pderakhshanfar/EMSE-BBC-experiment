/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:04:18 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("G7IJa/e4p;[", (String) null, "ULo1");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      Integer[] integerArray1 = multiKey1.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.equals((Object) null);
      int int0 = multiKey0.size();
      multiKey0.equals((Object) null);
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("\"r:YGUb/\"b m", (String) null, (String) null, "", "rUVz'\"[=oC38]h>_(8I");
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(2282);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      MultiKey<String> multiKey3 = new MultiKey<String>("PI:M3M(MG", (String) null, (String) null, (String) null);
      Integer integer3 = new Integer(0);
      boolean boolean0 = multiKey1.equals(integer2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      multiKey0.getKeys();
      String string0 = multiKey0.toString();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[, , ]";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey[, , ]";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKeys();
      String string1 = multiKey1.getKey(1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "");
      Object[] objectArray0 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("m)!pw'1Uvu", "m)!pw'1Uvu");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 1;
      multiKey0.getKey(1);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKeys();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[m)!pw'1Uvu, m)!pw'1Uvu]";
      stringArray0[1] = "MultiKey[m)!pw'1Uvu, m)!pw'1Uvu]";
      stringArray0[2] = "MultiKey[m)!pw'1Uvu, m)!pw'1Uvu]";
      stringArray0[3] = "MultiKey[m)!pw'1Uvu, m)!pw'1Uvu]";
      stringArray0[4] = "MultiKey[m)!pw'1Uvu, m)!pw'1Uvu]";
      stringArray0[5] = "MultiKey[m)!pw'1Uvu, m)!pw'1Uvu]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[m)!pw'1Uvu, m)!pw'1Uvu], MultiKey[m)!pw'1Uvu, m)!pw'1Uvu], MultiKey[m)!pw'1Uvu, m)!pw'1Uvu], MultiKey[m)!pw'1Uvu, m)!pw'1Uvu], MultiKey[m)!pw'1Uvu, m)!pw'1Uvu], MultiKey[m)!pw'1Uvu, m)!pw'1Uvu]]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1499);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null);
      multiKey0.getKey(0);
      multiKey1.size();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[null, null, null, 1499]";
      stringArray0[2] = "MultiKey[null, null, null, 1499]";
      stringArray0[3] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      String[] stringArray1 = multiKey2.getKeys();
      multiKey1.getKey(0);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[, MultiKey[null, null, null, 1499], MultiKey[null, null, null, 1499], ]", "", "", "", (String) null);
      multiKey3.getKey(0);
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray1, false);
      // Undeclared exception!
      try { 
        multiKey4.getKey((-365));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -365
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1);
      Object object0 = multiKey1.getKey(0);
      objectArray0[0] = object0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      String string0 = "E~0E(6J_y:Ezv3ujDQ";
      MultiKey<String> multiKey3 = new MultiKey<String>("The array of keys must not be null", ";/U", "E~0E(6J_y:Ezv3ujDQ", ";/U");
      multiKey3.toString();
      multiKey3.getKey(0);
      MultiKey<MultiKey<Object>> multiKey4 = null;
      try {
        multiKey4 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", (Object) null);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-3774));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer0, (Integer) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(252);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer5 = new Integer(int0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, int0, integer5, "");
      multiKey0.toString();
      Object object0 = new Object();
      multiKey1.equals(object0);
      int int1 = multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[1, 1, -1, 1, 252]", (String) null, "MultiKey[1, 1, -1, 1, 252]", "org.apache.commons.collections4.keyvalue.MultiKey");
      int int2 = multiKey2.size();
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 3;
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2442));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2442));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[7];
      String string0 = multiKey0.toString();
      stringArray0[0] = "MultiKey[3, 3, 3, -2442, -2442]";
      stringArray0[1] = "MultiKey[3, 3, 3, -2442, -2442]";
      stringArray0[2] = "MultiKey[3, 3, 3, -2442, -2442]";
      stringArray0[3] = "MultiKey[3, 3, 3, -2442, -2442]";
      stringArray0[4] = "Pg1^Z[=dI[]q|";
      stringArray0[5] = "MultiKey[3, 3, 3, -2442, -2442]";
      stringArray0[6] = "MultiKey[3, 3, 3, -2442, -2442]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String string1 = multiKey1.getKey(3);
      assertTrue(string1.equals((Object)string0));
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      boolean boolean0 = multiKey2.equals("MultiKey[3, 3, 3, -2442, -2442]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-419));
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "The array of keys must not be null");
      multiKey0.toString();
      Integer integer1 = new Integer((-1));
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "", integer1, "The array of keys must not be null");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer0, multiKey0, multiKey1, "The array of keys must not be null");
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey2, "|o2;k'-y^4,");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "P@05Fm`sw,4R.j/";
      String string1 = "";
      String string2 = "5V<',fL:m";
      String string3 = null;
      String string4 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("P@05Fm`sw,4R.j/", "", "5V<',fL:m", (String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      int int0 = (-1062);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1062));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1062
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
