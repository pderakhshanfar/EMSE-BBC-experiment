/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MK4-[ALP@-", "MK4-[ALP@-");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Eb", "Eb", "Eb", "Eb");
      Integer integer0 = new Integer((-1622));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.toString();
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      assertEquals(2, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.equals((Object) null);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("spaVBZ", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("f%oj", "f%oj", "The array of keys must not be null", "The array of keys must not be null", "hk}*i,h55H\"`u_QzH");
      multiKey1.getKey(3);
      MultiKey<Object> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(354);
      Integer integer1 = new Integer(354);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey0.equals(multiKey1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@(ri^4-[2j#~QTfHD";
      stringArray0[1] = "";
      stringArray0[2] = "1(KW";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "MultiKey";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, (Object) null, multiKey1, integer0);
      multiKey1.toString();
      multiKey2.toString();
      multiKey3.toString();
      Object object0 = multiKey3.getKey(0);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, integer0, object0, (Object) null, object0);
      multiKey4.toString();
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[], 0, MultiKey[null, 0], null, MultiKey[null, 0]]", string0);
      
      multiKey4.hashCode();
      multiKey3.hashCode();
      multiKey2.toString();
      multiKey2.size();
      multiKey2.size();
      int int0 = multiKey1.size();
      multiKey2.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "f]";
      stringArray0[3] = "]- d#Pa1=O;2n";
      stringArray0[4] = "";
      stringArray0[5] = "[Vqb,<&jMW#T?D+";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      assertEquals(7, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "}/-Z");
      Object object0 = new Object();
      int int0 = (-5185);
      Integer integer0 = new Integer((-5185));
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer0, object1, object0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-5185));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5185
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
