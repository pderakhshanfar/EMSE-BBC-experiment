/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:53:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("PD*A54Q9y%i^}", "PD*A54Q9y%i^}");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "PD*A54Q9y%i^}";
      objectArray0[2] = (Object) "PD*A54Q9y%i^}";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = "";
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", object0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      multiKeyArray0[1] = multiKey1;
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("NWJpwo@IVD[s", object1);
      int int0 = 0;
      multiKey2.getKey(0);
      String string1 = "A)#{)0\"^eU";
      int int1 = 5;
      Integer integer0 = new Integer(5);
      Object object2 = new Object();
      String string2 = "?<z\"V%#R(%";
      Object object3 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("?<z\"V%#R(%", multiKey1, object3, object1);
      Object object4 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, multiKey3, object4);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("NWJpwo@IVD[s", "A)#{)0\"^eU", integer0, object2, multiKey4);
      multiKeyArray0[2] = multiKey5;
      String[] stringArray0 = null;
      MultiKey<String> multiKey6 = null;
      try {
        multiKey6 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "", "");
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.getKey(0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-831));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[MultiKey[-831, -831, 0], MultiKey[-831, -831, 0], MultiKey[-831, -831, 0], MultiKey[-831, -831, 0], MultiKey[-831, -831, 0]]";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey0, multiKey3, multiKey4, "");
      MultiKey multiKey6 = (MultiKey)multiKey5.getKey(0);
      assertEquals(4, multiKey6.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(1);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, object1, integer0, integer0);
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.size();
      multiKey2.toString();
      multiKey2.size();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey2.getKeys();
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      multiKey4.toString();
      multiKey0.toString();
      multiKey4.toString();
      multiKey2.hashCode();
      multiKey4.getKeys();
      multiKey1.getKeys();
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey4, multiKey4, multiKey4, multiKey4, multiKey4);
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey[MultiKey[null, null, null, -1], java.lang.Object@660102fc, -1, -1]", (String) null, "MultiKey[MultiKey[null, null, null, -1], java.lang.Object@660102fc, -1, -1]", "MultiKey[null, null, null, -1]", "MultiKey[MultiKey[null, null, null, -1], java.lang.Object@660102fc, -1, -1]");
      multiKey6.toString();
      multiKey5.equals(multiKey6);
      multiKey2.hashCode();
      multiKey2.getKeys();
      multiKey2.equals("MultiKey[MultiKey[MultiKey[null, null, null, -1], java.lang.Object@660102fc, -1, -1], null, MultiKey[MultiKey[null, null, null, -1], java.lang.Object@660102fc, -1, -1], MultiKey[null, null, null, -1], MultiKey[MultiKey[null, null, null, -1], java.lang.Object@660102fc, -1, -1]]");
      int int0 = multiKey2.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2104));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      Integer integer2 = multiKey0.getKey(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer2;
      objectArray0[4] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "");
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer0);
      // Undeclared exception!
      try { 
        multiKey3.getKey((-2104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2104
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, multiKey0, (Object) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer1 = new Integer((-1));
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, integer1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      // Undeclared exception!
      try { 
        multiKey3.getKey(1906);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1906
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int0 = 3;
      // Undeclared exception!
      try { 
        multiKey1.getKey(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer((-67));
      Integer integer1 = new Integer((-67));
      Integer integer2 = new Integer((-67));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer2);
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer integer0 = new Integer(632);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "Tk]yOVGtq!$ArA");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      int int0 = multiKey1.size();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      int int2 = multiKey2.size();
      int int3 = multiKey2.hashCode();
      assertTrue(int3 == int2);
      
      multiKey2.getKeys();
      multiKey0.size();
      multiKey0.size();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
  }
}
