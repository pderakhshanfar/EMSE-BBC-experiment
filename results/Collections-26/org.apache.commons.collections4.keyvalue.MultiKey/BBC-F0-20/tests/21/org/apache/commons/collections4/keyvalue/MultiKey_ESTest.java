/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:48 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      int int0 = multiKey0.size();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      Integer integer1 = new Integer(4586);
      Integer integer2 = new Integer(0);
      multiKey0.toString();
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey1.toString();
      multiKey1.equals(integer1);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 4586, 0, 0]", "");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[0, 4586, 0, 0], ]", string0);
      
      multiKey2.size();
      int int1 = multiKey1.hashCode();
      assertTrue(int1 == int0);
      
      multiKey2.equals(integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", multiKey2, multiKey0, (Object) null);
      boolean boolean0 = multiKey0.equals(multiKey3);
      assertFalse(boolean0);
      
      multiKey0.getKeys();
      boolean boolean1 = multiKey2.equals(integer2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer2);
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[7];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKey(0);
      objectArray0[0] = null;
      multiKey1.toString();
      objectArray0[1] = (Object) "MultiKey[0, 0, 0, 0, 0]";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer2;
      objectArray0[5] = (Object) "MultiKey[0, 0, 0, 0, 0]";
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.getKey(0);
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey3, multiKey2, multiKey3);
      multiKey3.toString();
      multiKey4.toString();
      Object object0 = multiKey4.getKey(0);
      multiKey2.equals(object0);
      multiKey0.getKey(1);
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[null, null, null, null, null, null, null]", "MultiKey[null, null, null, null, null, null, null]", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[0, 0, 0, 0, 0]", "");
      Integer integer3 = new Integer((-1956));
      multiKey5.equals(integer3);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      int int0 = multiKey0.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      Integer integer0 = new Integer((-6076));
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String string0 = "sO`qD&Hg>SW!";
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "p5X;K1%W07J,", (String) null, "", "sO`qD&Hg>SW!");
      multiKey1.toString();
      multiKey1.getKey(3);
      multiKey1.equals("sO`qD&Hg>SW!");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "sO`qD&Hg>SW!";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) integer0;
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "h);Ug)<Uhu,.Ea^");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = multiKey1.getKey(3);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.hashCode();
      int int0 = multiKey2.size();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      multiKey3.hashCode();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "MultiKey[null, null, h);Ug)<Uhu,.Ea^]";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "MultiKey[null, null, h);Ug)<Uhu,.Ea^]";
      objectArray0[3] = (Object) multiKey2;
      objectArray0[4] = (Object) multiKey2;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "MultiKey[null, null, h);Ug)<Uhu,.Ea^]";
      objectArray0[7] = (Object) "MultiKey[null, null, h);Ug)<Uhu,.Ea^]";
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      multiKey4.getKeys();
      multiKey4.equals((Object) null);
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(1);
      objectArray0[0] = null;
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, (Integer) null, (Integer) null);
      Integer integer1 = multiKey1.getKey(1);
      objectArray0[1] = (Object) integer1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      int int0 = 1627;
      // Undeclared exception!
      try { 
        multiKey1.getKey(1627);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1627
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertTrue(boolean0);
      
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1, multiKey0, multiKey1, multiKey1);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[, MultiKey[]], MultiKey[], MultiKey[, MultiKey[]], MultiKey[, MultiKey[]]]", string0);
      
      multiKey2.hashCode();
      multiKey4.hashCode();
      boolean boolean1 = multiKey1.equals("MultiKey[]");
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[, MultiKey[]]";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey7 = new MultiKey<String>("MultiKey[, MultiKey[]]", "MultiKey[]", "", "MultiKey[, MultiKey[]]", "OE8JRO&le.:`dPH&R@");
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKey5, multiKey6, multiKey7);
      multiKey8.size();
      assertFalse(multiKey7.equals((Object)multiKey5));
      assertFalse(multiKey5.equals((Object)multiKey7));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = multiKey0.getKey(0);
      objectArray0[1] = (Object) integer1;
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[java.lang.Object@247b1497, 0]";
      stringArray0[1] = "MultiKey[java.lang.Object@247b1497, 0]";
      stringArray0[2] = "MultiKey[0, 0]";
      stringArray0[3] = "MultiKey[0, 0]";
      stringArray0[4] = "MultiKey[0, 0]";
      stringArray0[5] = "MultiKey[0, 0]";
      stringArray0[6] = "MultiKey[0, 0]";
      stringArray0[7] = "MultiKey[java.lang.Object@247b1497, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-707));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer0);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, (Object) null);
      multiKey1.toString();
      multiKey1.equals("}In$1@");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey2.equals("MultiKey[java.lang.Object@518a104a, java.lang.Object@1a99d52b, null]");
      // Undeclared exception!
      try { 
        multiKey1.getKey((-763));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -763
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1814);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, (Integer) null, integer2);
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
