/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:52:57 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "m8-");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey0;
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , m8-]", string0);
      
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "m8-";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "m8-";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object1 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
      
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object2, object1, object1, objectArray0[4]);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.getKeys();
      assertFalse(multiKey2.equals((Object)multiKey1));
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "s+^QTp]mF";
      stringArray0[1] = "s+^QTp]mF";
      stringArray0[2] = "s+^QTp]mF";
      stringArray0[3] = "s+^QTp]mF";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "", "`l%", ";@W;%SI{r");
      Object object1 = new Object();
      multiKey0.equals(object1);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(391);
      Integer integer1 = new Integer(391);
      Integer integer2 = new Integer(391);
      Integer integer3 = new Integer(52);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer3, integer1);
      Integer integer4 = new Integer(391);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0);
      multiKeyArray0[4] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[5] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<Object> multiKey5 = multiKey4.getKey(3);
      assertNull(multiKey5);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-322));
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "", "6");
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(183);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2894);
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(183);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "S']\"zW)+xS*gcgV", "", "}`>+>m3Cw'!t0");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, , S']\"zW)+xS*gcgV, , }`>+>m3Cw'!t0], MultiKey[183, 2894, 0, 183]]", string0);
      
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) "MultiKey[MultiKey[, , S']\"zW)+xS*gcgV, , }`>+>m3Cw'!t0], MultiKey[183, 2894, 0, 183]]";
      objectArray0[2] = (Object) integerArray0[1];
      objectArray0[3] = (Object) int0;
      objectArray0[4] = (Object) integerArray0[1];
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey4.equals(multiKey5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = null;
      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      Integer integer0 = new Integer(144);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer1 = new Integer(144);
      Integer integer2 = new Integer((-552));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      Integer integer3 = new Integer(1);
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer3, integer2);
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey3, multiKey2);
      multiKey4.toString();
      String string0 = multiKey4.toString();
      multiKey4.size();
      MultiKey<String> multiKey5 = new MultiKey<String>("zm7(z>O*ujrJU,z", "MultiKey[java.lang.Object@d0cd087, java.lang.Object@d0cd087]", "MultiKey[java.lang.Object@d0cd087, java.lang.Object@d0cd087]", "MultiKey[144, 144, 144, -552]", "MultiKey[144, 144, 144, -552]");
      multiKey5.size();
      multiKey5.hashCode();
      String string1 = multiKey5.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "AKc'\"i%302^_k ";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0);
      multiKeyArray0[0] = multiKey1;
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object0, multiKey0, integer0);
      multiKeyArray0[1] = multiKey2;
      Object object1 = new Object();
      Integer integer1 = new Integer(391);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, multiKey2, multiKey3, (Object) null, multiKey1);
      multiKeyArray0[2] = multiKey4;
      Integer integer2 = new Integer(391);
      Integer integer3 = new Integer(391);
      Integer integer4 = new Integer(52);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer2, integer3, integer4, integer2);
      Object object2 = multiKey5.getKey(0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object) null, object2, multiKey4, multiKey0, (Object) null);
      multiKeyArray0[3] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[4] = multiKey7;
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKeyArray0);
      assertFalse(multiKey8.equals((Object)multiKey7));
      
      multiKeyArray0[5] = multiKey8;
      MultiKey<MultiKey<Object>> multiKey9 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<Object> multiKey10 = multiKey9.getKey(3);
      assertEquals(5, multiKey10.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "g[1A\"");
      multiKey0.toString();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "MultiKey[null, g[1A\"]";
      objectArray0[2] = (Object) "MultiKey[null, g[1A\"]";
      objectArray0[3] = (Object) "MultiKey[null, g[1A\"]";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "g[1A\"";
      objectArray0[7] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-621));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -621
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(7, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer[] integerArray0 = new Integer[9];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1197);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-232));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1197);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(268);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1639));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1639
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
