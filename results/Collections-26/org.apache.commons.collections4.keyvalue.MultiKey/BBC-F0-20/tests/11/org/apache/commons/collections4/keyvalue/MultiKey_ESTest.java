/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:49:05 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(9);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey0);
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey1.equals(multiKey2);
      boolean boolean1 = multiKey0.equals(objectArray0[0]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      multiKey0.toString();
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      objectArray0[5] = object1;
      multiKey0.toString();
      Object object2 = new Object();
      objectArray0[6] = object2;
      Object object3 = new Object();
      objectArray0[8] = object3;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "", object0, object0);
      int int0 = 0;
      multiKey1.getKey(0);
      MultiKey<MultiKey<Object>> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null]]", "MultiKey[MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null]]");
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null]]", multiKey2, (Object) null);
      multiKey3.getKeys();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey5 = multiKey4.getKey(2);
      multiKey0.toString();
      multiKey4.toString();
      multiKey5.toString();
      multiKey2.size();
      multiKey5.toString();
      multiKey3.hashCode();
      multiKey3.hashCode();
      multiKey3.hashCode();
      multiKey1.toString();
      MultiKey<String> multiKey6 = null;
      try {
        multiKey6 = new MultiKey<String>((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray1);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3);
      multiKey3.toString();
      multiKey0.toString();
      multiKey4.toString();
      multiKey3.toString();
      multiKey4.toString();
      multiKey4.getKeys();
      multiKey3.toString();
      multiKey1.equals((Object) null);
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey1.hashCode();
      int int0 = multiKey1.size();
      int int1 = multiKey3.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<String> multiKey0 = new MultiKey<String>("W0n{#]+", "FJ", "W0n{#]+");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "W0n{#]+";
      Object object0 = new Object();
      objectArray0[1] = object0;
      multiKey0.getKey(0);
      objectArray0[2] = (Object) "W0n{#]+";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(0);
      String string0 = multiKey1.toString();
      objectArray0[3] = (Object) "W0n{#]+";
      multiKey0.getKey(0);
      objectArray0[4] = (Object) "W0n{#]+";
      Object object1 = new Object();
      objectArray0[5] = object1;
      String string1 = multiKey1.toString();
      assertTrue(string1.equals((Object)string0));
      
      Object object2 = new Object();
      objectArray0[6] = object2;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey1, multiKey1);
      multiKey3.toString();
      String string2 = multiKey2.toString();
      assertEquals("MultiKey[null, MultiKey[W0n{#]+, FJ, W0n{#]+]]", string2);
      
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      objectArray0[7] = (Object) multiKey4;
      multiKey3.toString();
      Object object3 = new Object();
      objectArray0[8] = object3;
      multiKey4.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, true);
      multiKey1.equals(object2);
      multiKey0.equals((Object) null);
      boolean boolean0 = multiKey2.equals(objectArray0[4]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "*,vwd|kFFrsu");
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("*,vwd|kFFrsu", object0);
      int int0 = 1;
      multiKey1.getKey(1);
      int int1 = multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      int int2 = 0;
      multiKey2.getKey(0);
      int int3 = multiKey0.hashCode();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(907);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[1, 0, 1, 1, 0, 907, 1, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = "";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = (-1230);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-1230));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1230
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "s.cZ4ga", "", "#");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, , s.cZ4ga, , #]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = null;
      Object object1 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "Gl2N&d%RL", "Gl2N&d%RL", "Gl2N&d%RL", "{WhYO");
      multiKey0.toString();
      // Undeclared exception!
      try { 
        multiKey0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }
}
