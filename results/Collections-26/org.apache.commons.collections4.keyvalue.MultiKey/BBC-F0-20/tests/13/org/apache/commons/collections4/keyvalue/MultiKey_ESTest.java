/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:50:48 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "", "The array of keys must not be null");
      boolean boolean0 = multiKey0.equals("");
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = new Integer((-860));
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "", multiKey0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, multiKey1, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      Object object1 = new Object();
      Integer integer3 = new Integer((-860));
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, integer3);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey4, multiKey4, multiKey2);
      multiKey5.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey4;
      multiKeyArray0[1] = multiKey4;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      Object object2 = multiKey6.getKey(2);
      boolean boolean1 = multiKey2.equals(object2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("1", "", "1", (String) null);
      boolean boolean0 = multiKey0.equals("");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean1 = multiKey1.equals(multiKey2);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1292);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1292);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2081);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-967));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1580));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1512);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[3]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[1292, 1292, 2081, 2081, -967, -1580, 1, 1512, 2081]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", (String) null, (String) null, "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<MultiKey<Object>> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      //  // Unstable assertion: assertEquals("MultiKey[0, 0, 0]", string0);
      
      multiKey0.size();
      int int1 = multiKey0.size();
      multiKey0.size();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[0, 0, 0]";
      stringArray0[1] = "MultiKey[0, 0, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      boolean boolean0 = multiKey1.equals("MultiKey[0, 0, 0]");
      //  // Unstable assertion: assertFalse(boolean0);
      
      int int2 = multiKey1.hashCode();
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, "MultiKey[0, 0, 0]", "MultiKey[0, 0, 0]");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer2, "Qa7g:2UXHK");
      Object object2 = multiKey3.getKey(0);
      //  // Unstable assertion: assertEquals(0, object2);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, integer2, "MultiKey[0, 0, 0]", integer2, object2);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[0, 0, 0]", object0, "nFz=^U", multiKey4);
      multiKey5.getKeys();
      //  // Unstable assertion: assertFalse(multiKey2.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "O>8Zy7j\"NA%\"Zz9");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = null;
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, null, O>8Zy7j\"NA%\"Zz9]", string0);
      
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "O>8Zy7j\"NA%\"Zz9";
      stringArray0[6] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer0);
      Integer integer2 = multiKey1.getKey(0);
      objectArray0[1] = (Object) integer2;
      MultiKey<String> multiKey2 = null;
      try {
        multiKey2 = new MultiKey<String>((String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer0, integer0, "The array of keys must not be null");
      multiKey2.toString();
      multiKey2.getKey(int0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) int0, integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey3);
      multiKey3.toString();
      multiKey3.toString();
      // Undeclared exception!
      try { 
        multiKey4.getKey(2129);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2129
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(2294);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2, integer2);
      Integer integer3 = multiKey0.getKey(3);
      objectArray0[0] = (Object) integer3;
      MultiKey<String> multiKey1 = new MultiKey<String>("x\"w", "x\"w", "", "h<e");
      multiKey1.getKey(0);
      objectArray0[1] = (Object) "x\"w";
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", objectArray0[1]);
      multiKey2.getKey(0);
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      // Undeclared exception!
      try { 
        multiKey0.getKey(2294);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2294
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1587);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      int int0 = 1953;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1953);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1953
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, integer0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      int int0 = (-2446);
      // Undeclared exception!
      try { 
        multiKey1.getKey((-2446));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2446
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "id<,_Ae0>~nEu";
      stringArray0[1] = "";
      stringArray0[2] = "2RP58&<n";
      stringArray0[3] = "";
      String string0 = "O?K`Q; ;#u|SG";
      stringArray0[4] = "O?K`Q; ;#u|SG";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", multiKey0, "");
      multiKey1.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      int int0 = 4031;
      // Undeclared exception!
      try { 
        multiKey2.getKey(4031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4031
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.equals(integer0);
      // Undeclared exception!
      try { 
        multiKey1.getKey(4056);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4056
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "R9o;%,QGW';j5}!+";
      stringArray0[2] = "}W3s`;4 /";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      assertEquals(3, multiKey1.size());
  }
}
