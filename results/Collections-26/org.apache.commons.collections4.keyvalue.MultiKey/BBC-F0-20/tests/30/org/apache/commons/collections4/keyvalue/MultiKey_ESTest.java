/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:54:31 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("|hDE>M-R@dti", "|hDE>M-R@dti", "|hDE>M-R@dti");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "|hDE>M-R@dti";
      stringArray0[1] = "|hDE>M-R@dti";
      stringArray0[2] = "|hDE>M-R@dti";
      stringArray0[3] = "|hDE>M-R@dti";
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Object object1 = multiKey0.getKey(0);
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "`$", "", (String) null, (String) null);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0, "MultiKey[]", object1, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(5, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Object object1 = multiKey0.getKey(0);
      objectArray0[0] = object1;
      Object object2 = new Object();
      objectArray0[1] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      String string1 = "'*P";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "'*P", "", "");
      String[] stringArray0 = null;
      MultiKey<String> multiKey1 = null;
      try {
        multiKey1 = new MultiKey<String>((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "R";
      stringArray0[1] = "|C>";
      stringArray0[2] = "";
      stringArray0[3] = "A";
      stringArray0[4] = "(3@,{4mnLq:b";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "R";
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey1.getKey(0);
      objectArray0[1] = (Object) null;
      int int0 = 2558;
      Integer integer0 = new Integer(2558);
      Integer integer1 = new Integer(463);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = multiKey2.getKey(0);
      objectArray0[2] = (Object) integer2;
      Integer integer3 = multiKey2.getKey(0);
      objectArray0[3] = (Object) integer3;
      MultiKey<Integer> multiKey3 = null;
      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The array of keys must not be null
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("VCQ5A>g,]&^Hf++(Mqa", "mC?!");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "VCQ5A>g,]&^Hf++(Mqa";
      objectArray0[1] = (Object) "VCQ5A>g,]&^Hf++(Mqa";
      objectArray0[2] = (Object) "mC?!";
      objectArray0[3] = (Object) "mC?!";
      objectArray0[4] = (Object) "mC?!";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "mC?!";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      int int0 = 27;
      // Undeclared exception!
      try { 
        multiKey1.getKey(27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("I|;lwO`", "I|;lwO`");
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 3;
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1925));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[3, -1, -1, 3, -1925]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-3534));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2850));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-4286));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        multiKey1.getKey((int) integerArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3534
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object2 = multiKey0.getKey(0);
      objectArray0[2] = object2;
      // Undeclared exception!
      try { 
        multiKey0.getKey(1829);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1829
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1, integer2, integer3);
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "", integer2, integer4);
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object3, object0, object3);
      Object object4 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object4, object4, "", multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey1, multiKey1);
      int int0 = (-1512);
      // Undeclared exception!
      try { 
        multiKey2.getKey((-1512));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1512
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "!Q\"[EJc-3?";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      int int0 = 3321;
      Integer integer0 = new Integer(3321);
      Integer integer1 = new Integer(3321);
      Integer integer2 = new Integer(3321);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "!Q\"[EJc-3?", multiKey1, "");
      // Undeclared exception!
      try { 
        multiKey2.getKey(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(448);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(448);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1242);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integerArray0[0]);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      assertEquals(3, multiKey3.size());
  }
}
